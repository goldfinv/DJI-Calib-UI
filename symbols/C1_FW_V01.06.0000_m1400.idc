//
// +-------------------------------------------------------------------------+
// |   This file has been generated by The Interactive Disassembler (IDA)    |
// |           Copyright (c) 2017 Hex-Rays, <support@hex-rays.com>           |
// +-------------------------------------------------------------------------+
//
//
//      This file should be used in the following way:
//         - reload executable into IDA with using switch -c
//         - use File, Load IDC file and load this file.
//
//      NOTE: This file doesn't contain all information from the database.
//

#define UNLOADED_FILE   1
#include <idc.idc>

static main(void)
{
  // set 'loading idc file' mode
  set_inf_attr(INF_GENFLAGS, INFFL_LOADIDC|get_inf_attr(INF_GENFLAGS));
  GenInfo();            // various settings
  Segments();           // segmentation
  Enums();              // enumerations
  Structures();         // structure types
  ApplyStrucTInfos();   // structure type infos
  Patches();            // manual patches
  SegRegs();            // segment register values
  Bytes();              // individual bytes (code,data)
  Functions();          // function definitions
  // clear 'loading idc file' mode
  set_inf_attr(INF_GENFLAGS, ~INFFL_LOADIDC&get_inf_attr(INF_GENFLAGS));
}

//------------------------------------------------------------------------
// General information

static GenInfo(void) {

        delete_all_segments();    // purge database
	set_processor_type("ARM", SETPROC_USER);
	set_inf_attr(INF_COMPILER, 6);
	set_inf_attr(INF_STRLIT_BREAK, 0xA);
	set_flag(INF_CMTFLAG, SW_ALLCMT, 0);
	set_flag(INF_OUTFLAGS, OFLG_SHOW_VOID, 0);
	set_inf_attr(INF_XREFNUM, 2);
	set_flag(INF_OUTFLAGS, OFLG_SHOW_AUTO, 1);
	set_inf_attr(INF_INDENT, 16);
	set_inf_attr(INF_COMMENT, 40);
	set_inf_attr(INF_MAXREF, 0x10);
	add_default_til("armv12");
}

//------------------------------------------------------------------------
// Information about segmentation

static Segments(void) {
	set_selector(0X1,0);
	set_selector(0X2,0);
	set_selector(0X3,0);
	set_selector(0X4,0);
	set_selector(0X5,0);
	;
	add_segm_ex(0XA000,0X26E50,0X1,1,8,2,ADDSEG_NOSREG);
	SegRename(0XA000,".text");
	SegClass (0XA000,"CODE");
	SegDefReg(0xA000,"T",0x0);
	SegDefReg(0xA000,"DS",0x2);
	set_segm_type(0XA000,2);
	add_segm_ex(0X26E50,0X2FEA8,0X2,1,3,2,ADDSEG_NOSREG);
	SegRename(0X26E50,".data");
	SegClass (0X26E50,"DATA");
	SegDefReg(0x26E50,"T",0x0);
	SegDefReg(0x26E50,"DS",0x2);
	set_segm_type(0X26E50,3);
	add_segm_ex(0X10000000,0X10008000,0X3,1,8,2,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X10000000,".bss");
	SegClass (0X10000000,"BSS");
	SegDefReg(0x10000000,"T",0x0);
	SegDefReg(0x10000000,"DS",0x2);
	set_segm_type(0X10000000,9);
	add_segm_ex(0X40000000,0X40050000,0X5,1,8,2,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40000000,".bss2");
	SegClass (0X40000000,"BSS");
	SegDefReg(0x40000000,"T",0x0);
	SegDefReg(0x40000000,"DS",0x2);
	set_segm_type(0X40000000,9);
	add_segm_ex(0XE0000000,0XE0010000,0X4,1,8,2,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0XE0000000,".bss3");
	SegClass (0XE0000000,"BSS");
	SegDefReg(0xE0000000,"T",0x0);
	SegDefReg(0xE0000000,"DS",0x2);
	set_segm_type(0XE0000000,9);
	set_inf_attr(INF_LOW_OFF, 0x20);
	set_inf_attr(INF_HIGH_OFF, 0xE0010000);
}

static Enums_0(id) {

	id = add_enum(-1,"FunctionalState",0x1100000);
	add_enum_member(id,"DISABLE",	0,	-1);
	add_enum_member(id,"ENABLE",	0X1,	-1);
	id = add_enum(-1,"system_defines",0x1100000);
	add_enum_member(id,"IRC_OSC",	0X3D0900,	-1);
	id = add_enum(-1,"IntStatus",0x1100000);
	add_enum_member(id,"RESET",	0,	-1);
	add_enum_member(id,"SET",	0X1,	-1);
	id = add_enum(-1,"RTC_CCR",0x1100000);
	add_enum_member(id,"RTC_CCR_CLKEN",	0X1,	-1);
	add_enum_member(id,"RTC_CCR_CTCRST",	0X2,	-1);
	add_enum_member(id,"RTC_CCR_CCALEN",	0X10,	-1);
	add_enum_member(id,"RTC_CCR_BITMASK",	0X13,	-1);
	id = add_enum(-1,"ADC_TYPE_INT_OPT",0x1100000);
	id = add_enum(-1,"CLKPWR_PCLKSEL",0x2200000);
	add_enum_member(id,"CLKPWR_PCLKSEL_WDT",	0,	-1);
	add_enum_member(id,"CLKPWR_PCLKSEL_TIMER0",	0X2,	-1);
	add_enum_member(id,"CLKPWR_PCLKSEL_TIMER1",	0X4,	-1);
	add_enum_member(id,"CLKPWR_PCLKSEL_UART0",	0X6,	-1);
	add_enum_member(id,"CLKPWR_PCLKSEL_UART1",	0X8,	-1);
	add_enum_member(id,"CLKPWR_PCLKSEL_PWM1",	0XC,	-1);
	add_enum_member(id,"CLKPWR_PCLKSEL_I2C0",	0XE,	-1);
	add_enum_member(id,"CLKPWR_PCLKSEL_SPI",	0X10,	-1);
	add_enum_member(id,"CLKPWR_PCLKSEL_SSP1",	0X14,	-1);
	add_enum_member(id,"CLKPWR_PCLKSEL_DAC",	0X16,	-1);
	add_enum_member(id,"CLKPWR_PCLKSEL_ADC",	0X18,	-1);
	add_enum_member(id,"CLKPWR_PCLKSEL_CAN1",	0X1A,	-1);
	add_enum_member(id,"CLKPWR_PCLKSEL_CAN2",	0X1C,	-1);
	add_enum_member(id,"CLKPWR_PCLKSEL_ACF",	0X1E,	-1);
	add_enum_member(id,"CLKPWR_PCLKSEL_QEI",	0X20,	-1);
	add_enum_member(id,"CLKPWR_PCLKSEL_PCB",	0X24,	-1);
	add_enum_member(id,"CLKPWR_PCLKSEL_I2C1",	0X26,	-1);
	add_enum_member(id,"CLKPWR_PCLKSEL_SSP0",	0X2A,	-1);
	add_enum_member(id,"CLKPWR_PCLKSEL_TIMER2",	0X2C,	-1);
	add_enum_member(id,"CLKPWR_PCLKSEL_TIMER3",	0X2E,	-1);
	add_enum_member(id,"CLKPWR_PCLKSEL_UART2",	0X30,	-1);
	add_enum_member(id,"CLKPWR_PCLKSEL_UART3",	0X32,	-1);
	add_enum_member(id,"CLKPWR_PCLKSEL_I2C2",	0X34,	-1);
	add_enum_member(id,"CLKPWR_PCLKSEL_I2S",	0X36,	-1);
	add_enum_member(id,"CLKPWR_PCLKSEL_RIT",	0X3A,	-1);
	add_enum_member(id,"CLKPWR_PCLKSEL_SYSCON",	0X3C,	-1);
	add_enum_member(id,"CLKPWR_PCLKSEL_MC",	0X3E,	-1);
	id = add_enum(-1,"OS_STATE_PEND",0x1100000);
	add_enum_member(id,"OS_TASK_PEND_ON_NOTHING",	0,	-1);
	add_enum_member(id,"OS_TASK_PEND_ON_FLAG",	0X1,	-1);
	add_enum_member(id,"OS_TASK_PEND_ON_TASK_Q",	0X2,	-1);
	add_enum_member(id,"OS_TASK_PEND_ON_MULTI",	0X3,	-1);
	add_enum_member(id,"OS_TASK_PEND_ON_MUTEX",	0X4,	-1);
	add_enum_member(id,"OS_TASK_PEND_ON_Q",	0X5,	-1);
	add_enum_member(id,"OS_TASK_PEND_ON_SEM",	0X6,	-1);
	add_enum_member(id,"OS_TASK_PEND_ON_TASK_SEM",	0X7,	-1);
	id = add_enum(-1,"WDT_MODE_OPT",0x1100000);
	add_enum_member(id,"WDT_MODE_INT_ONLY",	0,	-1);
	add_enum_member(id,"WDT_MODE_RESET",	0X1,	-1);
	id = add_enum(-1,"WDT_CLK_OPT",0x1100000);
	add_enum_member(id,"WDT_CLKSRC_IRC",	0,	-1);
	add_enum_member(id,"WDT_CLKSRC_PCLK",	0X1,	-1);
	add_enum_member(id,"WDT_CLKSRC_RTC",	0X2,	-1);
	id = add_enum(-1,"CLKPWR_PCLKSEL_CCLK",0x1100000);
	add_enum_member(id,"CLKPWR_PCLKSEL_CCLK_DIV_4",	0,	-1);
	add_enum_member(id,"CLKPWR_PCLKSEL_CCLK_DIV_1",	0X1,	-1);
	add_enum_member(id,"CLKPWR_PCLKSEL_CCLK_DIV_2",	0X2,	-1);
	id = add_enum(-1,"OS_ERR",0x2200000);
	add_enum_member(id,"OS_ERR_NONE",	0,	-1);
	add_enum_member(id,"OS_ERR_A",	0X2710,	-1);
	add_enum_member(id,"OS_ERR_ACCEPT_ISR",	0X2711,	-1);
	add_enum_member(id,"OS_ERR_B",	0X2AF8,	-1);
	add_enum_member(id,"OS_ERR_C",	0X2EE0,	-1);
	add_enum_member(id,"OS_ERR_CREATE_ISR",	0X2EE1,	-1);
	add_enum_member(id,"OS_ERR_D",	0X32C8,	-1);
	add_enum_member(id,"OS_ERR_DEL_ISR",	0X32C9,	-1);
	add_enum_member(id,"OS_ERR_E",	0X36B0,	-1);
	add_enum_member(id,"OS_ERR_F",	0X3A98,	-1);
	add_enum_member(id,"OS_ERR_FATAL_RETURN",	0X3A99,	-1);
	add_enum_member(id,"OS_ERR_FLAG_GRP_DEPLETED",	0X3AFD,	-1);
	add_enum_member(id,"OS_ERR_FLAG_NOT_RDY",	0X3AFE,	-1);
	add_enum_member(id,"OS_ERR_FLAG_PEND_OPT",	0X3AFF,	-1);
	add_enum_member(id,"OS_ERR_FLUSH_ISR",	0X3B00,	-1);
	add_enum_member(id,"OS_ERR_G",	0X3E80,	-1);
	add_enum_member(id,"OS_ERR_H",	0X4268,	-1);
	add_enum_member(id,"OS_ERR_I",	0X4650,	-1);
	add_enum_member(id,"OS_ERR_J",	0X4A38,	-1);
	add_enum_member(id,"OS_ERR_K",	0X4E20,	-1);
	add_enum_member(id,"OS_ERR_L",	0X5208,	-1);
	add_enum_member(id,"OS_ERR_M",	0X55F0,	-1);
	add_enum_member(id,"OS_ERR_MEM_CREATE_ISR",	0X56B9,	-1);
	add_enum_member(id,"OS_ERR_MSG_POOL_EMPTY",	0X571D,	-1);
	add_enum_member(id,"OS_ERR_MUTEX_NOT_OWNER",	0X5781,	-1);
	add_enum_member(id,"OS_ERR_P",	0X61A8,	-1);
	add_enum_member(id,"OS_ERR_POST_NULL_PTR",	0X620D,	-1);
	add_enum_member(id,"OS_ERR_PRIO_EXIST",	0X6271,	-1);
	add_enum_member(id,"OS_ERR_PTR_INVALID",	0X62D5,	-1);
	add_enum_member(id,"OS_ERR_Q",	0X6590,	-1);
	add_enum_member(id,"OS_ERR_Q_FULL",	0X6591,	-1);
	add_enum_member(id,"OS_ERR_Q_EMPTY",	0X6592,	-1);
	add_enum_member(id,"OS_ERR_Q_MAX",	0X6593,	-1);
	add_enum_member(id,"OS_ERR_Q_SIZE",	0X6594,	-1);
	id = add_enum(-1,"CPU_ERR",0x1100000);
	add_enum_member(id,"CPU_ERR_NONE",	0,	-1);
	add_enum_member(id,"CPU_ERR_NULL_PTR",	0XA,	-1);
	add_enum_member(id,"CPU_ERR_NAME_SIZE",	0X3E8,	-1);
	add_enum_member(id,"CPU_ERR_TS_FREQ_INVALID",	0X7D0,	-1);
	id = add_enum(-1,"OS_PRIO",0x1100000);
	id = add_enum(-1,"OS_OPT",0x1100000);
	add_enum_member(id,"OS_OPT_NONE",	0,	-1);
	add_enum_member(id,"OS_OPT_DEL_ALWAYS",	0X1,	-1);
	add_enum_member(id,"OS_OPT_PEND_FLAG_CLR_ANY",	0X2,	-1);
	add_enum_member(id,"OS_OPT_PEND_FLAG_SET_ALL",	0X4,	-1);
	add_enum_member(id,"OS_OPT_PEND_FLAG_SET_ANY",	0X8,	-1);
	add_enum_member(id,"OS_OPT_PEND_FLAG_CONSUME",	0X100,	-1);
	add_enum_member(id,"OS_OPT_PEND_NON_BLOCKING",	0X8000,	-1);
	id = add_enum(-1,"CPU_INT_BIT",0x1100000);
	add_enum_member(id,"CPU_INT_STK_PTR",	0,	-1);
	add_enum_member(id,"CPU_INT_RESET",	0X1,	-1);
	add_enum_member(id,"CPU_INT_NMI",	0X2,	-1);
	add_enum_member(id,"CPU_INT_HFAULT",	0X3,	-1);
	add_enum_member(id,"CPU_INT_MEM",	0X4,	-1);
	add_enum_member(id,"CPU_INT_BUSFAULT",	0X5,	-1);
	add_enum_member(id,"CPU_INT_USAGEFAULT",	0X6,	-1);
	add_enum_member(id,"CPU_INT_RSVD_07",	0X7,	-1);
	add_enum_member(id,"CPU_INT_RSVD_08",	0X8,	-1);
	add_enum_member(id,"CPU_INT_RSVD_09",	0X9,	-1);
	add_enum_member(id,"CPU_INT_RSVD_10",	0XA,	-1);
	add_enum_member(id,"CPU_INT_SVCALL",	0XB,	-1);
	add_enum_member(id,"CPU_INT_DBGMON",	0XC,	-1);
	add_enum_member(id,"CPU_INT_RSVD_13",	0XD,	-1);
	add_enum_member(id,"CPU_INT_PENDSV",	0XE,	-1);
	add_enum_member(id,"CPU_INT_SYSTICK",	0XF,	-1);
	add_enum_member(id,"CPU_INT_EXT0",	0X10,	-1);
	id = add_enum(-1,"CPU_STK",0x1100000);
	set_enum_cmt(id,"Defines CPU stack word size (in octets).",1);
	id = add_enum(-1,"IAP_CAMMAND",0x1100000);
	add_enum_member(id,"IAP_PREWRRITE_CMD",	0X32,	-1);
	add_enum_member(id,"IAP_WRISECTOR_CMD",	0X33,	-1);
	add_enum_member(id,"IAP_ERSSECTOR_CMD",	0X34,	-1);
	add_enum_member(id,"IAP_BLANK_CHECK_SECTOR_CMD",	0X35,	-1);
	add_enum_member(id,"IAP_REPID_CMD",	0X36,	-1);
	add_enum_member(id,"IAP_READ_BOOT_CODE_CMD",	0X37,	-1);
	add_enum_member(id,"IAP_COMPARE_CMD",	0X38,	-1);
	add_enum_member(id,"IAP_REINVOKE_ISP_CMD",	0X39,	-1);
	add_enum_member(id,"IAP_READ_UID_CMD",	0X3A,	-1);
	add_enum_member(id,"IAP_ERASE_PAGE_CMD",	0X3B,	-1);
	add_enum_member(id,"IAP_EEPROM_WRITE",	0X3D,	-1);
	add_enum_member(id,"IAP_EEPROM_READ",	0X3E,	-1);
	id = add_enum(-1,"RTC_TIMETYPE_Num",0x1100000);
	add_enum_member(id,"RTC_TIMETYPE_SECOND",	0,	-1);
	add_enum_member(id,"RTC_TIMETYPE_MINUTE",	0X1,	-1);
	add_enum_member(id,"RTC_TIMETYPE_HOUR",	0X2,	-1);
	add_enum_member(id,"RTC_TIMETYPE_DAYOFWEEK",	0X3,	-1);
	add_enum_member(id,"RTC_TIMETYPE_DAYOFMONTH",	0X4,	-1);
	add_enum_member(id,"RTC_TIMETYPE_DAYOFYEAR",	0X5,	-1);
	add_enum_member(id,"RTC_TIMETYPE_MONTH",	0X6,	-1);
	add_enum_member(id,"RTC_TIMETYPE_YEAR",	0X7,	-1);
	id = add_enum(-1,"PACKET_FIELDS",0x1100000);
	add_enum_member(id,"PACKET_DELIMITER",	0X55,	-1);
	id = add_enum(-1,"PktCmd_CommandSets",0x1100000);
	add_enum_member(id,"CMDSET_Universal",	0,	-1);
	add_enum_member(id,"CMDSET_Special",	0X1,	-1);
	add_enum_member(id,"CMDSET_Camera",	0X2,	-1);
	add_enum_member(id,"CMDSET_FlightCtrl",	0X3,	-1);
	add_enum_member(id,"CMDSET_Gimbal",	0X4,	-1);
	add_enum_member(id,"CMDSET_CentrBoard",	0X5,	-1);
	add_enum_member(id,"CMDSET_RemtCtrl",	0X6,	-1);
	add_enum_member(id,"CMDSET_WiFi",	0X7,	-1);
	add_enum_member(id,"CMDSET_DM368",	0X8,	-1);
	add_enum_member(id,"CMDSET_HDVidTx",	0X9,	-1);
	add_enum_member(id,"CMDSET_MonBinOcular",	0XA,	-1);
	add_enum_member(id,"CMDSET_Simult",	0XB,	-1);
	add_enum_member(id,"CMDSET_ESC",	0XC,	-1);
	add_enum_member(id,"CMDSET_SmartBat",	0XD,	-1);
	add_enum_member(id,"CMDSET_DataLoggr",	0XE,	-1);
	add_enum_member(id,"CMDSET_RTK",	0XF,	-1);
	add_enum_member(id,"CMDSET_Automatn",	0X10,	-1);
	id = add_enum(-1,"PktCmdSet_Universal",0x1100000);
	id = add_enum(-1,"PktCmdSet_Special",0x1100000);
	id = add_enum(-1,"PktCmdSet_Camera",0x1100000);
	id = add_enum(-1,"PktCmdSet_FlightCtrl",0x1100000);
	id = add_enum(-1,"PktCmdSet_Gimbal",0x1100000);
	id = add_enum(-1,"PktCmdSet_CentrBoard",0x1100000);
	id = add_enum(-1,"PktCmdSet_RemtCtrl",0x1100000);
	add_enum_member(id,"PKTCMD_GetPowerZone",	0X21,	-1);
	id = add_enum(-1,"PktCmdSet_WiFi",0x1100000);
	id = add_enum(-1,"PktCmdSet_DM368",0x1100000);
	id = add_enum(-1,"PktCmdSet_HDVidTx",0x1100000);
	id = add_enum(-1,"PktCmdSet_MonBinOcular",0x1100000);
	id = add_enum(-1,"PktCmdSet_Simult",0x1100000);
	id = add_enum(-1,"PktCmdSet_ESC",0x1100000);
	id = add_enum(-1,"PktCmdSet_SmartBat",0x1100000);
	id = add_enum(-1,"PktCmdSet_DataLoggr",0x1100000);
	id = add_enum(-1,"PktCmdSet_RTK",0x1100000);
	id = add_enum(-1,"PktCmdSet_Automatn",0x1100000);
	id = add_enum(-1,"OFDM_CONF_NREG",0x1100000);
	add_enum_member(id,"NREG_TARGET_TCX",	0,	-1);
	add_enum_member(id,"NREG_TARGET_FPGA",	0XFE00,	-1);
	add_enum_member(id,"NREG_TARGET_MCU",	0XFF00,	-1);
	id = add_enum(-1,"BoardVersion",0x1100000);
	add_enum_member(id,"BOARD_VER_0",	0,	-1);
	add_enum_member(id,"BOARD_VER_1",	0X1,	-1);
	add_enum_member(id,"BOARD_VER_AD_2",	0X2,	-1);
	add_enum_member(id,"BOARD_VER_3",	0X3,	-1);
	add_enum_member(id,"BOARD_VER_AD_4",	0X4,	-1);
	add_enum_member(id,"BOARD_VER_AD_5",	0X5,	-1);
	add_enum_member(id,"BOARD_VER_AR_6",	0X6,	-1);
	add_enum_member(id,"BOARD_VER_AR_7",	0X7,	-1);
	id = add_enum(-1,"SPI_AD9363_REG_DEFINES",0x1100000);
	add_enum_member(id,"AD9363_REG_SPI_CONF",	0,	-1);
	add_enum_member(id,"AD9363_REG_MULTICHIP_SYNC_AND_TX_MON_CTRL",	0X1,	-1);
	add_enum_member(id,"AD9363_REG_TX_ENABLE_FILTER_CTRL",	0X2,	-1);
	add_enum_member(id,"AD9363_REG_RX_ENABLE_FILTER_CTRL",	0X3,	-1);
	add_enum_member(id,"AD9363_REG_INPUT_SELECT",	0X4,	-1);
	add_enum_member(id,"AD9363_REG_RFPLL_DIVIDERS",	0X5,	-1);
	add_enum_member(id,"AD9363_REG_RX_CLOCK_DATA_DELAY",	0X6,	-1);
	add_enum_member(id,"AD9363_REG_TX_CLOCK_DATA_DELAY",	0X7,	-1);
	add_enum_member(id,"AD9363_REG_CLOCK_ENABLE",	0X9,	-1);
	add_enum_member(id,"AD9363_REG_BBPLL",	0XA,	-1);
	add_enum_member(id,"AD9363_REG_TEMP_OFFSET",	0XB,	-1);
	add_enum_member(id,"AD9363_REG_START_TEMP_READING",	0XC,	-1);
	add_enum_member(id,"AD9363_REG_TEMP_SENSE2",	0XD,	-1);
	add_enum_member(id,"AD9363_REG_TEMPERATURE",	0XE,	-1);
	add_enum_member(id,"AD9363_REG_TEMP_SENSOR_CONFIG",	0XF,	-1);
	add_enum_member(id,"AD9363_REG_PARALLEL_PORT_CONF_1",	0X10,	-1);
	add_enum_member(id,"AD9363_REG_PARALLEL_PORT_CONF_2",	0X11,	-1);
	add_enum_member(id,"AD9363_REG_PARALLEL_PORT_CONF_3",	0X12,	-1);
	add_enum_member(id,"AD9363_REG_ENSM_MODE",	0X13,	-1);
	add_enum_member(id,"AD9363_REG_ENSM_CONFIG_1",	0X14,	-1);
	add_enum_member(id,"AD9363_REG_ENSM_CONFIG_2",	0X15,	-1);
	add_enum_member(id,"AD9363_REG_CALIBRATION_CTRL",	0X16,	-1);
	add_enum_member(id,"AD9363_REG_STATE",	0X17,	-1);
	add_enum_member(id,"AD9363_REG_AUXDAC_1_WORD",	0X18,	-1);
	add_enum_member(id,"AD9363_REG_AUXDAC_2_WORD",	0X19,	-1);
	add_enum_member(id,"AD9363_REG_AUXDAC_1_CONFIG",	0X1A,	-1);
	add_enum_member(id,"AD9363_REG_AUXDAC_2_CONFIG",	0X1B,	-1);
	add_enum_member(id,"AD9363_REG_AUXADC_CLOCK_DIVIDER",	0X1C,	-1);
	add_enum_member(id,"AD9363_REG_AUXADC_CONFIG",	0X1D,	-1);
	add_enum_member(id,"AD9363_REG_AUXADC_WORD_MSB",	0X1E,	-1);
	add_enum_member(id,"AD9363_REG_AUXADC_LSB",	0X1F,	-1);
	add_enum_member(id,"AD9363_REG_AUTO_GPO",	0X20,	-1);
	add_enum_member(id,"AD9363_REG_AGC_GAIN_LOCK_DELAY",	0X21,	-1);
	add_enum_member(id,"AD9363_REG_AGC_ATTACK_DELAY",	0X22,	-1);
	add_enum_member(id,"AD9363_REG_AUXDAC_ENABLE_CTRL",	0X23,	-1);
	add_enum_member(id,"AD9363_REG_RX_LOAD_SYNTH_DELAY",	0X24,	-1);
	add_enum_member(id,"AD9363_REG_TX_LOAD_SYNTH_DELAY",	0X25,	-1);
	add_enum_member(id,"AD9363_REG_EXTERNAL_LNA_CTRL",	0X26,	-1);
	add_enum_member(id,"AD9363_REG_GPO_FORCE_AND_INIT",	0X27,	-1);
	add_enum_member(id,"AD9363_REG_GPO0_RX_DELAY",	0X28,	-1);
	add_enum_member(id,"AD9363_REG_GPO1_RX_DELAY",	0X29,	-1);
	add_enum_member(id,"AD9363_REG_GPO2_RX_DELAY",	0X2A,	-1);
	add_enum_member(id,"AD9363_REG_GPO3_RX_DELAY",	0X2B,	-1);
	add_enum_member(id,"AD9363_REG_GPO0_TX_DELAY",	0X2C,	-1);
	add_enum_member(id,"AD9363_REG_GPO1_TX_DELAY",	0X2D,	-1);
	add_enum_member(id,"AD9363_REG_GPO2_TX_DELAY",	0X2E,	-1);
	add_enum_member(id,"AD9363_REG_GPO3_TX_DELAY",	0X2F,	-1);
	add_enum_member(id,"AD9363_REG_AUXDAC1_RX_DELAY",	0X30,	-1);
	add_enum_member(id,"AD9363_REG_AUXDAC1_TX_DELAY",	0X31,	-1);
	add_enum_member(id,"AD9363_REG_AUXDAC2_RX_DELAY",	0X32,	-1);
	add_enum_member(id,"AD9363_REG_AUXDAC2_TX_DELAY",	0X33,	-1);
	add_enum_member(id,"AD9363_REG_CTRL_OUTPUT_POINTER",	0X35,	-1);
	add_enum_member(id,"AD9363_REG_CTRL_OUTPUT_ENABLE",	0X36,	-1);
	add_enum_member(id,"AD9363_REG_PRODUCT_ID",	0X37,	-1);
	add_enum_member(id,"AD9363_REG_REFERENCE_CLOCK_CYCLES",	0X3A,	-1);
	add_enum_member(id,"AD9363_REG_DIGITAL_IO_CTRL",	0X3B,	-1);
	add_enum_member(id,"AD9363_REG_LVDS_BIAS_CTRL",	0X3C,	-1);
	add_enum_member(id,"AD9363_REG_LVDS_INVERT_CTRL1",	0X3D,	-1);
	add_enum_member(id,"AD9363_REG_LVDS_INVERT_CTRL2",	0X3E,	-1);
	add_enum_member(id,"AD9363_REG_SDM_CTRL_1",	0X3F,	-1);
	add_enum_member(id,"AD9363_REG_FRACT_BB_FREQ_WORD_1",	0X41,	-1);
	add_enum_member(id,"AD9363_REG_FRACT_BB_FREQ_WORD_2",	0X42,	-1);
	add_enum_member(id,"AD9363_REG_FRACT_BB_FREQ_WORD_3",	0X43,	-1);
	add_enum_member(id,"AD9363_REG_INTEGER_BB_FREQ_WORD",	0X44,	-1);
	add_enum_member(id,"AD9363_REG_CLOCK_CTRL",	0X45,	-1);
	add_enum_member(id,"AD9363_REG_CP_CURRENT",	0X46,	-1);
	add_enum_member(id,"AD9363_REG_CP_BLEED_CURRENT",	0X47,	-1);
	add_enum_member(id,"AD9363_REG_LOOP_FILTER_1",	0X48,	-1);
	add_enum_member(id,"AD9363_REG_LOOP_FILTER_2",	0X49,	-1);
	add_enum_member(id,"AD9363_REG_LOOP_FILTER_3",	0X4A,	-1);
	add_enum_member(id,"AD9363_REG_VCO_CTRL",	0X4B,	-1);
	add_enum_member(id,"AD9363_REG_VCO_PROGRAM_1",	0X4C,	-1);
	add_enum_member(id,"AD9363_REG_VCO_PROGRAM_2",	0X4D,	-1);
	add_enum_member(id,"AD9363_REG_SDM_CTRL",	0X4E,	-1);
	add_enum_member(id,"AD9363_REG_UNKNOWN_50",	0X50,	-1);
	add_enum_member(id,"AD9363_REG_RX_ANALOG_POWER_DOWN_OVERRIDE_1",	0X52,	-1);
	add_enum_member(id,"AD9363_REG_RX_ANALOG_POWER_DOWN_OVERRIDE_2",	0X53,	-1);
	add_enum_member(id,"AD9363_REG_RX1_ADC_POWER_DOWN_OVERRIDE",	0X54,	-1);
	add_enum_member(id,"AD9363_REG_RX2_ADC_POWER_DOWN_OVERRIDE",	0X55,	-1);
	add_enum_member(id,"AD9363_REG_TX_ANALOG_POWER_DOWN_OVERRIDE_1",	0X56,	-1);
	add_enum_member(id,"AD9363_REG_ANALOG_POWER_DOWN_OVERRIDE",	0X57,	-1);
	add_enum_member(id,"AD9363_REG_MISC_POWER_DOWN_OVERRIDE",	0X58,	-1);
	add_enum_member(id,"AD9363_REG_UNKNOWN_5C",	0X5C,	-1);
	add_enum_member(id,"AD9363_REG_CH_1_OVERFLOW",	0X5E,	-1);
	add_enum_member(id,"AD9363_REG_CH_2_OVERFLOW",	0X5F,	-1);
	add_enum_member(id,"AD9363_REG_TX_FILTER_COEF_ADDR",	0X60,	-1);
	add_enum_member(id,"AD9363_REG_TX_FILTER_COEF_WRITE_DATA_1",	0X61,	-1);
	add_enum_member(id,"AD9363_REG_TX_FILTER_COEF_WRITE_DATA_2",	0X62,	-1);
	add_enum_member(id,"AD9363_REG_TX_FILTER_COEF_READ_DATA_1",	0X63,	-1);
	add_enum_member(id,"AD9363_REG_TX_FILTER_COEF_READ_DATA_2",	0X64,	-1);
	add_enum_member(id,"AD9363_REG_TX_FILTER_CONF",	0X65,	-1);
	add_enum_member(id,"AD9363_REG_TX_MON_LOW_GAIN",	0X67,	-1);
	add_enum_member(id,"AD9363_REG_TX_MON_HIGH_GAIN",	0X68,	-1);
	add_enum_member(id,"AD9363_REG_TX_MON_DELAY",	0X69,	-1);
	add_enum_member(id,"AD9363_REG_TX_LEVEL_THRESH",	0X6A,	-1);
	add_enum_member(id,"AD9363_REG_TX_RSSI1",	0X6B,	-1);
	add_enum_member(id,"AD9363_REG_TX_RSSI2",	0X6C,	-1);
	add_enum_member(id,"AD9363_REG_TX_RSSI_LSB",	0X6D,	-1);
	add_enum_member(id,"AD9363_REG_TPM_MODE_ENABLE",	0X6E,	-1);
	add_enum_member(id,"AD9363_REG_TX_MON_TEMP_GAIN_COEF",	0X6F,	-1);
	add_enum_member(id,"AD9363_REG_TX_MON_1_CONFIG",	0X70,	-1);
	add_enum_member(id,"AD9363_REG_TX_MON_2_CONFIG",	0X71,	-1);
	add_enum_member(id,"AD9363_REG_TX1_ATTEN_0",	0X73,	-1);
	add_enum_member(id,"AD9363_REG_TX1_ATTEN_1",	0X74,	-1);
	add_enum_member(id,"AD9363_REG_TX2_ATTEN_0",	0X75,	-1);
	add_enum_member(id,"AD9363_REG_TX2_ATTEN_1",	0X76,	-1);
	add_enum_member(id,"AD9363_REG_TX_ATTEN_OFFSET",	0X77,	-1);
	add_enum_member(id,"AD9363_REG_TX_ATTEN_THRESH",	0X78,	-1);
	add_enum_member(id,"AD9363_REG_TX1_DIG_ATTEN",	0X79,	-1);
	add_enum_member(id,"AD9363_REG_TX2_DIG_ATTEN",	0X7C,	-1);
	add_enum_member(id,"AD9363_REG_TX1_SYMBOL_ATTEN",	0X7F,	-1);
	add_enum_member(id,"AD9363_REG_TX2_SYMBOL_ATTEN",	0X80,	-1);
	add_enum_member(id,"AD9363_REG_TX_SYMBOL_ATTEN_CONFIG",	0X81,	-1);
	add_enum_member(id,"AD9363_REG_TX1_OUT_1_PHASE_CORR",	0X8E,	-1);
	add_enum_member(id,"AD9363_REG_TX1_OUT_1_GAIN_CORR",	0X8F,	-1);
	add_enum_member(id,"AD9363_REG_TX2_OUT_1_PHASE_CORR",	0X90,	-1);
	add_enum_member(id,"AD9363_REG_TX2_OUT_1_GAIN_CORR",	0X91,	-1);
	add_enum_member(id,"AD9363_REG_TX1_OUT_1_OFFSET_I",	0X92,	-1);
	add_enum_member(id,"AD9363_REG_TX1_OUT_1_OFFSET_Q",	0X93,	-1);
	add_enum_member(id,"AD9363_REG_TX2_OUT_1_OFFSET_I",	0X94,	-1);
	add_enum_member(id,"AD9363_REG_TX2_OUT_1_OFFSET_Q",	0X95,	-1);
	add_enum_member(id,"AD9363_REG_TX1_OUT_2_PHASE_CORR",	0X96,	-1);
	add_enum_member(id,"AD9363_REG_TX1_OUT_2_GAIN_CORR",	0X97,	-1);
	add_enum_member(id,"AD9363_REG_TX2_OUT_2_PHASE_CORR",	0X98,	-1);
	add_enum_member(id,"AD9363_REG_TX2_OUT_2_GAIN_CORR",	0X99,	-1);
	add_enum_member(id,"AD9363_REG_TX1_OUT_2_OFFSET_I",	0X9A,	-1);
	add_enum_member(id,"AD9363_REG_TX1_OUT_2_OFFSET_Q",	0X9B,	-1);
	add_enum_member(id,"AD9363_REG_TX2_OUT_2_OFFSET_I",	0X9C,	-1);
	add_enum_member(id,"AD9363_REG_TX2_OUT_2_OFFSET_Q",	0X9D,	-1);
	add_enum_member(id,"AD9363_REG_TX_FORCE_BITS",	0X9F,	-1);
	add_enum_member(id,"AD9363_REG_QUAD_CAL_NCO_FREQ_PHASE_OFFSET",	0XA0,	-1);
	add_enum_member(id,"AD9363_REG_QUAD_CAL_CTRL",	0XA1,	-1);
	add_enum_member(id,"AD9363_REG_KEXP_1",	0XA2,	-1);
	add_enum_member(id,"AD9363_REG_KEXP_2",	0XA3,	-1);
	add_enum_member(id,"AD9363_REG_QUAD_SETTLE_COUNT",	0XA4,	-1);
	add_enum_member(id,"AD9363_REG_MAG_FTEST_THRESH",	0XA5,	-1);
	add_enum_member(id,"AD9363_REG_MAG_FTEST_THRESH_2",	0XA6,	-1);
	add_enum_member(id,"AD9363_REG_QUAD_CAL_STATUS_TX1",	0XA7,	-1);
	add_enum_member(id,"AD9363_REG_QUAD_CAL_STATUS_TX2",	0XA8,	-1);
	add_enum_member(id,"AD9363_REG_QUAD_CAL_COUNT",	0XA9,	-1);
	add_enum_member(id,"AD9363_REG_TX_QUAD_FULL_LMT_GAIN",	0XAA,	-1);
	add_enum_member(id,"AD9363_REG_SQUARER_CONFIG",	0XAB,	-1);
	add_enum_member(id,"AD9363_REG_TX_QUAD_CAL_ATTEN",	0XAC,	-1);
	add_enum_member(id,"AD9363_REG_THRESH_ACCUM",	0XAD,	-1);
	add_enum_member(id,"AD9363_REG_TX_QUAD_LPF_GAIN",	0XAE,	-1);
	add_enum_member(id,"AD9363_REG_TXDAC_VDS_I",	0XB0,	-1);
	add_enum_member(id,"AD9363_REG_TXDAC_VDS_Q",	0XB1,	-1);
	add_enum_member(id,"AD9363_REG_TXDAC_GN_I",	0XB2,	-1);
	add_enum_member(id,"AD9363_REG_TXDAC_GN_Q",	0XB3,	-1);
	add_enum_member(id,"AD9363_REG_TXBBF_OPAMP_A",	0XC0,	-1);
	add_enum_member(id,"AD9363_REG_TXBBF_OPAMP_B",	0XC1,	-1);
	add_enum_member(id,"AD9363_REG_TX_BBF_R1",	0XC2,	-1);
	add_enum_member(id,"AD9363_REG_TX_BBF_R2",	0XC3,	-1);
	add_enum_member(id,"AD9363_REG_TX_BBF_R3",	0XC4,	-1);
	add_enum_member(id,"AD9363_REG_TX_BBF_R4",	0XC5,	-1);
	add_enum_member(id,"AD9363_REG_TX_BBF_RP",	0XC6,	-1);
	add_enum_member(id,"AD9363_REG_TX_BBF_C1",	0XC7,	-1);
	add_enum_member(id,"AD9363_REG_TX_BBF_C2",	0XC8,	-1);
	add_enum_member(id,"AD9363_REG_TX_BBF_CP",	0XC9,	-1);
	add_enum_member(id,"AD9363_REG_TX_TUNE_CTRL",	0XCA,	-1);
	add_enum_member(id,"AD9363_REG_TX_BBF_R2B",	0XCB,	-1);
	add_enum_member(id,"AD9363_REG_TX_BBF_TUNE",	0XCC,	-1);
	add_enum_member(id,"AD9363_REG_CONFIG0",	0XD0,	-1);
	add_enum_member(id,"AD9363_REG_RESISTOR",	0XD1,	-1);
	add_enum_member(id,"AD9363_REG_CAPACITOR",	0XD2,	-1);
	add_enum_member(id,"AD9363_REG_LO_CM",	0XD3,	-1);
	add_enum_member(id,"AD9363_REG_TX_BBF_TUNE_DIVIDER",	0XD6,	-1);
	add_enum_member(id,"AD9363_REG_TX_BBF_TUNE_MODE",	0XD7,	-1);
	add_enum_member(id,"AD9363_REG_RX_FILTER_COEF_ADDR",	0XF0,	-1);
	add_enum_member(id,"AD9363_REG_RX_FILTER_COEF_DATA_1",	0XF1,	-1);
	add_enum_member(id,"AD9363_REG_RX_FILTER_COEF_DATA_2",	0XF2,	-1);
	add_enum_member(id,"AD9363_REG_RX_FILTER_COEF_READ_DATA_1",	0XF3,	-1);
	add_enum_member(id,"AD9363_REG_RX_FILTER_COEF_READ_DATA_2",	0XF4,	-1);
	add_enum_member(id,"AD9363_REG_RX_FILTER_CONFIG",	0XF5,	-1);
	add_enum_member(id,"AD9363_REG_RX_FILTER_GAIN",	0XF6,	-1);
	add_enum_member(id,"AD9363_REG_AGC_CONFIG_1",	0XFA,	-1);
	add_enum_member(id,"AD9363_REG_AGC_CONFIG_2",	0XFB,	-1);
	add_enum_member(id,"AD9363_REG_AGC_CONFIG_3",	0XFC,	-1);
	add_enum_member(id,"AD9363_REG_MAX_LMT_FULL_GAIN",	0XFD,	-1);
	add_enum_member(id,"AD9363_REG_PEAK_WAIT_TIME",	0XFE,	-1);
	add_enum_member(id,"AD9363_REG_DIGITAL_GAIN",	0X100,	-1);
	add_enum_member(id,"AD9363_REG_AGC_LOCK_LEVEL",	0X101,	-1);
	add_enum_member(id,"AD9363_REG_ADC_NOISE_CORRECTION_FACTOR",	0X102,	-1);
	add_enum_member(id,"AD9363_REG_GAIN_STP_CONFIG1",	0X103,	-1);
	add_enum_member(id,"AD9363_REG_ADC_SMALL_OVERLOAD_THRESH",	0X104,	-1);
	add_enum_member(id,"AD9363_REG_ADC_LARGE_OVERLOAD_THRESH",	0X105,	-1);
	add_enum_member(id,"AD9363_REG_GAIN_STP_CONFIG_2",	0X106,	-1);
	add_enum_member(id,"AD9363_REG_SMALL_LMT_OVERLOAD_THRESH",	0X107,	-1);
	add_enum_member(id,"AD9363_REG_LARGE_LMT_OVERLOAD_THRESH",	0X108,	-1);
	add_enum_member(id,"AD9363_REG_RX1_MANUAL_LMT_FULL_GAIN",	0X109,	-1);
	add_enum_member(id,"AD9363_REG_RX1_MANUAL_LPF_GAIN",	0X10A,	-1);
	add_enum_member(id,"AD9363_REG_RX1_MANUAL_DIGITALFORCED_GAIN",	0X10B,	-1);
	add_enum_member(id,"AD9363_REG_RX2_MANUAL_LMT_FULL_GAIN",	0X10C,	-1);
	add_enum_member(id,"AD9363_REG_RX2_MANUAL_LPF_GAIN",	0X10D,	-1);
	add_enum_member(id,"AD9363_REG_RX2_MANUAL_DIGITALFORCED_GAIN",	0X10E,	-1);
	add_enum_member(id,"AD9363_REG_FAST_CONFIG_1",	0X110,	-1);
	add_enum_member(id,"AD9363_REG_FAST_CONFIG_2_SETTLING_DELAY",	0X111,	-1);
	add_enum_member(id,"AD9363_REG_FAST_ENERGY_LOST_THRESH",	0X112,	-1);
	add_enum_member(id,"AD9363_REG_FAST_STRONGER_SIGNAL_THRESH",	0X113,	-1);
	add_enum_member(id,"AD9363_REG_FAST_LOW_POWER_THRESH",	0X114,	-1);
	add_enum_member(id,"AD9363_REG_FAST_STRONG_SIGNAL_FREEZE",	0X115,	-1);
	add_enum_member(id,"AD9363_REG_FAST_FINAL_OVER_RANGE_AND_OPT_GAIN",	0X116,	-1);
	add_enum_member(id,"AD9363_REG_FAST_ENERGY_DETECT_COUNT",	0X117,	-1);
	add_enum_member(id,"AD9363_REG_FAST_AGCLL_UPPER_LIMIT",	0X118,	-1);
	add_enum_member(id,"AD9363_REG_FAST_GAIN_LOCK_EXIT_COUNT",	0X119,	-1);
	add_enum_member(id,"AD9363_REG_FAST_INITIAL_LMT_GAIN_LIMIT",	0X11A,	-1);
	add_enum_member(id,"AD9363_REG_FAST_INCREMENT_TIME",	0X11B,	-1);
	add_enum_member(id,"AD9363_REG_AGC_INNER_LOW_THRESH",	0X120,	-1);
	add_enum_member(id,"AD9363_REG_LMT_OVERLOAD_COUNTERS",	0X121,	-1);
	add_enum_member(id,"AD9363_REG_ADC_OVERLOAD_COUNTERS",	0X122,	-1);
	add_enum_member(id,"AD9363_REG_GAIN_STP1",	0X123,	-1);
	add_enum_member(id,"AD9363_REG_GAIN_UPDATE_COUNTER1",	0X124,	-1);
	add_enum_member(id,"AD9363_REG_GAIN_UPDATE_COUNTER2",	0X125,	-1);
	add_enum_member(id,"AD9363_REG_DIGITAL_SAT_COUNTER",	0X128,	-1);
	add_enum_member(id,"AD9363_REG_OUTER_POWER_THRESHS",	0X129,	-1);
	add_enum_member(id,"AD9363_REG_GAIN_STP_2",	0X12A,	-1);
	add_enum_member(id,"AD9363_REG_EXT_LNA_HIGH_GAIN",	0X12C,	-1);
	add_enum_member(id,"AD9363_REG_EXT_LNA_LOW_GAIN",	0X12D,	-1);
	add_enum_member(id,"AD9363_REG_GAIN_TABLE_ADDRESS",	0X130,	-1);
	add_enum_member(id,"AD9363_REG_GAIN_TABLE_WRITE_DATA1",	0X131,	-1);
	add_enum_member(id,"AD9363_REG_GAIN_TABLE_WRITE_DATA2",	0X132,	-1);
	add_enum_member(id,"AD9363_REG_GAIN_TABLE_WRITE_DATA3",	0X133,	-1);
	add_enum_member(id,"AD9363_REG_GAIN_TABLE_READ_DATA1",	0X134,	-1);
	add_enum_member(id,"AD9363_REG_GAIN_TABLE_READ_DATA2",	0X135,	-1);
	add_enum_member(id,"AD9363_REG_GAIN_TABLE_READ_DATA3",	0X136,	-1);
	add_enum_member(id,"AD9363_REG_GAIN_TABLE_CONFIG",	0X137,	-1);
	add_enum_member(id,"AD9363_REG_GM_SUB_TABLE_ADDRESS",	0X138,	-1);
	add_enum_member(id,"AD9363_REG_GM_SUB_TABLE_GAIN_WRITE",	0X139,	-1);
	add_enum_member(id,"AD9363_REG_GM_SUB_TABLE_BIAS_WRITE",	0X13A,	-1);
	add_enum_member(id,"AD9363_REG_GM_SUB_TABLE_CTRL_WRITE",	0X13B,	-1);
	add_enum_member(id,"AD9363_REG_GM_SUB_TABLE_GAIN_READ",	0X13C,	-1);
	add_enum_member(id,"AD9363_REG_GM_SUB_TABLE_BIAS_READ",	0X13D,	-1);
	add_enum_member(id,"AD9363_REG_GM_SUB_TABLE_CTRL_READ",	0X13E,	-1);
	add_enum_member(id,"AD9363_REG_GM_SUB_TABLE_CONFIG",	0X13F,	-1);
	add_enum_member(id,"AD9363_REG_WORD_ADDRESS",	0X140,	-1);
	add_enum_member(id,"AD9363_REG_GAIN_DIFF_WORDERROR_WRITE",	0X141,	-1);
	add_enum_member(id,"AD9363_REG_GAIN_ERROR_READ",	0X142,	-1);
	add_enum_member(id,"AD9363_REG_CONFIG",	0X143,	-1);
	add_enum_member(id,"AD9363_REG_LNA_GAIN_DIFF_READ_BACK",	0X144,	-1);
	add_enum_member(id,"AD9363_REG_MAX_MIXER_CALIBRATION_GAIN_INDEX",	0X145,	-1);
	add_enum_member(id,"AD9363_REG_TEMP_GAIN_COEF",	0X146,	-1);
	add_enum_member(id,"AD9363_REG_SETTLE_TIME",	0X147,	-1);
	add_enum_member(id,"AD9363_REG_MEASURE_DURATION",	0X148,	-1);
	add_enum_member(id,"AD9363_REG_CAL_TEMP_SENSOR_WORD",	0X149,	-1);
	add_enum_member(id,"AD9363_REG_MEASURE_DURATION_01",	0X150,	-1);
	add_enum_member(id,"AD9363_REG_MEASURE_DURATION_23",	0X151,	-1);
	add_enum_member(id,"AD9363_REG_RSSI_WEIGHT_0",	0X152,	-1);
	add_enum_member(id,"AD9363_REG_RSSI_WEIGHT_1",	0X153,	-1);
	add_enum_member(id,"AD9363_REG_RSSI_WEIGHT_2",	0X154,	-1);
	add_enum_member(id,"AD9363_REG_RSSI_WEIGHT_3",	0X155,	-1);
	add_enum_member(id,"AD9363_REG_RSSI_DELAY",	0X156,	-1);
	add_enum_member(id,"AD9363_REG_RSSI_WAIT_TIME",	0X157,	-1);
	add_enum_member(id,"AD9363_REG_RSSI_CONFIG",	0X158,	-1);
	add_enum_member(id,"AD9363_REG_ADC_MEASURE_DURATION_01",	0X159,	-1);
	add_enum_member(id,"AD9363_REG_ADC_WEIGHT_0",	0X15A,	-1);
	add_enum_member(id,"AD9363_REG_ADC_WEIGHT_1",	0X15B,	-1);
	add_enum_member(id,"AD9363_REG_DEC_POWER_MEASURE_DURATION_0",	0X15C,	-1);
	add_enum_member(id,"AD9363_REG_LNA_GAIN",	0X15D,	-1);
	add_enum_member(id,"AD9363_REG_CH1_ADC_POWER",	0X160,	-1);
	add_enum_member(id,"AD9363_REG_CH1_RX_FILTER_POWER",	0X161,	-1);
	add_enum_member(id,"AD9363_REG_CH2_ADC_POWER",	0X162,	-1);
	add_enum_member(id,"AD9363_REG_CH2_RX_FILTER_POWER",	0X163,	-1);
	add_enum_member(id,"AD9363_REG_RX_QUAD_CAL_LEVEL",	0X168,	-1);
	add_enum_member(id,"AD9363_REG_CALIBRATION_CONFIG_1",	0X169,	-1);
	add_enum_member(id,"AD9363_REG_CALIBRATION_CONFIG_2",	0X16A,	-1);
	add_enum_member(id,"AD9363_REG_CALIBRATION_CONFIG_3",	0X16B,	-1);
	add_enum_member(id,"AD9363_REG_CALIB_COUNT",	0X16C,	-1);
	add_enum_member(id,"AD9363_REG_RX_QUAD_GAIN1",	0X16E,	-1);
	add_enum_member(id,"AD9363_REG_RX_QUAD_GAIN2",	0X16F,	-1);
	add_enum_member(id,"AD9363_REG_RX1_INPUT_A_PHASE_CORR",	0X170,	-1);
	add_enum_member(id,"AD9363_REG_RX1_INPUT_A_GAIN_CORR",	0X171,	-1);
	add_enum_member(id,"AD9363_REG_RX2_INPUT_A_PHASE_CORR",	0X172,	-1);
	add_enum_member(id,"AD9363_REG_RX2_INPUT_A_GAIN_CORR",	0X173,	-1);
	add_enum_member(id,"AD9363_REG_RX1_INPUT_A_Q_OFFSET",	0X174,	-1);
	add_enum_member(id,"AD9363_REG_RX1_INPUT_A_OFFSETS",	0X175,	-1);
	add_enum_member(id,"AD9363_REG_INPUT_A_OFFSETS_1",	0X176,	-1);
	add_enum_member(id,"AD9363_REG_RX2_INPUT_A_OFFSETS",	0X177,	-1);
	add_enum_member(id,"AD9363_REG_RX2_INPUT_A_I_OFFSET",	0X178,	-1);
	add_enum_member(id,"AD9363_REG_RX1_INPUT_BC_PHASE_CORR",	0X179,	-1);
	add_enum_member(id,"AD9363_REG_RX1_INPUT_BC_GAIN_CORR",	0X17A,	-1);
	add_enum_member(id,"AD9363_REG_RX2_INPUT_BC_PHASE_CORR",	0X17B,	-1);
	add_enum_member(id,"AD9363_REG_RX2_INPUT_BC_GAIN_CORR",	0X17C,	-1);
	add_enum_member(id,"AD9363_REG_RX1_INPUT_BC_Q_OFFSET",	0X17D,	-1);
	add_enum_member(id,"AD9363_REG_RX1_INPUT_BC_OFFSETS",	0X17E,	-1);
	add_enum_member(id,"AD9363_REG_INPUT_BC_OFFSETS_1",	0X17F,	-1);
	add_enum_member(id,"AD9363_REG_RX2_INPUT_BC_OFFSETS",	0X180,	-1);
	add_enum_member(id,"AD9363_REG_RX2_INPUT_BC_I_OFFSET",	0X181,	-1);
	add_enum_member(id,"AD9363_REG_FORCE_BITS",	0X182,	-1);
	add_enum_member(id,"AD9363_REG_WAIT_COUNT",	0X185,	-1);
	add_enum_member(id,"AD9363_REG_RF_DC_OFFSET_COUNT",	0X186,	-1);
	add_enum_member(id,"AD9363_REG_RF_DC_OFFSET_CONFIG_1",	0X187,	-1);
	add_enum_member(id,"AD9363_REG_RF_DC_OFFSET_ATTEN",	0X188,	-1);
	add_enum_member(id,"AD9363_REG_INVERT_BITS",	0X189,	-1);
	add_enum_member(id,"AD9363_REG_DC_OFFSET_CONFIG2",	0X18B,	-1);
	add_enum_member(id,"AD9363_REG_RF_CAL_GAIN_INDEX",	0X18C,	-1);
	add_enum_member(id,"AD9363_REG_SOI_THRESH",	0X18D,	-1);
	add_enum_member(id,"AD9363_REG_BB_DC_OFFSET_SHIFT",	0X190,	-1);
	add_enum_member(id,"AD9363_REG_BB_DC_OFFSET_FAST_SETTLE_SHIFT",	0X191,	-1);
	add_enum_member(id,"AD9363_REG_BB_FAST_SETTLE_DUR",	0X192,	-1);
	add_enum_member(id,"AD9363_REG_BB_DC_OFFSET_COUNT",	0X193,	-1);
	add_enum_member(id,"AD9363_REG_BB_DC_OFFSET_ATTEN",	0X194,	-1);
	add_enum_member(id,"AD9363_REG_RX1_BB_DC_WORD_I_MSB",	0X19A,	-1);
	add_enum_member(id,"AD9363_REG_RX1_BB_DC_WORD_I_LSB",	0X19B,	-1);
	add_enum_member(id,"AD9363_REG_RX1_BB_DC_WORD_Q_MSB",	0X19C,	-1);
	add_enum_member(id,"AD9363_REG_RX1_BB_DC_WORD_Q_LSB",	0X19D,	-1);
	add_enum_member(id,"AD9363_REG_RX2_BB_DC_WORD_I_MSB",	0X19E,	-1);
	add_enum_member(id,"AD9363_REG_RX2_BB_DC_WORD_I_LSB",	0X19F,	-1);
	add_enum_member(id,"AD9363_REG_RX2_BB_DC_WORD_Q_MSB",	0X1A0,	-1);
	add_enum_member(id,"AD9363_REG_RX2_BB_DC_WORD_Q_LSB",	0X1A1,	-1);
	add_enum_member(id,"AD9363_REG_BB_TRACK_CORR_WORD_I_MSB",	0X1A2,	-1);
	add_enum_member(id,"AD9363_REG_BB_TRACK_CORR_WORD_I_LSB",	0X1A3,	-1);
	add_enum_member(id,"AD9363_REG_BB_TRACK_CORR_WORD_Q_MSB",	0X1A4,	-1);
	add_enum_member(id,"AD9363_REG_BB_TRACK_CORR_WORD_Q_LSB",	0X1A5,	-1);
	add_enum_member(id,"AD9363_REG_RX1_RSSI_SYMBOL",	0X1A7,	-1);
	add_enum_member(id,"AD9363_REG_RX1_RSSI_PREAMBLE",	0X1A8,	-1);
	add_enum_member(id,"AD9363_REG_RX2_RSSI_SYMBOL",	0X1A9,	-1);
	add_enum_member(id,"AD9363_REG_RX2_RSSI_PREAMBLE",	0X1AA,	-1);
	add_enum_member(id,"AD9363_REG_SYMBOL_LSB",	0X1AB,	-1);
	add_enum_member(id,"AD9363_REG_PREAMBLE_LSB",	0X1AC,	-1);
	add_enum_member(id,"AD9363_REG_RX_PATH_GAIN_MSB",	0X1AD,	-1);
	add_enum_member(id,"AD9363_REG_RX_PATH_GAIN_LSB",	0X1AE,	-1);
	add_enum_member(id,"AD9363_REG_RX_DIFF_LNA_FORCE",	0X1B0,	-1);
	add_enum_member(id,"AD9363_REG_RX_LNA_BIAS_COARSE",	0X1B1,	-1);
	add_enum_member(id,"AD9363_REG_RX_LNA_BIAS_FINE_0",	0X1B2,	-1);
	add_enum_member(id,"AD9363_REG_RX_LNA_BIAS_FINE_1",	0X1B3,	-1);
	add_enum_member(id,"AD9363_REG_RX_MIX_GM_CONFIG",	0X1C0,	-1);
	add_enum_member(id,"AD9363_REG_RX1_MIX_GM_FORCE",	0X1C1,	-1);
	add_enum_member(id,"AD9363_REG_RX1_MIX_GM_BIAS_FORCE",	0X1C2,	-1);
	add_enum_member(id,"AD9363_REG_RX2_MIX_GM_FORCE",	0X1C3,	-1);
	add_enum_member(id,"AD9363_REG_RX2_MIX_GM_BIAS_FORCE",	0X1C4,	-1);
	add_enum_member(id,"AD9363_REG_INPUT_A_MSBS",	0X1C8,	-1);
	add_enum_member(id,"AD9363_REG_INPUT_A_RX1_I",	0X1C9,	-1);
	add_enum_member(id,"AD9363_REG_INPUT_A_RX1_Q",	0X1CA,	-1);
	add_enum_member(id,"AD9363_REG_INPUT_A_RX2_I",	0X1CB,	-1);
	add_enum_member(id,"AD9363_REG_INPUT_A_RX2_Q",	0X1CC,	-1);
	add_enum_member(id,"AD9363_REG_INPUTS_BC_RX1_I",	0X1CD,	-1);
	add_enum_member(id,"AD9363_REG_BAND1_RX1_Q",	0X1CE,	-1);
	add_enum_member(id,"AD9363_REG_INPUTS_BC_RX2_I",	0X1CF,	-1);
	add_enum_member(id,"AD9363_REG_INPUTS_BC_RX2_Q",	0X1D0,	-1);
	add_enum_member(id,"AD9363_REG_INPUTS_BC_MSBS",	0X1D1,	-1);
	add_enum_member(id,"AD9363_REG_FORCE_OS_DAC",	0X1D2,	-1);
	add_enum_member(id,"AD9363_REG_RX_MIX_LO_CM",	0X1D5,	-1);
	add_enum_member(id,"AD9363_REG_RX_CGB_SEG_ENABLE",	0X1D6,	-1);
	add_enum_member(id,"AD9363_REG_RX_MIX_INPUTBIAS",	0X1D7,	-1);
	add_enum_member(id,"AD9363_REG_RX_TIA_CONFIG",	0X1DB,	-1);
	add_enum_member(id,"AD9363_REG_TIA1_C_LSB",	0X1DC,	-1);
	add_enum_member(id,"AD9363_REG_TIA1_C_MSB",	0X1DD,	-1);
	add_enum_member(id,"AD9363_REG_TIA2_C_LSB",	0X1DE,	-1);
	add_enum_member(id,"AD9363_REG_TIA2_C_MSB",	0X1DF,	-1);
	add_enum_member(id,"AD9363_REG_RX1_BBF_R1A",	0X1E0,	-1);
	add_enum_member(id,"AD9363_REG_RX2_BBF_R1A",	0X1E1,	-1);
	add_enum_member(id,"AD9363_REG_RX1_TUNE_CTRL",	0X1E2,	-1);
	add_enum_member(id,"AD9363_REG_RX2_TUNE_CTRL",	0X1E3,	-1);
	add_enum_member(id,"AD9363_REG_RX1_BBF_R5",	0X1E4,	-1);
	add_enum_member(id,"AD9363_REG_RX2_BBF_R5",	0X1E5,	-1);
	add_enum_member(id,"AD9363_REG_RX_BBF_R2346",	0X1E6,	-1);
	add_enum_member(id,"AD9363_REG_RX_BBF_C1_MSB",	0X1E7,	-1);
	add_enum_member(id,"AD9363_REG_RX_BBF_C1_LSB",	0X1E8,	-1);
	add_enum_member(id,"AD9363_REG_RX_BBF_C2_MSB",	0X1E9,	-1);
	add_enum_member(id,"AD9363_REG_RX_BBF_C2_LSB",	0X1EA,	-1);
	add_enum_member(id,"AD9363_REG_RX_BBF_C3_MSB",	0X1EB,	-1);
	add_enum_member(id,"AD9363_REG_RX_BBF_C3_LSB",	0X1EC,	-1);
	add_enum_member(id,"AD9363_REG_RX_BBF_CC1_CTR",	0X1ED,	-1);
	add_enum_member(id,"AD9363_REG_RX_BBF_POW_RZ_BYTE0",	0X1EE,	-1);
	add_enum_member(id,"AD9363_REG_RX_BBF_CC2_CTR",	0X1EF,	-1);
	add_enum_member(id,"AD9363_REG_RX_BBF_POW_RZ_BYTE1",	0X1F0,	-1);
	add_enum_member(id,"AD9363_REG_RX_BBF_CC3_CTR",	0X1F1,	-1);
	add_enum_member(id,"AD9363_REG_RX_BBF_R5_TUNE",	0X1F2,	-1);
	add_enum_member(id,"AD9363_REG_RX_BBF_TUNE",	0X1F3,	-1);
	add_enum_member(id,"AD9363_REG_RX1_BBF_MAN_GAIN",	0X1F4,	-1);
	add_enum_member(id,"AD9363_REG_RX2_BBF_MAN_GAIN",	0X1F5,	-1);
	add_enum_member(id,"AD9363_REG_RX_BBF_TUNE_DIVIDE",	0X1F8,	-1);
	add_enum_member(id,"AD9363_REG_RX_BBF_TUNE_CONFIG",	0X1F9,	-1);
	add_enum_member(id,"AD9363_REG_POLE_GAIN",	0X1FA,	-1);
	add_enum_member(id,"AD9363_REG_RX_BBBW_MHZ",	0X1FB,	-1);
	add_enum_member(id,"AD9363_REG_RX_BBBW_KHZ",	0X1FC,	-1);
	add_enum_member(id,"AD9363_REG_FB_DAC_CLK_DELAY1",	0X201,	-1);
	add_enum_member(id,"AD9363_REG_FB_DAC_CLK_DELAY2",	0X202,	-1);
	add_enum_member(id,"AD9363_REG_FLASH_SAMPLE_CLK_DELAY_3P",	0X203,	-1);
	add_enum_member(id,"AD9363_REG_FLASH_SAMPLE_CLK_DELAY_3N",	0X204,	-1);
	add_enum_member(id,"AD9363_REG_TEST_MUX_2I",	0X205,	-1);
	add_enum_member(id,"AD9363_REG_TEST_MUX_2Q",	0X206,	-1);
	add_enum_member(id,"AD9363_REG_INTEGRATOR_1_RESISTANCE",	0X207,	-1);
	add_enum_member(id,"AD9363_REG_INTEGRATOR_1_CAPACITANCE",	0X208,	-1);
	add_enum_member(id,"AD9363_REG_INTEGRATOR_23_RESISTANCE",	0X209,	-1);
	add_enum_member(id,"AD9363_REG_INTEGRATOR_2_RESISTANCE",	0X20A,	-1);
	add_enum_member(id,"AD9363_REG_INTEGRATOR_2_CAPACITANCE",	0X20B,	-1);
	add_enum_member(id,"AD9363_REG_INTEGRATOR_3_RESISTANCE",	0X20C,	-1);
	add_enum_member(id,"AD9363_REG_INTEGRATOR_3_CAPACITANCE",	0X20D,	-1);
	add_enum_member(id,"AD9363_REG_INTEGRATOR_AMP_CC",	0X20E,	-1);
	add_enum_member(id,"AD9363_REG_INT_1_FB_DAC_NMOS_CURRENT_SOURCE",	0X20F,	-1);
	add_enum_member(id,"AD9363_REG_INT_1_FB_DAC_NMOS_CASOADE_BIAS_CURRENT",	0X210,	-1);
	add_enum_member(id,"AD9363_REG_INT_1_FB_DAC_PMOS_CURRENT_SOURCE",	0X211,	-1);
	add_enum_member(id,"AD9363_REG_INT_2_FB_DAC_NMOS_CURRENT_SOURCE",	0X212,	-1);
	add_enum_member(id,"AD9363_REG_INT_2_FB_DAC_NMOS_CASCODE_BIAS_CURRENT",	0X213,	-1);
	add_enum_member(id,"AD9363_REG_INT_2_FB_DAC_PMOS_CURRENT_SOURCE",	0X214,	-1);
	add_enum_member(id,"AD9363_REG_INT_3_FB_DAC_NMOS_CURRENT_SOURCE",	0X215,	-1);
	add_enum_member(id,"AD9363_REG_INT_3_FB_DAC_NMOS_CASCODE_BIAS_CURRENT",	0X216,	-1);
	add_enum_member(id,"AD9363_REG_INT_3_FB_DAC_PMOS_CURRENT_SOURCE",	0X217,	-1);
	add_enum_member(id,"AD9363_REG_FB_DAC_BIAS_CURRENT",	0X218,	-1);
	add_enum_member(id,"AD9363_REG_INT_1_1ST_STAGE_CURRENT",	0X219,	-1);
	add_enum_member(id,"AD9363_REG_INT_1_1ST_STAGE_CASCODE_CURRENT",	0X21A,	-1);
	add_enum_member(id,"AD9363_REG_INT_1_2ND_STAGE_CURRENT",	0X21B,	-1);
	add_enum_member(id,"AD9363_REG_INTEGRATOR_2_1ST_STAGE_CURRENT",	0X21C,	-1);
	add_enum_member(id,"AD9363_REG_INT_2_1ST_STAGE_CASCODE_CURRENT",	0X21D,	-1);
	add_enum_member(id,"AD9363_REG_INT_2_2ND_STAGE_CURRENT",	0X21E,	-1);
	add_enum_member(id,"AD9363_REG_INT_3_1ST_STAGE_CURRENT",	0X21F,	-1);
	add_enum_member(id,"AD9363_REG_INT_3_1ST_STAGE_CASCODE_CURRENT",	0X220,	-1);
	add_enum_member(id,"AD9363_REG_INT_3_2ND_STAGE_CURRENT",	0X221,	-1);
	add_enum_member(id,"AD9363_REG_FLASH_BIAS_CURRENT",	0X222,	-1);
	add_enum_member(id,"AD9363_REG_FLASH_LADDER_BIAS",	0X223,	-1);
	add_enum_member(id,"AD9363_REG_FLASH_LADDER_BIAS2",	0X225,	-1);
	add_enum_member(id,"AD9363_REG_RESET",	0X226,	-1);
	add_enum_member(id,"AD9363_REG_RX_PFD_CONFIG",	0X230,	-1);
	add_enum_member(id,"AD9363_REG_RX_INTEGER_BYTE_0",	0X231,	-1);
	add_enum_member(id,"AD9363_REG_RX_INTEGER_BYTE_1",	0X232,	-1);
	add_enum_member(id,"AD9363_REG_RX_FRACT_BYTE_0",	0X233,	-1);
	add_enum_member(id,"AD9363_REG_RX_FRACT_BYTE_1",	0X234,	-1);
	add_enum_member(id,"AD9363_REG_RX_FRACT_BYTE_2",	0X235,	-1);
	add_enum_member(id,"AD9363_REG_RX_FORCE_ALC",	0X236,	-1);
	add_enum_member(id,"AD9363_REG_RX_FORCE_VCO_TUNE_0",	0X237,	-1);
	add_enum_member(id,"AD9363_REG_RX_FORCE_VCO_TUNE_1",	0X238,	-1);
	add_enum_member(id,"AD9363_REG_RX_ALC_VARACTOR",	0X239,	-1);
	add_enum_member(id,"AD9363_REG_RX_VCO_OUTPUT",	0X23A,	-1);
	add_enum_member(id,"AD9363_REG_RX_CP_CURRENT",	0X23B,	-1);
	add_enum_member(id,"AD9363_REG_RX_CP_OFFSET",	0X23C,	-1);
	add_enum_member(id,"AD9363_REG_RX_CP_CONFIG",	0X23D,	-1);
	add_enum_member(id,"AD9363_REG_RX_LOOP_FILTER_1",	0X23E,	-1);
	add_enum_member(id,"AD9363_REG_RX_LOOP_FILTER_2",	0X23F,	-1);
	add_enum_member(id,"AD9363_REG_RX_LOOP_FILTER_3",	0X240,	-1);
	add_enum_member(id,"AD9363_REG_RX_DITHERCP_CAL",	0X241,	-1);
	add_enum_member(id,"AD9363_REG_RX_VCO_BIAS_1",	0X242,	-1);
	add_enum_member(id,"AD9363_REG_RX_CAL_STATUS",	0X244,	-1);
	add_enum_member(id,"AD9363_REG_RX_VCO_CAL_REF",	0X245,	-1);
	add_enum_member(id,"AD9363_REG_RX_VCO_PD_OVERRIDES",	0X246,	-1);
	add_enum_member(id,"AD9363_REG_RX_CP_OVERRANGE_VCO_LOCK",	0X247,	-1);
	add_enum_member(id,"AD9363_REG_RX_VCO_LDO",	0X248,	-1);
	add_enum_member(id,"AD9363_REG_RX_VCO_CAL",	0X249,	-1);
	add_enum_member(id,"AD9363_REG_RX_LOCK_DETECT_CONFIG",	0X24A,	-1);
	add_enum_member(id,"AD9363_REG_RX_CP_LEVEL_DETECT",	0X24B,	-1);
	add_enum_member(id,"AD9363_REG_RX_DSM_SETUP_0",	0X24C,	-1);
	add_enum_member(id,"AD9363_REG_RX_DSM_SETUP_1",	0X24D,	-1);
	add_enum_member(id,"AD9363_REG_RX_CORRECTION_WORD0",	0X24E,	-1);
	add_enum_member(id,"AD9363_REG_RX_CORRECTION_WORD1",	0X24F,	-1);
	add_enum_member(id,"AD9363_REG_RX_VCO_VARACTOR_CTRL_0",	0X250,	-1);
	add_enum_member(id,"AD9363_REG_RX_VCO_VARACTOR_CTRL_1",	0X251,	-1);
	add_enum_member(id,"AD9363_REG_RX_FAST_LOCK_SETUP",	0X25A,	-1);
	add_enum_member(id,"AD9363_REG_RX_FAST_LOCK_SETUP_INIT_DELAY",	0X25B,	-1);
	add_enum_member(id,"AD9363_REG_RX_FAST_LOCK_PROGRAM_ADDR",	0X25C,	-1);
	add_enum_member(id,"AD9363_REG_RX_FAST_LOCK_PROGRAM_DATA",	0X25D,	-1);
	add_enum_member(id,"AD9363_REG_RX_FAST_LOCK_PROGRAM_READ",	0X25E,	-1);
	add_enum_member(id,"AD9363_REG_RX_FAST_LOCK_PROGRAM_CTRL",	0X25F,	-1);
	add_enum_member(id,"AD9363_REG_RX_LO_GEN_POWER_MODE",	0X261,	-1);
	add_enum_member(id,"AD9363_REG_TX_PFD_CONFIG",	0X270,	-1);
	add_enum_member(id,"AD9363_REG_TX_INTEGER_BYTE_0",	0X271,	-1);
	add_enum_member(id,"AD9363_REG_TX_INTEGER_BYTE_1",	0X272,	-1);
	add_enum_member(id,"AD9363_REG_TX_FRACT_BYTE_0",	0X273,	-1);
	add_enum_member(id,"AD9363_REG_TX_FRACT_BYTE_1",	0X274,	-1);
	add_enum_member(id,"AD9363_REG_TX_FRACT_BYTE_2",	0X275,	-1);
	add_enum_member(id,"AD9363_REG_TX_FORCE_ALC",	0X276,	-1);
	add_enum_member(id,"AD9363_REG_TX_FORCE_VCO_TUNE_0",	0X277,	-1);
	add_enum_member(id,"AD9363_REG_TX_FORCE_VCO_TUNE_1",	0X278,	-1);
	add_enum_member(id,"AD9363_REG_TX_ALCVARACT_OR",	0X279,	-1);
	add_enum_member(id,"AD9363_REG_TX_VCO_OUTPUT",	0X27A,	-1);
	add_enum_member(id,"AD9363_REG_TX_CP_CURRENT",	0X27B,	-1);
	add_enum_member(id,"AD9363_REG_TX_CP_OFFSET",	0X27C,	-1);
	add_enum_member(id,"AD9363_REG_TX_CP_CONFIG",	0X27D,	-1);
	add_enum_member(id,"AD9363_REG_TX_LOOP_FILTER_1",	0X27E,	-1);
	add_enum_member(id,"AD9363_REG_TX_LOOP_FILTER_2",	0X27F,	-1);
	add_enum_member(id,"AD9363_REG_TX_LOOP_FILTER_3",	0X280,	-1);
	add_enum_member(id,"AD9363_REG_TX_DITHERCP_CAL",	0X281,	-1);
	add_enum_member(id,"AD9363_REG_TX_VCO_BIAS_1",	0X282,	-1);
	add_enum_member(id,"AD9363_REG_TX_VCO_BIAS_2",	0X283,	-1);
	add_enum_member(id,"AD9363_REG_TX_CAL_STATUS",	0X284,	-1);
	add_enum_member(id,"AD9363_REG_TX_VCO_CAL_REF",	0X285,	-1);
	add_enum_member(id,"AD9363_REG_TX_VCO_PD_OVERRIDES",	0X286,	-1);
	add_enum_member(id,"AD9363_REG_TX_CP_OVERRANGE_VCO_LOCK",	0X287,	-1);
	add_enum_member(id,"AD9363_REG_TX_VCO_LDO",	0X288,	-1);
	add_enum_member(id,"AD9363_REG_TX_VCO_CAL",	0X289,	-1);
	add_enum_member(id,"AD9363_REG_TX_LOCK_DETECT_CONFIG",	0X28A,	-1);
	add_enum_member(id,"AD9363_REG_TX_CP_LEVEL_DETECT",	0X28B,	-1);
	add_enum_member(id,"AD9363_REG_TX_DSM_SETUP_0",	0X28C,	-1);
	add_enum_member(id,"AD9363_REG_TX_DSM_SETUP_1",	0X28D,	-1);
	add_enum_member(id,"AD9363_REG_TX_CORRECTION_WORD0",	0X28E,	-1);
	add_enum_member(id,"AD9363_REG_TX_CORRECTION_WORD1",	0X28F,	-1);
	add_enum_member(id,"AD9363_REG_TX_VCO_VARACTOR_CTRL_0",	0X290,	-1);
	add_enum_member(id,"AD9363_REG_TX_VCO_VARACTOR_CTRL_1",	0X291,	-1);
	add_enum_member(id,"AD9363_REG_DCXO_COARSE_TUNE",	0X292,	-1);
	add_enum_member(id,"AD9363_REG_DCXO_FINE_TUNE_HIGH",	0X293,	-1);
	add_enum_member(id,"AD9363_REG_DCXO_FINE_TUNE_LOW",	0X294,	-1);
	add_enum_member(id,"AD9363_REG_DCXO_CONFIG",	0X295,	-1);
	add_enum_member(id,"AD9363_REG_DCXO_TEMPCO_WRITE",	0X296,	-1);
	add_enum_member(id,"AD9363_REG_DCXO_TEMPCO_READ",	0X297,	-1);
	add_enum_member(id,"AD9363_REG_DCXO_TEMPCO_ADDR",	0X298,	-1);
	add_enum_member(id,"AD9363_REG_DELTA_T_READ",	0X299,	-1);
	add_enum_member(id,"AD9363_REG_TX_FAST_LOCK_SETUP",	0X29A,	-1);
	add_enum_member(id,"AD9363_REG_TX_FAST_LOCK_SETUP_INIT_DELAY",	0X29B,	-1);
	add_enum_member(id,"AD9363_REG_TX_FAST_LOCK_PROGRAM_ADDR",	0X29C,	-1);
	add_enum_member(id,"AD9363_REG_TX_FAST_LOCK_PROGRAM_DATA",	0X29D,	-1);
	add_enum_member(id,"AD9363_REG_TX_FAST_LOCK_PROGRAM_READ",	0X29E,	-1);
	add_enum_member(id,"AD9363_REG_TX_FAST_LOCK_PROGRAM_CTRL",	0X29F,	-1);
	add_enum_member(id,"AD9363_REG_TX_LO_GEN_POWER_MODE",	0X2A1,	-1);
	add_enum_member(id,"AD9363_REG_BANDGAP_CONFIG0",	0X2A6,	-1);
	add_enum_member(id,"AD9363_REG_BANDGAP_CONFIG1",	0X2A8,	-1);
	add_enum_member(id,"AD9363_REG_REF_DIVIDE_CONFIG_1",	0X2AB,	-1);
	add_enum_member(id,"AD9363_REG_REF_DIVIDE_CONFIG_2",	0X2AC,	-1);
	add_enum_member(id,"AD9363_REG_GAIN_RX1",	0X2B0,	-1);
	add_enum_member(id,"AD9363_REG_LPF_GAIN_RX1",	0X2B1,	-1);
	add_enum_member(id,"AD9363_REG_DIG_GAIN_RX1",	0X2B2,	-1);
	add_enum_member(id,"AD9363_REG_FAST_ATTACK_STATE",	0X2B3,	-1);
	add_enum_member(id,"AD9363_REG_SLOW_LOOP_STATE",	0X2B4,	-1);
	add_enum_member(id,"AD9363_REG_GAIN_RX2",	0X2B5,	-1);
	add_enum_member(id,"AD9363_REG_LPF_GAIN_RX2",	0X2B6,	-1);
	add_enum_member(id,"AD9363_REG_DIG_GAIN_RX2",	0X2B7,	-1);
	add_enum_member(id,"AD9363_REG_OVRG_SIGS_RX1",	0X2B8,	-1);
	add_enum_member(id,"AD9363_REG_OVRG_SIGS_RX2",	0X2B9,	-1);
	add_enum_member(id,"AD9363_REG_CTRL",	0X3DF,	-1);
	add_enum_member(id,"AD9363_REG_BIST_CONFIG",	0X3F4,	-1);
	add_enum_member(id,"AD9363_REG_OBSERVE_CONFIG",	0X3F5,	-1);
	add_enum_member(id,"AD9363_REG_BIST_AND_DATA_PORT_TEST_CONFIG",	0X3F6,	-1);
	add_enum_member(id,"AD9363_REG_DAC_TEST_0",	0X3FC,	-1);
	add_enum_member(id,"AD9363_REG_DAC_TEST_1",	0X3FD,	-1);
	add_enum_member(id,"AD9363_REG_DAC_TEST_2",	0X3FE,	-1);
	id = add_enum(-1,"SPI_AR9003_REG_DEFINES",0x1100000);
	add_enum_member(id,"AR8003_REG_UNKN_2A",	0X2A,	-1);
	add_enum_member(id,"AR8003_REG_UNKN_42",	0X42,	-1);
	add_enum_member(id,"AR8003_REG_TX1_ATTEN_0",	0X54,	-1);
	add_enum_member(id,"AR8003_REG_TX2_ATTEN_0",	0X5C,	-1);
	add_enum_member(id,"AR8003_REG_UNKN_6A",	0X6A,	-1);
	add_enum_member(id,"AR8003_REG_STATE_FLAGS",	0X7C,	-1);
	id = add_enum(-1,"SPI_FPGA_REG_DEFINES",0x1100000);
	add_enum_member(id,"FPGA_REG_UNKN_00",	0,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_01",	0X1,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_02",	0X2,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_04",	0X4,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_05",	0X5,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_06",	0X6,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_07",	0X7,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_08",	0X8,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_09",	0X9,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_10",	0X10,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_12",	0X12,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_20",	0X20,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_23",	0X23,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_40",	0X40,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_41",	0X41,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_42",	0X42,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_43",	0X43,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_7C",	0X7C,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_7D",	0X7D,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_7E",	0X7E,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_7F",	0X7F,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_8B",	0X8B,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_8C",	0X8C,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_8D",	0X8D,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_8E",	0X8E,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_90",	0X90,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_91",	0X91,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_92",	0X92,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_93",	0X93,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_94",	0X94,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_95",	0X95,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_96",	0X96,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_97",	0X97,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_98",	0X98,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_99",	0X99,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_9A",	0X9A,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_9B",	0X9B,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_9E",	0X9E,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_9F",	0X9F,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_A0",	0XA0,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_A1",	0XA1,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_A3",	0XA3,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_A5",	0XA5,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_A6",	0XA6,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_A7",	0XA7,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_A8",	0XA8,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_A9",	0XA9,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_AA",	0XAA,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_AB",	0XAB,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_AC",	0XAC,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_AD",	0XAD,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_AE",	0XAE,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_B0",	0XB0,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_B1",	0XB1,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_B2",	0XB2,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_B3",	0XB3,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_B4",	0XB4,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_B8",	0XB8,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_B9",	0XB9,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_BA",	0XBA,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_BB",	0XBB,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_BC",	0XBC,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_BD",	0XBD,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_CE",	0XCE,	-1);
	add_enum_member(id,"FPGA_REG_UNKN_E9",	0XE9,	-1);
	id = add_enum(-1,"SPI_AR9001_REG_DEFINES",0x1100000);
	add_enum_member(id,"AR8001_REG_UNKN_00",	0,	-1);
	add_enum_member(id,"AR8001_REG_UNKN_01",	0X1,	-1);
	add_enum_member(id,"AR8001_REG_UNKN_CE",	0XCE,	-1);
	id = add_enum(-1,"OFDM_TCX_STATE_FLAGS",0x1100000);
	set_enum_bf(id,1);
	add_enum_member(id,"OFDM_FPGA_BOOT_ERR",	0X1,	0x1);
	add_enum_member(id,"OFDM_FPGA_CONFIG_ERR",	0X2,	0x2);
	add_enum_member(id,"OFDM_EXEC_FAIL_1_ERR",	0X4,	0x4);
	add_enum_member(id,"OFDM_EXEC_FAIL_2_ERR",	0X8,	0x8);
	add_enum_member(id,"OFDM_VER_MISMATCH_ERR",	0X20,	0x20);
	add_enum_member(id,"OFDM_TCX_REGISTER_ERR",	0X40,	0x40);
	add_enum_member(id,"OFDM_RECEIVED_DATA_CRC_FAIL",	0X400,	0x400);
	add_enum_member(id,"OFDM_RECEIVED_DATA_SEQ_FAIL",	0X800,	0x800);
	return id;
}

//------------------------------------------------------------------------
// Information about enum types

static Enums(void) {
        auto id;
        begin_type_updating(UTP_ENUM);
	id = Enums_0(id);
        end_type_updating(UTP_ENUM);
}

static ApplyStrucTInfos_0(void) {
        auto id;
	id = get_struc_id("LPC_RTC_TypeDef");
	id = get_struc_id("LPC_PINCON_TypeDef");
	id = get_struc_id("LPC_GPIOINT_TypeDef");
	id = get_struc_id("LPC_TIM_TypeDef");
	id = get_struc_id("RTC_TIME_Type");
	id = get_struc_id("LPC_WDT_TypeDef");
	id = get_struc_id("LPC_ADC_TypeDef");
	id = get_struc_id("LPC_PWM_TypeDef");
	id = get_struc_id("LPC_UART_TypeDef");
	id = get_struc_id("LPC_SPI_TypeDef");
	id = get_struc_id("LPC_SSP_TypeDef");
	id = get_struc_id("LPC_I2C_TypeDef");
	id = get_struc_id("LPC_CANAF_RAM_TypeDef");
	id = get_struc_id("LPC_CANAF_TypeDef");
	id = get_struc_id("LPC_CANCR_TypeDef");
	id = get_struc_id("LPC_CAN_TypeDef");
	id = get_struc_id("AF_SectionDef");
	SetType(get_member_id(id, 0x0), "struct FullCAN_Entry *");
	SetType(get_member_id(id, 0x8), "struct SFF_Entry *");
	SetType(get_member_id(id, 0x10), "struct SFF_GPR_Entry *");
	SetType(get_member_id(id, 0x18), "struct EFF_Entry *");
	SetType(get_member_id(id, 0x20), "struct EFF_GPR_Entry *");
	id = get_struc_id("SFF_Entry");
	id = get_struc_id("ITM_Type");
	id = get_struc_id("CoreDebug_Type");
	id = get_struc_id("OS_TCB");
	SetType(get_member_id(id, 0x5C), "void *");
	id = get_struc_id("OS_MSG_Q");
	id = get_struc_id("OS_MSG_POOL");
	id = get_struc_id("OS_MSG");
	SetType(get_member_id(id, 0x4), "void *");
	id = get_struc_id("OS_RDY_LIST");
	SetType(get_member_id(id, 0x0), "struct OS_TCB *");
	SetType(get_member_id(id, 0x4), "struct OS_TCB *");
	id = get_struc_id("OS_PEND_LIST");
	id = get_struc_id("OS_TICK_SPOKE");
	id = get_struc_id("OS_SEM");
	id = get_struc_id("SysTick_Type");
	id = get_struc_id("NVIC_Type");
	id = get_struc_id("SCB_Type");
	id = get_struc_id("SCnSCB_Type");
	id = get_struc_id("DWT_Type");
	id = get_struc_id("DjiPacketHead");
	id = get_struc_id("DjiPacket");
	id = get_struc_id("RadioStatus");
	id = get_struc_id("PktPayloadSET06CMDF0");
	id = get_struc_id("PktPayloadS09C12");
	id = get_struc_id("DjiPacketS09C12");
	SetType(get_member_id(id, 0x0), "struct DjiPacketHead");
	SetType(get_member_id(id, 0xB), "struct PktPayloadS09C12");
	return id;
}

//------------------------------------------------------------------------
// Information about type information for structure members

static ApplyStrucTInfos() {
	ApplyStrucTInfos_0();
}

static Structures_0(id) {
        auto mid;

	id = add_struc(-1,"LPC_RTC_TypeDef",0);
	id = add_struc(-1,"LPC_PINCON_TypeDef",0);
	id = add_struc(-1,"LPC_GPIOINT_TypeDef",0);
	id = add_struc(-1,"LPC_TIM_TypeDef",0);
	set_struc_cmt(id,"Timer (TIM)",1);
	id = add_struc(-1,"RTC_TIME_Type",0);
	id = add_struc(-1,"LPC_WDT_TypeDef",0);
	set_struc_cmt(id,"Watchdog Timer (WDT)",1);
	id = add_struc(-1,"LPC_ADC_TypeDef",0);
	id = add_struc(-1,"LPC_PWM_TypeDef",0);
	id = add_struc(-1,"LPC_UART_TypeDef",0);
	set_struc_cmt(id,"Universal Asynchronous Receiver Transmitter (UART)",1);
	id = add_struc(-1,"LPC_SPI_TypeDef",0);
	id = add_struc(-1,"LPC_SSP_TypeDef",0);
	id = add_struc(-1,"LPC_I2C_TypeDef",0);
	id = add_struc(-1,"LPC_CANAF_RAM_TypeDef",0);
	id = add_struc(-1,"LPC_CANAF_TypeDef",0);
	id = add_struc(-1,"LPC_CANCR_TypeDef",0);
	id = add_struc(-1,"LPC_CAN_TypeDef",0);
	id = add_struc(-1,"AF_SectionDef",0);
	set_struc_cmt(id,"Acceptance Filter Section Table structure",1);
	id = add_struc(-1,"SFF_Entry",0);
	set_struc_cmt(id,"Standard ID Frame Format Entry structure",1);
	id = add_struc(-1,"ITM_Type",0);
	id = add_struc(-1,"CoreDebug_Type",0);
	set_struc_cmt(id,"Structure type to access the Core Debug Register (CoreDebug).",1);
	id = add_struc(-1,"OS_TCB",0);
	id = add_struc(-1,"OS_MSG_Q",0);
	id = add_struc(-1,"OS_MSG_POOL",0);
	id = add_struc(-1,"OS_MSG",0);
	id = add_struc(-1,"OS_RDY_LIST",0);
	id = add_struc(-1,"OS_PEND_LIST",0);
	id = add_struc(-1,"OS_TICK_SPOKE",0);
	id = add_struc(-1,"OS_SEM",0);
	id = add_struc(-1,"SysTick_Type",0);
	set_struc_cmt(id,"Type definitions for the System Timer Registers.",1);
	id = add_struc(-1,"NVIC_Type",0);
	id = add_struc(-1,"SCB_Type",0);
	set_struc_cmt(id,"Structure type to access the System Control Block (SCB).",1);
	id = add_struc(-1,"SCnSCB_Type",0);
	set_struc_cmt(id,"Structure type to access the System Control and ID Register not in the SCB.",1);
	id = add_struc(-1,"DWT_Type",0);
	set_struc_cmt(id,"Structure type to access the Data Watchpoint and Trace Register (DWT).",1);
	id = add_struc(-1,"DjiPacketHead",0);
	id = add_struc(-1,"DjiPacket",0);
	id = add_struc(-1,"RadioStatus",0);
	id = add_struc(-1,"PktPayloadSET06CMDF0",0);
	id = add_struc(-1,"PktPayloadS09C12",0);
	id = add_struc(-1,"DjiPacketS09C12",0);
	
	id = get_struc_id("LPC_RTC_TypeDef");
	mid = add_struc_member(id,"ILR",	0,	0x000400,	-1,	1);
	mid = add_struc_member(id,"RESERVED0",	0X1,	0x000400,	-1,	7);
	mid = add_struc_member(id,"CCR",	0X8,	0x000400,	-1,	1);
	mid = add_struc_member(id,"RESERVED1",	0X9,	0x000400,	-1,	3);
	mid = add_struc_member(id,"CIIR",	0XC,	0x000400,	-1,	1);
	mid = add_struc_member(id,"RESERVED2",	0XD,	0x000400,	-1,	3);
	mid = add_struc_member(id,"AMR",	0X10,	0x000400,	-1,	1);
	mid = add_struc_member(id,"RESERVED3",	0X11,	0x000400,	-1,	3);
	mid = add_struc_member(id,"CTIME0",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"CTIME1",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"CTIME2",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"SEC",	0X20,	0x000400,	-1,	1);
	mid = add_struc_member(id,"RESERVED4",	0X21,	0x000400,	-1,	3);
	mid = add_struc_member(id,"MIN",	0X24,	0x000400,	-1,	1);
	mid = add_struc_member(id,"RESERVED5",	0X25,	0x000400,	-1,	3);
	mid = add_struc_member(id,"HOUR",	0X28,	0x000400,	-1,	1);
	mid = add_struc_member(id,"RESERVED6",	0X29,	0x000400,	-1,	3);
	mid = add_struc_member(id,"DOM",	0X2C,	0x000400,	-1,	1);
	mid = add_struc_member(id,"RESERVED7",	0X2D,	0x000400,	-1,	3);
	mid = add_struc_member(id,"DOW",	0X30,	0x000400,	-1,	1);
	mid = add_struc_member(id,"RESERVED8",	0X31,	0x000400,	-1,	3);
	mid = add_struc_member(id,"DOY",	0X34,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"RESERVED9",	0X36,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"MONTH",	0X38,	0x000400,	-1,	1);
	mid = add_struc_member(id,"RESERVED10",	0X39,	0x000400,	-1,	3);
	mid = add_struc_member(id,"YEAR",	0X3C,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"RESERVED11",	0X3E,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"CALIBRATION",	0X40,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"GPREG0",	0X44,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"GPREG1",	0X48,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"GPREG2",	0X4C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"GPREG3",	0X50,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"GPREG4",	0X54,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"RTC_AUXEN",	0X58,	0x000400,	-1,	1);
	mid = add_struc_member(id,"RESERVED12",	0X59,	0x000400,	-1,	3);
	mid = add_struc_member(id,"RTC_AUX",	0X5C,	0x000400,	-1,	1);
	mid = add_struc_member(id,"RESERVED13",	0X5D,	0x000400,	-1,	3);
	mid = add_struc_member(id,"ALSEC",	0X60,	0x000400,	-1,	1);
	mid = add_struc_member(id,"RESERVED14",	0X61,	0x000400,	-1,	3);
	mid = add_struc_member(id,"ALMIN",	0X64,	0x000400,	-1,	1);
	mid = add_struc_member(id,"RESERVED15",	0X65,	0x000400,	-1,	3);
	mid = add_struc_member(id,"ALHOUR",	0X68,	0x000400,	-1,	1);
	mid = add_struc_member(id,"RESERVED16",	0X69,	0x000400,	-1,	3);
	mid = add_struc_member(id,"ALDOM",	0X6C,	0x000400,	-1,	1);
	mid = add_struc_member(id,"RESERVED17",	0X6D,	0x000400,	-1,	3);
	mid = add_struc_member(id,"ALDOW",	0X70,	0x000400,	-1,	1);
	mid = add_struc_member(id,"RESERVED18",	0X71,	0x000400,	-1,	3);
	mid = add_struc_member(id,"ALDOY",	0X74,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"RESERVED19",	0X76,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"ALMON",	0X78,	0x000400,	-1,	1);
	mid = add_struc_member(id,"RESERVED20",	0X79,	0x000400,	-1,	3);
	mid = add_struc_member(id,"ALYEAR",	0X7C,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"RESERVED21",	0X7E,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"ERSTATUS",	0X80,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ERCONTROL",	0X84,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ERCOUNTERS",	0X88,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"RESERVED22",	0X8C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ERFIRSTSTAMP0",	0X90,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ERFIRSTSTAMP1",	0X94,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ERFIRSTSTAMP2",	0X98,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"RESERVED23",	0X9C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ERLASTSTAMP0",	0XA0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ERLASTSTAMP1",	0XA4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ERLASTSTAMP2",	0XA8,	0x20000400,	-1,	4);
	
	id = get_struc_id("LPC_PINCON_TypeDef");
	mid = add_struc_member(id,"PINSEL",	0,	0x20000400,	-1,	44);
	mid = add_struc_member(id,"RESERVED0",	0X2C,	0x20000400,	-1,	20);
	mid = add_struc_member(id,"PINMODE",	0X40,	0x20000400,	-1,	40);
	mid = add_struc_member(id,"PINMODE_OD",	0X68,	0x20000400,	-1,	20);
	mid = add_struc_member(id,"I2CPADCFG",	0X7C,	0x20000400,	-1,	4);
	
	id = get_struc_id("LPC_GPIOINT_TypeDef");
	mid = add_struc_member(id,"IntStatus",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"IO0IntStatR",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"IO0IntStatF",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"IO0IntClr",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"IO0IntEnR",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"IO0IntEnF",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"RESERVED0",	0X18,	0x20000400,	-1,	12);
	mid = add_struc_member(id,"IO2IntStatR",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"IO2IntStatF",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"IO2IntClr",	0X2C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"IO2IntEnR",	0X30,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"IO2IntEnF",	0X34,	0x20000400,	-1,	4);
	
	id = get_struc_id("LPC_TIM_TypeDef");
	mid = add_struc_member(id,"IR",	0,	0x20000400,	-1,	4);
	set_member_cmt(id,	0,	"Interrupt Register. The IR can be written to clear interrupts. The IR can be read to identify which of eight possible interrupt sources are pending.",	1);
	mid = add_struc_member(id,"TCR",	0X4,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X4,	"Timer Control Register. The TCR is used to control the Timer Counter functions. The Timer Counter can be disabled or reset through the TCR.",	1);
	mid = add_struc_member(id,"TC",	0X8,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X8,	"Timer Counter. The 32 bit TC is incremented every PR+1 cycles of PCLK. The TC is controlled through the TCR.",	1);
	mid = add_struc_member(id,"PR",	0XC,	0x20000400,	-1,	4);
	set_member_cmt(id,	0XC,	"Prescale Register. The Prescale Counter (below) is equal to this value, the next clock increments the TC and clears the PC.",	1);
	mid = add_struc_member(id,"PC",	0X10,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X10,	"Prescale Counter. The 32 bit PC is a counter which is incremented to the value stored in PR. When the value in PR is reached, the TC is incremented and the PC is cleared. The PC is observable and controllable through the bus interface.",	1);
	mid = add_struc_member(id,"MCR",	0X14,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X14,	"Match Control Register. The MCR is used to control if an interrupt is generated and if the TC is reset when a Match occurs.",	1);
	mid = add_struc_member(id,"MR",	0X18,	0x20000400,	-1,	16);
	set_member_cmt(id,	0X18,	"Match Register. MR can be enabled through the MCR to reset the TC, stop both the TC and PC, and/or generate an interrupt every time MR matches the TC.",	1);
	mid = add_struc_member(id,"CCR",	0X28,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X28,	"Capture Control Register. The CCR controls which edges of the capture inputs are used to load the Capture Registers and whether or not an interrupt is generated when a capture takes place.",	1);
	mid = add_struc_member(id,"CR",	0X2C,	0x20000400,	-1,	16);
	set_member_cmt(id,	0X2C,	"Capture Register. CR is loaded with the value of TC when there is an event on the CAPn.0 input.",	1);
	mid = add_struc_member(id,"EMR",	0X3C,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X3C,	"External Match Register. The EMR controls the external match pins MATn.0-3 (MAT0.0-3 and MAT1.0-3 respectively).",	1);
	mid = add_struc_member(id,"RESERVED0",	0X40,	0x20000400,	-1,	48);
	mid = add_struc_member(id,"CTCR",	0X70,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X70,	"Count Control Register. The CTCR selects between Timer and Counter mode, and in Counter mode selects the signal and edge(s) for counting.",	1);
	
	id = get_struc_id("RTC_TIME_Type");
	mid = add_struc_member(id,"SEC",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"MIN",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"HOUR",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"DOM",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"DOW",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"DOY",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"MONTH",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"YEAR",	0X1C,	0x20000400,	-1,	4);
	
	id = get_struc_id("LPC_WDT_TypeDef");
	mid = add_struc_member(id,"WDMOD",	0,	0x000400,	-1,	1);
	mid = add_struc_member(id,"RESERVED0",	0X1,	0x000400,	-1,	3);
	mid = add_struc_member(id,"WDTC",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"WDFEED",	0X8,	0x000400,	-1,	1);
	mid = add_struc_member(id,"RESERVED1",	0X9,	0x000400,	-1,	3);
	mid = add_struc_member(id,"WDTV",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"WDCLKSEL",	0X10,	0x20000400,	-1,	4);
	
	id = get_struc_id("LPC_ADC_TypeDef");
	mid = add_struc_member(id,"ADCR",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ADGDR",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"RESERVED0",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ADINTEN",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ADDR0",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ADDR1",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ADDR2",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ADDR3",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ADDR4",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ADDR5",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ADDR6",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ADDR7",	0X2C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ADSTAT",	0X30,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ADTRM",	0X34,	0x20000400,	-1,	4);
	
	id = get_struc_id("LPC_PWM_TypeDef");
	mid = add_struc_member(id,"IR",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"TCR",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"TC",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"PR",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"PC",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"MCR",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"MR",	0X18,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"CCR",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"CR",	0X2C,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"RESERVED0",	0X3C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"MR4",	0X40,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"MR5",	0X44,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"MR6",	0X48,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"PCR",	0X4C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"LER",	0X50,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"RESERVED1",	0X54,	0x20000400,	-1,	28);
	mid = add_struc_member(id,"CTCR",	0X70,	0x20000400,	-1,	4);
	
	id = get_struc_id("LPC_UART_TypeDef");
	mid = add_struc_member(id,"RBR_THR_DLL",	0,	0x000400,	-1,	1);
	mid = add_struc_member(id,"RESERVED0",	0X1,	0x000400,	-1,	3);
	mid = add_struc_member(id,"DLM_IER",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"IIR_FCR",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"LCR",	0XC,	0x000400,	-1,	1);
	mid = add_struc_member(id,"RESERVED1",	0XD,	0x000400,	-1,	3);
	mid = add_struc_member(id,"MCR",	0X10,	0x000400,	-1,	1);
	mid = add_struc_member(id,"RESERVED2",	0X11,	0x000400,	-1,	3);
	mid = add_struc_member(id,"LSR",	0X14,	0x000400,	-1,	1);
	mid = add_struc_member(id,"RESERVED3",	0X15,	0x000400,	-1,	3);
	mid = add_struc_member(id,"MSR",	0X18,	0x000400,	-1,	1);
	mid = add_struc_member(id,"RESERVED4",	0X19,	0x000400,	-1,	3);
	mid = add_struc_member(id,"SCR",	0X1C,	0x000400,	-1,	1);
	mid = add_struc_member(id,"RESERVED5",	0X1D,	0x000400,	-1,	3);
	mid = add_struc_member(id,"ACR",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ICR",	0X24,	0x000400,	-1,	1);
	mid = add_struc_member(id,"RESERVED6",	0X25,	0x000400,	-1,	3);
	mid = add_struc_member(id,"FDR",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"RESERVED7",	0X2C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"TER",	0X30,	0x000400,	-1,	1);
	mid = add_struc_member(id,"RESERVED8",	0X31,	0x000400,	-1,	27);
	mid = add_struc_member(id,"RS485CTRL",	0X4C,	0x000400,	-1,	1);
	mid = add_struc_member(id,"RESERVED9",	0X4D,	0x000400,	-1,	3);
	mid = add_struc_member(id,"ADRMATCH",	0X50,	0x000400,	-1,	1);
	mid = add_struc_member(id,"RESERVED10",	0X51,	0x000400,	-1,	3);
	mid = add_struc_member(id,"RS485DLY",	0X54,	0x000400,	-1,	1);
	mid = add_struc_member(id,"RESERVED11",	0X55,	0x000400,	-1,	3);
	mid = add_struc_member(id,"FIFOLVL",	0X58,	0x000400,	-1,	1);
	
	id = get_struc_id("LPC_SPI_TypeDef");
	mid = add_struc_member(id,"SPCR",	0,	0x20000400,	-1,	4);
	set_member_cmt(id,	0,	"SPI Control Register",	1);
	mid = add_struc_member(id,"SPSR",	0X4,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X4,	"SPI Status Register",	1);
	mid = add_struc_member(id,"SPDR",	0X8,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X8,	"SPI Data Register",	1);
	mid = add_struc_member(id,"SPCCR",	0XC,	0x20000400,	-1,	4);
	set_member_cmt(id,	0XC,	"SPI Clock Counter Register",	1);
	mid = add_struc_member(id,"RESERVED0",	0X10,	0x20000400,	-1,	12);
	mid = add_struc_member(id,"SPINT",	0X1C,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X1C,	"SPI Interrupt Flag Register",	1);
	
	id = get_struc_id("LPC_SSP_TypeDef");
	mid = add_struc_member(id,"CR0",	0,	0x20000400,	-1,	4);
	set_member_cmt(id,	0,	"Control Register 0",	1);
	mid = add_struc_member(id,"CR1",	0X4,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X4,	"Control Register 1",	1);
	mid = add_struc_member(id,"DR",	0X8,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X8,	"Data Register",	1);
	mid = add_struc_member(id,"SR",	0XC,	0x20000400,	-1,	4);
	set_member_cmt(id,	0XC,	"Status Register",	1);
	mid = add_struc_member(id,"CPSR",	0X10,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X10,	"Clock Prescale Register",	1);
	mid = add_struc_member(id,"IMSC",	0X14,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X14,	"Interrupt Mask Set and Clear Register",	1);
	mid = add_struc_member(id,"RIS",	0X18,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X18,	"Raw Interrupt Status Register",	1);
	mid = add_struc_member(id,"MIS",	0X1C,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X1C,	"Masked Interrupt Status Register",	1);
	mid = add_struc_member(id,"ICR",	0X20,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X20,	"SSPICR Interrupt Clear Register",	1);
	mid = add_struc_member(id,"DMACR",	0X24,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X24,	"DMA Control Register",	1);
	
	id = get_struc_id("LPC_I2C_TypeDef");
	mid = add_struc_member(id,"I2CONSET",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"I2STAT",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"I2DAT",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"I2ADR0",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"I2SCLH",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"I2SCLL",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"I2CONCLR",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"MMCTRL",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"I2ADR1",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"I2ADR2",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"I2ADR3",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"I2DATA_BUFFER",	0X2C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"I2MASK0",	0X30,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"I2MASK1",	0X34,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"I2MASK2",	0X38,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"I2MASK3",	0X3C,	0x20000400,	-1,	4);
	
	id = get_struc_id("LPC_CANAF_RAM_TypeDef");
	mid = add_struc_member(id,"mask",	0,	0x20000400,	-1,	2048);
	
	id = get_struc_id("LPC_CANAF_TypeDef");
	mid = add_struc_member(id,"AFMR",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"SFF_sa",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"SFF_GRP_sa",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"EFF_sa",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"EFF_GRP_sa",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ENDofTable",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"LUTerrAd",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"LUTerr",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"FCANIE",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"FCANIC0",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"FCANIC1",	0X28,	0x20000400,	-1,	4);
	
	id = get_struc_id("LPC_CANCR_TypeDef");
	mid = add_struc_member(id,"CANTxSR",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"CANRxSR",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"CANMSR",	0X8,	0x20000400,	-1,	4);
	
	id = get_struc_id("LPC_CAN_TypeDef");
	mid = add_struc_member(id,"MOD",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"CMR",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"GSR",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ICR",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"IER",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"BTR",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"EWL",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"SR",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"RFS",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"RID",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"RDA",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"RDB",	0X2C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"TFI1",	0X30,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"TID1",	0X34,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"TDA1",	0X38,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"TDB1",	0X3C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"TFI2",	0X40,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"TID2",	0X44,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"TDA2",	0X48,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"TDB2",	0X4C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"TFI3",	0X50,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"TID3",	0X54,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"TDA3",	0X58,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"TDB3",	0X5C,	0x20000400,	-1,	4);
	
	id = get_struc_id("AF_SectionDef");
	mid = add_struc_member(id,"FullCAN_Sec",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_member_cmt(id,	0,	"The pointer point to FullCAN_Entry",	1);
	mid = add_struc_member(id,"FC_NumEntry",	0X4,	0x000400,	-1,	1);
	set_member_cmt(id,	0X4,	"FullCAN Entry Number",	1);
	mid = add_struc_member(id,"field_5",	0X5,	0x000400,	-1,	3);
	mid = add_struc_member(id,"SFF_Sec",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_member_cmt(id,	0X8,	"The pointer point to SFF_Entry",	1);
	mid = add_struc_member(id,"SFF_NumEntry",	0XC,	0x000400,	-1,	1);
	set_member_cmt(id,	0XC,	"Standard ID Entry Number",	1);
	mid = add_struc_member(id,"field_D",	0XD,	0x000400,	-1,	3);
	mid = add_struc_member(id,"SFF_GPR_Sec",	0X10,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_member_cmt(id,	0X10,	"The pointer point to SFF_GPR_Entry",	1);
	mid = add_struc_member(id,"SFF_GPR_NumEntry",	0X14,	0x000400,	-1,	1);
	set_member_cmt(id,	0X14,	"Group Standard ID Entry Number",	1);
	mid = add_struc_member(id,"field_15",	0X15,	0x000400,	-1,	3);
	mid = add_struc_member(id,"EFF_Sec",	0X18,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_member_cmt(id,	0X18,	"The pointer point to EFF_Entry",	1);
	mid = add_struc_member(id,"EFF_NumEntry",	0X1C,	0x000400,	-1,	1);
	set_member_cmt(id,	0X1C,	"Extended ID Entry Number",	1);
	mid = add_struc_member(id,"field_1D",	0X1D,	0x000400,	-1,	3);
	mid = add_struc_member(id,"EFF_GPR_Sec",	0X20,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_member_cmt(id,	0X20,	"The pointer point to EFF_GPR_Entry",	1);
	mid = add_struc_member(id,"EFF_GPR_NumEntry",	0X24,	0x000400,	-1,	1);
	set_member_cmt(id,	0X24,	"Group Extended ID Entry Number",	1);
	mid = add_struc_member(id,"field_25",	0X25,	0x000400,	-1,	3);
	
	id = get_struc_id("SFF_Entry");
	mid = add_struc_member(id,"controller",	0,	0x000400,	-1,	1);
	set_member_cmt(id,	0,	"CAN Controller selection",	1);
	mid = add_struc_member(id,"disable",	0X1,	0x000400,	-1,	1);
	set_member_cmt(id,	0X1,	"Disable bit",	1);
	mid = add_struc_member(id,"id_11",	0X2,	0x10000400,	-1,	2);
	set_member_cmt(id,	0X2,	"Standard ID, should be 11-bit value",	1);
	
	id = get_struc_id("ITM_Type");
	mid = add_struc_member(id,"PORT",	0,	0x20000400,	-1,	128);
	set_member_cmt(id,	0,	"ITM Stimulus Port Registers",	1);
	mid = add_struc_member(id,"RESERVED0",	0X80,	0x20000400,	-1,	3456);
	mid = add_struc_member(id,"TER",	0XE00,	0x20000400,	-1,	4);
	set_member_cmt(id,	0XE00,	"ITM Trace Enable Register",	1);
	mid = add_struc_member(id,"RESERVED1",	0XE04,	0x20000400,	-1,	60);
	mid = add_struc_member(id,"TPR",	0XE40,	0x20000400,	-1,	4);
	set_member_cmt(id,	0XE40,	"ITM Trace Privilege Register",	1);
	mid = add_struc_member(id,"RESERVED2",	0XE44,	0x20000400,	-1,	60);
	mid = add_struc_member(id,"TCR",	0XE80,	0x20000400,	-1,	4);
	set_member_cmt(id,	0XE80,	"ITM Trace Control Register",	1);
	
	id = get_struc_id("CoreDebug_Type");
	mid = add_struc_member(id,"DHCSR",	0,	0x20000400,	-1,	4);
	set_member_cmt(id,	0,	"Debug Halting Control and Status Register",	1);
	mid = add_struc_member(id,"DCRSR",	0X4,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X4,	"Debug Core Register Selector Register",	1);
	mid = add_struc_member(id,"DCRDR",	0X8,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X8,	"Debug Core Register Data Register",	1);
	mid = add_struc_member(id,"DEMCR",	0XC,	0x20000400,	-1,	4);
	set_member_cmt(id,	0XC,	"Debug Exception and Monitor Control Register",	1);
	
	id = get_struc_id("OS_MSG_Q");
	mid = add_struc_member(id,"InPtr",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"OutPtr",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"NbrEntriesSize",	0X8,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"NbrEntries",	0XA,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"NbrEntriesMax",	0XC,	0x10000400,	-1,	2);
	
	id = get_struc_id("OS_TCB");
	mid = add_struc_member(id,"StkPtr",	0,	0x20500400,	0,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"ExtPtr",	0X4,	0x20500400,	0,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"StkLimitPtr",	0X8,	0x20500400,	0,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"NextPtr",	0XC,	0x20500400,	0,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"PrevPtr",	0X10,	0x20500400,	0,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"TickNextPtr",	0X14,	0x20500400,	0,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"TickPrevPtr",	0X18,	0x20500400,	0,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"TickSpokePtr",	0X1C,	0x20500400,	0,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"NamePtr",	0X20,	0x20500400,	0,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"StkBasePtr",	0X24,	0x20500400,	0,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"TaskEntryAddr",	0X28,	0x20500400,	0,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"TaskEntryArg",	0X2C,	0x20500400,	0,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"PendDataTblPtr",	0X30,	0x20500400,	0,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"PendOn",	0X34,	0x000400,	-1,	1);
	mid = add_struc_member(id,"PendStatus",	0X35,	0x000400,	-1,	1);
	mid = add_struc_member(id,"TaskState",	0X36,	0x000400,	-1,	1);
	mid = add_struc_member(id,"Prio",	0X37,	0x000400,	-1,	1);
	mid = add_struc_member(id,"StkSize",	0X38,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"Opt",	0X3C,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"PendDataTblEntries",	0X3E,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"TS",	0X40,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"SemCtr",	0X44,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"TickCtrPrev",	0X48,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"TickCtrMatch",	0X4C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"TickRemain",	0X50,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"TimeQuanta",	0X54,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"TimeQuantaCtr",	0X58,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"MsgPtr",	0X5C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"MsgSize",	0X60,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"MsgQ",	0X64,	0x60000400,	get_struc_id("OS_MSG_Q"),	14);
	mid = add_struc_member(id,"MsgQPendTime",	0X74,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"MsgQPendTimeMax",	0X78,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_7C",	0X7C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"CtxSwCtr",	0X80,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"CyclesDelta",	0X84,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"CyclesStart",	0X88,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"CyclesTotal",	0X8C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"CyclesTotalPrev",	0X90,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"SemPendTime",	0X94,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"SemPendTimeMax",	0X98,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"IntDisTimeMax",	0X9C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"SchedLockTimeMax",	0XA0,	0x20000400,	-1,	4);
	
	id = get_struc_id("OS_MSG_POOL");
	mid = add_struc_member(id,"NextPtr",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"NbrFree",	0X4,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"NbrUsed",	0X6,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"NbrUsedMax",	0X8,	0x000400,	-1,	1);
	
	id = get_struc_id("OS_MSG");
	mid = add_struc_member(id,"NextPtr",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"MsgPtr",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"MsgSize",	0X8,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"field_A",	0XA,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"MsgTS",	0XC,	0x20000400,	-1,	4);
	
	id = get_struc_id("OS_RDY_LIST");
	mid = add_struc_member(id,"HeadPtr",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_member_cmt(id,	0,	"Pointer to task that will run at selected priority",	1);
	mid = add_struc_member(id,"TailPtr",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_member_cmt(id,	0X4,	"Pointer to last task          at selected priority",	1);
	mid = add_struc_member(id,"NbrEntries",	0X8,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X8,	"Number of entries             at selected priority",	1);
	
	id = get_struc_id("OS_TICK_SPOKE");
	mid = add_struc_member(id,"FirstPtr",	0,	0x20000400,	-1,	4);
	set_member_cmt(id,	0,	"Pointer to list of tasks in tick spoke",	1);
	mid = add_struc_member(id,"NbrEntries",	0X4,	0x10000400,	-1,	2);
	set_member_cmt(id,	0X4,	"Current number of entries in the tick spoke",	1);
	mid = add_struc_member(id,"NbrEntriesMax",	0X6,	0x10000400,	-1,	2);
	set_member_cmt(id,	0X6,	"Peak number of entries in the tick spoke",	1);
	
	id = get_struc_id("OS_PEND_LIST");
	mid = add_struc_member(id,"field_0",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_4",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_8",	0X8,	0x20000400,	-1,	4);
	
	id = get_struc_id("OS_SEM");
	mid = add_struc_member(id,"Type",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"NamePtr",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"PendList",	0X8,	0x60000400,	get_struc_id("OS_PEND_LIST"),	12);
	
	id = get_struc_id("SysTick_Type");
	mid = add_struc_member(id,"CTRL",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"LOAD",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"VAL",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"CALIB",	0XC,	0x20000400,	-1,	4);
	
	id = get_struc_id("NVIC_Type");
	mid = add_struc_member(id,"ISER",	0,	0x20000400,	-1,	32);
	set_member_cmt(id,	0,	"Interrupt Set Enable Register",	1);
	mid = add_struc_member(id,"RESERVED0",	0X20,	0x20000400,	-1,	96);
	mid = add_struc_member(id,"ICER",	0X80,	0x20000400,	-1,	32);
	set_member_cmt(id,	0X80,	"Interrupt Clear Enable Register",	1);
	mid = add_struc_member(id,"RESERVED1",	0XA0,	0x20000400,	-1,	96);
	mid = add_struc_member(id,"ISPR",	0X100,	0x20000400,	-1,	32);
	set_member_cmt(id,	0X100,	"Interrupt Set Pending Register",	1);
	mid = add_struc_member(id,"RESERVED2",	0X120,	0x20000400,	-1,	96);
	mid = add_struc_member(id,"ICPR",	0X180,	0x20000400,	-1,	32);
	set_member_cmt(id,	0X180,	"Interrupt Clear Pending Register",	1);
	mid = add_struc_member(id,"RESERVED3",	0X1A0,	0x20000400,	-1,	96);
	mid = add_struc_member(id,"IABR",	0X200,	0x20000400,	-1,	32);
	set_member_cmt(id,	0X200,	"Interrupt Active bit Register",	1);
	mid = add_struc_member(id,"RESERVED4",	0X220,	0x20000400,	-1,	224);
	mid = add_struc_member(id,"IP",	0X300,	0x000400,	-1,	240);
	set_member_cmt(id,	0X300,	"Interrupt Priority Register (8Bit wide)",	1);
	mid = add_struc_member(id,"RESERVED5",	0X3F0,	0x20000400,	-1,	2064);
	
	id = get_struc_id("SCB_Type");
	mid = add_struc_member(id,"CPUID",	0,	0x20000400,	-1,	4);
	set_member_cmt(id,	0,	"CPUID Base Register",	1);
	mid = add_struc_member(id,"ICSR",	0X4,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X4,	"CPU_REG_NVIC_INT_CTRL Interrupt Control and State Register",	1);
	mid = add_struc_member(id,"VTOR",	0X8,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X8,	"Vector Table Offset Register",	1);
	mid = add_struc_member(id,"AIRCR",	0XC,	0x20000400,	-1,	4);
	set_member_cmt(id,	0XC,	"Application Interrupt and Reset Control Register",	1);
	mid = add_struc_member(id,"SCR",	0X10,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X10,	"System Control Register",	1);
	mid = add_struc_member(id,"CCR",	0X14,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X14,	"Configuration Control Register",	1);
	mid = add_struc_member(id,"SHP",	0X18,	0x000400,	-1,	12);
	set_member_cmt(id,	0X18,	"CPU_REG_NVIC_SHPRIx System Handlers Priority Registers (4-7, 8-11, 12-15)",	1);
	mid = add_struc_member(id,"SHCSR",	0X24,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X24,	"CPU_REG_NVIC_SHCSR System Handler Control and State Register",	1);
	mid = add_struc_member(id,"CFSR",	0X28,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X28,	"Configurable Fault Status Register",	1);
	mid = add_struc_member(id,"HFSR",	0X2C,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X2C,	"HardFault Status Register",	1);
	mid = add_struc_member(id,"DFSR",	0X30,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X30,	"Debug Fault Status Register",	1);
	mid = add_struc_member(id,"MMFAR",	0X34,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X34,	"MemManage Fault Address Register",	1);
	mid = add_struc_member(id,"BFAR",	0X38,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X38,	"BusFault Address Register",	1);
	mid = add_struc_member(id,"AFSR",	0X3C,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X3C,	"Auxiliary Fault Status Register",	1);
	mid = add_struc_member(id,"PFR",	0X40,	0x20000400,	-1,	8);
	set_member_cmt(id,	0X40,	"Processor Feature Register",	1);
	mid = add_struc_member(id,"DFR",	0X48,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X48,	"Debug Feature Register",	1);
	mid = add_struc_member(id,"ADR",	0X4C,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X4C,	"Auxiliary Feature Register",	1);
	mid = add_struc_member(id,"MMFR",	0X50,	0x20000400,	-1,	16);
	set_member_cmt(id,	0X50,	"Memory Model Feature Register",	1);
	mid = add_struc_member(id,"ISAR",	0X60,	0x20000400,	-1,	20);
	set_member_cmt(id,	0X60,	"Instruction Set Attributes Register",	1);
	mid = add_struc_member(id,"RESERVED0",	0X74,	0x20000400,	-1,	20);
	mid = add_struc_member(id,"CPACR",	0X88,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X88,	"Coprocessor Access Control Register",	1);
	
	id = get_struc_id("SCnSCB_Type");
	mid = add_struc_member(id,"RESERVED0",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ICTR",	0X4,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X4,	"Interrupt Controller Type Register",	1);
	mid = add_struc_member(id,"ACTLR",	0X8,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X8,	"Auxiliary Control Register",	1);
	mid = add_struc_member(id,"RESERVED1",	0XC,	0x20000400,	-1,	4);
	
	id = get_struc_id("DWT_Type");
	mid = add_struc_member(id,"CTRL",	0,	0x20000400,	-1,	4);
	set_member_cmt(id,	0,	"Control Register",	1);
	mid = add_struc_member(id,"CYCCNT",	0X4,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X4,	"Cycle Count Register",	1);
	mid = add_struc_member(id,"CPICNT",	0X8,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X8,	"CPI Count Register",	1);
	mid = add_struc_member(id,"EXCCNT",	0XC,	0x20000400,	-1,	4);
	set_member_cmt(id,	0XC,	"Exception Overhead Count Register",	1);
	mid = add_struc_member(id,"SLEEPCNT",	0X10,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X10,	"Sleep Count Register",	1);
	mid = add_struc_member(id,"LSUCNT",	0X14,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X14,	"LSU Count Register",	1);
	mid = add_struc_member(id,"FOLDCNT",	0X18,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X18,	"Folded-instruction Count Register",	1);
	mid = add_struc_member(id,"PCSR",	0X1C,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X1C,	"Program Counter Sample Register",	1);
	mid = add_struc_member(id,"COMP0",	0X20,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X20,	"Comparator Register 0",	1);
	mid = add_struc_member(id,"MASK0",	0X24,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X24,	"Mask Register 0",	1);
	mid = add_struc_member(id,"FUNCTION0",	0X28,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X28,	"Function Register 0",	1);
	mid = add_struc_member(id,"RESERVED0",	0X2C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"COMP1",	0X30,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X30,	"Comparator Register 1",	1);
	mid = add_struc_member(id,"MASK1",	0X34,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X34,	"Mask Register 1",	1);
	mid = add_struc_member(id,"FUNCTION1",	0X38,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X38,	"Function Register 1",	1);
	mid = add_struc_member(id,"RESERVED1",	0X3C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"COMP2",	0X40,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X40,	"Comparator Register 2",	1);
	mid = add_struc_member(id,"MASK2",	0X44,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X44,	"Mask Register 2",	1);
	mid = add_struc_member(id,"FUNCTION2",	0X48,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X48,	"Function Register 2",	1);
	mid = add_struc_member(id,"RESERVED2",	0X4C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"COMP3",	0X50,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X50,	"Comparator Register 3",	1);
	mid = add_struc_member(id,"MASK3",	0X54,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X54,	"Mask Register 3",	1);
	mid = add_struc_member(id,"FUNCTION3",	0X58,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X58,	"Function Register 3",	1);
	
	id = get_struc_id("DjiPacket");
	mid = add_struc_member(id,"delimiter",	0,	0x000400,	-1,	1);
	mid = add_struc_member(id,"protover_length",	0X1,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"hdr_crc",	0X3,	0x000400,	-1,	1);
	mid = add_struc_member(id,"sender",	0X4,	0x000400,	-1,	1);
	mid = add_struc_member(id,"receiver",	0X5,	0x000400,	-1,	1);
	mid = add_struc_member(id,"seqctr",	0X6,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"ack",	0X8,	0x000400,	-1,	1);
	mid = add_struc_member(id,"cmdset",	0X9,	0x000400,	-1,	1);
	mid = add_struc_member(id,"cmd",	0XA,	0x000400,	-1,	1);
	mid = add_struc_member(id,"payload",	0XB,	0x000400,	-1,	1);
	
	id = get_struc_id("RadioStatus");
	mid = add_struc_member(id,"field_0",	0,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_1",	0X1,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_2",	0X2,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_3",	0X3,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"field_5",	0X5,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"field_7",	0X7,	0x000400,	-1,	1);
	
	id = get_struc_id("PktPayloadSET06CMDF0");
	mid = add_struc_member(id,"field_0",	0,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_1",	0X1,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_2",	0X2,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_3",	0X3,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"field_5",	0X5,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"field_7",	0X7,	0x000400,	-1,	1);
	
	id = get_struc_id("DjiPacketHead");
	mid = add_struc_member(id,"delimiter",	0,	0x000400,	-1,	1);
	mid = add_struc_member(id,"protover_length",	0X1,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"hdr_crc",	0X3,	0x000400,	-1,	1);
	mid = add_struc_member(id,"sender",	0X4,	0x000400,	-1,	1);
	mid = add_struc_member(id,"receiver",	0X5,	0x000400,	-1,	1);
	mid = add_struc_member(id,"seqctr",	0X6,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"ack",	0X8,	0x000400,	-1,	1);
	mid = add_struc_member(id,"cmdset",	0X9,	0x000400,	-1,	1);
	mid = add_struc_member(id,"cmd",	0XA,	0x000400,	-1,	1);
	
	id = get_struc_id("PktPayloadS09C12");
	mid = add_struc_member(id,"flag_20001A28_D_E",	0,	0x000400,	-1,	1);
	mid = add_struc_member(id,"flag_20001A28_A_B",	0X1,	0x000400,	-1,	1);
	mid = add_struc_member(id,"attenuation",	0X2,	0x000400,	-1,	1);
	mid = add_struc_member(id,"flag_20001A28_C",	0X3,	0x000400,	-1,	1);
	
	id = get_struc_id("DjiPacketS09C12");
	mid = add_struc_member(id,"head",	0,	0x60000400,	get_struc_id("DjiPacketHead"),	11);
	mid = add_struc_member(id,"payload",	0XB,	0x60000400,	get_struc_id("PktPayloadS09C12"),	4);
	return id;
}

//------------------------------------------------------------------------
// Information about structure types

static Structures(void) {
        auto id;
        begin_type_updating(UTP_STRUCT);
	id = Structures_0(id);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_0(void) {
        auto x;
#define id x

	update_extra_cmt		(0XA000,	E_PREV + 0,	"; File Name   : C1_FW_V01.06.0000_mi06.elf");
	update_extra_cmt		(0XA000,	E_PREV + 1,	"; Format      : ELF for ARM (Executable)");
	update_extra_cmt		(0XA000,	E_PREV + 2,	"; Imagebase   : A000");
	update_extra_cmt		(0XA000,	E_PREV + 3,	"; ");
	update_extra_cmt		(0XA000,	E_PREV + 4,	"; Options     : EF_ARM_VFP_FLOAT");
	update_extra_cmt		(0XA000,	E_PREV + 5,	"; EABI version: 5");
	update_extra_cmt		(0XA000,	E_PREV + 6,	"; ");
	create_dword	(x=0XA000);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XA000,	"__Vectors");
	create_dword	(x=0XA004);
	make_array	(x,	0XF);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XA040,	"External Interrupts",	1);
	create_dword	(x=0XA040);
	make_array	(x,	0X23);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_byte	(0XA0CC);
	create_byte	(0XA0CD);
	make_array	(0XA0CD,	0X3);
	create_dword	(0XA0D0);
	make_array	(0XA0D0,	0XC);
	create_dword	(0XA100);
	make_array	(0XA100,	0X2);
	create_dword	(0XA108);
	make_array	(0XA108,	0X1E);
	create_insn	(0XA180);
	create_insn	(x=0XA1AA);
	op_hex		(x,	1);
	create_insn	(x=0XA1F0);
	op_hex		(x,	1);
	create_insn	(0XA210);
	create_insn	(0XA230);
	create_dword	(x=0XA234);
	make_array	(x,	0X4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0XA234,	"start");
	create_dword	(x=0XA244);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0XA248);
	create_insn	(0XA254);
	create_insn	(x=0XA262);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA26C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA26E,	"lev",	0);
	create_insn	(x=0XA26E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA276);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0XA27C);
	create_insn	(x=0XA280);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA282,	"lev",	0);
	create_insn	(x=0XA282);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0XA28A);
	set_name	(0XA28A,	"set_to_default_28A");
	create_insn	(x=0XA28E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA294);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA296);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA298);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA29A);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA29C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA29E);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA2A0);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA2B0);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA2BE);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA2C0);
	op_plain_offset	(x,	1,	0X1000001C);
	op_plain_offset	(x,	129,	0X1000001C);
	create_insn	(x=0XA2D0);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA2D2);
	op_plain_offset	(x,	1,	0X1000001C);
	op_plain_offset	(x,	129,	0X1000001C);
	create_insn	(x=0XA2DE);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA2E0);
	op_plain_offset	(x,	1,	0X1000001C);
	op_plain_offset	(x,	129,	0X1000001C);
	create_insn	(x=0XA2EE);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA2F2);
	op_plain_offset	(x,	1,	0X1000001C);
	op_plain_offset	(x,	129,	0X1000001C);
	create_insn	(x=0XA300);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA316);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA31A);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA31E);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA320);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA322);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA324);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA326);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA328);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA32A);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA32C);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA32E);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA330);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA332);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA334);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA336);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA338);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA33A);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA368);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA390);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0XA396);
	set_name	(0XA396,	"packet_unkn_A396");
	create_insn	(x=0XA39A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA3A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA3A6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA3AA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA3BE,	"seed",	0);
	set_cmt	(0XA3C2,	"len",	0);
	set_cmt	(0XA3C4,	"buf",	0);
	create_insn	(x=0XA3CE);
	op_plain_offset	(x,	1,	0X1000001C);
	op_plain_offset	(x,	129,	0X1000001C);
	create_insn	(x=0XA3D0);
	op_plain_offset	(x,	1,	0X1000001C);
	op_plain_offset	(x,	129,	0X1000001C);
	set_cmt	(0XA3D2,	"len",	0);
	set_cmt	(0XA3D4,	"buf",	0);
	set_cmt	(0XA3D6,	"seed",	0);
	create_insn	(x=0XA3DC);
	op_plain_offset	(x,	1,	0X1000001C);
	op_plain_offset	(x,	129,	0X1000001C);
	create_insn	(x=0XA3DE);
	op_stkvar	(x,	1);
	create_insn	(x=0XA3E2);
	op_stkvar	(x,	1);
	create_insn	(x=0XA3E6);
	op_stkvar	(x,	1);
	create_insn	(x=0XA3EC);
	op_stkvar	(x,	1);
	create_insn	(x=0XA3F4);
	op_stkvar	(x,	1);
	create_insn	(x=0XA3FA);
	op_stkvar	(x,	1);
	create_insn	(x=0XA400);
	op_stkvar	(x,	1);
	create_insn	(x=0XA406);
	op_stkvar	(x,	1);
	create_insn	(x=0XA40C);
	op_stkvar	(x,	1);
	create_insn	(x=0XA412);
	op_stkvar	(x,	1);
	create_insn	(x=0XA418);
	op_stkvar	(x,	1);
	create_insn	(x=0XA41E);
	op_stkvar	(x,	1);
	create_insn	(x=0XA424);
	op_stkvar	(x,	1);
	create_insn	(x=0XA42A);
	op_stkvar	(x,	1);
	create_insn	(x=0XA430);
	op_stkvar	(x,	1);
	create_insn	(x=0XA436);
	op_stkvar	(x,	1);
	create_insn	(x=0XA43C);
	op_plain_offset	(x,	1,	0X1000001C);
	op_plain_offset	(x,	129,	0X1000001C);
	create_insn	(x=0XA440);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA446);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA452);
	op_stkvar	(x,	1);
	create_insn	(x=0XA458);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA45A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA464);
	op_hex		(x,	1);
	create_insn	(x=0XA468);
	op_hex		(x,	1);
	create_insn	(x=0XA472);
	op_hex		(x,	1);
	create_insn	(0XA478);
	create_insn	(x=0XA486);
	op_stkvar	(x,	1);
	create_insn	(x=0XA488);
	op_stkvar	(x,	1);
	create_insn	(x=0XA48C);
	op_stkvar	(x,	1);
	create_insn	(x=0XA490);
	op_stkvar	(x,	1);
	create_insn	(x=0XA494);
	op_stkvar	(x,	1);
	create_insn	(x=0XA4A6);
	op_plain_offset	(x,	1,	0X1000001C);
	op_plain_offset	(x,	129,	0X1000001C);
	create_insn	(x=0XA4A8);
	op_plain_offset	(x,	1,	0X1000001C);
	op_plain_offset	(x,	129,	0X1000001C);
	create_insn	(x=0XA4AA);
	op_plain_offset	(x,	1,	0X1000001C);
	op_plain_offset	(x,	129,	0X1000001C);
	create_insn	(x=0XA4AC);
	op_plain_offset	(x,	1,	0X1000001C);
	op_plain_offset	(x,	129,	0X1000001C);
	create_insn	(x=0XA4B0);
	op_hex		(x,	1);
	create_insn	(x=0XA4B4);
	op_hex		(x,	1);
	create_insn	(x=0XA4B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA4BA);
	op_hex		(x,	1);
	create_insn	(x=0XA4C0);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA4C8);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA4CC);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA4D6);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA4DA);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA4E2);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA4E6);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA4EE);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA4F2);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA4FA);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA4FE);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA506);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA50A);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA518);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA520);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA524);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA52C);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA53A);
	op_hex		(x,	1);
	create_insn	(x=0XA548);
	op_plain_offset	(x,	1,	0X10000000);
	op_plain_offset	(x,	129,	0X10000000);
	create_insn	(x=0XA54C);
	op_stkvar	(x,	1);
	create_insn	(0XA556);
	create_insn	(x=0XA55C);
	op_plain_offset	(x,	1,	0X10000000);
	op_plain_offset	(x,	129,	0X10000000);
	create_insn	(x=0XA560);
	op_stkvar	(x,	1);
	create_insn	(x=0XA564);
	op_plain_offset	(x,	1,	0X100005D8);
	op_plain_offset	(x,	129,	0X100005D8);
	create_insn	(x=0XA568);
	op_stkvar	(x,	1);
	create_insn	(x=0XA56C);
	op_plain_offset	(x,	1,	0X100005D8);
	op_plain_offset	(x,	129,	0X100005D8);
	create_insn	(0XA574);
	create_insn	(x=0XA576);
	op_stkvar	(x,	1);
	create_insn	(x=0XA584);
	op_plain_offset	(x,	1,	0X10000000);
	op_plain_offset	(x,	129,	0X10000000);
	create_insn	(x=0XA586);
	op_stkvar	(x,	1);
	create_insn	(x=0XA58A);
	op_plain_offset	(x,	1,	0X100005D8);
	op_plain_offset	(x,	129,	0X100005D8);
	create_insn	(x=0XA58E);
	op_stkvar	(x,	1);
	create_insn	(x=0XA592);
	op_plain_offset	(x,	1,	0X100005D8);
	op_plain_offset	(x,	129,	0X100005D8);
	create_insn	(x=0XA594);
	op_stkvar	(x,	1);
	create_insn	(x=0XA59A);
	op_stkvar	(x,	1);
	create_insn	(x=0XA5A6);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(0XA5AE);
	create_insn	(0XA5B0);
	create_insn	(x=0XA5B6);
	op_hex		(x,	1);
	create_insn	(x=0XA5BE);
	op_hex		(x,	1);
	create_insn	(x=0XA5D2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA5E2);
	op_plain_offset	(x,	1,	0X10000000);
	op_plain_offset	(x,	129,	0X10000000);
	create_insn	(x=0XA5F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA5FA,	"RTCx",	0);
	set_cmt	(0XA600,	"NewState",	0);
	set_cmt	(0XA602,	"RTCx",	0);
	set_cmt	(0XA60C,	"WDTMode",	0);
	set_cmt	(0XA60E,	"ClkSrc",	0);
	create_insn	(x=0XA620);
	op_plain_offset	(x,	1,	0X10000000);
	op_plain_offset	(x,	129,	0X10000000);
	set_cmt	(0XA622,	"TimeOut",	0);
	create_insn	(0XA634);
	create_dword	(x=0XA63C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0XA640,	0XA651);
	set_name	(0XA640,	"aSomethingChang");
	create_byte	(0XA651);
	make_array	(0XA651,	0X3);
	create_strlit	(0XA654,	0XA65E);
	set_name	(0XA654,	"aNoChange");
	make_array	(0XA65E,	0X2);
	create_dword	(x=0XA660);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XA664);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XA668);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XA668,	"RTCx");
	create_dword	(x=0XA66C);
	op_dec		(x,	0);
	set_name	(0XA66C,	"TimeOut");
	create_dword	(x=0XA670);
	op_dec		(x,	0);
	create_insn	(0XA674);
	set_name	(0XA674,	"check_error_flags");
	create_insn	(x=0XA676);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA67A);
	op_hex		(x,	1);
	create_insn	(x=0XA684);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA686,	"lev",	0);
	create_insn	(x=0XA686);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA68E);
	op_hex		(x,	1);
	create_insn	(x=0XA69A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA69C,	"lev",	0);
	create_insn	(x=0XA69C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA6A4);
	op_hex		(x,	1);
	create_insn	(x=0XA6B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA6B2,	"lev",	0);
	create_insn	(x=0XA6B2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA6BA);
	op_hex		(x,	1);
	create_insn	(x=0XA6C6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA6C8,	"lev",	0);
	create_insn	(x=0XA6C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA6D0);
	op_hex		(x,	1);
	create_insn	(x=0XA6DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA6DE,	"lev",	0);
	create_insn	(x=0XA6DE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA6E6);
	op_hex		(x,	1);
	create_insn	(x=0XA6F2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA6F4,	"lev",	0);
	create_insn	(x=0XA6F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA6FC);
	op_hex		(x,	1);
	create_insn	(x=0XA708);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA70A,	"lev",	0);
	create_insn	(x=0XA70A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA712);
	op_hex		(x,	1);
	create_insn	(x=0XA718);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA71C);
	op_plain_offset	(x,	1,	0X10000000);
	op_plain_offset	(x,	129,	0X10000000);
	create_insn	(x=0XA724);
	op_plain_offset	(x,	1,	0X10000000);
	op_plain_offset	(x,	129,	0X10000000);
	create_insn	(x=0XA728);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA72A,	"lev",	0);
	create_insn	(x=0XA72A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA732);
	op_hex		(x,	1);
	create_insn	(x=0XA738);
	op_plain_offset	(x,	1,	0X1000000E);
	op_plain_offset	(x,	129,	0X1000000E);
	create_insn	(x=0XA73E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA740,	"lev",	0);
	create_insn	(x=0XA740);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA748);
	op_hex		(x,	1);
	create_insn	(0XA750);
	create_insn	(x=0XA798);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0XA798,	"start_worker");
	set_cmt	(0XA79A,	"prio",	0);
	create_insn	(x=0XA7A2);
	op_stkvar	(x,	1);
	create_insn	(x=0XA7A4);
	op_stkvar	(x,	1);
	create_insn	(x=0XA7B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA7B4);
	op_stkvar	(x,	1);
	create_insn	(x=0XA7BE);
	op_plain_offset	(x,	1,	0X10000000);
	op_plain_offset	(x,	129,	0X10000000);
	set_cmt	(0XA7C2,	"time_quanta",	0);
	create_insn	(x=0XA7C2);
	op_stkvar	(x,	1);
	set_cmt	(0XA7C4,	"p_ext",	0);
	create_insn	(x=0XA7C4);
	op_stkvar	(x,	1);
	set_cmt	(0XA7C6,	"opt",	0);
	create_insn	(x=0XA7CE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA7DE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA7E0,	"stk_size",	0);
	set_cmt	(0XA7E4,	"p_arg",	0);
	set_cmt	(0XA7E6,	"p_task",	0);
	create_insn	(x=0XA7E6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA7E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA7EA,	"p_tcb",	0);
	create_insn	(x=0XA7F0);
	op_stkvar	(x,	1);
	set_cmt	(0XA7F2,	"time_quanta",	0);
	create_insn	(x=0XA7F2);
	op_stkvar	(x,	1);
	create_insn	(x=0XA7F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA800);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA802,	"stk_size",	0);
	set_cmt	(0XA806,	"p_arg",	0);
	set_cmt	(0XA808,	"p_task",	0);
	create_insn	(x=0XA808);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA80A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA80C,	"p_tcb",	0);
	set_cmt	(0XA816,	"stk_limit",	0);
	create_insn	(x=0XA81A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA81C,	"q_size",	0);
	create_insn	(x=0XA81C);
	op_stkvar	(x,	1);
	set_cmt	(0XA81E,	"time_quanta",	0);
	create_insn	(x=0XA81E);
	op_stkvar	(x,	1);
	set_cmt	(0XA822,	"prio",	0);
	create_insn	(x=0XA826);
	op_stkvar	(x,	1);
	create_insn	(x=0XA82A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA830,	"p_arg",	0);
	set_cmt	(0XA832,	"p_task",	0);
	create_insn	(x=0XA832);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA834);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA836,	"p_tcb",	0);
	set_cmt	(0XA846,	"stk_limit",	0);
	create_insn	(x=0XA846);
	op_stkvar	(x,	1);
	create_insn	(x=0XA84C);
	op_stkvar	(x,	1);
	set_cmt	(0XA84E,	"time_quanta",	0);
	create_insn	(x=0XA84E);
	op_stkvar	(x,	1);
	create_insn	(x=0XA854);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA85A,	"p_arg",	0);
	set_cmt	(0XA860,	"prio",	0);
	set_cmt	(0XA864,	"stk_size",	0);
	set_cmt	(0XA868,	"p_task",	0);
	create_insn	(x=0XA868);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA86A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA86C,	"p_tcb",	0);
	create_insn	(x=0XA874);
	op_plain_offset	(x,	1,	0X10000000);
	op_plain_offset	(x,	129,	0X10000000);
	set_cmt	(0XA87A,	"prio",	0);
	create_insn	(0XA87A);
	create_insn	(x=0XA87E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA880,	"stk_size",	0);
	set_cmt	(0XA884,	"p_task",	0);
	create_insn	(x=0XA884);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA886);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA888,	"p_tcb",	0);
	create_insn	(x=0XA88E);
	op_plain_offset	(x,	1,	0X10000000);
	op_plain_offset	(x,	129,	0X10000000);
	create_insn	(x=0XA892);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA896,	"time_quanta",	0);
	create_insn	(x=0XA896);
	op_stkvar	(x,	1);
	create_insn	(x=0XA89C);
	op_stkvar	(x,	1);
	create_insn	(x=0XA8A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA8A6,	"stk_size",	0);
	set_cmt	(0XA8AA,	"p_arg",	0);
	set_cmt	(0XA8AC,	"p_task",	0);
	create_insn	(x=0XA8AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA8AE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA8B0,	"p_tcb",	0);
	set_cmt	(0XA8B6,	"p_err",	0);
	create_insn	(x=0XA8B6);
	op_stkvar	(x,	1);
	set_cmt	(0XA8B8,	"prio_new",	0);
	set_cmt	(0XA8BA,	"p_tcb",	0);
	create_insn	(x=0XA8BA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA8C0);
	op_stkvar	(x,	1);
	set_cmt	(0XA8C2,	"opt",	0);
	set_cmt	(0XA8C6,	"milli",	0);
	set_cmt	(0XA8C8,	"seconds",	0);
	set_cmt	(0XA8CA,	"minutes",	0);
	set_cmt	(0XA8CC,	"hours",	0);
	create_insn	(x=0XA8D2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA8D6,	"Timetype",	0);
	create_insn	(x=0XA8D6);
	op_enum		(x,	1,	GetEnum("RTC_TIMETYPE_Num"),0);
	set_cmt	(0XA8D8,	"RTCx",	0);
	create_insn	(x=0XA8DE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA8E0,	"Timetype",	0);
	create_insn	(x=0XA8E0);
	op_enum		(x,	1,	GetEnum("RTC_TIMETYPE_Num"),0);
	create_insn	(x=0XA8E4);
	op_plain_offset	(x,	1,	0X100006F1);
	op_plain_offset	(x,	129,	0X100006F1);
	set_cmt	(0XA8E8,	"RTCx",	0);
	create_insn	(x=0XA8EE);
	op_plain_offset	(x,	1,	0X100006F1);
	op_plain_offset	(x,	129,	0X100006F1);
	set_cmt	(0XA8F0,	"Timetype",	0);
	create_insn	(x=0XA8F0);
	op_enum		(x,	1,	GetEnum("RTC_TIMETYPE_Num"),0);
	set_cmt	(0XA8F2,	"RTCx",	0);
	create_insn	(x=0XA8F8);
	op_plain_offset	(x,	1,	0X100006F1);
	op_plain_offset	(x,	129,	0X100006F1);
	set_cmt	(0XA8FA,	"Timetype",	0);
	create_insn	(x=0XA8FA);
	op_enum		(x,	1,	GetEnum("RTC_TIMETYPE_Num"),0);
	set_cmt	(0XA8FC,	"RTCx",	0);
	set_cmt	(0XA904,	"Timetype",	0);
	create_insn	(x=0XA904);
	op_enum		(x,	1,	GetEnum("RTC_TIMETYPE_Num"),0);
	set_cmt	(0XA906,	"RTCx",	0);
	create_insn	(x=0XA90C);
	op_plain_offset	(x,	1,	0X100006F1);
	op_plain_offset	(x,	129,	0X100006F1);
	set_cmt	(0XA90E,	"Timetype",	0);
	create_insn	(x=0XA90E);
	op_enum		(x,	1,	GetEnum("RTC_TIMETYPE_Num"),0);
	set_cmt	(0XA910,	"RTCx",	0);
	create_insn	(x=0XA916);
	op_plain_offset	(x,	1,	0X100006F1);
	op_plain_offset	(x,	129,	0X100006F1);
	create_insn	(x=0XA920);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA924);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA92E,	"p_err",	0);
	create_insn	(x=0XA92E);
	op_stkvar	(x,	1);
	create_insn	(x=0XA936);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA944);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA956);
	op_plain_offset	(x,	1,	0X10000000);
	op_plain_offset	(x,	129,	0X10000000);
	create_insn	(x=0XA95E);
	op_plain_offset	(x,	1,	0X10000244);
	op_plain_offset	(x,	129,	0X10000244);
	create_insn	(x=0XA962);
	op_plain_offset	(x,	1,	0X10000244);
	op_plain_offset	(x,	129,	0X10000244);
	create_insn	(x=0XA966);
	op_plain_offset	(x,	1,	0X10000244);
	op_plain_offset	(x,	129,	0X10000244);
	create_insn	(x=0XA96A);
	op_plain_offset	(x,	1,	0X10000244);
	op_plain_offset	(x,	129,	0X10000244);
	set_cmt	(0XA96E,	"p_err",	0);
	create_insn	(x=0XA976);
	op_plain_offset	(x,	1,	0X10000244);
	op_plain_offset	(x,	129,	0X10000244);
	create_insn	(x=0XA97A);
	op_stkvar	(x,	1);
	create_insn	(x=0XA97C);
	op_plain_offset	(x,	1,	0X10000244);
	op_plain_offset	(x,	129,	0X10000244);
	create_insn	(x=0XA984);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA98C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA990);
	op_plain_offset	(x,	1,	0X100005D8);
	op_plain_offset	(x,	129,	0X100005D8);
	create_insn	(x=0XA992);
	op_stkvar	(x,	1);
	create_insn	(x=0XA994);
	op_plain_offset	(x,	1,	0X100005D8);
	op_plain_offset	(x,	129,	0X100005D8);
	create_insn	(x=0XA996);
	op_stkvar	(x,	1);
	create_insn	(x=0XA99A);
	op_plain_offset	(x,	1,	0X10000244);
	op_plain_offset	(x,	129,	0X10000244);
	create_insn	(x=0XA99E);
	op_plain_offset	(x,	1,	0X10000244);
	op_plain_offset	(x,	129,	0X10000244);
	create_insn	(x=0XA9A2);
	op_plain_offset	(x,	1,	0X10000244);
	op_plain_offset	(x,	129,	0X10000244);
	create_insn	(x=0XA9A6);
	op_plain_offset	(x,	1,	0X10000244);
	op_plain_offset	(x,	129,	0X10000244);
	create_insn	(x=0XA9B2);
	op_plain_offset	(x,	1,	0X10000244);
	op_plain_offset	(x,	129,	0X10000244);
	create_insn	(x=0XA9B6);
	op_plain_offset	(x,	1,	0X10000244);
	op_plain_offset	(x,	129,	0X10000244);
	create_insn	(x=0XA9BE);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA9CA);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA9CE);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA9D6);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA9DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA9DE);
	op_stkvar	(x,	1);
	create_insn	(x=0XA9E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XA9E2,	"lev",	0);
	create_insn	(x=0XA9E2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XA9E8);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XA9F8);
	op_plain_offset	(x,	1,	0X10000000);
	op_plain_offset	(x,	129,	0X10000000);
	create_insn	(x=0XA9FA);
	op_plain_offset	(x,	1,	0X10000000);
	op_plain_offset	(x,	129,	0X10000000);
	create_insn	(x=0XAA02);
	op_plain_offset	(x,	1,	0X10000000);
	op_plain_offset	(x,	129,	0X10000000);
	create_insn	(x=0XAA0C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0XAA10);
	create_insn	(x=0XAA14);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XAA16);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XAA26);
	op_plain_offset	(x,	1,	0X10000000);
	op_plain_offset	(x,	129,	0X10000000);
	create_insn	(x=0XAA2E);
	op_plain_offset	(x,	1,	0X10000000);
	op_plain_offset	(x,	129,	0X10000000);
	create_insn	(x=0XAA32);
	op_plain_offset	(x,	1,	0X10000000);
	op_plain_offset	(x,	129,	0X10000000);
	create_insn	(0XAA54);
	create_insn	(0XAA56);
	create_insn	(x=0XAA5E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0XAA6C);
	make_array	(0XAA6E,	0X2);
	create_dword	(x=0XAA70);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0XAA74,	0XAA7D);
	set_name	(0XAA74,	"aStickerr");
	create_byte	(0XAA7D);
	make_array	(0XAA7D,	0X3);
	create_strlit	(0XAA80,	0XAA88);
	set_name	(0XAA80,	"aFpgaerr");
	create_strlit	(0XAA88,	0XAA94);
	set_name	(0XAA88,	"aRfmoduleerr");
	create_strlit	(0XAA94,	0XAA9C);
	set_name	(0XAA94,	"aF330err");
	create_strlit	(0XAA9C,	0XAAA3);
	set_name	(0XAA9C,	"aGpserr");
	create_byte	(0XAAA3);
	create_strlit	(0XAAA4,	0XAAAF);
	set_name	(0XAAA4,	"aEncrypterr");
	create_byte	(0XAAAF);
	create_strlit	(0XAAB0,	0XAAB9);
	set_name	(0XAAB0,	"aReseterr");
	create_byte	(0XAAB9);
	make_array	(0XAAB9,	0X3);
	create_strlit	(0XAABC,	0XAACC);
	set_name	(0XAABC,	"aBattery600mh");
	create_strlit	(0XAACC,	0XAAD4);
	set_name	(0XAACC,	"aTemperr");
	create_dword	(0XAAD4);
	create_dword	(0XAAD8);
	create_dword	(0XAADC);
	create_dword	(0XAAE0);
	create_dword	(0XAAE4);
	create_dword	(0XAAE8);
	create_dword	(0XAAEC);
	create_dword	(0XAAF0);
	create_dword	(0XAAF4);
	create_dword	(0XAAF8);
	create_dword	(0XAAFC);
	make_array	(0XAAFC,	0X2);
	create_dword	(x=0XAB04);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XAB08);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XAB08,	"p_task");
	create_strlit	(0XAB0C,	0XAB12);
	set_name	(0XAB0C,	"aRadio");
	make_array	(0XAB12,	0X2);
	create_dword	(x=0XAB14);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XAB18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0XAB1C,	0XAB24);
	set_name	(0XAB1C,	"aLedbell");
	create_dword	(x=0XAB24);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XAB28);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0XAB2C,	0XAB33);
	set_name	(0XAB2C,	"aUnpack");
	create_byte	(0XAB33);
	create_dword	(x=0XAB34);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XAB38);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XAB3C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0XAB40,	0XAB47);
	set_name	(0XAB40,	"aBk5811");
	create_byte	(0XAB47);
	create_dword	(x=0XAB48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0XAB4C,	0XAB53);
	set_name	(0XAB4C,	"aCc1120");
	create_byte	(0XAB53);
	create_dword	(x=0XAB54);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XAB58);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0XAB5C,	0XAB63);
	set_name	(0XAB5C,	"aAdckey");
	create_byte	(0XAB63);
	create_dword	(x=0XAB64);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XAB68);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XAB6C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XAB70);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XAB74);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0XAB78,	0XAB94);
	set_name	(0XAB78,	"a3d3d3d3d3d3d3d");
	make_array	(0XAB94,	0X4);
	create_dword	(x=0XAB98);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0XAB9C,	0XAB9E);
	set_name	(0XAB9C,	"aS");
	make_array	(0XAB9E,	0X2);
	create_strlit	(0XABA0,	0XABD5);
	set_name	(0XABA0,	"aSSDIpDCtlD3d3d");
	create_byte	(0XABD5);
	make_array	(0XABD5,	0X3);
	create_strlit	(0XABD8,	0XABDA);
	set_name	(0XABD8,	"aM");
	make_array	(0XABDA,	0X2);
	create_dword	(x=0XABDC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0XABE0);
	create_insn	(x=0XABE6);
	op_plain_offset	(x,	1,	0X10000000);
	op_plain_offset	(x,	129,	0X10000000);
	create_insn	(x=0XABF6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0XAC00);
	create_insn	(x=0XAC0C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XAC10,	"Timetype",	0);
	set_cmt	(0XAC12,	"RTCx",	0);
	set_cmt	(0XAC1A,	"Timetype",	0);
	create_insn	(x=0XAC1C);
	op_plain_offset	(x,	1,	0X100006F1);
	op_plain_offset	(x,	129,	0X100006F1);
	set_cmt	(0XAC20,	"RTCx",	0);
	create_insn	(x=0XAC26);
	op_plain_offset	(x,	1,	0X100006F1);
	op_plain_offset	(x,	129,	0X100006F1);
	set_cmt	(0XAC28,	"Timetype",	0);
	set_cmt	(0XAC2A,	"RTCx",	0);
	create_insn	(x=0XAC30);
	op_plain_offset	(x,	1,	0X100006F1);
	op_plain_offset	(x,	129,	0X100006F1);
	set_cmt	(0XAC32,	"Timetype",	0);
	set_cmt	(0XAC34,	"RTCx",	0);
	set_cmt	(0XAC3C,	"Timetype",	0);
	set_cmt	(0XAC3E,	"RTCx",	0);
	create_insn	(x=0XAC44);
	op_plain_offset	(x,	1,	0X100006F1);
	op_plain_offset	(x,	129,	0X100006F1);
	set_cmt	(0XAC46,	"Timetype",	0);
	set_cmt	(0XAC48,	"RTCx",	0);
	create_insn	(x=0XAC4E);
	op_plain_offset	(x,	1,	0X100006F1);
	op_plain_offset	(x,	129,	0X100006F1);
	create_insn	(0XAC5C);
	create_insn	(x=0XAC60);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XAC6A);
	op_plain_offset	(x,	1,	0X10000000);
	op_plain_offset	(x,	129,	0X10000000);
	create_insn	(0XAC74);
	create_insn	(0XAC78);
	create_insn	(x=0XAC82);
	op_hex		(x,	1);
	create_insn	(0XAC88);
	create_insn	(x=0XAC8A);
	op_hex		(x,	1);
	create_insn	(0XAC90);
	create_insn	(x=0XAC92);
	op_stkvar	(x,	1);
	create_insn	(x=0XAC96);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XAC9C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XACA4);
	op_plain_offset	(x,	1,	0X10000000);
	op_plain_offset	(x,	129,	0X10000000);
	create_insn	(x=0XACB2);
	op_plain_offset	(x,	1,	0X10000000);
	op_plain_offset	(x,	129,	0X10000000);
	create_insn	(x=0XACB6);
	op_plain_offset	(x,	1,	0X10000000);
	op_plain_offset	(x,	129,	0X10000000);
	set_cmt	(0XACB8,	"p_err",	0);
	create_insn	(x=0XACB8);
	op_stkvar	(x,	1);
	create_insn	(x=0XACBE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XACCA);
	op_plain_offset	(x,	1,	0X10000000);
	op_plain_offset	(x,	129,	0X10000000);
	create_insn	(x=0XACD2);
	op_plain_offset	(x,	1,	0X10000000);
	op_plain_offset	(x,	129,	0X10000000);
	create_insn	(x=0XACD8);
	op_plain_offset	(x,	1,	0X10000000);
	op_plain_offset	(x,	129,	0X10000000);
	create_insn	(x=0XACE0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XACE2);
	op_plain_offset	(x,	1,	0X1000457C);
	op_plain_offset	(x,	129,	0X1000457C);
	create_insn	(x=0XACE4);
	op_stkvar	(x,	1);
	set_cmt	(0XACE6,	"opt",	0);
	set_cmt	(0XACEA,	"seconds",	0);
	set_cmt	(0XACEC,	"milli",	0);
	set_cmt	(0XACF0,	"minutes",	0);
	set_cmt	(0XACF2,	"hours",	0);
	create_insn	(0XACFA);
	set_name	(0XACFA,	"main_entry_point");
	create_insn	(x=0XAD04);
	op_hex		(x,	1);
	create_insn	(x=0XAD0C);
	op_hex		(x,	1);
	create_insn	(x=0XAD14);
	op_hex		(x,	1);
	create_insn	(x=0XAD1C);
	op_hex		(x,	1);
	create_insn	(x=0XAD28);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XAD38);
	op_hex		(x,	1);
	create_insn	(x=0XAD40);
	op_hex		(x,	1);
	create_insn	(x=0XAD48);
	op_hex		(x,	1);
	create_insn	(x=0XAD50);
	op_hex		(x,	1);
	create_insn	(x=0XAD58);
	op_hex		(x,	1);
	create_insn	(x=0XAD60);
	op_hex		(x,	1);
	create_insn	(x=0XAD68);
	op_hex		(x,	1);
	create_insn	(x=0XAD70);
	op_hex		(x,	1);
	create_insn	(x=0XAD76);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XAD78);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0XAD7A);
	op_hex		(x,	1);
	create_insn	(x=0XAD7E);
	op_hex		(x,	1);
	create_insn	(x=0XAD82);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0XAD86);
	op_hex		(x,	1);
	create_insn	(x=0XAD8E);
	op_hex		(x,	1);
	create_insn	(0XAD9E);
	create_insn	(x=0XADAA);
	op_hex		(x,	1);
	create_insn	(0XADB2);
	create_insn	(0XADBA);
	set_cmt	(0XADCC,	"p_err",	0);
	create_insn	(x=0XADCC);
	op_stkvar	(x,	1);
	create_insn	(x=0XADD6);
	op_stkvar	(x,	1);
	set_cmt	(0XADDA,	"time_quanta",	0);
	create_insn	(x=0XADDA);
	op_stkvar	(x,	1);
	set_cmt	(0XADDC,	"p_ext",	0);
	create_insn	(x=0XADDC);
	op_stkvar	(x,	1);
	set_cmt	(0XADDE,	"opt",	0);
	set_cmt	(0XADE8,	"stk_limit",	0);
	set_cmt	(0XADF2,	"prio",	0);
	set_cmt	(0XADF8,	"q_size",	0);
	create_insn	(x=0XADF8);
	op_stkvar	(x,	1);
	set_cmt	(0XADFA,	"p_arg",	0);
	set_cmt	(0XADFC,	"p_task",	0);
	create_insn	(x=0XADFC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XADFE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XAE00,	"p_tcb",	0);
	set_cmt	(0XAE06,	"p_err",	0);
	create_insn	(x=0XAE06);
	op_stkvar	(x,	1);
	create_insn	(0XAE12);
	create_dword	(x=0XAE18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XAE1C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XAE20);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XAE24);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XAE28);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XAE2C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XAE30);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XAE34);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XAE38);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XAE3C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XAE40);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XAE44);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0XAE48,	0XAE4E);
	set_name	(0XAE48,	"aStart");
	make_array	(0XAE4E,	0X2);
	create_insn	(x=0XAE50);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XAE5C);
	op_hex		(x,	1);
	create_insn	(x=0XAE64);
	op_hex		(x,	1);
	create_insn	(x=0XAE6C);
	op_hex		(x,	1);
	create_insn	(x=0XAE74);
	op_hex		(x,	1);
	create_insn	(x=0XAE7C);
	op_hex		(x,	1);
	create_insn	(x=0XAE84);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XAE90);
	op_hex		(x,	1);
	create_insn	(x=0XAE98);
	op_hex		(x,	1);
	create_insn	(x=0XAEA0);
	op_hex		(x,	1);
	create_insn	(x=0XAEA8);
	op_hex		(x,	1);
	create_insn	(x=0XAEB0);
	op_hex		(x,	1);
	create_insn	(x=0XAEB8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XAEBC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XAEC4);
	op_hex		(x,	1);
	create_insn	(x=0XAECC);
	op_hex		(x,	1);
	create_insn	(x=0XAED4);
	op_hex		(x,	1);
	create_insn	(x=0XAEDC);
	op_hex		(x,	1);
	create_insn	(x=0XAEE4);
	op_hex		(x,	1);
	create_insn	(x=0XAEEC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XAEF8);
	op_hex		(x,	1);
	create_insn	(x=0XAF00);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XAF0C);
	op_hex		(x,	1);
	create_insn	(x=0XAF14);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XAF20);
	op_hex		(x,	1);
	create_insn	(0XAF28);
	create_insn	(x=0XAF2C);
	op_hex		(x,	1);
	create_insn	(x=0XAF38);
	op_hex		(x,	1);
	create_insn	(x=0XAF42);
	op_hex		(x,	1);
	create_insn	(x=0XAF48);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XAF4A);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0XAF4C);
	op_hex		(x,	1);
	create_insn	(x=0XAF50);
	op_hex		(x,	1);
	create_insn	(x=0XAF54);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(0XAF68);
	create_insn	(x=0XAF6A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XAF82);
	op_hex		(x,	1);
	create_insn	(x=0XAF88);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0XAF8A);
	op_hex		(x,	1);
	create_insn	(x=0XAF8E);
	op_hex		(x,	1);
	create_insn	(x=0XAF92);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(0XAF96);
	create_insn	(x=0XAF98);
	op_hex		(x,	1);
	create_insn	(x=0XAF9E);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0XAFA0);
	op_hex		(x,	1);
	create_insn	(x=0XAFA4);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0XAFA8);
	op_hex		(x,	1);
	create_insn	(x=0XAFB2);
	op_hex		(x,	1);
	create_insn	(0XAFBA);
	create_insn	(x=0XAFBC);
	op_hex		(x,	1);
	create_insn	(0XAFC4);
	create_insn	(x=0XAFC6);
	op_hex		(x,	1);
	create_insn	(x=0XAFCC);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0XAFCE);
	op_hex		(x,	1);
	create_insn	(x=0XAFD2);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0XAFD6);
	op_hex		(x,	1);
	create_insn	(0XAFDE);
	create_insn	(0XAFF4);
	set_cmt	(0XAFFE,	"p_err",	0);
	set_cmt	(0XB000,	"opt",	0);
	set_cmt	(0XB002,	"dly",	0);
	set_cmt	(0XB012,	"p_err",	0);
	set_cmt	(0XB014,	"opt",	0);
	set_cmt	(0XB016,	"dly",	0);
	set_cmt	(0XB028,	"p_err",	0);
	set_cmt	(0XB02A,	"opt",	0);
	set_cmt	(0XB02C,	"dly",	0);
	create_insn	(0XB038);
	set_cmt	(0XB044,	"p_err",	0);
	set_cmt	(0XB046,	"opt",	0);
	set_cmt	(0XB048,	"dly",	0);
	set_cmt	(0XB05A,	"p_err",	0);
	set_cmt	(0XB05C,	"opt",	0);
	set_cmt	(0XB05E,	"dly",	0);
	set_cmt	(0XB070,	"p_err",	0);
	set_cmt	(0XB072,	"opt",	0);
	set_cmt	(0XB074,	"dly",	0);
	create_insn	(0XB080);
	create_insn	(x=0XB088);
	op_hex		(x,	1);
	create_insn	(0XB090);
	set_cmt	(0XB098,	"p_err",	0);
	set_cmt	(0XB09A,	"opt",	0);
	set_cmt	(0XB09C,	"dly",	0);
	set_cmt	(0XB0AA,	"p_err",	0);
	set_cmt	(0XB0AC,	"opt",	0);
	set_cmt	(0XB0AE,	"dly",	0);
	set_cmt	(0XB0BC,	"p_err",	0);
	set_cmt	(0XB0BE,	"opt",	0);
	set_cmt	(0XB0C0,	"dly",	0);
	set_cmt	(0XB0CE,	"p_err",	0);
	set_cmt	(0XB0D0,	"opt",	0);
	set_cmt	(0XB0D2,	"dly",	0);
	set_cmt	(0XB0E0,	"p_err",	0);
	set_cmt	(0XB0E2,	"opt",	0);
	set_cmt	(0XB0E4,	"dly",	0);
	create_insn	(0XB0F0);
	set_cmt	(0XB0FC,	"p_err",	0);
	set_cmt	(0XB0FE,	"opt",	0);
	set_cmt	(0XB100,	"dly",	0);
	set_cmt	(0XB110,	"p_err",	0);
	set_cmt	(0XB112,	"opt",	0);
	set_cmt	(0XB114,	"dly",	0);
	set_cmt	(0XB124,	"p_err",	0);
	set_cmt	(0XB126,	"opt",	0);
	set_cmt	(0XB128,	"dly",	0);
	create_insn	(x=0XB13A);
	op_hex		(x,	1);
	create_insn	(x=0XB142);
	op_hex		(x,	1);
	create_insn	(x=0XB14A);
	op_hex		(x,	1);
	set_cmt	(0XB154,	"p_err",	0);
	set_cmt	(0XB156,	"opt",	0);
	set_cmt	(0XB158,	"dly",	0);
	create_insn	(0XB162);
	create_insn	(x=0XB166);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XB172);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(0XB182);
	create_insn	(x=0XB18E);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB192);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(0XB196);
	create_insn	(x=0XB198);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(0XB19C);
	create_insn	(x=0XB1A2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XB1A8);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XB1AE);
	op_hex		(x,	1);
	create_insn	(x=0XB1B6);
	op_hex		(x,	1);
	create_insn	(x=0XB1BE);
	op_hex		(x,	1);
	set_cmt	(0XB1C4,	"p_err",	0);
	create_insn	(x=0XB1CA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0XB1D0);
	create_insn	(x=0XB1D2);
	op_hex		(x,	1);
	create_insn	(0XB1DA);
	create_insn	(x=0XB1E2);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XB1E8);
	op_hex		(x,	1);
	create_insn	(x=0XB1F0);
	op_hex		(x,	1);
	create_insn	(x=0XB1F8);
	op_hex		(x,	1);
	create_insn	(0XB200);
	create_insn	(x=0XB202);
	op_hex		(x,	1);
	create_insn	(0XB20A);
	create_insn	(x=0XB20E);
	op_hex		(x,	1);
	create_insn	(x=0XB216);
	op_hex		(x,	1);
	create_insn	(x=0XB21E);
	op_hex		(x,	1);
	create_insn	(0XB226);
	create_insn	(x=0XB228);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XB22C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XB230);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0XB24A,	0X2);
	create_dword	(x=0XB24C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XB250);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0XB254);
	create_dword	(x=0XB258);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0XB25C);
	create_dword	(x=0XB260);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XB264);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XB268);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XB26C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XB270);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0XB274);
	create_insn	(x=0XB276);
	op_hex		(x,	1);
	create_insn	(x=0XB27E);
	op_hex		(x,	1);
	create_insn	(0XB286);
	create_insn	(x=0XB288);
	op_hex		(x,	1);
	create_insn	(x=0XB290);
	op_hex		(x,	1);
	create_insn	(x=0XB298);
	op_hex		(x,	1);
	create_insn	(0XB2A0);
	create_insn	(0XB2A2);
	create_insn	(x=0XB2A4);
	op_hex		(x,	1);
	create_insn	(x=0XB2AC);
	op_hex		(x,	1);
	create_insn	(x=0XB2B4);
	op_hex		(x,	1);
	create_insn	(x=0XB2BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XB2C2);
	op_hex		(x,	1);
	create_insn	(x=0XB2D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XB2DC);
	op_plain_offset	(x,	1,	0X100027EE);
	op_plain_offset	(x,	129,	0X100027EE);
	create_insn	(x=0XB2E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0XB2F8);
	create_insn	(x=0XB304);
	op_stkvar	(x,	1);
	set_cmt	(0XB306,	"payload_buf",	0);
	create_insn	(x=0XB30A);
	op_stkvar	(x,	1);
	set_cmt	(0XB30E,	"cmd",	0);
	set_cmt	(0XB310,	"smdset",	0);
	set_cmt	(0XB312,	"ack",	0);
	set_cmt	(0XB314,	"receiver",	0);
	create_insn	(0XB31C);
	create_insn	(0XB328);
	create_insn	(x=0XB332);
	op_stkvar	(x,	1);
	set_cmt	(0XB334,	"payload_buf",	0);
	create_insn	(x=0XB338);
	op_stkvar	(x,	1);
	set_cmt	(0XB33C,	"cmd",	0);
	set_cmt	(0XB33E,	"smdset",	0);
	set_cmt	(0XB340,	"ack",	0);
	set_cmt	(0XB342,	"receiver",	0);
	create_insn	(0XB352);
	create_insn	(x=0XB354);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XB35E);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB360);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	set_cmt	(0XB362,	"switch 6 cases ",	0);
	set_cmt	(0XB366,	"switch jump",	0);
	set_cmt	(0XB36A,	"jump table for switch statement",	0);
	create_byte	(0XB36A);
	set_name	(0XB36A,	"jpt_1366");
	create_byte	(0XB36B);
	create_byte	(0XB36C);
	create_byte	(0XB36D);
	create_byte	(0XB36E);
	create_byte	(0XB36F);
	set_cmt	(0XB370,	"jumptable 00001366 case 0",	1);
	create_insn	(0XB370);
	set_cmt	(0XB374,	"jumptable 00001366 case 1",	1);
	create_insn	(0XB374);
	set_cmt	(0XB37C,	"jumptable 00001366 default case",	1);
	create_insn	(x=0XB37C);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	set_name	(0XB37C,	"def_1366");
	create_insn	(x=0XB380);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	set_cmt	(0XB384,	"jumptable 00001366 case 2",	1);
	create_insn	(0XB384);
	set_cmt	(0XB390,	"jumptable 00001366 case 3",	1);
	create_insn	(0XB390);
	set_cmt	(0XB3A4,	"jumptable 00001366 case 4",	1);
	create_insn	(0XB3A4);
	create_insn	(x=0XB3C8);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(0XB3CC);
	set_cmt	(0XB3DA,	"jumptable 00001366 case 5",	1);
	create_insn	(0XB3DA);
	create_insn	(x=0XB3E2);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB3E6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XB3EA);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB3F8);
	op_hex		(x,	1);
	create_insn	(x=0XB400);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(0XB404);
	create_insn	(x=0XB40A);
	op_hex		(x,	1);
	create_insn	(0XB414);
	create_insn	(x=0XB416);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XB41E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XB420);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	set_cmt	(0XB42E,	"p_err",	0);
	set_cmt	(0XB430,	"opt",	0);
	set_cmt	(0XB432,	"dly",	0);
	create_insn	(x=0XB440);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	set_cmt	(0XB450,	"p_err",	0);
	set_cmt	(0XB452,	"opt",	0);
	set_cmt	(0XB454,	"dly",	0);
	create_insn	(x=0XB462);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	set_cmt	(0XB472,	"p_err",	0);
	set_cmt	(0XB474,	"opt",	0);
	set_cmt	(0XB476,	"dly",	0);
	create_insn	(x=0XB484);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB48C);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB496);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(0XB49C);
	create_insn	(x=0XB4A2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XB4A6);
	op_plain_offset	(x,	1,	0X1000271C);
	op_plain_offset	(x,	129,	0X1000271C);
	create_insn	(x=0XB4BA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XB4C0);
	op_plain_offset	(x,	1,	0X100027EE);
	op_plain_offset	(x,	129,	0X100027EE);
	create_insn	(x=0XB4C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XB4D2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XB4D4);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XB4D8);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB4DC);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB4DE);
	op_plain_offset	(x,	1,	0X1000007E);
	op_plain_offset	(x,	129,	0X1000007E);
	create_insn	(x=0XB4E2);
	op_plain_offset	(x,	1,	0X1000007E);
	op_plain_offset	(x,	129,	0X1000007E);
	create_insn	(x=0XB4F0);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB4F2);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	set_cmt	(0XB4FE,	"switch 5 cases ",	0);
	set_cmt	(0XB502,	"switch jump",	0);
	set_cmt	(0XB506,	"jump table for switch statement",	0);
	create_byte	(0XB506);
	set_name	(0XB506,	"jpt_1502");
	create_byte	(0XB507);
	create_byte	(0XB508);
	create_byte	(0XB509);
	create_byte	(0XB50A);
	set_cmt	(0XB50C,	"jumptable 00001502 case 0",	1);
	create_insn	(0XB50C);
	create_insn	(x=0XB510);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB514);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XB516);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XB51C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XB51E);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XB522);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB528);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB52C);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB53A);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB540);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB548);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(0XB54E);
	create_insn	(0XB566);
	create_insn	(0XB572);
	create_insn	(0XB582);
	create_insn	(x=0XB598);
	op_plain_offset	(x,	1,	0X1000007E);
	op_plain_offset	(x,	129,	0X1000007E);
	create_insn	(x=0XB59C);
	op_plain_offset	(x,	1,	0X1000007E);
	op_plain_offset	(x,	129,	0X1000007E);
	create_insn	(x=0XB5AA);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB5AE);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB5B0);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB5B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XB5BA);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XB5BE);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	set_cmt	(0XB5C4,	"jumptable 00001502 default case",	1);
	set_name	(0XB5C4,	"def_1502");
	set_cmt	(0XB5C6,	"p_err",	0);
	create_insn	(0XB5C6);
	create_insn	(x=0XB5CC);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB5D8);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	set_cmt	(0XB5DC,	"jumptable 00001502 case 1",	1);
	create_insn	(x=0XB5DC);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(0XB5E6);
	create_insn	(0XB5F6);
	create_insn	(x=0XB602);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB604);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB608);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	set_cmt	(0XB60C,	"jumptable 00001502 case 2",	1);
	create_insn	(0XB60C);
	create_insn	(x=0XB612);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XB61E);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(0XB622);
	create_insn	(x=0XB624);
	op_plain_offset	(x,	1,	0X1000007E);
	op_plain_offset	(x,	129,	0X1000007E);
	create_insn	(x=0XB628);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB644);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB650);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(0XB656);
	create_insn	(0XB666);
	set_cmt	(0XB67C,	"jumptable 00001502 case 3",	1);
	create_insn	(0XB67C);
	create_insn	(x=0XB68C);
	op_plain_offset	(x,	1,	0X1000007E);
	op_plain_offset	(x,	129,	0X1000007E);
	create_insn	(x=0XB690);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(0XB694);
	create_insn	(x=0XB696);
	op_plain_offset	(x,	1,	0X1000007E);
	op_plain_offset	(x,	129,	0X1000007E);
	create_insn	(x=0XB69A);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB6A0);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB6A2);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(0XB6B4);
	create_insn	(0XB6B6);
	create_dword	(x=0XB6B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XB6BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XB6C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XB6C4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XB6C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XB6CC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0XB6D0);
	create_dword	(x=0XB6D4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XB6D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XB6DC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XB6E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XB6E4,	"jumptable 00001502 case 4",	1);
	create_insn	(0XB6E4);
	create_insn	(0XB6E6);
	create_insn	(0XB6EA);
	create_insn	(0XB6F0);
	create_insn	(0XB6F6);
	create_insn	(x=0XB700);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB710);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB720);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(0XB72A);
	create_insn	(0XB72C);
	create_insn	(0XB736);
	create_insn	(x=0XB73A);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB73E);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB74A);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB750);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB75C);
	op_plain_offset	(x,	1,	0X1000007E);
	op_plain_offset	(x,	129,	0X1000007E);
	set_cmt	(0XB760,	"p_err",	0);
	create_insn	(x=0XB766);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB768);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB76A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XB780,	"p_err",	0);
	create_insn	(0XB780);
	create_insn	(x=0XB786);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	set_cmt	(0XB78E,	"p_err",	0);
	create_insn	(x=0XB794);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	set_cmt	(0XB79E,	"p_err",	0);
	create_insn	(0XB79E);
	create_insn	(x=0XB7A4);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	set_cmt	(0XB7B2,	"p_err",	0);
	create_insn	(0XB7B2);
	create_insn	(x=0XB7B8);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	set_cmt	(0XB7C4,	"p_err",	0);
	create_insn	(0XB7C4);
	create_insn	(0XB7DA);
	create_insn	(0XB7E2);
	create_insn	(0XB7E6);
	create_insn	(x=0XB7EA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XB7EE);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB800);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XB802);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0XB808);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB80E);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB810);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0XB816);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB81C);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB822);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB828);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB82E);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB830);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XB832);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XB83C);
	op_plain_offset	(x,	1,	0X10000244);
	op_plain_offset	(x,	129,	0X10000244);
	create_insn	(x=0XB840);
	op_plain_offset	(x,	1,	0X100000BC);
	op_plain_offset	(x,	129,	0X100000BC);
	create_insn	(x=0XB842);
	op_plain_offset	(x,	1,	0X10000244);
	op_plain_offset	(x,	129,	0X10000244);
	create_insn	(x=0XB846);
	op_plain_offset	(x,	1,	0X100000BC);
	op_plain_offset	(x,	129,	0X100000BC);
	create_insn	(x=0XB848);
	op_plain_offset	(x,	1,	0X10000244);
	op_plain_offset	(x,	129,	0X10000244);
	create_insn	(x=0XB84C);
	op_plain_offset	(x,	1,	0X100000BC);
	op_plain_offset	(x,	129,	0X100000BC);
	create_insn	(x=0XB84E);
	op_plain_offset	(x,	1,	0X10000244);
	op_plain_offset	(x,	129,	0X10000244);
	create_insn	(x=0XB852);
	op_plain_offset	(x,	1,	0X100000BC);
	op_plain_offset	(x,	129,	0X100000BC);
	create_insn	(x=0XB854);
	op_plain_offset	(x,	1,	0X10000244);
	op_plain_offset	(x,	129,	0X10000244);
	create_insn	(x=0XB858);
	op_plain_offset	(x,	1,	0X100000BC);
	op_plain_offset	(x,	129,	0X100000BC);
	create_insn	(x=0XB85A);
	op_plain_offset	(x,	1,	0X10000244);
	op_plain_offset	(x,	129,	0X10000244);
	create_insn	(x=0XB85E);
	op_plain_offset	(x,	1,	0X100000BC);
	op_plain_offset	(x,	129,	0X100000BC);
	create_insn	(x=0XB860);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB86A);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB86C);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB876);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB878);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB87A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XB880);
	op_plain_offset	(x,	1,	0X10003A12);
	op_plain_offset	(x,	129,	0X10003A12);
	create_insn	(x=0XB882);
	op_plain_offset	(x,	1,	0X10003A12);
	op_plain_offset	(x,	129,	0X10003A12);
	create_insn	(x=0XB884);
	op_hex		(x,	1);
	create_insn	(x=0XB88C);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB88E);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0XB892);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB8A6);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0XB8AA);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB8AC);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB8B2);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0XB8B4);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB8C8);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0XB8CE);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB8D2);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(0XB8F2);
	create_insn	(0XB8FA);
	set_cmt	(0XB904,	"p_err",	0);
	set_cmt	(0XB906,	"opt",	0);
	set_cmt	(0XB908,	"dly",	0);
	create_insn	(x=0XB916);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0XB91C);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(0XB920);
	create_insn	(0XB926);
	create_insn	(0XB92E);
	create_insn	(x=0XB932);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB93A);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB93E);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0XB944);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB94C);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB954);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB95C);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB964);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB976);
	op_plain_offset	(x,	1,	0X10000244);
	op_plain_offset	(x,	129,	0X10000244);
	create_insn	(x=0XB97C);
	op_plain_offset	(x,	1,	0X100000BC);
	op_plain_offset	(x,	129,	0X100000BC);
	create_insn	(x=0XB980);
	op_plain_offset	(x,	1,	0X10000244);
	op_plain_offset	(x,	129,	0X10000244);
	create_insn	(x=0XB986);
	op_plain_offset	(x,	1,	0X100000BC);
	op_plain_offset	(x,	129,	0X100000BC);
	create_insn	(x=0XB98A);
	op_plain_offset	(x,	1,	0X10000244);
	op_plain_offset	(x,	129,	0X10000244);
	create_insn	(x=0XB990);
	op_plain_offset	(x,	1,	0X100000BC);
	op_plain_offset	(x,	129,	0X100000BC);
	create_insn	(x=0XB996);
	op_plain_offset	(x,	1,	0X10000244);
	op_plain_offset	(x,	129,	0X10000244);
	create_insn	(x=0XB99C);
	op_plain_offset	(x,	1,	0X100000BC);
	op_plain_offset	(x,	129,	0X100000BC);
	create_insn	(x=0XB9A2);
	op_plain_offset	(x,	1,	0X10000244);
	op_plain_offset	(x,	129,	0X10000244);
	create_insn	(x=0XB9A8);
	op_plain_offset	(x,	1,	0X100000BC);
	op_plain_offset	(x,	129,	0X100000BC);
	create_insn	(x=0XB9AE);
	op_plain_offset	(x,	1,	0X10000244);
	op_plain_offset	(x,	129,	0X10000244);
	create_insn	(0XB9B4);
	create_insn	(0XB9B6);
	create_insn	(0XB9B8);
	create_insn	(0XB9BA);
	create_insn	(0XB9BC);
	create_insn	(0XB9BE);
	create_insn	(0XB9C0);
	create_insn	(0XB9C2);
	create_insn	(x=0XB9C4);
	op_plain_offset	(x,	1,	0X100000BC);
	op_plain_offset	(x,	129,	0X100000BC);
	create_insn	(x=0XB9CA);
	op_plain_offset	(x,	1,	0X10003A12);
	op_plain_offset	(x,	129,	0X10003A12);
	create_insn	(x=0XB9CC);
	op_plain_offset	(x,	1,	0X10003A12);
	op_plain_offset	(x,	129,	0X10003A12);
	create_insn	(x=0XB9CE);
	op_hex		(x,	1);
	create_insn	(x=0XB9D6);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XB9DE);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(0XB9EA);
	create_insn	(0XB9EC);
	create_insn	(0XB9EE);
	create_insn	(0XB9F0);
	create_insn	(x=0XB9F8);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(0XB9FC);
	create_insn	(x=0XBA04);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(0XBA08);
	create_insn	(x=0XBA10);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(0XBA14);
	create_insn	(x=0XBA1C);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(0XBA20);
	create_insn	(x=0XBA28);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(0XBA2C);
	create_insn	(x=0XBA34);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(0XBA38);
	create_insn	(x=0XBA40);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(0XBA44);
	set_cmt	(0XBA4A,	"p_err",	0);
	set_cmt	(0XBA4C,	"opt",	0);
	set_cmt	(0XBA4E,	"dly",	0);
	set_cmt	(0XBA5C,	"p_err",	0);
	set_cmt	(0XBA5E,	"opt",	0);
	set_cmt	(0XBA60,	"dly",	0);
	create_insn	(0XBA72);
	set_cmt	(0XBA78,	"p_err",	0);
	set_cmt	(0XBA7A,	"opt",	0);
	set_cmt	(0XBA7C,	"dly",	0);
	set_cmt	(0XBA8A,	"opt",	0);
	set_cmt	(0XBA8C,	"p_err",	0);
	set_cmt	(0XBA8E,	"dly",	0);
	create_insn	(0XBA92);
	create_insn	(0XBA94);
	create_insn	(0XBA96);
	create_insn	(0XBA98);
	create_insn	(0XBA9A);
	create_insn	(x=0XBAA6);
	op_plain_offset	(x,	1,	0X100000BC);
	op_plain_offset	(x,	129,	0X100000BC);
	create_insn	(0XBAAA);
	set_cmt	(0XBAB0,	"p_err",	0);
	set_cmt	(0XBAB2,	"opt",	0);
	set_cmt	(0XBAB4,	"dly",	0);
	set_cmt	(0XBAC2,	"p_err",	0);
	set_cmt	(0XBAC4,	"opt",	0);
	set_cmt	(0XBAC6,	"dly",	0);
	create_insn	(x=0XBAD4);
	op_plain_offset	(x,	1,	0X100000BC);
	op_plain_offset	(x,	129,	0X100000BC);
	create_insn	(0XBAD8);
	set_cmt	(0XBADE,	"p_err",	0);
	set_cmt	(0XBAE0,	"opt",	0);
	set_cmt	(0XBAE2,	"dly",	0);
	set_cmt	(0XBAF0,	"p_err",	0);
	set_cmt	(0XBAF2,	"opt",	0);
	set_cmt	(0XBAF4,	"dly",	0);
	create_insn	(x=0XBB02);
	op_plain_offset	(x,	1,	0X100000BC);
	op_plain_offset	(x,	129,	0X100000BC);
	create_insn	(0XBB06);
	set_cmt	(0XBB0C,	"p_err",	0);
	set_cmt	(0XBB0E,	"opt",	0);
	set_cmt	(0XBB10,	"dly",	0);
	set_cmt	(0XBB1E,	"p_err",	0);
	set_cmt	(0XBB20,	"opt",	0);
	set_cmt	(0XBB22,	"dly",	0);
	create_insn	(x=0XBB30);
	op_plain_offset	(x,	1,	0X100000BC);
	op_plain_offset	(x,	129,	0X100000BC);
	create_insn	(0XBB34);
	set_cmt	(0XBB3A,	"p_err",	0);
	set_cmt	(0XBB3C,	"opt",	0);
	set_cmt	(0XBB3E,	"dly",	0);
	set_cmt	(0XBB4C,	"p_err",	0);
	set_cmt	(0XBB4E,	"opt",	0);
	set_cmt	(0XBB50,	"dly",	0);
	create_insn	(x=0XBB5E);
	op_plain_offset	(x,	1,	0X100000BC);
	op_plain_offset	(x,	129,	0X100000BC);
	make_array	(0XBB62,	0X2);
	create_dword	(x=0XBB64);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XBB68);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XBB6C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XBB70);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XBB74);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0XBB78);
	set_cmt	(0XBB7E,	"p_err",	0);
	set_cmt	(0XBB80,	"opt",	0);
	set_cmt	(0XBB82,	"dly",	0);
	set_cmt	(0XBB90,	"p_err",	0);
	set_cmt	(0XBB92,	"opt",	0);
	set_cmt	(0XBB94,	"dly",	0);
	create_insn	(x=0XBBA2);
	op_plain_offset	(x,	1,	0X100000BC);
	op_plain_offset	(x,	129,	0X100000BC);
	create_insn	(0XBBA6);
	create_insn	(x=0XBBAA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XBBAC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XBBB2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XBBB6,	"p_err",	0);
	set_cmt	(0XBBBE,	"a3",	0);
	set_cmt	(0XBBC0,	"param_buf",	0);
	create_insn	(x=0XBBC0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XBBC2,	"a1",	0);
	create_insn	(x=0XBBC2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XBBC8,	"p_err",	0);
	set_cmt	(0XBBD4,	"p_err",	0);
	create_insn	(0XBBDE);
	create_insn	(x=0XBBE4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XBBE6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XBBFC);
	op_plain_offset	(x,	1,	0X1000000E);
	op_plain_offset	(x,	129,	0X1000000E);
	create_insn	(x=0XBBFE);
	op_hex		(x,	1);
	create_insn	(x=0XBC02);
	op_plain_offset	(x,	1,	0X1000000E);
	op_plain_offset	(x,	129,	0X1000000E);
	create_insn	(x=0XBC06);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XBC08);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(0XBC12);
	create_insn	(x=0XBC20);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XBC22);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XBC26);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XBC2A);
	op_plain_offset	(x,	1,	0X1000000E);
	op_plain_offset	(x,	129,	0X1000000E);
	create_insn	(x=0XBC2C);
	op_hex		(x,	1);
	create_insn	(x=0XBC30);
	op_plain_offset	(x,	1,	0X1000000E);
	op_plain_offset	(x,	129,	0X1000000E);
	create_insn	(x=0XBC32);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XBC3A);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(0XBC44);
	create_insn	(x=0XBC48);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XBC4C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XBC50);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XBC52);
	op_plain_offset	(x,	1,	0X100027EE);
	op_plain_offset	(x,	129,	0X100027EE);
	create_insn	(x=0XBC56);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XBC68);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XBC6A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XBC72);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XBC74);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XBC7E);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(0XBC8E);
	create_insn	(x=0XBC96);
	op_plain_offset	(x,	1,	0X1000007E);
	op_plain_offset	(x,	129,	0X1000007E);
	create_insn	(0XBCB0);
	create_insn	(x=0XBCB8);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XBCBE);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XBCC2);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(0XBCC8);
	create_insn	(x=0XBCD0);
	op_plain_offset	(x,	1,	0X1000007E);
	op_plain_offset	(x,	129,	0X1000007E);
	create_insn	(0XBCEA);
	create_insn	(x=0XBCF2);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(0XBCFA);
	create_insn	(x=0XBD0E);
	op_hex		(x,	1);
	create_insn	(x=0XBD16);
	op_hex		(x,	1);
	create_insn	(0XBD1E);
	create_insn	(x=0XBD2C);
	op_hex		(x,	1);
	create_insn	(x=0XBD34);
	op_hex		(x,	1);
	create_insn	(x=0XBD3C);
	op_hex		(x,	1);
	create_insn	(0XBD44);
	create_insn	(0XBD48);
	create_insn	(0XBD4A);
	create_insn	(x=0XBD54);
	op_hex		(x,	1);
	create_insn	(x=0XBD5C);
	op_hex		(x,	1);
	create_insn	(x=0XBD64);
	op_hex		(x,	1);
	create_insn	(0XBD70);
	create_insn	(x=0XBD78);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XBD7A);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(0XBD7E);
	create_insn	(x=0XBD88);
	op_hex		(x,	1);
	create_insn	(x=0XBD90);
	op_hex		(x,	1);
	create_insn	(x=0XBD98);
	op_hex		(x,	1);
	create_insn	(x=0XBDA8);
	op_hex		(x,	1);
	create_insn	(x=0XBDB0);
	op_hex		(x,	1);
	create_insn	(x=0XBDB8);
	op_hex		(x,	1);
	create_insn	(x=0XBDC8);
	op_hex		(x,	1);
	create_insn	(x=0XBDD0);
	op_hex		(x,	1);
	create_insn	(0XBDD8);
	create_insn	(x=0XBDDE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XBDE0);
	op_stkvar	(x,	1);
	create_insn	(x=0XBDEE);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XBDF2);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XBDF6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XBDF8);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XBDFA);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	set_cmt	(0XBE0A,	"seconds",	0);
	set_cmt	(0XBE0C,	"milli",	0);
	set_cmt	(0XBE0E,	"minutes",	0);
	set_cmt	(0XBE10,	"hours",	0);
	set_cmt	(0XBE12,	"opt",	0);
	set_cmt	(0XBE22,	"seconds",	0);
	set_cmt	(0XBE24,	"milli",	0);
	set_cmt	(0XBE26,	"minutes",	0);
	set_cmt	(0XBE28,	"hours",	0);
	set_cmt	(0XBE2A,	"opt",	0);
	set_cmt	(0XBE3A,	"seconds",	0);
	set_cmt	(0XBE3C,	"milli",	0);
	set_cmt	(0XBE3E,	"minutes",	0);
	set_cmt	(0XBE40,	"hours",	0);
	set_cmt	(0XBE42,	"opt",	0);
	set_cmt	(0XBE52,	"seconds",	0);
	set_cmt	(0XBE54,	"milli",	0);
	set_cmt	(0XBE56,	"minutes",	0);
	set_cmt	(0XBE58,	"hours",	0);
	set_cmt	(0XBE5A,	"opt",	0);
	set_cmt	(0XBE6A,	"seconds",	0);
	set_cmt	(0XBE6C,	"milli",	0);
	set_cmt	(0XBE6E,	"minutes",	0);
	set_cmt	(0XBE70,	"hours",	0);
	set_cmt	(0XBE72,	"opt",	0);
	set_cmt	(0XBE82,	"seconds",	0);
	set_cmt	(0XBE84,	"milli",	0);
	set_cmt	(0XBE86,	"minutes",	0);
	set_cmt	(0XBE88,	"hours",	0);
	set_cmt	(0XBE8A,	"opt",	0);
	set_cmt	(0XBE9A,	"seconds",	0);
	set_cmt	(0XBE9C,	"milli",	0);
	set_cmt	(0XBE9E,	"minutes",	0);
	set_cmt	(0XBEA0,	"hours",	0);
	set_cmt	(0XBEA2,	"opt",	0);
	set_cmt	(0XBEB2,	"seconds",	0);
	set_cmt	(0XBEB4,	"milli",	0);
	set_cmt	(0XBEB8,	"minutes",	0);
	set_cmt	(0XBEBA,	"hours",	0);
	set_cmt	(0XBEBC,	"opt",	0);
	create_insn	(0XBEC6);
	create_insn	(0XBED0);
	create_insn	(0XBED2);
	create_insn	(x=0XBED4);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XBED6);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XBEDC);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	set_cmt	(0XBEE4,	"seconds",	0);
	set_cmt	(0XBEE6,	"milli",	0);
	set_cmt	(0XBEEA,	"minutes",	0);
	set_cmt	(0XBEEC,	"hours",	0);
	set_cmt	(0XBEEE,	"opt",	0);
	set_cmt	(0XBEFE,	"seconds",	0);
	set_cmt	(0XBF00,	"milli",	0);
	set_cmt	(0XBF02,	"minutes",	0);
	set_cmt	(0XBF04,	"hours",	0);
	set_cmt	(0XBF06,	"opt",	0);
	set_cmt	(0XBF16,	"seconds",	0);
	set_cmt	(0XBF18,	"milli",	0);
	set_cmt	(0XBF1A,	"minutes",	0);
	set_cmt	(0XBF1C,	"hours",	0);
	set_cmt	(0XBF1E,	"opt",	0);
	set_cmt	(0XBF2E,	"seconds",	0);
	set_cmt	(0XBF30,	"milli",	0);
	set_cmt	(0XBF32,	"minutes",	0);
	set_cmt	(0XBF34,	"hours",	0);
	set_cmt	(0XBF36,	"opt",	0);
	create_insn	(x=0XBF4C);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XBF52);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	set_cmt	(0XBF5A,	"milli",	0);
	set_cmt	(0XBF5C,	"seconds",	0);
	set_cmt	(0XBF5E,	"minutes",	0);
	set_cmt	(0XBF60,	"hours",	0);
	set_cmt	(0XBF62,	"opt",	0);
	create_insn	(x=0XBF6C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XBF70);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(0XBF9A);
	create_dword	(x=0XBF9C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XBF9C,	"param_buf");
	create_dword	(x=0XBFA0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XBFA0,	"bus_n_bytes");
	create_dword	(x=0XBFA4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0XBFA8);
	create_dword	(x=0XBFAC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XBFB0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XBFB4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XBFB8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XBFBC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0XBFC0);
	create_insn	(0XBFC4);
	create_insn	(x=0XBFC6);
	op_hex		(x,	1);
	create_insn	(x=0XBFCE);
	op_hex		(x,	1);
	create_insn	(0XBFD6);
	create_insn	(x=0XBFD8);
	op_hex		(x,	1);
	create_insn	(x=0XBFE0);
	op_hex		(x,	1);
	create_insn	(x=0XBFE8);
	op_hex		(x,	1);
	create_insn	(0XBFF0);
	create_insn	(x=0XBFF2);
	op_hex		(x,	1);
	create_insn	(x=0XBFFA);
	op_hex		(x,	1);
	create_insn	(x=0XC002);
	op_hex		(x,	1);
	create_insn	(x=0XC008);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(0XC024);
	create_insn	(x=0XC026);
	op_hex		(x,	1);
	create_insn	(0XC02E);
	create_insn	(x=0XC030);
	op_hex		(x,	1);
	create_insn	(x=0XC036);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(0XC052);
	create_insn	(0XC05C);
	create_insn	(x=0XC064);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC068);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC06A);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC06E);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC070);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC074);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(0XC078);
	create_insn	(x=0XC07A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XC07C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XC080);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC084);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0XC086);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC094);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC098);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC0A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XC0A2);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC0A8);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0XC0BA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XC0BC);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XC0C0);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(0XC0C4);
	create_insn	(x=0XC0C6);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC0CE);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC0D0);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC0D2);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(0XC0D6);
	create_insn	(0XC0DE);
	create_insn	(0XC0EC);
	create_insn	(x=0XC102);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC104);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC108);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC10C);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(0XC110);
	create_insn	(x=0XC112);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XC116);
	op_stkvar	(x,	1);
	create_insn	(x=0XC11A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XC11C);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0XC11E);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0XC122);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC128);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	set_cmt	(0XC12A,	"switch 5 cases ",	0);
	set_cmt	(0XC12E,	"switch jump",	0);
	set_cmt	(0XC132,	"jump table for switch statement",	0);
	create_byte	(0XC132);
	set_name	(0XC132,	"jpt_212E");
	create_byte	(0XC133);
	create_byte	(0XC134);
	create_byte	(0XC135);
	create_byte	(0XC136);
	set_cmt	(0XC138,	"jumptable 0000212E case 0",	1);
	create_insn	(0XC138);
	create_insn	(x=0XC14A);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC152);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC154);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC156);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	set_cmt	(0XC158,	"jumptable 0000212E default case",	1);
	set_name	(0XC158,	"def_212E");
	create_insn	(0XC15A);
	set_cmt	(0XC15E,	"jumptable 0000212E case 1",	1);
	create_insn	(0XC15E);
	create_insn	(x=0XC17A);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(0XC17E);
	set_cmt	(0XC186,	"jumptable 0000212E case 2",	1);
	create_insn	(x=0XC186);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC18A);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC19C);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC19E);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC1A0);
	op_stkvar	(x,	1);
	create_insn	(0XC1A6);
	create_insn	(x=0XC1AC);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC1AE);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC1B0);
	op_stkvar	(x,	1);
	create_insn	(x=0XC1B4);
	op_stkvar	(x,	1);
	set_cmt	(0XC1B6,	"payload_buf",	0);
	set_cmt	(0XC1BA,	"cmd",	0);
	set_cmt	(0XC1BC,	"smdset",	0);
	set_cmt	(0XC1BE,	"ack",	0);
	set_cmt	(0XC1C0,	"receiver",	0);
	create_insn	(x=0XC1C8);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	set_cmt	(0XC1CC,	"jumptable 0000212E case 3",	1);
	create_insn	(0XC1CC);
	create_insn	(x=0XC1D8);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC1DA);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC1DE);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	set_cmt	(0XC1E2,	"jumptable 0000212E case 4",	1);
	create_insn	(0XC1E2);
	create_insn	(0XC1EA);
	create_insn	(0XC1F2);
	create_insn	(0XC1F8);
	create_insn	(x=0XC1FA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XC1FE);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(0XC20C);
	create_insn	(x=0XC20E);
	op_hex		(x,	1);
	create_insn	(x=0XC216);
	op_hex		(x,	1);
	create_insn	(x=0XC21E);
	op_hex		(x,	1);
	create_insn	(0XC228);
	create_insn	(x=0XC22A);
	op_hex		(x,	1);
	create_insn	(x=0XC232);
	op_hex		(x,	1);
	create_insn	(x=0XC23A);
	op_hex		(x,	1);
	create_insn	(0XC242);
	create_insn	(x=0XC24A);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC250);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC258);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(0XC264);
	create_insn	(0XC266);
	create_insn	(x=0XC268);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XC26A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XC26C);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XC26E);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC27A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XC28E,	"p_err",	0);
	set_cmt	(0XC290,	"opt",	0);
	set_cmt	(0XC292,	"dly",	0);
	set_cmt	(0XC2A0,	"p_err",	0);
	set_cmt	(0XC2A2,	"opt",	0);
	set_cmt	(0XC2A4,	"dly",	0);
	set_cmt	(0XC2B2,	"p_err",	0);
	set_cmt	(0XC2B4,	"opt",	0);
	set_cmt	(0XC2B6,	"dly",	0);
	set_cmt	(0XC2C4,	"p_err",	0);
	set_cmt	(0XC2C6,	"opt",	0);
	set_cmt	(0XC2C8,	"dly",	0);
	set_cmt	(0XC2D6,	"p_err",	0);
	set_cmt	(0XC2D8,	"opt",	0);
	set_cmt	(0XC2DA,	"dly",	0);
	set_cmt	(0XC2E8,	"p_err",	0);
	set_cmt	(0XC2EA,	"opt",	0);
	set_cmt	(0XC2EC,	"dly",	0);
	create_insn	(x=0XC2F4);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XC2F6);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(0XC2FC);
	set_cmt	(0XC300,	"p_err",	0);
	set_cmt	(0XC302,	"opt",	0);
	set_cmt	(0XC304,	"dly",	0);
	create_insn	(0XC316);
	create_insn	(x=0XC31A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XC31C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XC31E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XC322);
	op_plain_offset	(x,	1,	0X1000271C);
	op_plain_offset	(x,	129,	0X1000271C);
	create_insn	(x=0XC328);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC32E);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0XC334);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC34A);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC352);
	op_hex		(x,	1);
	create_insn	(x=0XC360);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC372);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC374);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC378);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC37E);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(0XC384);
	create_insn	(0XC3AE);
	create_insn	(x=0XC3BE);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(0XC3CA);
	create_insn	(x=0XC3DC);
	op_hex		(x,	1);
	create_insn	(x=0XC3E0);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(0XC3EA);
	create_insn	(x=0XC3F2);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC3F8);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0XC408);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC40C);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC410);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC412);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0XC41A);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC41E);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC420);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC428);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC42C);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC43C);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(0XC442);
	set_name	(0XC442,	"task_LEDBELL_worker");
	set_cmt	(0XC448,	"p_err",	0);
	create_insn	(x=0XC448);
	op_stkvar	(x,	1);
	set_cmt	(0XC44A,	"prio_new",	0);
	set_cmt	(0XC44C,	"p_tcb",	0);
	create_insn	(x=0XC44C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XC452);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XC454);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	set_cmt	(0XC45A,	"p_err",	0);
	create_insn	(x=0XC45A);
	op_stkvar	(x,	1);
	set_cmt	(0XC45C,	"prio_new",	0);
	set_cmt	(0XC45E,	"p_tcb",	0);
	create_insn	(x=0XC45E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XC464);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0XC474);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XC478);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XC47C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XC480);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XC484);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XC488);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XC48C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XC490);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XC494);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XC498);
	op_plain_offset	(x,	1,	0X1000007E);
	op_plain_offset	(x,	129,	0X1000007E);
	create_insn	(x=0XC49C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XC4A0);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0XC4A8);
	op_hex		(x,	1);
	create_insn	(x=0XC4AC);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0XC4B2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XC4BA,	"p_err",	0);
	create_insn	(x=0XC4BA);
	op_stkvar	(x,	1);
	create_insn	(x=0XC4C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XC4CE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XC4E6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XC4EA,	"p_err",	0);
	create_insn	(x=0XC4EA);
	op_stkvar	(x,	1);
	create_insn	(x=0XC4F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XC500);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC504);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XC506);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC50A);
	op_plain_offset	(x,	1,	0X10000054);
	op_plain_offset	(x,	129,	0X10000054);
	create_insn	(x=0XC51A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XC522);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0XC52E);
	create_insn	(0XC576);
	create_insn	(x=0XC584);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XC592);
	op_stkvar	(x,	1);
	set_cmt	(0XC594,	"opt",	0);
	set_cmt	(0XC598,	"seconds",	0);
	set_cmt	(0XC59A,	"milli",	0);
	set_cmt	(0XC59C,	"minutes",	0);
	set_cmt	(0XC59E,	"hours",	0);
	make_array	(0XC5A6,	0X2);
	create_dword	(x=0XC5A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XC5AC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XC5B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XC5B4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XC5B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XC5BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0XC5C0);
	create_dword	(x=0XC5C4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XC5C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XC5CC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XC5D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XC5D4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0XC5D8);
	create_insn	(x=0XC5DE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XC5E4);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	set_cmt	(0XC5F6,	"pkt",	0);
	set_cmt	(0XC5FC,	"switch 6 cases ",	0);
	set_cmt	(0XC600,	"switch jump",	0);
	set_cmt	(0XC604,	"jump table for switch statement",	0);
	create_byte	(0XC604);
	set_name	(0XC604,	"jpt_2600");
	create_byte	(0XC605);
	create_byte	(0XC606);
	create_byte	(0XC607);
	create_byte	(0XC608);
	create_byte	(0XC609);
	set_cmt	(0XC60A,	"jumptable 00002600 case 0",	1);
	create_insn	(0XC60A);
	set_cmt	(0XC612,	"pkt",	0);
	set_cmt	(0XC618,	"jumptable 00002600 default case",	1);
	set_name	(0XC618,	"def_2600");
	set_cmt	(0XC61E,	"jumptable 00002600 case 1",	1);
	create_insn	(x=0XC61E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XC620);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(0XC630);
	create_insn	(x=0XC632);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XC634);
	op_plain_offset	(x,	1,	0X10004442);
	op_plain_offset	(x,	129,	0X10004442);
	create_insn	(x=0XC63A);
	op_plain_offset	(x,	1,	0X10004442);
	op_plain_offset	(x,	129,	0X10004442);
	create_insn	(x=0XC640);
	op_plain_offset	(x,	1,	0X10004442);
	op_plain_offset	(x,	129,	0X10004442);
	create_insn	(0XC64A);
	set_cmt	(0XC652,	"a3",	0);
	set_cmt	(0XC660,	"param_buf",	0);
	set_cmt	(0XC670,	"a1",	0);
	create_insn	(0XC698);
	set_cmt	(0XC6A0,	"a3",	0);
	set_cmt	(0XC6AE,	"param_buf",	0);
	set_cmt	(0XC6BE,	"a1",	0);
	create_insn	(x=0XC6E6);
	op_stkvar	(x,	1);
	create_insn	(x=0XC6EA);
	op_stkvar	(x,	1);
	create_insn	(x=0XC6F4);
	op_stkvar	(x,	1);
	set_cmt	(0XC6FC,	"a3",	0);
	create_insn	(x=0XC6FE);
	op_stkvar	(x,	1);
	set_cmt	(0XC702,	"param_buf",	0);
	set_cmt	(0XC704,	"a1",	0);
	set_cmt	(0XC726,	"jumptable 00002600 case 2",	1);
	create_insn	(0XC726);
	set_cmt	(0XC736,	"jumptable 00002600 case 3",	1);
	create_insn	(0XC736);
	set_cmt	(0XC746,	"jumptable 00002600 case 4",	1);
	create_insn	(0XC746);
	set_cmt	(0XC756,	"jumptable 00002600 case 5",	1);
	create_insn	(0XC756);
	create_insn	(x=0XC762);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0XC76A);
	set_name	(0XC76A,	"cmd_exec_set08_cmd02");
	create_insn	(x=0XC782);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0XC788);
	set_name	(0XC788,	"cmd_exec_set08_cmd0E");
	create_insn	(x=0XC78A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XC78E);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XC798);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XC79C);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	set_cmt	(0XC79E,	"p_err",	0);
	create_insn	(x=0XC7B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XC7B6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XC7B8);
	op_plain_offset	(x,	1,	0X10000018);
	op_plain_offset	(x,	129,	0X10000018);
	create_insn	(x=0XC7BA);
	op_hex		(x,	1);
	create_insn	(x=0XC7BE);
	op_plain_offset	(x,	1,	0X10000018);
	op_plain_offset	(x,	129,	0X10000018);
	create_insn	(0XC7C2);
	set_name	(0XC7C2,	"cmd_exec_set09_cmd15");
	create_insn	(x=0XC7C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XC7CE);
	op_plain_offset	(x,	1,	0X10000160);
	op_plain_offset	(x,	129,	0X10000160);
	create_insn	(x=0XC7D4);
	op_plain_offset	(x,	1,	0X10000160);
	op_plain_offset	(x,	129,	0X10000160);
	create_insn	(x=0XC7DA);
	op_plain_offset	(x,	1,	0X10000160);
	op_plain_offset	(x,	129,	0X10000160);
	create_insn	(0XC7DE);
	set_name	(0XC7DE,	"packet_send");
	create_insn	(x=0XC7E0);
	op_hex		(x,	1);
	set_cmt	(0XC7E4,	"switch 31 cases ",	0);
	set_cmt	(0XC7E8,	"switch jump",	0);
	set_cmt	(0XC7EC,	"jump table for switch statement",	0);
	create_byte	(0XC7EC);
	set_name	(0XC7EC,	"jpt_27E8");
	create_byte	(0XC7ED);
	create_byte	(0XC7EE);
	create_byte	(0XC7EF);
	create_byte	(0XC7F0);
	create_byte	(0XC7F1);
	create_byte	(0XC7F2);
	create_byte	(0XC7F3);
	create_byte	(0XC7F4);
	create_byte	(0XC7F5);
	create_byte	(0XC7F6);
	create_byte	(0XC7F7);
	create_byte	(0XC7F8);
	create_byte	(0XC7F9);
	create_byte	(0XC7FA);
	create_byte	(0XC7FB);
	create_byte	(0XC7FC);
	create_byte	(0XC7FD);
	create_byte	(0XC7FE);
	create_byte	(0XC7FF);
	create_byte	(0XC800);
	create_byte	(0XC801);
	create_byte	(0XC802);
	create_byte	(0XC803);
	create_byte	(0XC804);
	create_byte	(0XC805);
	create_byte	(0XC806);
	create_byte	(0XC807);
	create_byte	(0XC808);
	create_byte	(0XC809);
	create_byte	(0XC80A);
	set_cmt	(0XC80C,	"jumptable 000027E8 cases 1,3-5,7-9,11,12,15,17-19,21,23",	1);
	create_insn	(0XC80C);
	set_cmt	(0XC812,	"jumptable 000027E8 case 10",	1);
	create_insn	(0XC812);
	set_cmt	(0XC818,	"jumptable 000027E8 cases 2,13,16,22",	1);
	create_insn	(0XC818);
	set_cmt	(0XC81E,	"jumptable 000027E8 case 30",	1);
	create_insn	(0XC81E);
	set_cmt	(0XC824,	"jumptable 000027E8 case 24",	1);
	create_insn	(0XC824);
	set_cmt	(0XC82A,	"jumptable 000027E8 cases 25,28",	1);
	create_insn	(0XC82A);
	set_cmt	(0XC830,	"jumptable 000027E8 default case",	1);
	create_insn	(0XC830);
	set_name	(0XC830,	"def_27E8");
	create_insn	(0XC832);
	set_name	(0XC832,	"packet_prepare_response");
	create_insn	(x=0XC838);
	op_enum		(x,	1,	GetEnum("PACKET_FIELDS"),0);
	create_insn	(x=0XC840);
	op_hex		(x,	1);
	set_cmt	(0XC85C,	"len",	0);
	set_cmt	(0XC85E,	"buf",	0);
	set_cmt	(0XC860,	"seed",	0);
	set_cmt	(0XC86A,	"a3",	0);
	create_insn	(x=0XC86C);
	op_hex		(x,	1);
	set_cmt	(0XC88E,	"param_buf",	0);
	set_cmt	(0XC890,	"a1",	0);
	set_cmt	(0XC89C,	"seed",	0);
	set_cmt	(0XC8A4,	"buf",	0);
	set_cmt	(0XC8A6,	"len",	0);
	set_cmt	(0XC8AC,	"chksum",	0);
	set_cmt	(0XC8BC,	"buf",	0);
	create_insn	(0XC8C2);
	set_name	(0XC8C2,	"cmd_exec_set09_cmd14");
	create_insn	(x=0XC8C6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XC8C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XC8CC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XC8CE);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(0XC8E6);
	create_insn	(x=0XC8EC);
	op_hex		(x,	1);
	create_insn	(x=0XC8F0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0XC904);
	create_insn	(0XC922);
	create_insn	(x=0XC924);
	op_hex		(x,	1);
	create_insn	(0XC934);
	create_insn	(x=0XC956);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XC964);
	op_hex		(x,	1);
	create_insn	(x=0XC988);
	op_stkvar	(x,	1);
	create_insn	(x=0XC98C);
	op_hex		(x,	1);
	set_cmt	(0XC992,	"a4",	0);
	set_cmt	(0XC994,	"a3",	0);
	set_cmt	(0XC996,	"param_buf",	0);
	create_insn	(x=0XC996);
	op_stkvar	(x,	1);
	set_cmt	(0XC9AC,	"pkt",	0);
	create_insn	(0XC9AC);
	create_insn	(0XC9B4);
	set_name	(0XC9B4,	"cmd_exec_set09_cmd13");
	create_insn	(x=0XC9C0);
	op_stkvar	(x,	1);
	create_insn	(x=0XC9C6);
	op_hex		(x,	1);
	create_dword	(x=0XC9CC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XC9D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XC9D4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XC9D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XC9DC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XC9E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XC9E4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XC9E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XC9EC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XC9F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XC9F4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XC9F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XC9FC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XCA00);
	op_hex		(x,	1);
	create_insn	(x=0XCA04);
	op_stkvar	(x,	1);
	create_insn	(x=0XCA28);
	op_stkvar	(x,	1);
	create_insn	(x=0XCA2C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XCA3C);
	op_stkvar	(x,	1);
	create_insn	(x=0XCA4C);
	op_stkvar	(x,	1);
	create_insn	(x=0XCA50);
	op_hex		(x,	1);
	set_cmt	(0XCA56,	"a4",	0);
	create_insn	(x=0XCA56);
	op_stkvar	(x,	1);
	set_cmt	(0XCA58,	"a3",	0);
	set_cmt	(0XCA5A,	"param_buf",	0);
	set_cmt	(0XCA5C,	"pkt",	0);
	set_cmt	(0XCA62,	"pkt",	0);
	create_insn	(x=0XCA62);
	op_stkvar	(x,	1);
	create_insn	(0XCA6C);
	set_name	(0XCA6C,	"cmd_exec_set09_cmd12");
	set_cmt	(0XCA76,	"atten_ctrl_type",	0);
	set_cmt	(0XCA82,	"flag",	0);
	set_cmt	(0XCA8A,	"flag",	0);
	create_insn	(0XCA8A);
	create_insn	(x=0XCA92);
	op_hex		(x,	1);
	create_insn	(x=0XCA9C);
	op_hex		(x,	1);
	create_insn	(x=0XCABC);
	op_stkvar	(x,	1);
	create_insn	(x=0XCAC0);
	op_hex		(x,	1);
	set_cmt	(0XCAC6,	"a4",	0);
	set_cmt	(0XCAC8,	"a3",	0);
	set_cmt	(0XCACA,	"param_buf",	0);
	create_insn	(x=0XCACA);
	op_stkvar	(x,	1);
	set_cmt	(0XCACC,	"pkt",	0);
	set_cmt	(0XCAD2,	"pkt",	0);
	create_insn	(0XCADC);
	set_name	(0XCADC,	"cmd_exec_set09_cmd10");
	create_insn	(x=0XCADE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XCAE4);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XCAF2);
	op_stkvar	(x,	1);
	create_insn	(x=0XCAF6);
	op_hex		(x,	1);
	set_cmt	(0XCAFC,	"a4",	0);
	set_cmt	(0XCAFE,	"a3",	0);
	set_cmt	(0XCB00,	"param_buf",	0);
	create_insn	(x=0XCB00);
	op_stkvar	(x,	1);
	set_cmt	(0XCB06,	"pkt",	0);
	create_insn	(0XCB10);
	set_name	(0XCB10,	"cmd_exec_set09_cmd0D");
	create_insn	(x=0XCB1C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0XCB20);
	create_insn	(0XCB36);
	create_insn	(x=0XCB40);
	op_stkvar	(x,	1);
	create_insn	(x=0XCB68);
	op_hex		(x,	1);
	set_cmt	(0XCB6E,	"a4",	0);
	create_insn	(x=0XCB6E);
	op_stkvar	(x,	1);
	set_cmt	(0XCB70,	"a3",	0);
	set_cmt	(0XCB72,	"param_buf",	0);
	set_cmt	(0XCB74,	"pkt",	0);
	set_cmt	(0XCB7A,	"pkt",	0);
	create_insn	(x=0XCB7A);
	op_stkvar	(x,	1);
	create_insn	(0XCB84);
	create_insn	(x=0XCB8C);
	op_hex		(x,	1);
	create_insn	(x=0XCB94);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XCB98);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XCB9A);
	op_stkvar	(x,	1);
	create_insn	(0XCBA0);
	create_insn	(0XCBA8);
	create_insn	(0XCBB0);
	create_insn	(0XCBB8);
	create_insn	(0XCBC2);
	create_insn	(0XCBCA);
	set_name	(0XCBCA,	"cmd_exec_set09_cmd0C");
	create_insn	(x=0XCBD8);
	op_hex		(x,	1);
	create_insn	(x=0XCBE0);
	op_stkvar	(x,	1);
	create_insn	(x=0XCBE4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XCBE6,	"a4",	0);
	create_insn	(x=0XCBE6);
	op_stkvar	(x,	1);
	create_insn	(x=0XCBE8);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XCBEC);
	op_stkvar	(x,	1);
	create_insn	(x=0XCBF2);
	op_stkvar	(x,	1);
	create_insn	(x=0XCBF8);
	op_stkvar	(x,	1);
	create_insn	(x=0XCBFE);
	op_stkvar	(x,	1);
	create_insn	(x=0XCC06);
	op_stkvar	(x,	1);
	create_insn	(x=0XCC0C);
	op_stkvar	(x,	1);
	set_cmt	(0XCC10,	"a3",	0);
	set_cmt	(0XCC12,	"param_buf",	0);
	set_cmt	(0XCC18,	"pkt",	0);
	create_insn	(x=0XCC18);
	op_stkvar	(x,	1);
	create_insn	(0XCC22);
	set_name	(0XCC22,	"cmd_exec_set09_cmd09");
	create_insn	(x=0XCC24);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XCC2A);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XCC36);
	op_hex		(x,	1);
	create_insn	(x=0XCC3E);
	op_stkvar	(x,	1);
	set_cmt	(0XCC42,	"a4",	0);
	set_cmt	(0XCC44,	"a3",	0);
	set_cmt	(0XCC46,	"param_buf",	0);
	create_insn	(x=0XCC46);
	op_stkvar	(x,	1);
	set_cmt	(0XCC4C,	"pkt",	0);
	create_insn	(0XCC54);
	set_name	(0XCC54,	"cmd_exec_set09_cmd07");
	create_insn	(x=0XCC64);
	op_stkvar	(x,	1);
	create_insn	(x=0XCC72);
	op_hex		(x,	1);
	create_insn	(x=0XCC7A);
	op_stkvar	(x,	1);
	set_cmt	(0XCC7E,	"a4",	0);
	set_cmt	(0XCC80,	"a3",	0);
	set_cmt	(0XCC82,	"param_buf",	0);
	create_insn	(x=0XCC82);
	op_stkvar	(x,	1);
	set_cmt	(0XCC84,	"pkt",	0);
	set_cmt	(0XCC8A,	"pkt",	0);
	create_insn	(0XCC94);
	set_name	(0XCC94,	"cmd_exec_set09_cmd06");
	set_cmt	(0XCC9C,	"nval",	0);
	set_cmt	(0XCC9E,	"nreg",	0);
	set_cmt	(0XCCA0,	"a3",	0);
	create_insn	(x=0XCCB0);
	op_hex		(x,	1);
	create_insn	(x=0XCCB8);
	op_stkvar	(x,	1);
	set_cmt	(0XCCBC,	"a4",	0);
	set_cmt	(0XCCBE,	"a3",	0);
	set_cmt	(0XCCC0,	"param_buf",	0);
	create_insn	(x=0XCCC0);
	op_stkvar	(x,	1);
	set_cmt	(0XCCC2,	"pkt",	0);
	set_cmt	(0XCCC8,	"pkt",	0);
	create_insn	(0XCCD0);
	set_name	(0XCCD0,	"cmd_exec_set09_cmd05");
	create_insn	(x=0XCCDC);
	op_stkvar	(x,	1);
	create_insn	(x=0XCCEA);
	op_hex		(x,	1);
	create_insn	(x=0XCCF2);
	op_stkvar	(x,	1);
	set_cmt	(0XCCF6,	"a4",	0);
	set_cmt	(0XCCF8,	"a3",	0);
	set_cmt	(0XCCFA,	"param_buf",	0);
	create_insn	(x=0XCCFA);
	op_stkvar	(x,	1);
	set_cmt	(0XCCFC,	"pkt",	0);
	set_cmt	(0XCD02,	"pkt",	0);
	create_insn	(0XCD0A);
	set_name	(0XCD0A,	"cmd_exec_set09_cmd04");
	create_insn	(x=0XCD24);
	op_hex		(x,	1);
	create_insn	(x=0XCD2C);
	op_stkvar	(x,	1);
	set_cmt	(0XCD30,	"a4",	0);
	set_cmt	(0XCD32,	"a3",	0);
	set_cmt	(0XCD34,	"param_buf",	0);
	create_insn	(x=0XCD34);
	op_stkvar	(x,	1);
	set_cmt	(0XCD36,	"pkt",	0);
	set_cmt	(0XCD3C,	"pkt",	0);
	create_insn	(0XCD44);
	set_name	(0XCD44,	"dbg_printf");
	create_insn	(0XCD46);
	set_name	(0XCD46,	"packet_prepare_from");
	create_insn	(x=0XCD4A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XCD52);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XCD54);
	op_stkvar	(x,	1);
	create_insn	(x=0XCD64);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XCD66);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XCD6C);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XCD76);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	set_cmt	(0XCD7E,	"len",	0);
	create_insn	(x=0XCD80);
	op_hex		(x,	1);
	set_cmt	(0XCD98,	"buf",	0);
	set_cmt	(0XCD9A,	"seed",	0);
	set_cmt	(0XCDA4,	"a3",	0);
	create_insn	(x=0XCDA6);
	op_hex		(x,	1);
	create_insn	(x=0XCDB4);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	set_cmt	(0XCDC2,	"a1",	0);
	set_cmt	(0XCDC6,	"param_buf",	0);
	create_insn	(x=0XCDC6);
	op_stkvar	(x,	1);
	set_cmt	(0XCDD0,	"seed",	0);
	set_cmt	(0XCDD8,	"buf",	0);
	set_cmt	(0XCDDA,	"len",	0);
	set_cmt	(0XCDE0,	"chksum",	0);
	set_cmt	(0XCDEC,	"buf",	0);
	create_insn	(x=0XCDF4);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(0XCDFA);
	create_insn	(x=0XCDFE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XCE00);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XCE06);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XCE0A);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_dword	(x=0XCE14);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XCE18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XCE1C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XCE20);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0XCE24);
	create_insn	(0XCE36);
	create_insn	(x=0XCE40);
	op_hex		(x,	1);
	create_insn	(0XCE4C);
	create_insn	(x=0XCE6E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XCE74,	"cmd",	0);
	set_cmt	(0XCE78,	"payload_len",	0);
	set_cmt	(0XCE7C,	"smdset",	0);
	set_cmt	(0XCE7E,	"ack",	0);
	set_cmt	(0XCE80,	"receiver",	0);
	set_cmt	(0XCE82,	"sender",	0);
	set_cmt	(0XCE88,	"pkt",	0);
	create_insn	(x=0XCE88);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0XCE94);
	set_name	(0XCE94,	"cmd_exec_set09_cmd00");
	create_insn	(x=0XCE96);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XCEA2,	"param_buf",	0);
	set_cmt	(0XCEA6,	"a3",	0);
	set_cmt	(0XCEA8,	"a1",	0);
	create_insn	(x=0XCEB0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XCEB2);
	op_plain_offset	(x,	1,	0X10004442);
	op_plain_offset	(x,	129,	0X10004442);
	create_insn	(x=0XCEBC);
	op_plain_offset	(x,	1,	0X10004442);
	op_plain_offset	(x,	129,	0X10004442);
	create_insn	(x=0XCEC0);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0XCEC6);
	op_plain_offset	(x,	1,	0X10004442);
	op_plain_offset	(x,	129,	0X10004442);
	create_insn	(x=0XCECA);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0XCED0);
	op_plain_offset	(x,	1,	0X10004442);
	op_plain_offset	(x,	129,	0X10004442);
	create_insn	(x=0XCED4);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0XCEDA);
	op_plain_offset	(x,	1,	0X10004442);
	op_plain_offset	(x,	129,	0X10004442);
	create_insn	(x=0XCEDE);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0XCEE4);
	op_plain_offset	(x,	1,	0X10004442);
	op_plain_offset	(x,	129,	0X10004442);
	create_insn	(x=0XCEE8);
	op_plain_offset	(x,	1,	0X10004442);
	op_plain_offset	(x,	129,	0X10004442);
	create_insn	(x=0XCEEC);
	op_plain_offset	(x,	1,	0X10004442);
	op_plain_offset	(x,	129,	0X10004442);
	create_insn	(x=0XCEF0);
	op_plain_offset	(x,	1,	0X10004442);
	op_plain_offset	(x,	129,	0X10004442);
	create_insn	(x=0XCEF4);
	op_plain_offset	(x,	1,	0X10004442);
	op_plain_offset	(x,	129,	0X10004442);
	create_insn	(x=0XCEF8);
	op_plain_offset	(x,	1,	0X10004442);
	op_plain_offset	(x,	129,	0X10004442);
	create_insn	(x=0XCEFC);
	op_plain_offset	(x,	1,	0X10004442);
	op_plain_offset	(x,	129,	0X10004442);
	create_insn	(x=0XCF00);
	op_plain_offset	(x,	1,	0X10004442);
	op_plain_offset	(x,	129,	0X10004442);
	create_insn	(x=0XCF04);
	op_plain_offset	(x,	1,	0X10004442);
	op_plain_offset	(x,	129,	0X10004442);
	create_insn	(x=0XCF08);
	op_plain_offset	(x,	1,	0X10004442);
	op_plain_offset	(x,	129,	0X10004442);
	create_insn	(x=0XCF12);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XCF1E,	"a1",	0);
	set_cmt	(0XCF22,	"a3",	0);
	set_cmt	(0XCF24,	"param_buf",	0);
	create_insn	(x=0XCF3E);
	op_stkvar	(x,	1);
	create_insn	(x=0XCF44);
	op_plain_offset	(x,	1,	0X10004442);
	op_plain_offset	(x,	129,	0X10004442);
	create_insn	(x=0XCF4C);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0XCF4E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XCF50);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0XCF52);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XCF56);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0XCF5A);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	set_cmt	(0XCF5C,	"a3",	0);
	set_cmt	(0XCF66,	"param_buf",	0);
	set_cmt	(0XCF68,	"a1",	0);
	create_insn	(x=0XCF68);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XCF6E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XCF74);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XCF7C);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0XCF7E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XCF80,	"lev",	0);
	create_insn	(x=0XCF8A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0XCF8A,	"cmd_exec_set06_cmd41");
	create_insn	(x=0XCF90);
	op_plain_offset	(x,	1,	0X100039B8);
	op_plain_offset	(x,	129,	0X100039B8);
	create_insn	(x=0XCF9C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XCFA0);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(0XCFA4);
	set_name	(0XCFA4,	"cmd_exec_set06_cmdFD");
	create_insn	(x=0XCFB2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XCFB6);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XCFC4);
	op_stkvar	(x,	1);
	create_insn	(x=0XCFC8);
	op_hex		(x,	1);
	set_cmt	(0XCFCE,	"a4",	0);
	set_cmt	(0XCFD0,	"a3",	0);
	set_cmt	(0XCFD2,	"param_buf",	0);
	create_insn	(x=0XCFD2);
	op_stkvar	(x,	1);
	set_cmt	(0XCFD8,	"pkt",	0);
	create_insn	(0XCFE0);
	set_name	(0XCFE0,	"cmd_exec_set06_cmdF0");
	create_insn	(x=0XCFE4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XCFF0);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XCFFA);
	op_plain_offset	(x,	1,	0X10000168);
	op_plain_offset	(x,	129,	0X10000168);
	create_insn	(x=0XD018);
	op_stkvar	(x,	1);
	create_insn	(x=0XD01C);
	op_hex		(x,	1);
	create_insn	(x=0XD046);
	op_plain_offset	(x,	1,	0X10000168);
	op_plain_offset	(x,	129,	0X10000168);
	create_insn	(x=0XD048);
	op_hex		(x,	1);
	create_insn	(x=0XD04C);
	op_plain_offset	(x,	1,	0X10000168);
	op_plain_offset	(x,	129,	0X10000168);
	create_insn	(x=0XD050);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XD058,	"nreg",	0);
	create_insn	(x=0XD058);
	create_insn	(x=0XD05C);
	create_insn	(x=0XD06E);
	op_stkvar	(x,	1);
	create_insn	(x=0XD07A);
	op_hex		(x,	1);
	create_insn	(0XD0A8);
	create_insn	(x=0XD0AA);
	op_stkvar	(x,	1);
	create_insn	(x=0XD0B6);
	op_hex		(x,	1);
	create_insn	(x=0XD0E2);
	op_plain_offset	(x,	1,	0X10000168);
	op_plain_offset	(x,	129,	0X10000168);
	create_insn	(x=0XD0EC);
	op_plain_offset	(x,	1,	0X10000168);
	op_plain_offset	(x,	129,	0X10000168);
	set_cmt	(0XD0EE,	"a3",	0);
	set_cmt	(0XD0F0,	"nval",	0);
	create_insn	(x=0XD0F8);
	op_hex		(x,	1);
	create_insn	(x=0XD108);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XD110);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(0XD12A);
	create_insn	(0XD12E);
	create_insn	(x=0XD132);
	op_plain_offset	(x,	1,	0X10000168);
	op_plain_offset	(x,	129,	0X10000168);
	create_insn	(x=0XD134);
	op_hex		(x,	1);
	create_insn	(x=0XD13A);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XD14A);
	op_plain_offset	(x,	1,	0X10000168);
	op_plain_offset	(x,	129,	0X10000168);
	create_insn	(0XD150);
	create_insn	(x=0XD152);
	op_plain_offset	(x,	1,	0X10000168);
	op_plain_offset	(x,	129,	0X10000168);
	create_insn	(x=0XD156);
	op_plain_offset	(x,	1,	0X10000168);
	op_plain_offset	(x,	129,	0X10000168);
	set_cmt	(0XD164,	"nval",	0);
	create_insn	(0XD164);
	set_cmt	(0XD166,	"a3",	0);
	set_cmt	(0XD168,	"nreg",	0);
	create_insn	(x=0XD17C);
	op_hex		(x,	1);
	set_cmt	(0XD180,	"a3",	0);
	set_cmt	(0XD182,	"nval",	0);
	set_cmt	(0XD184,	"nreg",	0);
	create_insn	(x=0XD184);
	set_cmt	(0XD18C,	"a3",	0);
	set_cmt	(0XD18E,	"nval",	0);
	set_cmt	(0XD190,	"nreg",	0);
	create_insn	(x=0XD190);
	op_enum		(x,	1,	GetEnum("SPI_AD9363_REG_DEFINES"),0);
	set_cmt	(0XD196,	"a3",	0);
	set_cmt	(0XD198,	"nval",	0);
	set_cmt	(0XD19A,	"nreg",	0);
	create_insn	(x=0XD19A);
	op_enum		(x,	1,	GetEnum("SPI_AD9363_REG_DEFINES"),0);
	set_cmt	(0XD1A0,	"a3",	0);
	create_insn	(0XD1A4);
	set_cmt	(0XD1A6,	"nval",	0);
	create_insn	(0XD1A6);
	set_cmt	(0XD1A8,	"nreg",	0);
	create_insn	(x=0XD1A8);
	create_insn	(x=0XD1B0);
	op_plain_offset	(x,	1,	0X10000168);
	op_plain_offset	(x,	129,	0X10000168);
	create_insn	(0XD1B6);
	create_insn	(x=0XD1BC);
	op_plain_offset	(x,	1,	0X10000168);
	op_plain_offset	(x,	129,	0X10000168);
	create_insn	(x=0XD1C6);
	op_plain_offset	(x,	1,	0X10000168);
	op_plain_offset	(x,	129,	0X10000168);
	set_cmt	(0XD1C8,	"a3",	0);
	set_cmt	(0XD1CA,	"nval",	0);
	create_insn	(x=0XD1D2);
	op_hex		(x,	1);
	create_insn	(x=0XD1E2);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XD1EA);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(0XD202);
	create_insn	(0XD206);
	create_insn	(0XD20A);
	create_insn	(x=0XD20E);
	op_plain_offset	(x,	1,	0X10000168);
	op_plain_offset	(x,	129,	0X10000168);
	create_insn	(x=0XD212);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XD21A);
	op_plain_offset	(x,	1,	0X10000168);
	op_plain_offset	(x,	129,	0X10000168);
	create_insn	(x=0XD21E);
	op_plain_offset	(x,	1,	0X10000168);
	op_plain_offset	(x,	129,	0X10000168);
	create_insn	(x=0XD224);
	op_plain_offset	(x,	1,	0X10000168);
	op_plain_offset	(x,	129,	0X10000168);
	set_cmt	(0XD236,	"nval",	0);
	create_insn	(0XD236);
	set_cmt	(0XD238,	"a3",	0);
	set_cmt	(0XD23A,	"nreg",	0);
	set_cmt	(0XD240,	"a3",	0);
	set_cmt	(0XD242,	"nval",	0);
	set_cmt	(0XD244,	"nreg",	0);
	create_insn	(x=0XD244);
	make_array	(0XD24E,	0X2);
	create_dword	(x=0XD250);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0XD254);
	create_dword	(x=0XD25C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XD25C,	"dst");
	create_dword	(x=0XD260);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XD264);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XD268);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XD26C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0XD270,	0XD279);
	set_name	(0XD270,	"aTickU");
	create_byte	(0XD279);
	make_array	(0XD279,	0X3);
	create_dword	(x=0XD27C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0XD280);
	create_insn	(x=0XD282);
	op_stkvar	(x,	1);
	create_insn	(x=0XD292);
	op_stkvar	(x,	1);
	create_insn	(x=0XD2A6);
	op_stkvar	(x,	1);
	create_insn	(x=0XD2AA);
	op_plain_offset	(x,	1,	0X10000168);
	op_plain_offset	(x,	129,	0X10000168);
	set_cmt	(0XD2AC,	"a4",	0);
	create_insn	(x=0XD2AC);
	op_stkvar	(x,	1);
	create_insn	(x=0XD2B0);
	op_stkvar	(x,	1);
	set_cmt	(0XD2B4,	"a3",	0);
	create_insn	(x=0XD2BA);
	op_stkvar	(x,	1);
	create_insn	(x=0XD2BE);
	op_plain_offset	(x,	1,	0X10000168);
	op_plain_offset	(x,	129,	0X10000168);
	create_insn	(x=0XD2C0);
	op_stkvar	(x,	1);
	create_insn	(x=0XD2C4);
	op_plain_offset	(x,	1,	0X10000168);
	op_plain_offset	(x,	129,	0X10000168);
	create_insn	(x=0XD2C6);
	op_stkvar	(x,	1);
	create_insn	(x=0XD2CA);
	op_plain_offset	(x,	1,	0X10000168);
	op_plain_offset	(x,	129,	0X10000168);
	create_insn	(x=0XD2CC);
	op_stkvar	(x,	1);
	create_insn	(x=0XD2D0);
	op_plain_offset	(x,	1,	0X10000168);
	op_plain_offset	(x,	129,	0X10000168);
	create_insn	(x=0XD2D2);
	op_stkvar	(x,	1);
	set_cmt	(0XD2D8,	"param_buf",	0);
	create_insn	(x=0XD2DA);
	op_hex		(x,	1);
	set_cmt	(0XD2E0,	"pkt",	0);
	set_cmt	(0XD2E6,	"pkt",	0);
	create_insn	(x=0XD2E6);
	op_stkvar	(x,	1);
	create_insn	(0XD2F2);
	set_name	(0XD2F2,	"cmd_exec_set06_cmd3C");
	create_insn	(x=0XD2F6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XD30C);
	op_stkvar	(x,	1);
	create_insn	(x=0XD310);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XD314);
	op_stkvar	(x,	1);
	create_insn	(x=0XD322);
	op_hex		(x,	1);
	set_cmt	(0XD328,	"a4",	0);
	create_insn	(x=0XD328);
	op_stkvar	(x,	1);
	set_cmt	(0XD32A,	"param_buf",	0);
	set_cmt	(0XD330,	"pkt",	0);
	create_insn	(x=0XD330);
	op_stkvar	(x,	1);
	create_insn	(x=0XD338);
	op_stkvar	(x,	1);
	create_insn	(x=0XD33E);
	op_stkvar	(x,	1);
	create_insn	(0XD34A);
	set_name	(0XD34A,	"cmd_exec_set06_cmd3B");
	create_insn	(x=0XD34C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XD354);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XD36A);
	op_hex		(x,	1);
	create_insn	(x=0XD372);
	op_stkvar	(x,	1);
	set_cmt	(0XD376,	"a4",	0);
	set_cmt	(0XD378,	"a3",	0);
	set_cmt	(0XD37A,	"param_buf",	0);
	create_insn	(x=0XD37A);
	op_stkvar	(x,	1);
	set_cmt	(0XD380,	"pkt",	0);
	create_insn	(0XD388);
	set_name	(0XD388,	"cmd_exec_set06_cmd38");
	create_insn	(x=0XD396);
	op_hex		(x,	1);
	create_insn	(x=0XD39E);
	op_stkvar	(x,	1);
	create_insn	(x=0XD3A2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XD3A4,	"a4",	0);
	create_insn	(x=0XD3A4);
	op_stkvar	(x,	1);
	create_insn	(x=0XD3A6);
	op_plain_offset	(x,	1,	0X100001AE);
	op_plain_offset	(x,	129,	0X100001AE);
	create_insn	(x=0XD3A8);
	op_stkvar	(x,	1);
	create_insn	(x=0XD3AC);
	op_plain_offset	(x,	1,	0X100001AE);
	op_plain_offset	(x,	129,	0X100001AE);
	create_insn	(x=0XD3AE);
	op_stkvar	(x,	1);
	create_insn	(x=0XD3B2);
	op_plain_offset	(x,	1,	0X100001AE);
	op_plain_offset	(x,	129,	0X100001AE);
	create_insn	(x=0XD3B6);
	op_stkvar	(x,	1);
	create_insn	(x=0XD3BA);
	op_plain_offset	(x,	1,	0X100001AE);
	op_plain_offset	(x,	129,	0X100001AE);
	create_insn	(x=0XD3BC);
	op_stkvar	(x,	1);
	create_insn	(x=0XD3C0);
	op_plain_offset	(x,	1,	0X100001AE);
	op_plain_offset	(x,	129,	0X100001AE);
	create_insn	(x=0XD3C4);
	op_stkvar	(x,	1);
	create_insn	(x=0XD3C8);
	op_plain_offset	(x,	1,	0X100001AE);
	op_plain_offset	(x,	129,	0X100001AE);
	create_insn	(x=0XD3CA);
	op_stkvar	(x,	1);
	create_insn	(x=0XD3D0);
	op_stkvar	(x,	1);
	create_insn	(x=0XD3D4);
	op_plain_offset	(x,	1,	0X100001AE);
	op_plain_offset	(x,	129,	0X100001AE);
	create_insn	(x=0XD3D6);
	op_stkvar	(x,	1);
	create_insn	(x=0XD3DA);
	op_plain_offset	(x,	1,	0X100001AE);
	op_plain_offset	(x,	129,	0X100001AE);
	create_insn	(x=0XD3DC);
	op_stkvar	(x,	1);
	create_insn	(x=0XD3E0);
	op_plain_offset	(x,	1,	0X100001AE);
	op_plain_offset	(x,	129,	0X100001AE);
	create_insn	(x=0XD3E2);
	op_stkvar	(x,	1);
	set_cmt	(0XD3E6,	"a3",	0);
	set_cmt	(0XD3E8,	"param_buf",	0);
	set_cmt	(0XD3EE,	"pkt",	0);
	create_insn	(x=0XD3EE);
	op_stkvar	(x,	1);
	create_insn	(0XD3F8);
	set_name	(0XD3F8,	"cmd_exec_set06_cmd36");
	create_insn	(x=0XD408);
	op_stkvar	(x,	1);
	create_insn	(x=0XD40C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XD40E,	"a4",	0);
	set_cmt	(0XD410,	"a3",	0);
	create_insn	(x=0XD414);
	op_stkvar	(x,	1);
	create_insn	(x=0XD41A);
	op_hex		(x,	1);
	set_cmt	(0XD420,	"param_buf",	0);
	create_insn	(x=0XD420);
	op_stkvar	(x,	1);
	set_cmt	(0XD426,	"pkt",	0);
	create_insn	(0XD42E);
	set_name	(0XD42E,	"cmd_exec_set06_cmd35");
	create_insn	(x=0XD43A);
	op_stkvar	(x,	1);
	create_insn	(x=0XD43E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0XD444);
	create_insn	(x=0XD446);
	op_stkvar	(x,	1);
	create_insn	(x=0XD454);
	op_hex		(x,	1);
	set_cmt	(0XD45A,	"a4",	0);
	set_cmt	(0XD45C,	"a3",	0);
	set_cmt	(0XD45E,	"param_buf",	0);
	create_insn	(x=0XD45E);
	op_stkvar	(x,	1);
	set_cmt	(0XD464,	"pkt",	0);
	create_insn	(0XD46C);
	set_name	(0XD46C,	"cmd_exec_set06_cmd34");
	create_insn	(x=0XD47C);
	op_stkvar	(x,	1);
	create_insn	(x=0XD480);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XD482,	"a4",	0);
	set_cmt	(0XD484,	"a3",	0);
	create_insn	(x=0XD486);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XD48A);
	op_stkvar	(x,	1);
	create_insn	(x=0XD490);
	op_hex		(x,	1);
	set_cmt	(0XD496,	"param_buf",	0);
	create_insn	(x=0XD496);
	op_stkvar	(x,	1);
	set_cmt	(0XD49C,	"pkt",	0);
	create_insn	(0XD4A4);
	set_name	(0XD4A4,	"cmd_exec_set06_cmd33");
	create_insn	(x=0XD4B0);
	op_stkvar	(x,	1);
	create_insn	(x=0XD4B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XD4B6);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(0XD4BC);
	create_insn	(x=0XD4BE);
	op_stkvar	(x,	1);
	create_insn	(x=0XD4CC);
	op_hex		(x,	1);
	set_cmt	(0XD4D2,	"a4",	0);
	set_cmt	(0XD4D4,	"a3",	0);
	set_cmt	(0XD4D6,	"param_buf",	0);
	create_insn	(x=0XD4D6);
	op_stkvar	(x,	1);
	set_cmt	(0XD4DC,	"pkt",	0);
	create_insn	(0XD4E4);
	set_name	(0XD4E4,	"cmd_exec_set06_cmd32");
	create_insn	(x=0XD4F2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XD4F4);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XD4FA);
	op_stkvar	(x,	1);
	set_cmt	(0XD500,	"a4",	0);
	create_insn	(x=0XD500);
	op_stkvar	(x,	1);
	create_insn	(x=0XD502);
	op_plain_offset	(x,	1,	0X100006F1);
	op_plain_offset	(x,	129,	0X100006F1);
	create_insn	(x=0XD506);
	op_stkvar	(x,	1);
	create_insn	(x=0XD50A);
	op_plain_offset	(x,	1,	0X100006F1);
	op_plain_offset	(x,	129,	0X100006F1);
	create_insn	(x=0XD50C);
	op_stkvar	(x,	1);
	create_insn	(x=0XD510);
	op_plain_offset	(x,	1,	0X100006F1);
	op_plain_offset	(x,	129,	0X100006F1);
	create_insn	(x=0XD512);
	op_stkvar	(x,	1);
	create_insn	(x=0XD518);
	op_stkvar	(x,	1);
	create_insn	(x=0XD51C);
	op_plain_offset	(x,	1,	0X100006F1);
	op_plain_offset	(x,	129,	0X100006F1);
	create_insn	(x=0XD51E);
	op_stkvar	(x,	1);
	create_insn	(x=0XD522);
	op_plain_offset	(x,	1,	0X100006F1);
	op_plain_offset	(x,	129,	0X100006F1);
	create_insn	(x=0XD524);
	op_stkvar	(x,	1);
	set_cmt	(0XD52A,	"a3",	0);
	create_insn	(x=0XD52C);
	op_hex		(x,	1);
	set_cmt	(0XD532,	"param_buf",	0);
	set_cmt	(0XD538,	"pkt",	0);
	create_insn	(x=0XD538);
	op_stkvar	(x,	1);
	create_insn	(0XD542);
	set_name	(0XD542,	"cmd_exec_set06_cmd31");
	create_insn	(x=0XD54C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XD54E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XD554,	"RTCx",	0);
	create_insn	(x=0XD554);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XD55A);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	set_cmt	(0XD560,	"TimeValue",	0);
	create_insn	(0XD560);
	set_cmt	(0XD564,	"Timetype",	0);
	set_cmt	(0XD56C,	"TimeValue",	0);
	set_cmt	(0XD56E,	"Timetype",	0);
	set_cmt	(0XD570,	"RTCx",	0);
	set_cmt	(0XD576,	"TimeValue",	0);
	set_cmt	(0XD578,	"Timetype",	0);
	set_cmt	(0XD57A,	"RTCx",	0);
	set_cmt	(0XD580,	"TimeValue",	0);
	set_cmt	(0XD582,	"Timetype",	0);
	set_cmt	(0XD584,	"RTCx",	0);
	set_cmt	(0XD58A,	"TimeValue",	0);
	set_cmt	(0XD58C,	"Timetype",	0);
	set_cmt	(0XD58E,	"RTCx",	0);
	set_cmt	(0XD594,	"TimeValue",	0);
	set_cmt	(0XD596,	"Timetype",	0);
	set_cmt	(0XD598,	"RTCx",	0);
	create_insn	(x=0XD59E);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	set_cmt	(0XD5A2,	"TimeValue",	0);
	create_insn	(0XD5A2);
	set_cmt	(0XD5A6,	"Timetype",	0);
	set_cmt	(0XD5AE,	"TimeValue",	0);
	set_cmt	(0XD5B0,	"Timetype",	0);
	set_cmt	(0XD5B2,	"RTCx",	0);
	set_cmt	(0XD5B8,	"TimeValue",	0);
	set_cmt	(0XD5BA,	"Timetype",	0);
	set_cmt	(0XD5BC,	"RTCx",	0);
	set_cmt	(0XD5C2,	"TimeValue",	0);
	set_cmt	(0XD5C4,	"Timetype",	0);
	set_cmt	(0XD5C6,	"RTCx",	0);
	set_cmt	(0XD5CC,	"TimeValue",	0);
	set_cmt	(0XD5CE,	"Timetype",	0);
	set_cmt	(0XD5D0,	"RTCx",	0);
	set_cmt	(0XD5D6,	"TimeValue",	0);
	set_cmt	(0XD5D8,	"Timetype",	0);
	set_cmt	(0XD5DA,	"RTCx",	0);
	create_insn	(x=0XD5E2);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XD5EE);
	op_stkvar	(x,	1);
	create_insn	(x=0XD5F2);
	op_hex		(x,	1);
	set_cmt	(0XD5F8,	"a4",	0);
	set_cmt	(0XD5FA,	"a3",	0);
	set_cmt	(0XD5FC,	"param_buf",	0);
	create_insn	(x=0XD5FC);
	op_stkvar	(x,	1);
	set_cmt	(0XD5FE,	"pkt",	0);
	set_cmt	(0XD604,	"pkt",	0);
	create_insn	(x=0XD60A);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(0XD614);
	set_name	(0XD614,	"cmd_exec_set06_cmd30");
	create_insn	(x=0XD626);
	op_stkvar	(x,	1);
	set_cmt	(0XD62A,	"a3",	0);
	set_cmt	(0XD62C,	"param_buf",	0);
	create_insn	(x=0XD62C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XD62E,	"a1",	0);
	create_insn	(x=0XD62E);
	op_stkvar	(x,	1);
	set_cmt	(0XD638,	"a4",	0);
	create_insn	(x=0XD63A);
	op_hex		(x,	1);
	set_cmt	(0XD640,	"a3",	0);
	set_cmt	(0XD642,	"param_buf",	0);
	create_insn	(x=0XD642);
	op_stkvar	(x,	1);
	set_cmt	(0XD644,	"pkt",	0);
	set_cmt	(0XD64A,	"pkt",	0);
	create_insn	(0XD654);
	set_name	(0XD654,	"cmd_exec_set06_cmd2F");
	create_insn	(x=0XD656);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XD65C);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(0XD66C);
	create_insn	(x=0XD66E);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(0XD672);
	create_insn	(x=0XD67A);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XD67C);
	op_stkvar	(x,	1);
	create_insn	(0XD682);
	create_insn	(x=0XD684);
	op_stkvar	(x,	1);
	create_insn	(x=0XD692);
	op_stkvar	(x,	1);
	create_insn	(x=0XD696);
	op_hex		(x,	1);
	set_cmt	(0XD69C,	"a4",	0);
	create_insn	(x=0XD69C);
	op_stkvar	(x,	1);
	set_cmt	(0XD69E,	"param_buf",	0);
	set_cmt	(0XD6A4,	"pkt",	0);
	create_insn	(x=0XD6A4);
	op_stkvar	(x,	1);
	create_insn	(0XD6AC);
	set_name	(0XD6AC,	"cmd_exec_set06_cmd2E");
	create_insn	(x=0XD6BC);
	op_stkvar	(x,	1);
	create_insn	(x=0XD6C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XD6C2,	"a4",	0);
	create_insn	(x=0XD6C4);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XD6C8);
	op_stkvar	(x,	1);
	create_insn	(x=0XD6CE);
	op_stkvar	(x,	1);
	set_cmt	(0XD6D4,	"a3",	0);
	create_insn	(x=0XD6D6);
	op_hex		(x,	1);
	set_cmt	(0XD6DC,	"param_buf",	0);
	create_insn	(x=0XD6DC);
	op_stkvar	(x,	1);
	set_cmt	(0XD6E2,	"pkt",	0);
	make_array	(0XD6EA,	0X2);
	create_dword	(x=0XD6EC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XD6F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XD6F4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XD6F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XD6FC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XD700);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XD704);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XD708);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0XD708,	"src");
	create_insn	(0XD70C);
	set_name	(0XD70C,	"cmd_exec_set06_cmd2D");
	create_insn	(x=0XD70E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XD714);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XD728);
	op_stkvar	(x,	1);
	create_insn	(x=0XD72C);
	op_hex		(x,	1);
	set_cmt	(0XD732,	"a4",	0);
	set_cmt	(0XD734,	"a3",	0);
	set_cmt	(0XD736,	"param_buf",	0);
	create_insn	(x=0XD736);
	op_stkvar	(x,	1);
	set_cmt	(0XD73C,	"pkt",	0);
	create_insn	(0XD744);
	set_name	(0XD744,	"cmd_exec_set06_cmd2C");
	create_insn	(x=0XD754);
	op_stkvar	(x,	1);
	create_insn	(x=0XD758);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XD75A,	"a4",	0);
	create_insn	(x=0XD75C);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XD760);
	op_stkvar	(x,	1);
	create_insn	(x=0XD766);
	op_stkvar	(x,	1);
	create_insn	(x=0XD76C);
	op_stkvar	(x,	1);
	set_cmt	(0XD772,	"a3",	0);
	create_insn	(x=0XD774);
	op_hex		(x,	1);
	set_cmt	(0XD77A,	"param_buf",	0);
	create_insn	(x=0XD77A);
	op_stkvar	(x,	1);
	set_cmt	(0XD780,	"pkt",	0);
	create_insn	(0XD78A);
	set_name	(0XD78A,	"cmd_exec_set06_cmd2B");
	create_insn	(x=0XD7A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XD7A6);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XD7BE);
	op_stkvar	(x,	1);
	create_insn	(x=0XD7C2);
	op_hex		(x,	1);
	set_cmt	(0XD7C8,	"a4",	0);
	set_cmt	(0XD7CA,	"a3",	0);
	set_cmt	(0XD7CC,	"param_buf",	0);
	create_insn	(x=0XD7CC);
	op_stkvar	(x,	1);
	set_cmt	(0XD7CE,	"pkt",	0);
	set_cmt	(0XD7D4,	"pkt",	0);
	create_insn	(0XD7DC);
	set_name	(0XD7DC,	"cmd_exec_set06_cmd2A");
	create_insn	(x=0XD7EC);
	op_stkvar	(x,	1);
	create_insn	(x=0XD7F0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XD7F2,	"a4",	0);
	create_insn	(x=0XD7F4);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XD7F8);
	op_stkvar	(x,	1);
	create_insn	(x=0XD7FE);
	op_stkvar	(x,	1);
	set_cmt	(0XD804,	"a3",	0);
	create_insn	(x=0XD806);
	op_hex		(x,	1);
	set_cmt	(0XD80C,	"param_buf",	0);
	create_insn	(x=0XD80C);
	op_stkvar	(x,	1);
	set_cmt	(0XD812,	"pkt",	0);
	create_insn	(0XD81A);
	set_name	(0XD81A,	"cmd_exec_set06_cmd29");
	create_insn	(x=0XD81C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XD824);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XD838);
	op_stkvar	(x,	1);
	create_insn	(x=0XD83C);
	op_hex		(x,	1);
	set_cmt	(0XD842,	"a4",	0);
	set_cmt	(0XD844,	"a3",	0);
	set_cmt	(0XD846,	"param_buf",	0);
	create_insn	(x=0XD846);
	op_stkvar	(x,	1);
	set_cmt	(0XD84C,	"pkt",	0);
	create_insn	(0XD854);
	set_name	(0XD854,	"cmd_exec_set06_cmd28");
	create_insn	(x=0XD862);
	op_hex		(x,	1);
	create_insn	(x=0XD86A);
	op_stkvar	(x,	1);
	create_insn	(x=0XD86E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XD870);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XD872);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(0XD87C);
	create_insn	(x=0XD87E);
	op_stkvar	(x,	1);
	set_cmt	(0XD882,	"a4",	0);
	set_cmt	(0XD884,	"a3",	0);
	set_cmt	(0XD886,	"param_buf",	0);
	create_insn	(x=0XD886);
	op_stkvar	(x,	1);
	set_cmt	(0XD88C,	"pkt",	0);
	create_insn	(x=0XD894);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XD896);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XD89E);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XD8A8);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(0XD8AE);
	create_insn	(x=0XD8B0);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XD8BA);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XD8BE);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XD8C2);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XD8CA);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(0XD8D6);
	create_insn	(x=0XD8DA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XD8DC);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XD8E4);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XD8E6);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XD8F0);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(0XD902);
	create_insn	(x=0XD906);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XD908);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XD910);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XD912);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XD91A);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(0XD928);
	create_insn	(x=0XD92C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XD92E);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XD936);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XD938);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XD940);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(0XD94E);
	create_insn	(x=0XD952);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XD954);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XD95C);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XD95E);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XD966);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(0XD974);
	create_insn	(x=0XD978);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XD97A);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XD982);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XD984);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XD98C);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(0XD99A);
	create_insn	(x=0XD99E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XD9A4);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XD9AA);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(0XD9B4);
	create_insn	(0XD9B8);
	create_insn	(x=0XD9BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XD9BE);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XD9C2);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(0XD9D0);
	create_insn	(x=0XD9D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XD9D6);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XD9DC);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XD9E2);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XD9EA);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XD9EC);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XD9EE);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(0XD9F8);
	create_insn	(0XD9FC);
	create_insn	(x=0XD9FE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XDA02);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0XDA04);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0XDA10);
	op_hex		(x,	1);
	create_insn	(x=0XDA2E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XDA38);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XDA62);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XDA66);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XDA72);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XDA74);
	op_plain_offset	(x,	1,	0X100006F1);
	op_plain_offset	(x,	129,	0X100006F1);
	create_insn	(x=0XDA7A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XDA7E);
	op_plain_offset	(x,	1,	0X10000018);
	op_plain_offset	(x,	129,	0X10000018);
	create_insn	(x=0XDA82);
	op_hex		(x,	1);
	create_insn	(x=0XDA88);
	op_hex		(x,	1);
	create_insn	(x=0XDA8C);
	op_plain_offset	(x,	1,	0X10000018);
	op_plain_offset	(x,	129,	0X10000018);
	create_insn	(x=0XDA8E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XDA9A);
	op_hex		(x,	1);
	create_insn	(x=0XDAA0);
	op_hex		(x,	1);
	create_insn	(x=0XDAA6);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XDAA8);
	op_plain_offset	(x,	1,	0X10000018);
	op_plain_offset	(x,	129,	0X10000018);
	create_insn	(x=0XDAB0);
	op_plain_offset	(x,	1,	0X10000018);
	op_plain_offset	(x,	129,	0X10000018);
	create_insn	(x=0XDAB2);
	op_plain_offset	(x,	1,	0X10000018);
	op_plain_offset	(x,	129,	0X10000018);
	create_insn	(x=0XDAB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XDAD8);
	op_plain_offset	(x,	1,	0X10000018);
	op_plain_offset	(x,	129,	0X10000018);
	create_insn	(x=0XDADE);
	op_hex		(x,	1);
	create_insn	(x=0XDAE4);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0XDAF0);
	op_plain_offset	(x,	1,	0X10000018);
	op_plain_offset	(x,	129,	0X10000018);
	create_insn	(x=0XDAF4);
	op_hex		(x,	1);
	make_array	(0XDAFA,	0X2);
	create_dword	(x=0XDAFC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XDB00);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XDB04);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XDB08);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XDB0C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XDB10);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XDB14);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0XDB18);
	op_hex		(x,	1);
	create_insn	(x=0XDB1C);
	op_plain_offset	(x,	1,	0X10000018);
	op_plain_offset	(x,	129,	0X10000018);
	create_insn	(x=0XDB1E);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0XDB2A);
	op_plain_offset	(x,	1,	0X10000018);
	op_plain_offset	(x,	129,	0X10000018);
	create_insn	(x=0XDB2E);
	op_hex		(x,	1);
	create_insn	(x=0XDB34);
	op_hex		(x,	1);
	create_insn	(x=0XDB38);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XDB3A);
	op_plain_offset	(x,	1,	0X10000018);
	op_plain_offset	(x,	129,	0X10000018);
	create_insn	(x=0XDB3C);
	op_plain_offset	(x,	1,	0X10003AE4);
	op_plain_offset	(x,	129,	0X10003AE4);
	create_insn	(x=0XDB44);
	op_plain_offset	(x,	1,	0X10000018);
	op_plain_offset	(x,	129,	0X10000018);
	create_insn	(x=0XDB48);
	op_hex		(x,	1);
	create_insn	(x=0XDB4E);
	op_hex		(x,	1);
	create_insn	(x=0XDB52);
	op_plain_offset	(x,	1,	0X10000018);
	op_plain_offset	(x,	129,	0X10000018);
	create_insn	(x=0XDB54);
	op_plain_offset	(x,	1,	0X10003AE4);
	op_plain_offset	(x,	129,	0X10003AE4);
	create_insn	(x=0XDB5C);
	op_plain_offset	(x,	1,	0X10000018);
	op_plain_offset	(x,	129,	0X10000018);
	create_insn	(x=0XDB60);
	op_hex		(x,	1);
	create_insn	(x=0XDB66);
	op_hex		(x,	1);
	create_insn	(x=0XDB6A);
	op_plain_offset	(x,	1,	0X10000018);
	op_plain_offset	(x,	129,	0X10000018);
	create_insn	(x=0XDB6C);
	op_plain_offset	(x,	1,	0X10003AE4);
	op_plain_offset	(x,	129,	0X10003AE4);
	create_insn	(x=0XDB74);
	op_plain_offset	(x,	1,	0X10000018);
	op_plain_offset	(x,	129,	0X10000018);
	create_insn	(x=0XDB78);
	op_hex		(x,	1);
	create_insn	(x=0XDB7E);
	op_hex		(x,	1);
	create_insn	(x=0XDB82);
	op_plain_offset	(x,	1,	0X10000018);
	op_plain_offset	(x,	129,	0X10000018);
	create_insn	(x=0XDB8C);
	op_plain_offset	(x,	1,	0X10000018);
	op_plain_offset	(x,	129,	0X10000018);
	create_insn	(x=0XDB90);
	op_hex		(x,	1);
	create_insn	(x=0XDB96);
	op_hex		(x,	1);
	create_insn	(x=0XDB9A);
	op_plain_offset	(x,	1,	0X10000018);
	op_plain_offset	(x,	129,	0X10000018);
	create_insn	(x=0XDB9C);
	op_plain_offset	(x,	1,	0X10003AE4);
	op_plain_offset	(x,	129,	0X10003AE4);
	create_insn	(x=0XDBA4);
	op_plain_offset	(x,	1,	0X10000018);
	op_plain_offset	(x,	129,	0X10000018);
	create_insn	(x=0XDBA8);
	op_hex		(x,	1);
	create_insn	(x=0XDBAE);
	op_hex		(x,	1);
	create_insn	(x=0XDBB2);
	op_plain_offset	(x,	1,	0X10000018);
	op_plain_offset	(x,	129,	0X10000018);
	create_insn	(x=0XDBB4);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0XDBBE);
	op_plain_offset	(x,	1,	0X10000018);
	op_plain_offset	(x,	129,	0X10000018);
	create_insn	(x=0XDBC2);
	op_hex		(x,	1);
	create_insn	(x=0XDBC8);
	op_hex		(x,	1);
	create_insn	(x=0XDBCC);
	op_plain_offset	(x,	1,	0X10000018);
	op_plain_offset	(x,	129,	0X10000018);
	create_insn	(x=0XDBD0);
	op_hex		(x,	1);
	create_insn	(x=0XDBDA);
	op_plain_offset	(x,	1,	0X10000018);
	op_plain_offset	(x,	129,	0X10000018);
	create_insn	(x=0XDBDC);
	op_hex		(x,	1);
	create_insn	(x=0XDBE0);
	op_plain_offset	(x,	1,	0X10000018);
	op_plain_offset	(x,	129,	0X10000018);
	create_insn	(x=0XDBEC);
	op_plain_offset	(x,	1,	0X10000018);
	op_plain_offset	(x,	129,	0X10000018);
	create_insn	(x=0XDBEE);
	op_hex		(x,	1);
	create_insn	(x=0XDBF2);
	op_plain_offset	(x,	1,	0X10000018);
	op_plain_offset	(x,	129,	0X10000018);
	create_insn	(0XDBF6);
	set_name	(0XDBF6,	"cmd_exec_set06_cmd27");
	create_insn	(x=0XDC00);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XDC06,	"p_err",	0);
	create_insn	(x=0XDC06);
	op_stkvar	(x,	1);
	create_insn	(x=0XDC0C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XDC0E);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XDC1A);
	op_hex		(x,	1);
	create_insn	(x=0XDC22);
	op_stkvar	(x,	1);
	create_insn	(x=0XDC26);
	op_stkvar	(x,	1);
	create_insn	(x=0XDC2A);
	op_hex		(x,	1);
	create_insn	(x=0XDC2E);
	op_stkvar	(x,	1);
	create_insn	(x=0XDC32);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XDC3A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XDC3C);
	op_plain_offset	(x,	1,	0X10003AE4);
	op_plain_offset	(x,	129,	0X10003AE4);
	create_insn	(x=0XDC3E);
	op_stkvar	(x,	1);
	create_insn	(x=0XDC42);
	op_plain_offset	(x,	1,	0X10003AE4);
	op_plain_offset	(x,	129,	0X10003AE4);
	create_insn	(x=0XDC44);
	op_stkvar	(x,	1);
	create_insn	(x=0XDC48);
	op_plain_offset	(x,	1,	0X10003AE4);
	op_plain_offset	(x,	129,	0X10003AE4);
	create_insn	(x=0XDC4A);
	op_stkvar	(x,	1);
	create_insn	(x=0XDC50);
	op_stkvar	(x,	1);
	create_insn	(x=0XDC54);
	op_plain_offset	(x,	1,	0X10003AE4);
	op_plain_offset	(x,	129,	0X10003AE4);
	create_insn	(x=0XDC56);
	op_stkvar	(x,	1);
	create_insn	(x=0XDC5A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XDC5C);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0XDC62);
	op_stkvar	(x,	1);
	create_insn	(x=0XDC66);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0XDC68);
	op_stkvar	(x,	1);
	create_insn	(x=0XDC78);
	op_stkvar	(x,	1);
	create_insn	(x=0XDC7C);
	op_stkvar	(x,	1);
	create_insn	(x=0XDC86);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0XDCAA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XDCAC);
	op_stkvar	(x,	1);
	create_insn	(x=0XDCB2);
	op_stkvar	(x,	1);
	create_insn	(x=0XDCB6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XDCBA);
	op_stkvar	(x,	1);
	create_insn	(x=0XDCC2);
	op_stkvar	(x,	1);
	create_insn	(x=0XDCC6);
	op_plain_offset	(x,	1,	0X100006F1);
	op_plain_offset	(x,	129,	0X100006F1);
	create_insn	(x=0XDCC8);
	op_stkvar	(x,	1);
	create_insn	(x=0XDCCC);
	op_plain_offset	(x,	1,	0X100006F1);
	op_plain_offset	(x,	129,	0X100006F1);
	create_insn	(x=0XDCCE);
	op_stkvar	(x,	1);
	create_insn	(x=0XDCD2);
	op_plain_offset	(x,	1,	0X100006F1);
	op_plain_offset	(x,	129,	0X100006F1);
	create_insn	(x=0XDCD6);
	op_stkvar	(x,	1);
	create_insn	(x=0XDCDA);
	op_plain_offset	(x,	1,	0X100006F1);
	op_plain_offset	(x,	129,	0X100006F1);
	create_insn	(x=0XDCDC);
	op_stkvar	(x,	1);
	create_insn	(x=0XDCE0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XDCE2);
	op_plain_offset	(x,	1,	0X100006F1);
	op_plain_offset	(x,	129,	0X100006F1);
	create_insn	(x=0XDCE4);
	op_stkvar	(x,	1);
	create_insn	(x=0XDCEA);
	op_stkvar	(x,	1);
	create_insn	(x=0XDCEE);
	op_plain_offset	(x,	1,	0X1000457C);
	op_plain_offset	(x,	129,	0X1000457C);
	create_insn	(x=0XDCF0);
	op_stkvar	(x,	1);
	create_insn	(x=0XDCF4);
	op_plain_offset	(x,	1,	0X1000457C);
	op_plain_offset	(x,	129,	0X1000457C);
	create_insn	(x=0XDCF6);
	op_stkvar	(x,	1);
	create_insn	(x=0XDCFA);
	op_plain_offset	(x,	1,	0X1000457C);
	op_plain_offset	(x,	129,	0X1000457C);
	create_insn	(x=0XDCFC);
	op_stkvar	(x,	1);
	create_insn	(x=0XDD00);
	op_plain_offset	(x,	1,	0X1000457C);
	op_plain_offset	(x,	129,	0X1000457C);
	create_insn	(x=0XDD02);
	op_stkvar	(x,	1);
	create_insn	(x=0XDD06);
	op_plain_offset	(x,	1,	0X1000457C);
	op_plain_offset	(x,	129,	0X1000457C);
	create_insn	(x=0XDD08);
	op_stkvar	(x,	1);
	create_insn	(x=0XDD0C);
	op_plain_offset	(x,	1,	0X1000457C);
	op_plain_offset	(x,	129,	0X1000457C);
	create_insn	(x=0XDD0E);
	op_stkvar	(x,	1);
	create_insn	(x=0XDD12);
	op_plain_offset	(x,	1,	0X1000457C);
	op_plain_offset	(x,	129,	0X1000457C);
	create_insn	(0XDD16);
	create_insn	(x=0XDD18);
	op_stkvar	(x,	1);
	set_cmt	(0XDD1C,	"a4",	0);
	create_insn	(x=0XDD1C);
	op_stkvar	(x,	1);
	set_cmt	(0XDD1E,	"a3",	0);
	set_cmt	(0XDD20,	"param_buf",	0);
	set_cmt	(0XDD22,	"pkt",	0);
	set_cmt	(0XDD28,	"pkt",	0);
	create_insn	(x=0XDD28);
	op_stkvar	(x,	1);
	create_insn	(0XDD32);
	set_name	(0XDD32,	"cmd_exec_set06_cmd25");
	create_insn	(x=0XDD40);
	op_hex		(x,	1);
	create_insn	(x=0XDD46);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XDD48,	"a4",	0);
	set_cmt	(0XDD4A,	"a3",	0);
	create_insn	(x=0XDD4E);
	op_stkvar	(x,	1);
	set_cmt	(0XDD52,	"param_buf",	0);
	create_insn	(x=0XDD52);
	op_stkvar	(x,	1);
	set_cmt	(0XDD58,	"pkt",	0);
	create_insn	(0XDD60);
	set_name	(0XDD60,	"cmd_exec_set06_cmd24");
	create_insn	(x=0XDD72);
	op_stkvar	(x,	1);
	create_insn	(0XDD78);
	create_insn	(x=0XDD7C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0XDD88);
	create_insn	(0XDD8C);
	create_insn	(x=0XDD8E);
	op_stkvar	(x,	1);
	create_insn	(x=0XDD9C);
	op_hex		(x,	1);
	set_cmt	(0XDDA2,	"a4",	0);
	set_cmt	(0XDDA4,	"a3",	0);
	set_cmt	(0XDDA6,	"param_buf",	0);
	create_insn	(x=0XDDA6);
	op_stkvar	(x,	1);
	set_cmt	(0XDDA8,	"pkt",	0);
	set_cmt	(0XDDAE,	"pkt",	0);
	create_insn	(0XDDB8);
	set_name	(0XDDB8,	"cmd_exec_set06_cmd23");
	create_insn	(x=0XDDC2);
	op_stkvar	(x,	1);
	create_insn	(x=0XDDC8);
	op_stkvar	(x,	1);
	create_insn	(x=0XDDCE);
	op_stkvar	(x,	1);
	create_insn	(x=0XDDD4);
	op_stkvar	(x,	1);
	set_cmt	(0XDDD8,	"a3",	0);
	create_insn	(x=0XDDDA);
	op_stkvar	(x,	1);
	set_cmt	(0XDDDE,	"param_buf",	0);
	create_insn	(x=0XDDDE);
	op_stkvar	(x,	1);
	set_cmt	(0XDDE0,	"a1",	0);
	create_insn	(x=0XDDE0);
	op_stkvar	(x,	1);
	create_insn	(x=0XDDF6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XDDFA);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(0XDE00);
	set_cmt	(0XDE04,	"a3",	0);
	create_insn	(x=0XDE06);
	op_stkvar	(x,	1);
	create_insn	(x=0XDE0A);
	op_stkvar	(x,	1);
	create_insn	(x=0XDE0E);
	op_hex		(x,	1);
	create_insn	(x=0XDE12);
	op_stkvar	(x,	1);
	set_cmt	(0XDE16,	"a4",	0);
	set_cmt	(0XDE18,	"param_buf",	0);
	create_insn	(x=0XDE18);
	op_stkvar	(x,	1);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_1(void) {
        auto x;
#define id x

	set_cmt	(0XDE1A,	"pkt",	0);
	create_insn	(x=0XDE1A);
	op_stkvar	(x,	1);
	set_cmt	(0XDE20,	"pkt",	0);
	create_insn	(0XDE2A);
	set_name	(0XDE2A,	"cmd_exec_set06_cmd22");
	create_insn	(x=0XDE32);
	op_stkvar	(x,	1);
	create_insn	(x=0XDE36);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XDE3A);
	op_stkvar	(x,	1);
	create_insn	(x=0XDE3E);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XDE42);
	op_stkvar	(x,	1);
	create_insn	(x=0XDE46);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XDE4A);
	op_stkvar	(x,	1);
	create_insn	(x=0XDE4E);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XDE50);
	op_stkvar	(x,	1);
	set_cmt	(0XDE54,	"a3",	0);
	create_insn	(x=0XDE56);
	op_stkvar	(x,	1);
	set_cmt	(0XDE5A,	"param_buf",	0);
	create_insn	(x=0XDE5A);
	op_stkvar	(x,	1);
	set_cmt	(0XDE5C,	"a1",	0);
	create_insn	(x=0XDE5C);
	op_stkvar	(x,	1);
	create_insn	(x=0XDE76);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XDE7A);
	op_plain_offset	(x,	1,	0X10003338);
	op_plain_offset	(x,	129,	0X10003338);
	create_insn	(x=0XDE8A);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XDE8C);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XDE96);
	op_stkvar	(x,	1);
	create_insn	(x=0XDE9A);
	op_stkvar	(x,	1);
	create_insn	(x=0XDEA0);
	op_stkvar	(x,	1);
	create_insn	(x=0XDEAA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XDEB2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XDEB6);
	op_plain_offset	(x,	1,	0X100033A0);
	op_plain_offset	(x,	129,	0X100033A0);
	create_insn	(0XDEBA);
	set_name	(0XDEBA,	"cmd_exec_get_BK5811_fcc_zone");
	create_insn	(x=0XDEC8);
	op_hex		(x,	1);
	create_insn	(x=0XDECE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XDED0,	"a4",	0);
	set_cmt	(0XDED2,	"a3",	0);
	create_insn	(x=0XDED4);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XDED6);
	op_stkvar	(x,	1);
	set_cmt	(0XDEDA,	"param_buf",	0);
	create_insn	(x=0XDEDA);
	op_stkvar	(x,	1);
	set_cmt	(0XDEE0,	"pkt",	0);
	create_insn	(0XDEE8);
	set_name	(0XDEE8,	"cmd_exec_set_BK5811_fcc_zone");
	create_insn	(x=0XDEEA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XDEF0);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XDEFC);
	op_hex		(x,	1);
	create_insn	(x=0XDF04);
	op_stkvar	(x,	1);
	set_cmt	(0XDF08,	"a4",	0);
	set_cmt	(0XDF0A,	"a3",	0);
	set_cmt	(0XDF0C,	"param_buf",	0);
	create_insn	(x=0XDF0C);
	op_stkvar	(x,	1);
	set_cmt	(0XDF12,	"pkt",	0);
	make_array	(0XDF1A,	0X2);
	create_dword	(x=0XDF1C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XDF20);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XDF24);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XDF28);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XDF2C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XDF30);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XDF34);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XDF38);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XDF3C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XDF40);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0XDF44);
	create_dword	(x=0XDF48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XDF4C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0XDF50);
	set_name	(0XDF50,	"cmd_exec_set06_cmd1A");
	create_insn	(x=0XDF5E);
	op_hex		(x,	1);
	create_insn	(x=0XDF66);
	op_stkvar	(x,	1);
	create_insn	(x=0XDF6A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XDF6C,	"a4",	0);
	create_insn	(x=0XDF6E);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XDF72);
	op_stkvar	(x,	1);
	create_insn	(x=0XDF76);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XDF78);
	op_stkvar	(x,	1);
	set_cmt	(0XDF7C,	"a3",	0);
	set_cmt	(0XDF7E,	"param_buf",	0);
	create_insn	(x=0XDF7E);
	op_stkvar	(x,	1);
	set_cmt	(0XDF84,	"pkt",	0);
	create_insn	(0XDF8C);
	set_name	(0XDF8C,	"cmd_exec_set06_cmd19");
	create_insn	(x=0XDF96);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0XDFAC);
	create_insn	(x=0XDFAE);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XDFB4);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(0XDFB8);
	create_insn	(x=0XDFC4);
	op_hex		(x,	1);
	create_insn	(x=0XDFCC);
	op_stkvar	(x,	1);
	set_cmt	(0XDFD0,	"a4",	0);
	set_cmt	(0XDFD2,	"a3",	0);
	set_cmt	(0XDFD4,	"param_buf",	0);
	create_insn	(x=0XDFD4);
	op_stkvar	(x,	1);
	set_cmt	(0XDFD6,	"pkt",	0);
	set_cmt	(0XDFDC,	"pkt",	0);
	create_insn	(x=0XDFE4);
	op_hex		(x,	1);
	create_insn	(x=0XDFEC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0XDFF6);
	set_name	(0XDFF6,	"cmd_exec_set06_cmd18");
	create_insn	(x=0XE004);
	op_hex		(x,	1);
	set_cmt	(0XE00A,	"a4",	0);
	set_cmt	(0XE00C,	"a3",	0);
	set_cmt	(0XE00E,	"param_buf",	0);
	create_insn	(x=0XE00E);
	op_stkvar	(x,	1);
	set_cmt	(0XE014,	"pkt",	0);
	create_insn	(0XE01C);
	set_name	(0XE01C,	"cmd_exec_set06_cmd17");
	create_insn	(x=0XE01E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XE052);
	op_hex		(x,	1);
	create_insn	(x=0XE05A);
	op_stkvar	(x,	1);
	set_cmt	(0XE05E,	"a4",	0);
	set_cmt	(0XE060,	"a3",	0);
	set_cmt	(0XE062,	"param_buf",	0);
	create_insn	(x=0XE062);
	op_stkvar	(x,	1);
	set_cmt	(0XE064,	"pkt",	0);
	set_cmt	(0XE06A,	"pkt",	0);
	create_insn	(0XE074);
	create_insn	(0XE086);
	set_name	(0XE086,	"cmd_exec_set06_cmd16");
	create_insn	(x=0XE088);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XE0A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XE0A2);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XE0A4);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XE0A6);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XE0B2);
	op_hex		(x,	1);
	create_insn	(x=0XE0B8);
	op_stkvar	(x,	1);
	set_cmt	(0XE0BC,	"a4",	0);
	set_cmt	(0XE0BE,	"a3",	0);
	set_cmt	(0XE0C0,	"param_buf",	0);
	create_insn	(x=0XE0C0);
	op_stkvar	(x,	1);
	set_cmt	(0XE0C2,	"pkt",	0);
	set_cmt	(0XE0C8,	"pkt",	0);
	create_insn	(0XE0D0);
	set_name	(0XE0D0,	"cmd_exec_set06_cmd15");
	create_insn	(x=0XE0D6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XE10E);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XE116);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XE12A);
	op_hex		(x,	1);
	create_insn	(x=0XE130);
	op_stkvar	(x,	1);
	set_cmt	(0XE134,	"a4",	0);
	set_cmt	(0XE136,	"a3",	0);
	set_cmt	(0XE138,	"param_buf",	0);
	create_insn	(x=0XE138);
	op_stkvar	(x,	1);
	set_cmt	(0XE13A,	"pkt",	0);
	set_cmt	(0XE140,	"pkt",	0);
	create_insn	(0XE14C);
	set_name	(0XE14C,	"cmd_exec_set06_cmd14");
	create_insn	(x=0XE156);
	op_stkvar	(x,	1);
	create_insn	(x=0XE164);
	op_hex		(x,	1);
	create_insn	(x=0XE168);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XE180);
	op_stkvar	(x,	1);
	create_insn	(x=0XE18C);
	op_stkvar	(x,	1);
	create_insn	(x=0XE1A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XE1AC);
	op_plain_offset	(x,	1,	0X10000244);
	op_plain_offset	(x,	129,	0X10000244);
	set_cmt	(0XE1C0,	"a4",	0);
	set_cmt	(0XE1C2,	"param_buf",	0);
	create_insn	(x=0XE1C2);
	op_stkvar	(x,	1);
	set_cmt	(0XE1C4,	"pkt",	0);
	set_cmt	(0XE1CA,	"pkt",	0);
	create_insn	(x=0XE1D6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0XE1D6,	"cmd_exec_set06_cmd13");
	create_insn	(x=0XE1DA);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(0XE1DE);
	set_name	(0XE1DE,	"cmd_exec_set06_cmd12");
	create_insn	(x=0XE1EC);
	op_hex		(x,	1);
	create_insn	(x=0XE1F2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XE1F4,	"a4",	0);
	set_cmt	(0XE1F6,	"a3",	0);
	create_insn	(x=0XE1F8);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XE1FA);
	op_stkvar	(x,	1);
	set_cmt	(0XE1FE,	"param_buf",	0);
	create_insn	(x=0XE1FE);
	op_stkvar	(x,	1);
	set_cmt	(0XE204,	"pkt",	0);
	create_insn	(0XE20C);
	set_name	(0XE20C,	"cmd_exec_set06_cmd11");
	create_insn	(x=0XE20E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XE214);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XE220);
	op_hex		(x,	1);
	create_insn	(x=0XE228);
	op_stkvar	(x,	1);
	set_cmt	(0XE22C,	"a4",	0);
	set_cmt	(0XE22E,	"a3",	0);
	set_cmt	(0XE230,	"param_buf",	0);
	create_insn	(x=0XE230);
	op_stkvar	(x,	1);
	set_cmt	(0XE236,	"pkt",	0);
	create_insn	(0XE23E);
	set_name	(0XE23E,	"cmd_exec_set06_cmd10");
	create_insn	(x=0XE24C);
	op_hex		(x,	1);
	create_insn	(x=0XE252);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XE254,	"a4",	0);
	set_cmt	(0XE256,	"a3",	0);
	create_insn	(x=0XE258);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XE25A);
	op_stkvar	(x,	1);
	set_cmt	(0XE25E,	"param_buf",	0);
	create_insn	(x=0XE25E);
	op_stkvar	(x,	1);
	set_cmt	(0XE264,	"pkt",	0);
	create_insn	(0XE26C);
	set_name	(0XE26C,	"cmd_exec_set06_cmd0F");
	create_insn	(x=0XE26E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XE276);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	set_cmt	(0XE278,	"p_err",	0);
	create_insn	(x=0XE278);
	op_stkvar	(x,	1);
	create_insn	(x=0XE27E);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XE28A);
	op_hex		(x,	1);
	create_insn	(x=0XE292);
	op_stkvar	(x,	1);
	set_cmt	(0XE296,	"a4",	0);
	set_cmt	(0XE298,	"a3",	0);
	set_cmt	(0XE29A,	"param_buf",	0);
	create_insn	(x=0XE29A);
	op_stkvar	(x,	1);
	set_cmt	(0XE29C,	"pkt",	0);
	set_cmt	(0XE2A2,	"pkt",	0);
	create_insn	(0XE2AC);
	set_name	(0XE2AC,	"cmd_exec_set06_cmd0E");
	create_insn	(x=0XE2BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XE2BE);
	op_hex		(x,	1);
	create_insn	(x=0XE2C4);
	op_stkvar	(x,	1);
	create_insn	(0XE2CC);
	set_cmt	(0XE30A,	"a4",	0);
	set_cmt	(0XE30C,	"param_buf",	0);
	create_insn	(x=0XE30C);
	op_stkvar	(x,	1);
	set_cmt	(0XE312,	"pkt",	0);
	create_insn	(0XE31C);
	set_name	(0XE31C,	"cmd_exec_set06_cmd0D");
	create_insn	(x=0XE32A);
	op_hex		(x,	1);
	create_insn	(x=0XE330);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XE332,	"a4",	0);
	create_insn	(x=0XE334);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XE336);
	op_stkvar	(x,	1);
	create_insn	(x=0XE338);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XE33A);
	op_stkvar	(x,	1);
	create_insn	(x=0XE33C);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XE33E);
	op_stkvar	(x,	1);
	create_insn	(x=0XE342);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XE344);
	op_stkvar	(x,	1);
	create_insn	(x=0XE348);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XE34A,	"a3",	0);
	create_insn	(x=0XE34E);
	op_stkvar	(x,	1);
	set_cmt	(0XE352,	"param_buf",	0);
	create_insn	(x=0XE352);
	op_stkvar	(x,	1);
	set_cmt	(0XE358,	"pkt",	0);
	make_array	(0XE362,	0X2);
	create_dword	(x=0XE364);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XE368);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XE36C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XE370);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XE374);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0XE378);
	set_name	(0XE378,	"cmd_exec_set06_cmd0C");
	create_insn	(x=0XE388);
	op_stkvar	(x,	1);
	create_insn	(x=0XE38E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XE390);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XE394);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(0XE398);
	create_insn	(x=0XE3C6);
	op_hex		(x,	1);
	set_cmt	(0XE3CC,	"a4",	0);
	create_insn	(x=0XE3CC);
	op_stkvar	(x,	1);
	set_cmt	(0XE3CE,	"a3",	0);
	set_cmt	(0XE3D0,	"param_buf",	0);
	set_cmt	(0XE3D2,	"pkt",	0);
	set_cmt	(0XE3D8,	"pkt",	0);
	create_insn	(x=0XE3D8);
	op_stkvar	(x,	1);
	create_insn	(0XE3E0);
	create_insn	(x=0XE3EC);
	op_stkvar	(x,	1);
	create_insn	(x=0XE3FE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XE400);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XE40C);
	op_stkvar	(x,	1);
	create_insn	(x=0XE410);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XE414);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XE418);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XE41C);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XE420);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(0XE424);
	create_insn	(x=0XE426);
	op_stkvar	(x,	1);
	create_insn	(x=0XE42A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XE446);
	op_stkvar	(x,	1);
	create_insn	(0XE44E);
	create_insn	(x=0XE458);
	op_stkvar	(x,	1);
	create_insn	(0XE45E);
	set_name	(0XE45E,	"cmd_exec_set06_cmd0B");
	create_insn	(x=0XE46C);
	op_hex		(x,	1);
	create_insn	(x=0XE472);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XE474,	"a4",	0);
	create_insn	(x=0XE476);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XE47A);
	op_stkvar	(x,	1);
	set_cmt	(0XE47E,	"param_buf",	0);
	create_insn	(x=0XE47E);
	op_stkvar	(x,	1);
	set_cmt	(0XE484,	"pkt",	0);
	create_insn	(0XE48C);
	set_name	(0XE48C,	"cmd_exec_set06_cmd0A");
	create_insn	(x=0XE48E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XE496);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XE4A4);
	op_hex		(x,	1);
	create_insn	(x=0XE4AC);
	op_stkvar	(x,	1);
	set_cmt	(0XE4B0,	"a4",	0);
	set_cmt	(0XE4B2,	"a3",	0);
	set_cmt	(0XE4B4,	"param_buf",	0);
	create_insn	(x=0XE4B4);
	op_stkvar	(x,	1);
	set_cmt	(0XE4BA,	"pkt",	0);
	create_insn	(0XE4C2);
	set_name	(0XE4C2,	"cmd_exec_set06_cmd09");
	create_insn	(x=0XE4D0);
	op_hex		(x,	1);
	create_insn	(x=0XE4D6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XE4D8,	"a4",	0);
	create_insn	(x=0XE4DA);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XE4DE);
	op_stkvar	(x,	1);
	create_insn	(x=0XE4E2);
	op_stkvar	(x,	1);
	set_cmt	(0XE4E6,	"a3",	0);
	set_cmt	(0XE4E8,	"param_buf",	0);
	create_insn	(x=0XE4E8);
	op_stkvar	(x,	1);
	set_cmt	(0XE4EE,	"pkt",	0);
	create_insn	(0XE4F6);
	set_name	(0XE4F6,	"cmd_exec_set06_cmd08");
	create_insn	(x=0XE4F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XE500);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XE514);
	op_hex		(x,	1);
	create_insn	(x=0XE51C);
	op_stkvar	(x,	1);
	set_cmt	(0XE520,	"a4",	0);
	set_cmt	(0XE522,	"a3",	0);
	set_cmt	(0XE524,	"param_buf",	0);
	create_insn	(x=0XE524);
	op_stkvar	(x,	1);
	set_cmt	(0XE52A,	"pkt",	0);
	create_insn	(0XE532);
	set_name	(0XE532,	"cmd_exec_set06_cmd07");
	create_insn	(x=0XE540);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XE542);
	op_hex		(x,	1);
	create_insn	(x=0XE548);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XE54A);
	op_stkvar	(x,	1);
	create_insn	(x=0XE554);
	op_hex		(x,	1);
	create_insn	(x=0XE558);
	op_stkvar	(x,	1);
	create_insn	(x=0XE55E);
	op_hex		(x,	1);
	create_insn	(x=0XE562);
	op_hex		(x,	1);
	create_insn	(x=0XE566);
	op_stkvar	(x,	1);
	set_cmt	(0XE56A,	"a4",	0);
	create_insn	(x=0XE56A);
	op_stkvar	(x,	1);
	set_cmt	(0XE56C,	"a3",	0);
	set_cmt	(0XE56E,	"param_buf",	0);
	set_cmt	(0XE574,	"pkt",	0);
	create_insn	(x=0XE574);
	op_stkvar	(x,	1);
	create_insn	(x=0XE57C);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(0XE584);
	set_name	(0XE584,	"cmd_exec_set06_cmd06");
	create_insn	(x=0XE588);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XE58E);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XE59A);
	op_hex		(x,	1);
	create_insn	(x=0XE5A2);
	op_stkvar	(x,	1);
	set_cmt	(0XE5A6,	"a4",	0);
	set_cmt	(0XE5A8,	"a3",	0);
	set_cmt	(0XE5AA,	"param_buf",	0);
	create_insn	(x=0XE5AA);
	op_stkvar	(x,	1);
	set_cmt	(0XE5B0,	"pkt",	0);
	create_insn	(0XE5B8);
	set_name	(0XE5B8,	"cmd_exec_set06_cmd04");
	create_insn	(x=0XE5C6);
	op_hex		(x,	1);
	create_insn	(x=0XE5CE);
	op_stkvar	(x,	1);
	create_insn	(x=0XE5D2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XE5D4,	"a4",	0);
	create_insn	(x=0XE5D4);
	op_stkvar	(x,	1);
	create_insn	(x=0XE5D6);
	op_plain_offset	(x,	1,	0X1000271C);
	op_plain_offset	(x,	129,	0X1000271C);
	create_insn	(x=0XE5D8);
	op_stkvar	(x,	1);
	create_insn	(x=0XE5DC);
	op_plain_offset	(x,	1,	0X1000271C);
	op_plain_offset	(x,	129,	0X1000271C);
	create_insn	(x=0XE5DE);
	op_stkvar	(x,	1);
	create_insn	(x=0XE5E2);
	op_plain_offset	(x,	1,	0X1000271C);
	op_plain_offset	(x,	129,	0X1000271C);
	create_insn	(x=0XE5E4);
	op_stkvar	(x,	1);
	create_insn	(x=0XE5EA);
	op_stkvar	(x,	1);
	create_insn	(x=0XE5EE);
	op_plain_offset	(x,	1,	0X1000271C);
	op_plain_offset	(x,	129,	0X1000271C);
	create_insn	(x=0XE5F0);
	op_stkvar	(x,	1);
	create_insn	(x=0XE5F8);
	op_stkvar	(x,	1);
	create_insn	(x=0XE5FC);
	op_stkvar	(x,	1);
	create_insn	(x=0XE600);
	op_stkvar	(x,	1);
	set_cmt	(0XE604,	"a3",	0);
	set_cmt	(0XE606,	"param_buf",	0);
	set_cmt	(0XE60C,	"pkt",	0);
	create_insn	(x=0XE60C);
	op_stkvar	(x,	1);
	create_insn	(0XE616);
	set_name	(0XE616,	"cmd_exec_set06_cmd03");
	create_insn	(x=0XE618);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XE62A);
	op_hex		(x,	1);
	create_insn	(x=0XE632);
	op_stkvar	(x,	1);
	create_insn	(x=0XE636);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XE638,	"a4",	0);
	create_insn	(x=0XE63C);
	op_stkvar	(x,	1);
	set_cmt	(0XE640,	"param_buf",	0);
	create_insn	(x=0XE640);
	op_stkvar	(x,	1);
	set_cmt	(0XE646,	"pkt",	0);
	create_insn	(0XE64E);
	set_name	(0XE64E,	"cmd_exec_set06_cmd02");
	create_insn	(x=0XE65C);
	op_hex		(x,	1);
	create_insn	(x=0XE664);
	op_stkvar	(x,	1);
	set_cmt	(0XE668,	"a4",	0);
	set_cmt	(0XE66A,	"a3",	0);
	set_cmt	(0XE66C,	"param_buf",	0);
	create_insn	(x=0XE66C);
	op_stkvar	(x,	1);
	set_cmt	(0XE672,	"pkt",	0);
	create_insn	(0XE67A);
	set_name	(0XE67A,	"cmd_exec_set06_cmd01");
	create_insn	(x=0XE688);
	op_hex		(x,	1);
	create_insn	(x=0XE690);
	op_stkvar	(x,	1);
	create_insn	(x=0XE694);
	op_stkvar	(x,	1);
	create_insn	(x=0XE698);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XE69A,	"a4",	0);
	create_insn	(x=0XE69A);
	op_stkvar	(x,	1);
	create_insn	(x=0XE69E);
	op_stkvar	(x,	1);
	create_insn	(x=0XE6A4);
	op_stkvar	(x,	1);
	create_insn	(x=0XE6A8);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0XE6AA);
	op_stkvar	(x,	1);
	create_insn	(x=0XE6B0);
	op_stkvar	(x,	1);
	create_insn	(x=0XE6B4);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0XE6B6);
	op_stkvar	(x,	1);
	create_insn	(x=0XE6BC);
	op_stkvar	(x,	1);
	create_insn	(x=0XE6C0);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0XE6C2);
	op_stkvar	(x,	1);
	create_insn	(x=0XE6C8);
	op_stkvar	(x,	1);
	create_insn	(x=0XE6CC);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0XE6CE);
	op_stkvar	(x,	1);
	create_insn	(x=0XE6D4);
	op_stkvar	(x,	1);
	create_insn	(x=0XE6D8);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0XE6DA);
	op_stkvar	(x,	1);
	create_insn	(x=0XE6E0);
	op_stkvar	(x,	1);
	create_insn	(x=0XE6E4);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0XE6E6);
	op_stkvar	(x,	1);
	create_insn	(x=0XE6EC);
	op_stkvar	(x,	1);
	create_insn	(x=0XE6F0);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0XE6F2);
	op_stkvar	(x,	1);
	set_cmt	(0XE6F6,	"a3",	0);
	set_cmt	(0XE6F8,	"param_buf",	0);
	set_cmt	(0XE6FE,	"pkt",	0);
	create_insn	(x=0XE6FE);
	op_stkvar	(x,	1);
	create_insn	(0XE708);
	set_name	(0XE708,	"cmd_exec_set01_cmd01");
	create_insn	(x=0XE70A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XE710);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XE71E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XE722);
	op_plain_offset	(x,	1,	0X100039B8);
	op_plain_offset	(x,	129,	0X100039B8);
	create_insn	(x=0XE726);
	op_plain_offset	(x,	1,	0X100039B8);
	op_plain_offset	(x,	129,	0X100039B8);
	create_insn	(x=0XE72A);
	op_plain_offset	(x,	1,	0X100039B8);
	op_plain_offset	(x,	129,	0X100039B8);
	set_cmt	(0XE72E,	"p_err",	0);
	create_insn	(x=0XE72E);
	op_stkvar	(x,	1);
	create_insn	(x=0XE734);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XE736);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(0XE73A);
	create_insn	(x=0XE73C);
	op_stkvar	(x,	1);
	create_insn	(x=0XE740);
	op_stkvar	(x,	1);
	set_cmt	(0XE744,	"a3",	0);
	set_cmt	(0XE746,	"param_buf",	0);
	create_insn	(x=0XE748);
	op_stkvar	(x,	1);
	set_cmt	(0XE74C,	"a1",	0);
	create_insn	(x=0XE74C);
	op_stkvar	(x,	1);
	create_insn	(x=0XE76E);
	op_hex		(x,	1);
	create_insn	(x=0XE774);
	op_stkvar	(x,	1);
	set_cmt	(0XE778,	"a4",	0);
	create_insn	(x=0XE778);
	op_stkvar	(x,	1);
	set_cmt	(0XE77A,	"a3",	0);
	set_cmt	(0XE77C,	"param_buf",	0);
	create_insn	(x=0XE77C);
	op_stkvar	(x,	1);
	set_cmt	(0XE77E,	"pkt",	0);
	set_cmt	(0XE784,	"pkt",	0);
	create_insn	(x=0XE784);
	op_stkvar	(x,	1);
	create_dword	(x=0XE788);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XE78C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XE790);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XE794);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XE798);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XE79C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XE7A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XE7A4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0XE7A8);
	create_insn	(0XE7AC);
	create_insn	(0XE7B4);
	set_name	(0XE7B4,	"cmd_exec_set00_cmdFF");
	create_insn	(x=0XE7BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XE7BE);
	op_stkvar	(x,	1);
	set_cmt	(0XE7C6,	"pkt",	0);
	create_insn	(x=0XE7D0);
	op_hex		(x,	1);
	set_cmt	(0XE7D6,	"a4",	0);
	set_cmt	(0XE7D8,	"a3",	0);
	set_cmt	(0XE7DA,	"param_buf",	0);
	create_insn	(x=0XE7DA);
	op_stkvar	(x,	1);
	set_cmt	(0XE7E0,	"pkt",	0);
	create_insn	(0XE7EA);
	set_name	(0XE7EA,	"cmd_exec_set00_cmd32");
	create_insn	(x=0XE7F6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XE7F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XE812);
	op_hex		(x,	1);
	create_insn	(x=0XE81A);
	op_stkvar	(x,	1);
	create_insn	(0XE824);
	create_insn	(x=0XE82E);
	op_hex		(x,	1);
	create_insn	(x=0XE834);
	op_stkvar	(x,	1);
	create_insn	(x=0XE83A);
	op_stkvar	(x,	1);
	create_insn	(x=0XE83E);
	op_plain_offset	(x,	1,	0X10000021);
	op_plain_offset	(x,	129,	0X10000021);
	create_insn	(x=0XE840);
	op_stkvar	(x,	1);
	create_insn	(x=0XE844);
	op_plain_offset	(x,	1,	0X10002760);
	op_plain_offset	(x,	129,	0X10002760);
	create_insn	(x=0XE846);
	op_stkvar	(x,	1);
	create_insn	(x=0XE84A);
	op_plain_offset	(x,	1,	0X10002760);
	op_plain_offset	(x,	129,	0X10002760);
	create_insn	(x=0XE84C);
	op_stkvar	(x,	1);
	create_insn	(x=0XE850);
	op_plain_offset	(x,	1,	0X10002760);
	op_plain_offset	(x,	129,	0X10002760);
	create_insn	(x=0XE852);
	op_stkvar	(x,	1);
	set_cmt	(0XE856,	"a4",	0);
	set_cmt	(0XE858,	"a3",	0);
	set_cmt	(0XE85A,	"param_buf",	0);
	create_insn	(x=0XE85A);
	op_stkvar	(x,	1);
	set_cmt	(0XE85C,	"pkt",	0);
	set_cmt	(0XE862,	"pkt",	0);
	create_insn	(0XE86C);
	create_insn	(x=0XE86E);
	op_stkvar	(x,	1);
	create_insn	(x=0XE888);
	op_plain_offset	(x,	1,	0X10000021);
	op_plain_offset	(x,	129,	0X10000021);
	create_insn	(x=0XE88C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XE892);
	op_stkvar	(x,	1);
	create_insn	(x=0XE8A0);
	op_hex		(x,	1);
	create_insn	(0XE8A8);
	create_insn	(x=0XE8B4);
	op_stkvar	(x,	1);
	create_insn	(x=0XE8BA);
	op_stkvar	(x,	1);
	create_insn	(x=0XE8C4);
	op_stkvar	(x,	1);
	create_insn	(x=0XE8D4);
	op_hex		(x,	1);
	create_insn	(x=0XE8DC);
	op_stkvar	(x,	1);
	set_cmt	(0XE8E0,	"a3",	0);
	set_cmt	(0XE8E2,	"param_buf",	0);
	create_insn	(x=0XE8E2);
	op_stkvar	(x,	1);
	set_cmt	(0XE8E4,	"a1",	0);
	create_insn	(x=0XE8E4);
	op_stkvar	(x,	1);
	create_insn	(x=0XE8EC);
	op_stkvar	(x,	1);
	create_insn	(x=0XE8EE);
	op_stkvar	(x,	1);
	create_insn	(x=0XE8F2);
	op_stkvar	(x,	1);
	create_insn	(x=0XE8F4);
	op_stkvar	(x,	1);
	create_insn	(x=0XE8F8);
	op_stkvar	(x,	1);
	create_insn	(x=0XE8FC);
	op_stkvar	(x,	1);
	set_cmt	(0XE900,	"a3",	0);
	set_cmt	(0XE902,	"param_buf",	0);
	create_insn	(x=0XE902);
	op_stkvar	(x,	1);
	set_cmt	(0XE906,	"a1",	0);
	create_insn	(x=0XE906);
	op_stkvar	(x,	1);
	set_cmt	(0XE90E,	"a4",	0);
	create_insn	(x=0XE90E);
	op_stkvar	(x,	1);
	set_cmt	(0XE910,	"a3",	0);
	set_cmt	(0XE912,	"param_buf",	0);
	set_cmt	(0XE914,	"pkt",	0);
	set_cmt	(0XE91A,	"pkt",	0);
	create_insn	(x=0XE91A);
	op_stkvar	(x,	1);
	create_insn	(0XE924);
	create_insn	(x=0XE92A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XE938);
	op_stkvar	(x,	1);
	create_insn	(x=0XE948);
	op_stkvar	(x,	1);
	create_insn	(x=0XE97E);
	op_stkvar	(x,	1);
	create_insn	(x=0XE984);
	op_stkvar	(x,	1);
	create_insn	(x=0XE98A);
	op_stkvar	(x,	1);
	set_cmt	(0XE98E,	"param_buf",	0);
	set_cmt	(0XE992,	"a3",	0);
	set_cmt	(0XE994,	"a1",	0);
	create_insn	(x=0XE994);
	op_stkvar	(x,	1);
	create_insn	(x=0XE998);
	op_stkvar	(x,	1);
	create_insn	(x=0XE9A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XE9A2);
	op_hex		(x,	1);
	create_insn	(0XE9CA);
	create_insn	(x=0XE9CE);
	op_plain_offset	(x,	1,	0X10002760);
	op_plain_offset	(x,	129,	0X10002760);
	create_insn	(x=0XE9D2);
	op_plain_offset	(x,	1,	0X10002760);
	op_plain_offset	(x,	129,	0X10002760);
	create_insn	(x=0XE9D6);
	op_plain_offset	(x,	1,	0X10002760);
	op_plain_offset	(x,	129,	0X10002760);
	create_insn	(x=0XE9DA);
	op_stkvar	(x,	1);
	set_cmt	(0XE9E0,	"a3",	0);
	set_cmt	(0XE9E2,	"param_buf",	0);
	create_insn	(x=0XE9E2);
	op_stkvar	(x,	1);
	set_cmt	(0XE9E4,	"a1",	0);
	set_cmt	(0XE9EA,	"a3",	0);
	set_cmt	(0XE9EC,	"a1",	0);
	set_cmt	(0XE9EE,	"param_buf",	0);
	create_insn	(x=0XE9EE);
	op_stkvar	(x,	1);
	create_insn	(x=0XE9F8);
	op_plain_offset	(x,	1,	0X10002760);
	op_plain_offset	(x,	129,	0X10002760);
	create_insn	(x=0XE9FC);
	op_plain_offset	(x,	1,	0X10002760);
	op_plain_offset	(x,	129,	0X10002760);
	create_insn	(x=0XEA02);
	op_plain_offset	(x,	1,	0X10002760);
	op_plain_offset	(x,	129,	0X10002760);
	create_insn	(x=0XEA06);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0XEA0E);
	create_insn	(x=0XEA32);
	op_hex		(x,	1);
	set_cmt	(0XEA38,	"a4",	0);
	create_insn	(x=0XEA38);
	op_stkvar	(x,	1);
	set_cmt	(0XEA3A,	"a3",	0);
	set_cmt	(0XEA3C,	"param_buf",	0);
	create_insn	(x=0XEA3C);
	op_stkvar	(x,	1);
	set_cmt	(0XEA3E,	"pkt",	0);
	create_insn	(0XEA42);
	create_insn	(0XEA44);
	create_insn	(0XEA46);
	set_cmt	(0XEA4A,	"pkt",	0);
	create_insn	(x=0XEA4A);
	op_stkvar	(x,	1);
	create_insn	(0XEA56);
	create_insn	(x=0XEA5A);
	op_plain_offset	(x,	1,	0X10002760);
	op_plain_offset	(x,	129,	0X10002760);
	create_insn	(x=0XEA5E);
	op_plain_offset	(x,	1,	0X10002760);
	op_plain_offset	(x,	129,	0X10002760);
	create_insn	(x=0XEA62);
	op_plain_offset	(x,	1,	0X10002760);
	op_plain_offset	(x,	129,	0X10002760);
	create_insn	(x=0XEA66);
	op_stkvar	(x,	1);
	set_cmt	(0XEA6E,	"a3",	0);
	set_cmt	(0XEA70,	"param_buf",	0);
	create_insn	(x=0XEA70);
	op_stkvar	(x,	1);
	set_cmt	(0XEA72,	"a1",	0);
	set_cmt	(0XEA78,	"a3",	0);
	set_cmt	(0XEA7A,	"a1",	0);
	set_cmt	(0XEA7C,	"param_buf",	0);
	create_insn	(x=0XEA7C);
	op_stkvar	(x,	1);
	create_insn	(x=0XEA86);
	op_plain_offset	(x,	1,	0X10002760);
	op_plain_offset	(x,	129,	0X10002760);
	create_insn	(x=0XEA8A);
	op_plain_offset	(x,	1,	0X10002760);
	op_plain_offset	(x,	129,	0X10002760);
	create_insn	(x=0XEA90);
	op_plain_offset	(x,	1,	0X10002760);
	op_plain_offset	(x,	129,	0X10002760);
	create_insn	(x=0XEA94);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0XEA9E);
	create_insn	(x=0XEAAA);
	op_stkvar	(x,	1);
	create_insn	(0XEAB0);
	set_cmt	(0XEAB2,	"cmd",	0);
	create_insn	(x=0XEAB8);
	op_stkvar	(x,	1);
	create_insn	(x=0XEABC);
	op_stkvar	(x,	1);
	create_insn	(x=0XEAC0);
	op_stkvar	(x,	1);
	create_insn	(x=0XEAC4);
	op_hex		(x,	1);
	create_insn	(x=0XEAC8);
	op_stkvar	(x,	1);
	create_insn	(x=0XEAD4);
	op_stkvar	(x,	1);
	create_insn	(x=0XEADC);
	op_stkvar	(x,	1);
	create_insn	(x=0XEAE4);
	op_stkvar	(x,	1);
	set_cmt	(0XEAEC,	"a1",	0);
	create_insn	(x=0XEAEC);
	op_stkvar	(x,	1);
	create_insn	(x=0XEAFA);
	op_stkvar	(x,	1);
	create_insn	(x=0XEB02);
	op_stkvar	(x,	1);
	create_insn	(x=0XEB0A);
	op_stkvar	(x,	1);
	create_insn	(x=0XEB12);
	op_stkvar	(x,	1);
	set_cmt	(0XEB16,	"a3",	0);
	set_cmt	(0XEB18,	"param_buf",	0);
	set_cmt	(0XEB20,	"a3",	0);
	set_cmt	(0XEB22,	"param_buf",	0);
	set_cmt	(0XEB26,	"a1",	0);
	create_insn	(x=0XEB2C);
	op_stkvar	(x,	1);
	create_insn	(x=0XEB30);
	op_stkvar	(x,	1);
	set_cmt	(0XEB38,	"smdset",	0);
	set_cmt	(0XEB3A,	"ack",	0);
	set_cmt	(0XEB3C,	"receiver",	0);
	set_cmt	(0XEB3E,	"sender",	0);
	set_cmt	(0XEB44,	"pkt",	0);
	create_insn	(x=0XEB44);
	op_stkvar	(x,	1);
	create_insn	(x=0XEB4E);
	op_stkvar	(x,	1);
	create_insn	(x=0XEB56);
	op_stkvar	(x,	1);
	create_insn	(x=0XEB5E);
	op_stkvar	(x,	1);
	create_insn	(x=0XEB66);
	op_stkvar	(x,	1);
	set_cmt	(0XEB6A,	"a3",	0);
	set_cmt	(0XEB6C,	"param_buf",	0);
	create_insn	(0XEB7C);
	create_insn	(x=0XEB82);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XEB94);
	op_stkvar	(x,	1);
	create_insn	(x=0XEBA2);
	op_stkvar	(x,	1);
	create_strlit	(0XEBB8,	0XEBD2);
	set_name	(0XEBB8,	"aWm610A7_176520");
	make_array	(0XEBD2,	0X2);
	create_dword	(x=0XEBD4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XEBD8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0XEBDC);
	create_insn	(0XEBDE);
	create_insn	(x=0XEBF8);
	op_stkvar	(x,	1);
	create_insn	(x=0XEC00);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XEC06);
	op_stkvar	(x,	1);
	create_insn	(x=0XEC0C);
	op_stkvar	(x,	1);
	create_insn	(x=0XEC22);
	op_stkvar	(x,	1);
	create_insn	(x=0XEC24);
	op_stkvar	(x,	1);
	create_insn	(0XEC30);
	create_insn	(x=0XEC3E);
	op_stkvar	(x,	1);
	create_insn	(x=0XEC48);
	op_stkvar	(x,	1);
	create_insn	(x=0XEC4C);
	op_stkvar	(x,	1);
	create_insn	(x=0XEC50);
	op_stkvar	(x,	1);
	set_cmt	(0XEC54,	"a3",	0);
	set_cmt	(0XEC56,	"a1",	0);
	set_cmt	(0XEC58,	"param_buf",	0);
	create_insn	(x=0XEC58);
	op_stkvar	(x,	1);
	create_insn	(x=0XEC62);
	op_stkvar	(x,	1);
	create_insn	(x=0XEC68);
	op_stkvar	(x,	1);
	create_insn	(x=0XEC6E);
	op_stkvar	(x,	1);
	set_cmt	(0XEC72,	"param_buf",	0);
	set_cmt	(0XEC76,	"a3",	0);
	set_cmt	(0XEC78,	"a1",	0);
	create_insn	(x=0XEC78);
	op_stkvar	(x,	1);
	create_insn	(x=0XEC84);
	op_hex		(x,	1);
	create_insn	(0XEC98);
	create_insn	(x=0XEC9A);
	op_stkvar	(x,	1);
	create_insn	(0XEC9E);
	create_insn	(x=0XECA2);
	op_plain_offset	(x,	1,	0X10002760);
	op_plain_offset	(x,	129,	0X10002760);
	create_insn	(x=0XECA6);
	op_plain_offset	(x,	1,	0X10002760);
	op_plain_offset	(x,	129,	0X10002760);
	create_insn	(x=0XECAA);
	op_plain_offset	(x,	1,	0X10002760);
	op_plain_offset	(x,	129,	0X10002760);
	create_insn	(x=0XECAC);
	op_stkvar	(x,	1);
	create_insn	(x=0XECB0);
	op_stkvar	(x,	1);
	set_cmt	(0XECB8,	"a3",	0);
	set_cmt	(0XECBA,	"param_buf",	0);
	create_insn	(x=0XECBA);
	op_stkvar	(x,	1);
	set_cmt	(0XECBC,	"a1",	0);
	create_insn	(x=0XECBC);
	op_stkvar	(x,	1);
	set_cmt	(0XECC2,	"a3",	0);
	set_cmt	(0XECC4,	"param_buf",	0);
	create_insn	(x=0XECC4);
	op_stkvar	(x,	1);
	set_cmt	(0XECC6,	"a1",	0);
	create_insn	(x=0XECC6);
	op_stkvar	(x,	1);
	create_insn	(x=0XECCE);
	op_plain_offset	(x,	1,	0X10002760);
	op_plain_offset	(x,	129,	0X10002760);
	create_insn	(x=0XECD2);
	op_plain_offset	(x,	1,	0X10002760);
	op_plain_offset	(x,	129,	0X10002760);
	create_insn	(x=0XECD6);
	op_plain_offset	(x,	1,	0X10002760);
	op_plain_offset	(x,	129,	0X10002760);
	create_insn	(x=0XECDC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XED00);
	op_stkvar	(x,	1);
	create_insn	(0XED14);
	create_insn	(0XED16);
	create_insn	(x=0XED24);
	op_stkvar	(x,	1);
	create_insn	(x=0XED2A);
	op_stkvar	(x,	1);
	create_insn	(x=0XED30);
	op_stkvar	(x,	1);
	set_cmt	(0XED34,	"a3",	0);
	set_cmt	(0XED36,	"a1",	0);
	set_cmt	(0XED38,	"param_buf",	0);
	create_insn	(x=0XED38);
	op_stkvar	(x,	1);
	create_insn	(x=0XED50);
	op_stkvar	(x,	1);
	create_insn	(x=0XED54);
	op_hex		(x,	1);
	set_cmt	(0XED5A,	"a4",	0);
	create_insn	(x=0XED5A);
	op_stkvar	(x,	1);
	set_cmt	(0XED5C,	"a3",	0);
	set_cmt	(0XED5E,	"param_buf",	0);
	create_insn	(x=0XED5E);
	op_stkvar	(x,	1);
	set_cmt	(0XED60,	"pkt",	0);
	set_cmt	(0XED66,	"pkt",	0);
	create_insn	(x=0XED66);
	op_stkvar	(x,	1);
	create_insn	(0XED70);
	create_insn	(0XED72);
	create_insn	(x=0XED82);
	op_stkvar	(x,	1);
	create_insn	(x=0XED84);
	op_stkvar	(x,	1);
	set_cmt	(0XED8A,	"a3",	0);
	set_cmt	(0XED8C,	"param_buf",	0);
	create_insn	(x=0XED8C);
	op_stkvar	(x,	1);
	set_cmt	(0XED8E,	"a1",	0);
	create_insn	(x=0XED8E);
	op_stkvar	(x,	1);
	set_cmt	(0XED94,	"a3",	0);
	set_cmt	(0XED96,	"param_buf",	0);
	create_insn	(x=0XED96);
	op_stkvar	(x,	1);
	set_cmt	(0XED98,	"a1",	0);
	create_insn	(x=0XED98);
	op_stkvar	(x,	1);
	create_insn	(x=0XEDAE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0XEDC2);
	create_insn	(x=0XEDCA);
	op_stkvar	(x,	1);
	create_insn	(x=0XEDCE);
	op_stkvar	(x,	1);
	create_insn	(x=0XEDD2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XEDD4);
	op_hex		(x,	1);
	create_insn	(x=0XEDD8);
	op_stkvar	(x,	1);
	create_insn	(x=0XEDE2);
	op_plain_offset	(x,	1,	0X10002760);
	op_plain_offset	(x,	129,	0X10002760);
	create_insn	(x=0XEDE8);
	op_plain_offset	(x,	1,	0X10002760);
	op_plain_offset	(x,	129,	0X10002760);
	create_insn	(x=0XEDEE);
	op_plain_offset	(x,	1,	0X10002760);
	op_plain_offset	(x,	129,	0X10002760);
	create_insn	(x=0XEDF4);
	op_hex		(x,	1);
	create_insn	(x=0XEDF8);
	op_stkvar	(x,	1);
	create_insn	(x=0XEE02);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XEE06);
	op_hex		(x,	1);
	create_insn	(x=0XEE0C);
	op_stkvar	(x,	1);
	create_insn	(x=0XEE10);
	op_hex		(x,	1);
	create_insn	(x=0XEE14);
	op_stkvar	(x,	1);
	create_insn	(x=0XEE22);
	op_hex		(x,	1);
	set_cmt	(0XEE28,	"a4",	0);
	create_insn	(x=0XEE28);
	op_stkvar	(x,	1);
	set_cmt	(0XEE2A,	"a3",	0);
	set_cmt	(0XEE2C,	"param_buf",	0);
	set_cmt	(0XEE2E,	"pkt",	0);
	set_cmt	(0XEE34,	"pkt",	0);
	create_insn	(x=0XEE34);
	op_stkvar	(x,	1);
	create_insn	(0XEE3E);
	create_insn	(x=0XEE46);
	op_stkvar	(x,	1);
	create_insn	(x=0XEE4A);
	op_stkvar	(x,	1);
	create_insn	(x=0XEE4E);
	op_hex		(x,	1);
	create_insn	(x=0XEE52);
	op_stkvar	(x,	1);
	create_insn	(x=0XEE56);
	op_stkvar	(x,	1);
	create_insn	(x=0XEE5A);
	op_stkvar	(x,	1);
	create_insn	(x=0XEE5E);
	op_stkvar	(x,	1);
	create_insn	(x=0XEE70);
	op_stkvar	(x,	1);
	create_insn	(x=0XEE74);
	op_hex		(x,	1);
	create_insn	(x=0XEE78);
	op_stkvar	(x,	1);
	create_insn	(x=0XEE8A);
	op_stkvar	(x,	1);
	create_insn	(x=0XEE8E);
	op_hex		(x,	1);
	create_insn	(x=0XEE92);
	op_stkvar	(x,	1);
	create_insn	(x=0XEEA4);
	op_stkvar	(x,	1);
	create_insn	(x=0XEEA8);
	op_hex		(x,	1);
	create_insn	(x=0XEEAC);
	op_stkvar	(x,	1);
	create_insn	(x=0XEEB0);
	op_stkvar	(x,	1);
	create_insn	(x=0XEEC6);
	op_hex		(x,	1);
	create_insn	(x=0XEECC);
	op_stkvar	(x,	1);
	create_insn	(0XEED2);
	create_insn	(0XEED4);
	create_insn	(x=0XEEE0);
	op_stkvar	(x,	1);
	set_cmt	(0XEEE6,	"a4",	0);
	create_insn	(x=0XEEE6);
	op_stkvar	(x,	1);
	create_insn	(x=0XEEE8);
	op_hex		(x,	1);
	set_cmt	(0XEEEE,	"a3",	0);
	set_cmt	(0XEEF0,	"param_buf",	0);
	set_cmt	(0XEEF2,	"pkt",	0);
	set_cmt	(0XEEF8,	"pkt",	0);
	create_insn	(x=0XEEF8);
	op_stkvar	(x,	1);
	create_insn	(0XEF02);
	create_insn	(x=0XEF0A);
	op_stkvar	(x,	1);
	create_insn	(x=0XEF0E);
	op_stkvar	(x,	1);
	create_insn	(x=0XEF12);
	op_hex		(x,	1);
	create_insn	(x=0XEF16);
	op_stkvar	(x,	1);
	create_insn	(x=0XEF1A);
	op_stkvar	(x,	1);
	create_insn	(x=0XEF1E);
	op_stkvar	(x,	1);
	create_insn	(x=0XEF22);
	op_stkvar	(x,	1);
	create_insn	(x=0XEF26);
	op_stkvar	(x,	1);
	create_insn	(x=0XEF3E);
	op_stkvar	(x,	1);
	create_insn	(x=0XEF42);
	op_hex		(x,	1);
	create_insn	(x=0XEF46);
	op_stkvar	(x,	1);
	create_insn	(x=0XEF58);
	op_stkvar	(x,	1);
	create_insn	(x=0XEF5C);
	op_hex		(x,	1);
	create_insn	(x=0XEF60);
	op_stkvar	(x,	1);
	create_insn	(x=0XEF72);
	op_stkvar	(x,	1);
	create_insn	(x=0XEF76);
	op_hex		(x,	1);
	create_insn	(x=0XEF7A);
	op_stkvar	(x,	1);
	create_insn	(x=0XEF80);
	op_stkvar	(x,	1);
	create_insn	(x=0XEF96);
	op_hex		(x,	1);
	create_insn	(x=0XEF9C);
	op_stkvar	(x,	1);
	create_insn	(0XEFA2);
	create_insn	(0XEFA4);
	create_insn	(x=0XEFB0);
	op_stkvar	(x,	1);
	set_cmt	(0XEFB6,	"a4",	0);
	create_insn	(x=0XEFB6);
	op_stkvar	(x,	1);
	create_insn	(x=0XEFB8);
	op_hex		(x,	1);
	set_cmt	(0XEFBE,	"a3",	0);
	set_cmt	(0XEFC0,	"param_buf",	0);
	set_cmt	(0XEFC2,	"pkt",	0);
	set_cmt	(0XEFC8,	"pkt",	0);
	create_insn	(x=0XEFC8);
	op_stkvar	(x,	1);
	create_insn	(0XEFD2);
	set_name	(0XEFD2,	"cmd_exec_set00_cmd30");
	create_insn	(x=0XEFE0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XEFE2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0XEFFC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XF000);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XF004,	"pkt",	0);
	create_dword	(x=0XF004);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XF008);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0XF00C);
	create_insn	(x=0XF014);
	op_hex		(x,	1);
	create_insn	(x=0XF01C);
	op_stkvar	(x,	1);
	set_cmt	(0XF020,	"a4",	0);
	set_cmt	(0XF022,	"a3",	0);
	set_cmt	(0XF024,	"param_buf",	0);
	create_insn	(x=0XF024);
	op_stkvar	(x,	1);
	set_cmt	(0XF02A,	"pkt",	0);
	create_insn	(0XF032);
	create_insn	(0XF03E);
	create_insn	(0XF044);
	create_insn	(0XF04A);
	create_insn	(0XF056);
	create_insn	(0XF05C);
	create_insn	(0XF062);
	set_name	(0XF062,	"cmd_exec_set00_cmd0D");
	create_insn	(x=0XF06C);
	op_hex		(x,	1);
	create_insn	(x=0XF080);
	op_stkvar	(x,	1);
	create_insn	(x=0XF084);
	op_stkvar	(x,	1);
	create_insn	(x=0XF092);
	op_hex		(x,	1);
	create_insn	(x=0XF09A);
	op_stkvar	(x,	1);
	set_cmt	(0XF0A2,	"a4",	0);
	create_insn	(x=0XF0A2);
	op_stkvar	(x,	1);
	set_cmt	(0XF0A4,	"a3",	0);
	set_cmt	(0XF0A6,	"param_buf",	0);
	set_cmt	(0XF0A8,	"pkt",	0);
	set_cmt	(0XF0AE,	"pkt",	0);
	create_insn	(x=0XF0AE);
	op_stkvar	(x,	1);
	create_insn	(0XF0B8);
	create_insn	(x=0XF0BA);
	op_stkvar	(x,	1);
	create_insn	(0XF0C0);
	set_name	(0XF0C0,	"cmd_exec_set00_cmd0C");
	create_insn	(x=0XF0C6);
	op_hex		(x,	1);
	create_insn	(x=0XF0E0);
	op_hex		(x,	1);
	create_insn	(x=0XF0EE);
	op_stkvar	(x,	1);
	set_cmt	(0XF0F2,	"a4",	0);
	create_insn	(x=0XF0F2);
	op_stkvar	(x,	1);
	set_cmt	(0XF0F4,	"a3",	0);
	set_cmt	(0XF0F6,	"param_buf",	0);
	set_cmt	(0XF0FC,	"pkt",	0);
	create_insn	(x=0XF0FC);
	op_stkvar	(x,	1);
	create_insn	(0XF106);
	create_insn	(x=0XF108);
	op_stkvar	(x,	1);
	create_insn	(x=0XF10C);
	op_stkvar	(x,	1);
	create_insn	(x=0XF112);
	op_hex		(x,	1);
	create_insn	(x=0XF11A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XF11E);
	op_stkvar	(x,	1);
	create_insn	(0XF124);
	set_name	(0XF124,	"cmd_exec_set00_cmd0B");
	create_insn	(x=0XF12A);
	op_hex		(x,	1);
	create_insn	(x=0XF140);
	op_hex		(x,	1);
	create_insn	(x=0XF150);
	op_stkvar	(x,	1);
	set_cmt	(0XF154,	"a4",	0);
	set_cmt	(0XF156,	"a3",	0);
	set_cmt	(0XF158,	"param_buf",	0);
	create_insn	(x=0XF158);
	op_stkvar	(x,	1);
	set_cmt	(0XF15E,	"pkt",	0);
	create_insn	(x=0XF164);
	op_stkvar	(x,	1);
	set_cmt	(0XF178,	"TimeOut",	0);
	create_insn	(0XF186);
	create_insn	(0XF18A);
	set_name	(0XF18A,	"cmd_exec_set00_cmd0A");
	create_insn	(x=0XF19A);
	op_hex		(x,	1);
	create_insn	(x=0XF1B6);
	op_stkvar	(x,	1);
	create_insn	(x=0XF1BC);
	op_hex		(x,	1);
	create_insn	(x=0XF1C4);
	op_hex		(x,	1);
	create_insn	(x=0XF1D2);
	op_hex		(x,	1);
	create_insn	(x=0XF1F0);
	op_hex		(x,	1);
	set_cmt	(0XF1F6,	"a4",	0);
	create_insn	(x=0XF1F6);
	op_stkvar	(x,	1);
	set_cmt	(0XF1F8,	"a3",	0);
	set_cmt	(0XF1FA,	"param_buf",	0);
	set_cmt	(0XF1FC,	"pkt",	0);
	set_cmt	(0XF202,	"pkt",	0);
	create_insn	(x=0XF202);
	op_stkvar	(x,	1);
	create_insn	(x=0XF20C);
	op_stkvar	(x,	1);
	create_insn	(0XF212);
	create_insn	(0XF216);
	set_name	(0XF216,	"nullsub_13");
	create_insn	(0XF218);
	set_name	(0XF218,	"cmd_exec_set00_cmd08");
	create_insn	(x=0XF226);
	op_hex		(x,	1);
	create_insn	(x=0XF236);
	op_stkvar	(x,	1);
	create_insn	(x=0XF23E);
	op_stkvar	(x,	1);
	create_insn	(x=0XF24C);
	op_hex		(x,	1);
	set_cmt	(0XF252,	"a4",	0);
	set_cmt	(0XF254,	"a3",	0);
	set_cmt	(0XF256,	"param_buf",	0);
	create_insn	(x=0XF256);
	op_stkvar	(x,	1);
	set_cmt	(0XF258,	"pkt",	0);
	set_cmt	(0XF25E,	"pkt",	0);
	create_insn	(0XF266);
	set_name	(0XF266,	"cmd_exec_set00_cmd07");
	create_insn	(x=0XF274);
	op_hex		(x,	1);
	create_insn	(x=0XF284);
	op_stkvar	(x,	1);
	create_insn	(0XF294);
	create_insn	(x=0XF2AA);
	op_hex		(x,	1);
	set_cmt	(0XF2B0,	"a4",	0);
	set_cmt	(0XF2B2,	"a3",	0);
	set_cmt	(0XF2B4,	"param_buf",	0);
	create_insn	(x=0XF2B4);
	op_stkvar	(x,	1);
	set_cmt	(0XF2B6,	"pkt",	0);
	set_cmt	(0XF2BC,	"pkt",	0);
	create_insn	(x=0XF2C2);
	op_stkvar	(x,	1);
	create_insn	(x=0XF2CC);
	op_hex		(x,	1);
	set_cmt	(0XF2D8,	"TimeOut",	0);
	create_insn	(0XF2E8);
	create_insn	(0XF2EA);
	set_name	(0XF2EA,	"cmd_exec_set00_cmd01");
	create_insn	(x=0XF2EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XF2FE);
	op_hex		(x,	1);
	create_insn	(x=0XF306);
	op_stkvar	(x,	1);
	create_insn	(x=0XF30A);
	op_stkvar	(x,	1);
	create_insn	(x=0XF310);
	op_hex		(x,	1);
	create_insn	(x=0XF316);
	op_hex		(x,	1);
	create_insn	(x=0XF31A);
	op_stkvar	(x,	1);
	create_insn	(x=0XF31E);
	op_stkvar	(x,	1);
	create_insn	(x=0XF328);
	op_hex		(x,	1);
	create_insn	(x=0XF330);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XF338);
	op_stkvar	(x,	1);
	create_insn	(x=0XF340);
	op_stkvar	(x,	1);
	create_insn	(0XF346);
	create_insn	(x=0XF34C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XF350);
	op_stkvar	(x,	1);
	create_insn	(x=0XF354);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XF358);
	op_stkvar	(x,	1);
	create_insn	(0XF35E);
	create_insn	(x=0XF362);
	op_stkvar	(x,	1);
	create_insn	(x=0XF368);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XF36C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XF376);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XF378);
	op_stkvar	(x,	1);
	create_insn	(x=0XF380);
	op_hex		(x,	1);
	create_insn	(x=0XF38C);
	op_stkvar	(x,	1);
	create_insn	(x=0XF392);
	op_stkvar	(x,	1);
	create_insn	(x=0XF398);
	op_stkvar	(x,	1);
	create_insn	(x=0XF3A0);
	op_stkvar	(x,	1);
	set_cmt	(0XF3A4,	"a4",	0);
	create_insn	(x=0XF3A4);
	op_stkvar	(x,	1);
	set_cmt	(0XF3A6,	"a3",	0);
	set_cmt	(0XF3A8,	"param_buf",	0);
	set_cmt	(0XF3AA,	"pkt",	0);
	set_cmt	(0XF3B0,	"pkt",	0);
	create_insn	(x=0XF3B0);
	op_stkvar	(x,	1);
	create_insn	(x=0XF3BA);
	op_stkvar	(x,	1);
	create_insn	(x=0XF3BE);
	op_hex		(x,	1);
	create_insn	(x=0XF3C2);
	op_hex		(x,	1);
	create_insn	(0XF3C8);
	set_name	(0XF3C8,	"parse_subcommand_53C8");
	create_insn	(x=0XF3CE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XF3D0,	"switch 10 cases ",	0);
	set_cmt	(0XF3D4,	"switch jump",	0);
	set_cmt	(0XF3D8,	"jump table for switch statement",	0);
	create_byte	(0XF3D8);
	set_name	(0XF3D8,	"jpt_53D4");
	create_byte	(0XF3D9);
	create_byte	(0XF3DA);
	create_byte	(0XF3DB);
	create_byte	(0XF3DC);
	create_byte	(0XF3DD);
	create_byte	(0XF3DE);
	create_byte	(0XF3DF);
	create_byte	(0XF3E0);
	create_byte	(0XF3E1);
	set_cmt	(0XF3E2,	"jumptable 000053D4 case 0",	1);
	create_insn	(0XF3E2);
	set_cmt	(0XF3EC,	"pkt",	0);
	set_cmt	(0XF406,	"jumptable 000053D4 default case",	1);
	set_name	(0XF406,	"def_53D4");
	create_insn	(0XF408);
	create_insn	(0XF416);
	create_insn	(0XF42A);
	create_insn	(0XF438);
	create_insn	(0XF43E);
	create_insn	(0XF444);
	create_insn	(0XF44A);
	create_insn	(0XF450);
	create_insn	(0XF456);
	set_cmt	(0XF45C,	"jumptable 000053D4 case 1",	1);
	create_insn	(0XF45C);
	set_cmt	(0XF46A,	"pkt",	0);
	set_cmt	(0XF470,	"jumptable 0000547E default case",	1);
	set_name	(0XF470,	"def_54D6");
	set_cmt	(0XF472,	"jumptable 000053D4 case 6",	1);
	create_insn	(0XF472);
	set_cmt	(0XF474,	"pkt",	0);
	set_cmt	(0XF476,	"switch 33 cases ",	0);
	set_cmt	(0XF47E,	"switch jump",	0);
	set_cmt	(0XF482,	"jump table for switch statement",	0);
	create_byte	(0XF482);
	set_name	(0XF482,	"jpt_547E");
	create_byte	(0XF483);
	create_byte	(0XF484);
	create_byte	(0XF485);
	create_byte	(0XF486);
	create_byte	(0XF487);
	create_byte	(0XF488);
	create_byte	(0XF489);
	create_byte	(0XF48A);
	create_byte	(0XF48B);
	create_byte	(0XF48C);
	create_byte	(0XF48D);
	create_byte	(0XF48E);
	create_byte	(0XF48F);
	create_byte	(0XF490);
	create_byte	(0XF491);
	create_byte	(0XF492);
	create_byte	(0XF493);
	create_byte	(0XF494);
	create_byte	(0XF495);
	create_byte	(0XF496);
	create_byte	(0XF497);
	create_byte	(0XF498);
	create_byte	(0XF499);
	create_byte	(0XF49A);
	create_byte	(0XF49B);
	create_byte	(0XF49C);
	create_byte	(0XF49D);
	create_byte	(0XF49E);
	create_byte	(0XF49F);
	create_byte	(0XF4A0);
	create_byte	(0XF4A1);
	create_byte	(0XF4A2);
	set_cmt	(0XF4A4,	"jumptable 0000547E cases 0,5,27,29-31",	1);
	create_insn	(0XF4A4);
	create_insn	(0XF4A6);
	set_cmt	(0XF4AC,	"switch 14 cases ",	0);
	set_cmt	(0XF4B4,	"switch jump",	0);
	set_cmt	(0XF4B8,	"jump table for switch statement",	0);
	create_byte	(0XF4B8);
	set_name	(0XF4B8,	"jpt_54B4");
	create_byte	(0XF4B9);
	create_byte	(0XF4BA);
	create_byte	(0XF4BB);
	create_byte	(0XF4BC);
	create_byte	(0XF4BD);
	create_byte	(0XF4BE);
	create_byte	(0XF4BF);
	create_byte	(0XF4C0);
	create_byte	(0XF4C1);
	create_byte	(0XF4C2);
	create_byte	(0XF4C3);
	create_byte	(0XF4C4);
	create_byte	(0XF4C5);
	set_cmt	(0XF4C6,	"jumptable 000054B4 case 38",	1);
	create_insn	(0XF4C6);
	create_insn	(0XF4C8);
	set_cmt	(0XF4CE,	"switch 6 cases ",	0);
	set_cmt	(0XF4D6,	"switch jump",	0);
	set_cmt	(0XF4DA,	"jump table for switch statement",	0);
	create_byte	(0XF4DA);
	set_name	(0XF4DA,	"jpt_54D6");
	create_byte	(0XF4DB);
	create_byte	(0XF4DC);
	create_byte	(0XF4DD);
	create_byte	(0XF4DE);
	create_byte	(0XF4DF);
	create_insn	(0XF4E0);
	create_insn	(0XF4F4);
	make_array	(0XF502,	0X2);
	create_dword	(x=0XF504);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0XF508);
	create_dword	(x=0XF50C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XF510);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XF514);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XF518);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XF51C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XF520);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0XF524);
	create_dword	(x=0XF528);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XF52C,	"jumptable 0000547E case 1",	1);
	create_insn	(0XF52C);
	set_cmt	(0XF534,	"jumptable 0000547E case 2",	1);
	create_insn	(0XF534);
	set_cmt	(0XF53C,	"jumptable 0000547E case 3",	1);
	create_insn	(0XF53C);
	set_cmt	(0XF544,	"jumptable 0000547E case 4",	1);
	create_insn	(0XF544);
	set_cmt	(0XF54C,	"jumptable 0000547E case 6",	1);
	create_insn	(0XF54C);
	set_cmt	(0XF554,	"jumptable 0000547E case 7",	1);
	create_insn	(0XF554);
	create_insn	(0XF55C);
	set_cmt	(0XF55E,	"jumptable 0000547E case 8",	1);
	create_insn	(0XF55E);
	set_cmt	(0XF566,	"jumptable 0000547E case 9",	1);
	create_insn	(0XF566);
	set_cmt	(0XF56E,	"jumptable 0000547E case 10",	1);
	create_insn	(0XF56E);
	set_cmt	(0XF576,	"jumptable 0000547E case 11",	1);
	create_insn	(0XF576);
	set_cmt	(0XF57E,	"jumptable 0000547E case 12",	1);
	create_insn	(0XF57E);
	set_cmt	(0XF586,	"jumptable 0000547E case 13",	1);
	create_insn	(0XF586);
	create_insn	(0XF58E);
	set_cmt	(0XF590,	"jumptable 0000547E case 14",	1);
	create_insn	(0XF590);
	set_cmt	(0XF598,	"jumptable 0000547E case 15",	1);
	create_insn	(0XF598);
	set_cmt	(0XF5A0,	"jumptable 0000547E case 16",	1);
	create_insn	(0XF5A0);
	set_cmt	(0XF5A8,	"jumptable 0000547E case 17",	1);
	create_insn	(0XF5A8);
	create_insn	(0XF5B0);
	set_cmt	(0XF5B2,	"jumptable 000053D4 case 9",	1);
	create_insn	(0XF5B2);
	set_cmt	(0XF5B4,	"jumptable 000053D4 case 8",	1);
	create_insn	(0XF5B4);
	create_insn	(0XF5B6);
	set_cmt	(0XF5B8,	"jumptable 0000547E case 18",	1);
	create_insn	(0XF5B8);
	set_cmt	(0XF5C0,	"jumptable 0000547E case 19",	1);
	create_insn	(0XF5C0);
	set_cmt	(0XF5C8,	"jumptable 0000547E case 20",	1);
	create_insn	(0XF5C8);
	create_insn	(0XF5D0);
	create_insn	(0XF5D2);
	set_cmt	(0XF5D4,	"jumptable 0000547E case 21",	1);
	create_insn	(0XF5D4);
	set_cmt	(0XF5DC,	"jumptable 0000547E case 22",	1);
	create_insn	(0XF5DC);
	set_cmt	(0XF5E4,	"jumptable 0000547E case 23",	1);
	create_insn	(0XF5E4);
	set_cmt	(0XF5EC,	"jumptable 0000547E case 24",	1);
	create_insn	(0XF5EC);
	set_cmt	(0XF5F4,	"jumptable 0000547E case 25",	1);
	create_insn	(0XF5F4);
	set_cmt	(0XF5FA,	"jumptable 000056F0 default case",	1);
	set_name	(0XF5FA,	"def_56F0");
	set_cmt	(0XF5FC,	"jumptable 0000547E case 26",	1);
	create_insn	(0XF5FC);
	set_cmt	(0XF604,	"jumptable 0000547E case 28",	1);
	create_insn	(0XF604);
	create_insn	(x=0XF608);
	op_hex		(x,	1);
	create_insn	(x=0XF60C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XF612);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	set_cmt	(0XF61C,	"jumptable 0000547E case 32",	1);
	create_insn	(0XF61C);
	create_insn	(0XF624);
	set_cmt	(0XF62A,	"jumptable 000054B4 case 34",	1);
	create_insn	(0XF62A);
	set_cmt	(0XF632,	"jumptable 000054B4 case 35",	1);
	create_insn	(0XF632);
	create_insn	(x=0XF634);
	op_bin		(x,	0);
	set_cmt	(0XF63A,	"jumptable 000054B4 case 36",	1);
	create_insn	(0XF63A);
	set_cmt	(0XF642,	"jumptable 000054B4 case 37",	1);
	create_insn	(0XF642);
	set_cmt	(0XF64A,	"jumptable 000054B4 case 39",	1);
	create_insn	(0XF64A);
	set_cmt	(0XF652,	"jumptable 000054B4 case 40",	1);
	create_insn	(0XF652);
	set_cmt	(0XF65A,	"jumptable 000054B4 case 41",	1);
	create_insn	(0XF65A);
	set_cmt	(0XF662,	"jumptable 000054B4 case 42",	1);
	create_insn	(0XF662);
	set_cmt	(0XF66A,	"jumptable 000054B4 case 43",	1);
	create_insn	(0XF66A);
	set_cmt	(0XF672,	"jumptable 000054B4 case 44",	1);
	create_insn	(0XF672);
	set_cmt	(0XF67A,	"jumptable 000054B4 case 45",	1);
	create_insn	(0XF67A);
	set_cmt	(0XF682,	"jumptable 000054B4 case 46",	1);
	create_insn	(0XF682);
	set_cmt	(0XF68A,	"jumptable 000054B4 case 47",	1);
	create_insn	(0XF68A);
	create_insn	(0XF692);
	set_cmt	(0XF698,	"jumptable 000054D6 case 49",	1);
	create_insn	(0XF698);
	set_cmt	(0XF6A0,	"jumptable 000054D6 case 50",	1);
	create_insn	(0XF6A0);
	set_cmt	(0XF6A8,	"jumptable 000054D6 case 51",	1);
	create_insn	(0XF6A8);
	set_cmt	(0XF6B0,	"jumptable 000054D6 case 52",	1);
	create_insn	(0XF6B0);
	create_insn	(0XF6B8);
	create_insn	(0XF6BA);
	set_cmt	(0XF6BC,	"jumptable 000054D6 case 53",	1);
	create_insn	(0XF6BC);
	set_cmt	(0XF6C4,	"jumptable 000054D6 case 54",	1);
	create_insn	(0XF6C4);
	create_insn	(0XF6CC);
	create_insn	(0XF6D2);
	create_insn	(0XF6D8);
	create_insn	(0XF6DE);
	create_insn	(0XF6E4);
	set_cmt	(0XF6E6,	"pkt",	0);
	set_cmt	(0XF6E8,	"switch 13 cases ",	0);
	set_cmt	(0XF6F0,	"switch jump",	0);
	set_cmt	(0XF6F4,	"jump table for switch statement",	0);
	create_byte	(0XF6F4);
	set_name	(0XF6F4,	"jpt_56F0");
	create_byte	(0XF6F5);
	create_byte	(0XF6F6);
	create_byte	(0XF6F7);
	create_byte	(0XF6F8);
	create_byte	(0XF6F9);
	create_byte	(0XF6FA);
	create_byte	(0XF6FB);
	create_byte	(0XF6FC);
	create_byte	(0XF6FD);
	create_byte	(0XF6FE);
	create_byte	(0XF6FF);
	create_byte	(0XF700);
	set_cmt	(0XF702,	"jumptable 000056F0 cases 1-3,8,10,11",	1);
	create_insn	(0XF702);
	create_insn	(0XF704);
	create_insn	(0XF71C);
	set_cmt	(0XF72A,	"jumptable 000056F0 case 0",	1);
	create_insn	(0XF72A);
	set_cmt	(0XF732,	"jumptable 000056F0 case 4",	1);
	create_insn	(0XF732);
	set_cmt	(0XF73A,	"jumptable 000056F0 case 5",	1);
	create_insn	(0XF73A);
	set_cmt	(0XF742,	"jumptable 000056F0 case 6",	1);
	create_insn	(0XF742);
	set_cmt	(0XF74A,	"jumptable 000056F0 case 7",	1);
	create_insn	(0XF74A);
	set_cmt	(0XF752,	"jumptable 000056F0 case 9",	1);
	create_insn	(0XF752);
	set_cmt	(0XF75A,	"jumptable 000056F0 case 12",	1);
	create_insn	(0XF75A);
	create_insn	(0XF762);
	create_insn	(0XF768);
	create_insn	(0XF76E);
	create_insn	(0XF774);
	create_insn	(0XF77A);
	create_insn	(0XF780);
	set_cmt	(0XF78A,	"pkt",	0);
	set_cmt	(0XF792,	"pkt",	0);
	create_insn	(0XF792);
	create_insn	(0XF79A);
	set_name	(0XF79A,	"cmd_exec_set06_cmd40");
	set_cmt	(0XF7A0,	"p_err",	0);
	create_insn	(x=0XF7A6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0XF7BC);
	create_insn	(x=0XF7C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0XF7C0,	"cmd_exec_set02_cmd81");
	create_insn	(x=0XF7CC);
	op_plain_offset	(x,	1,	0X100000F1);
	op_plain_offset	(x,	129,	0X100000F1);
	create_insn	(0XF7D0);
	create_insn	(x=0XF7D6);
	op_stkvar	(x,	1);
	create_insn	(x=0XF7DC);
	op_stkvar	(x,	1);
	create_insn	(x=0XF7F0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XF800);
	op_stkvar	(x,	1);
	create_insn	(x=0XF804);
	op_stkvar	(x,	1);
	create_insn	(x=0XF818);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XF822);
	op_stkvar	(x,	1);
	create_insn	(x=0XF826);
	op_plain_offset	(x,	1,	0X100000F1);
	op_plain_offset	(x,	129,	0X100000F1);
	create_insn	(x=0XF828);
	op_stkvar	(x,	1);
	create_insn	(0XF836);
	set_name	(0XF836,	"cmd_exec_set03_cmd51");
	create_insn	(x=0XF83A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0XF848);
	create_insn	(0XF84E);
	set_name	(0XF84E,	"cmd_exec_set00_cmd01_rcv18");
	create_insn	(x=0XF85E);
	op_hex		(x,	1);
	create_insn	(x=0XF866);
	op_stkvar	(x,	1);
	create_insn	(x=0XF86A);
	op_stkvar	(x,	1);
	set_cmt	(0XF86E,	"a2",	0);
	create_insn	(x=0XF870);
	op_hex		(x,	1);
	create_insn	(x=0XF876);
	op_hex		(x,	1);
	create_insn	(x=0XF87A);
	op_stkvar	(x,	1);
	set_cmt	(0XF87E,	"a1",	0);
	create_insn	(x=0XF87E);
	op_stkvar	(x,	1);
	create_insn	(x=0XF88A);
	op_stkvar	(x,	1);
	create_insn	(x=0XF88E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XF890,	"a4",	0);
	create_insn	(x=0XF890);
	op_stkvar	(x,	1);
	set_cmt	(0XF892,	"a3",	0);
	create_insn	(x=0XF894);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XF89A);
	op_hex		(x,	1);
	create_insn	(x=0XF8A2);
	op_stkvar	(x,	1);
	create_insn	(x=0XF8AA);
	op_stkvar	(x,	1);
	set_cmt	(0XF8AE,	"param_buf",	0);
	set_cmt	(0XF8B0,	"pkt",	0);
	set_cmt	(0XF8B6,	"pkt",	0);
	create_insn	(x=0XF8B6);
	op_stkvar	(x,	1);
	create_insn	(0XF8C0);
	create_insn	(0XF93C);
	set_name	(0XF93C,	"power_zone_auto_select");
	create_insn	(x=0XF940);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XF948);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(0XF958);
	create_insn	(x=0XF960);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XF968);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(0XF9A2);
	create_insn	(0XF9AC);
	create_insn	(x=0XF9AE);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(0XF9B4);
	create_dword	(x=0XFA08);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XFA0C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XFA10);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0XFA14);
	create_dword	(x=0XFA18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XFA1C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0XFA20);
	create_dword	(x=0XFA24);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0XFA28);
	create_dword	(0XFA2C);
	create_dword	(0XFA30);
	create_insn	(0XFA34);
	create_insn	(0XFA36);
	create_insn	(x=0XFA3C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XFA72);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(0XFA78);
	create_insn	(x=0XFA82);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	set_cmt	(0XFA8C,	"power_zone_is_ce",	0);
	create_insn	(0XFA8C);
	create_insn	(0XFA96);
	set_name	(0XFA96,	"cmd_exec_set09_cmd02");
	create_insn	(x=0XFA9A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XFAAE);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XFAB2);
	op_hex		(x,	1);
	create_insn	(x=0XFAB6);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XFAB8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0XFABC);
	set_name	(0XFABC,	"cmd_exec_set09_cmd01");
	create_insn	(x=0XFACA);
	op_hex		(x,	1);
	set_cmt	(0XFADE,	"p_err",	0);
	create_insn	(x=0XFADE);
	op_stkvar	(x,	1);
	create_insn	(x=0XFAE4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XFAE6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XFAE8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XFAEE);
	op_plain_offset	(x,	1,	0X1000457C);
	op_plain_offset	(x,	129,	0X1000457C);
	create_insn	(x=0XFAF4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XFAF8);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XFB0E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XFB20);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XFB26,	"a3",	0);
	set_cmt	(0XFB2A,	"param_buf",	0);
	set_cmt	(0XFB2C,	"a1",	0);
	create_insn	(x=0XFB36);
	op_plain_offset	(x,	1,	0X100027EE);
	op_plain_offset	(x,	129,	0X100027EE);
	create_insn	(x=0XFB40);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XFB4A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0XFB54);
	create_insn	(x=0XFB58);
	op_plain_offset	(x,	1,	0X1000457C);
	op_plain_offset	(x,	129,	0X1000457C);
	create_insn	(x=0XFB7E);
	op_plain_offset	(x,	1,	0X1000457C);
	op_plain_offset	(x,	129,	0X1000457C);
	create_insn	(0XFBAA);
	create_insn	(0XFBB0);
	set_name	(0XFBB0,	"parse_command_5BB0");
	create_insn	(x=0XFBB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XFBC0);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	set_cmt	(0XFBC6,	"pkt",	0);
	create_insn	(x=0XFBCE);
	op_hex		(x,	1);
	create_insn	(0XFBE2);
	create_insn	(0XFBE6);
	set_cmt	(0XFBE8,	"pkt",	0);
	create_insn	(0XFBF4);
	create_insn	(0XFBFA);
	create_insn	(x=0XFC00);
	op_hex		(x,	1);
	create_insn	(x=0XFC12);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XFC16);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XFC24);
	op_hex		(x,	1);
	create_insn	(x=0XFC2E);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XFC68);
	op_hex		(x,	1);
	set_cmt	(0XFC7C,	"pkt",	0);
	create_insn	(x=0XFC84);
	op_hex		(x,	1);
	set_cmt	(0XFC88,	"switch 32 cases ",	0);
	set_cmt	(0XFC8C,	"switch jump",	0);
	set_cmt	(0XFC90,	"jump table for switch statement",	0);
	create_byte	(0XFC90);
	set_name	(0XFC90,	"jpt_5C8C");
	create_byte	(0XFC91);
	create_byte	(0XFC92);
	create_byte	(0XFC93);
	create_byte	(0XFC94);
	create_byte	(0XFC95);
	create_byte	(0XFC96);
	create_byte	(0XFC97);
	create_byte	(0XFC98);
	create_byte	(0XFC99);
	create_byte	(0XFC9A);
	create_byte	(0XFC9B);
	create_byte	(0XFC9C);
	create_byte	(0XFC9D);
	create_byte	(0XFC9E);
	create_byte	(0XFC9F);
	create_byte	(0XFCA0);
	create_byte	(0XFCA1);
	create_byte	(0XFCA2);
	create_byte	(0XFCA3);
	create_byte	(0XFCA4);
	create_byte	(0XFCA5);
	create_byte	(0XFCA6);
	create_byte	(0XFCA7);
	create_byte	(0XFCA8);
	create_byte	(0XFCA9);
	create_byte	(0XFCAA);
	create_byte	(0XFCAB);
	create_byte	(0XFCAC);
	create_byte	(0XFCAD);
	create_byte	(0XFCAE);
	create_byte	(0XFCAF);
	set_cmt	(0XFCB0,	"jumptable 00005C8C case 0",	1);
	create_insn	(0XFCB0);
	set_cmt	(0XFCB2,	"pkt",	0);
	set_cmt	(0XFCBE,	"jumptable 00005C8C cases 1,3-5,7-9,11,12,15,17-19,21,23",	1);
	create_insn	(0XFCBE);
	set_cmt	(0XFCC4,	"jumptable 00005C8C case 10",	1);
	create_insn	(0XFCC4);
	set_cmt	(0XFCCA,	"jumptable 00005C8C cases 2,13,16,22",	1);
	create_insn	(0XFCCA);
	set_cmt	(0XFCD0,	"jumptable 00005C8C case 24",	1);
	create_insn	(0XFCD0);
	set_cmt	(0XFCD6,	"jumptable 00005C8C cases 25,28",	1);
	create_insn	(0XFCD6);
	set_cmt	(0XFCE2,	"jumptable 00005C8C case 31",	1);
	create_insn	(0XFCE2);
	create_insn	(x=0XFCEA);
	op_hex		(x,	1);
	set_cmt	(0XFCEE,	"switch 24 cases ",	0);
	set_cmt	(0XFCF2,	"switch jump",	0);
	set_cmt	(0XFCF6,	"jump table for switch statement",	0);
	create_byte	(0XFCF6);
	set_name	(0XFCF6,	"jpt_5CF2");
	create_byte	(0XFCF7);
	create_byte	(0XFCF8);
	create_byte	(0XFCF9);
	create_byte	(0XFCFA);
	create_byte	(0XFCFB);
	create_byte	(0XFCFC);
	create_byte	(0XFCFD);
	create_byte	(0XFCFE);
	create_byte	(0XFCFF);
	create_byte	(0XFD00);
	create_byte	(0XFD01);
	create_byte	(0XFD02);
	create_byte	(0XFD03);
	create_byte	(0XFD04);
	create_byte	(0XFD05);
	create_byte	(0XFD06);
	create_byte	(0XFD07);
	create_byte	(0XFD08);
	create_byte	(0XFD09);
	create_byte	(0XFD0A);
	create_byte	(0XFD0B);
	create_byte	(0XFD0C);
	create_byte	(0XFD0D);
	set_cmt	(0XFD0E,	"jumptable 00005CF2 cases 1,3-5,7-9,11,12,15,17-19,21,23",	1);
	create_insn	(0XFD0E);
	set_cmt	(0XFD14,	"jumptable 00005CF2 case 10",	1);
	create_insn	(0XFD14);
	set_cmt	(0XFD1E,	"jumptable 00005CF2 cases 2,13,16,22",	1);
	create_insn	(0XFD1E);
	set_cmt	(0XFD28,	"jumptable 00005C8C default case",	1);
	create_insn	(0XFD28);
	set_name	(0XFD28,	"def_5CF2");
	create_insn	(0XFD2A);
	set_name	(0XFD2A,	"packet_prepare");
	create_insn	(x=0XFD2C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XFD3A);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XFD42);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XFD48);
	op_stkvar	(x,	1);
	set_cmt	(0XFD4A,	"cmd",	0);
	set_cmt	(0XFD4E,	"payload_len",	0);
	set_cmt	(0XFD52,	"receiver",	0);
	set_cmt	(0XFD54,	"smdset",	0);
	set_cmt	(0XFD56,	"ack",	0);
	set_cmt	(0XFD58,	"sender",	0);
	set_cmt	(0XFD5E,	"pkt",	0);
	create_insn	(x=0XFD5E);
	op_stkvar	(x,	1);
	create_insn	(x=0XFD66);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(0XFD6C);
	create_insn	(x=0XFD70);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XFD74);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XFD7C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XFD7E);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XFD80);
	op_stkvar	(x,	1);
	create_insn	(x=0XFD88);
	op_stkvar	(x,	1);
	create_insn	(x=0XFD90);
	op_plain_offset	(x,	1,	0X10003708);
	op_plain_offset	(x,	129,	0X10003708);
	set_cmt	(0XFDA4,	"cmd",	0);
	set_cmt	(0XFDA8,	"payload_len",	0);
	set_cmt	(0XFDAC,	"smdset",	0);
	set_cmt	(0XFDAE,	"ack",	0);
	set_cmt	(0XFDB0,	"receiver",	0);
	set_cmt	(0XFDB2,	"sender",	0);
	set_cmt	(0XFDB8,	"pkt",	0);
	create_insn	(x=0XFDC0);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XFDC4);
	op_stkvar	(x,	1);
	create_insn	(0XFDC8);
	create_insn	(x=0XFDCC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XFDD0);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XFDD8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XFDDA);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0XFDDC);
	op_stkvar	(x,	1);
	create_insn	(x=0XFDE4);
	op_stkvar	(x,	1);
	create_insn	(x=0XFDEC);
	op_plain_offset	(x,	1,	0X10003908);
	op_plain_offset	(x,	129,	0X10003908);
	set_cmt	(0XFE00,	"cmd",	0);
	set_cmt	(0XFE04,	"payload_len",	0);
	set_cmt	(0XFE08,	"smdset",	0);
	set_cmt	(0XFE0A,	"ack",	0);
	set_cmt	(0XFE0C,	"receiver",	0);
	set_cmt	(0XFE0E,	"sender",	0);
	set_cmt	(0XFE14,	"pkt",	0);
	create_insn	(x=0XFE1C);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_dword	(x=0XFE20);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XFE24);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XFE28);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XFE2C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XFE30);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XFE34);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XFE38);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XFE3C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XFE40);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XFE44);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XFE48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0XFE4C);
	create_dword	(0XFE50);
	create_dword	(0XFE54);
	create_dword	(x=0XFE58);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0XFE5C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0XFE60);
	create_insn	(x=0XFE66);
	op_stkvar	(x,	1);
	create_insn	(x=0XFE6A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XFE6C,	"smdset",	0);
	set_cmt	(0XFE6E,	"cmd",	0);
	create_insn	(x=0XFE70);
	op_plain_offset	(x,	1,	0X10002760);
	op_plain_offset	(x,	129,	0X10002760);
	create_insn	(x=0XFE72);
	op_stkvar	(x,	1);
	create_insn	(x=0XFE76);
	op_plain_offset	(x,	1,	0X10002760);
	op_plain_offset	(x,	129,	0X10002760);
	create_insn	(x=0XFE78);
	op_stkvar	(x,	1);
	create_insn	(x=0XFE7C);
	op_plain_offset	(x,	1,	0X10002760);
	op_plain_offset	(x,	129,	0X10002760);
	create_insn	(x=0XFE7E);
	op_stkvar	(x,	1);
	create_insn	(x=0XFE84);
	op_stkvar	(x,	1);
	set_cmt	(0XFE86,	"payload_buf",	0);
	set_cmt	(0XFE8A,	"ack",	0);
	set_cmt	(0XFE8C,	"receiver",	0);
	create_insn	(0XFE96);
	create_insn	(x=0XFE98);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XFEA0);
	op_stkvar	(x,	1);
	create_insn	(x=0XFEA6);
	op_hex		(x,	1);
	create_insn	(x=0XFEAC);
	op_hex		(x,	1);
	create_insn	(x=0XFEB0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XFEDE);
	op_stkvar	(x,	1);
	create_insn	(x=0XFEE2);
	op_plain_offset	(x,	1,	0X1000000E);
	op_plain_offset	(x,	129,	0X1000000E);
	create_insn	(x=0XFEE4);
	op_stkvar	(x,	1);
	set_cmt	(0XFEE8,	"smdset",	0);
	create_insn	(x=0XFEF4);
	op_stkvar	(x,	1);
	create_insn	(x=0XFEFA);
	op_stkvar	(x,	1);
	set_cmt	(0XFEFC,	"payload_buf",	0);
	set_cmt	(0XFF00,	"cmd",	0);
	set_cmt	(0XFF02,	"ack",	0);
	set_cmt	(0XFF04,	"receiver",	0);
	create_insn	(0XFF0C);
	create_insn	(x=0XFF0E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XFF12);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XFF14);
	op_plain_offset	(x,	1,	0X1000271C);
	op_plain_offset	(x,	129,	0X1000271C);
	create_insn	(x=0XFF16);
	op_stkvar	(x,	1);
	create_insn	(x=0XFF1A);
	op_plain_offset	(x,	1,	0X1000271C);
	op_plain_offset	(x,	129,	0X1000271C);
	create_insn	(x=0XFF1C);
	op_stkvar	(x,	1);
	create_insn	(x=0XFF20);
	op_plain_offset	(x,	1,	0X1000271C);
	op_plain_offset	(x,	129,	0X1000271C);
	create_insn	(x=0XFF22);
	op_stkvar	(x,	1);
	create_insn	(x=0XFF28);
	op_stkvar	(x,	1);
	create_insn	(x=0XFF2C);
	op_plain_offset	(x,	1,	0X1000271C);
	op_plain_offset	(x,	129,	0X1000271C);
	create_insn	(x=0XFF2E);
	op_stkvar	(x,	1);
	create_insn	(x=0XFF32);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XFF34);
	op_plain_offset	(x,	1,	0X10002728);
	op_plain_offset	(x,	129,	0X10002728);
	create_insn	(x=0XFF36);
	op_stkvar	(x,	1);
	create_insn	(x=0XFF3A);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0XFF3C);
	op_stkvar	(x,	1);
	create_insn	(x=0XFF52);
	op_stkvar	(x,	1);
	create_insn	(x=0XFF56);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0XFF58);
	op_stkvar	(x,	1);
	create_insn	(x=0XFF7C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XFF7E);
	op_stkvar	(x,	1);
	create_insn	(x=0XFF84);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0XFF88);
	op_stkvar	(x,	1);
	create_insn	(x=0XFF8C);
	op_stkvar	(x,	1);
	set_cmt	(0XFF8E,	"payload_buf",	0);
	set_cmt	(0XFF92,	"cmd",	0);
	set_cmt	(0XFF94,	"smdset",	0);
	set_cmt	(0XFF96,	"ack",	0);
	set_cmt	(0XFF98,	"receiver",	0);
	create_insn	(0XFFA2);
	create_insn	(x=0XFFA6);
	op_stkvar	(x,	1);
	set_cmt	(0XFFAC,	"cmd",	0);
	set_cmt	(0XFFB0,	"payload_len",	0);
	set_cmt	(0XFFB4,	"smdset",	0);
	set_cmt	(0XFFB6,	"ack",	0);
	set_cmt	(0XFFB8,	"receiver",	0);
	set_cmt	(0XFFBA,	"sender",	0);
	set_cmt	(0XFFC0,	"pkt",	0);
	create_insn	(x=0XFFC0);
	op_stkvar	(x,	1);
	create_insn	(0XFFCA);
	create_insn	(x=0XFFCC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0XFFD4);
	op_stkvar	(x,	1);
	create_insn	(x=0XFFD8);
	op_plain_offset	(x,	1,	0X1000457C);
	op_plain_offset	(x,	129,	0X1000457C);
	create_insn	(x=0XFFDA);
	op_stkvar	(x,	1);
	create_insn	(x=0XFFDE);
	op_plain_offset	(x,	1,	0X1000457C);
	op_plain_offset	(x,	129,	0X1000457C);
	create_insn	(x=0XFFE0);
	op_stkvar	(x,	1);
	create_insn	(x=0XFFE4);
	op_plain_offset	(x,	1,	0X1000457C);
	op_plain_offset	(x,	129,	0X1000457C);
	create_insn	(x=0XFFE6);
	op_stkvar	(x,	1);
	create_insn	(x=0XFFEA);
	op_plain_offset	(x,	1,	0X1000457C);
	op_plain_offset	(x,	129,	0X1000457C);
	create_insn	(x=0XFFEC);
	op_stkvar	(x,	1);
	create_insn	(x=0XFFF0);
	op_plain_offset	(x,	1,	0X1000457C);
	op_plain_offset	(x,	129,	0X1000457C);
	create_insn	(x=0XFFF2);
	op_stkvar	(x,	1);
	create_insn	(x=0XFFF6);
	op_plain_offset	(x,	1,	0X1000457C);
	op_plain_offset	(x,	129,	0X1000457C);
	create_insn	(x=0XFFF8);
	op_stkvar	(x,	1);
	create_insn	(x=0XFFFC);
	op_plain_offset	(x,	1,	0X1000457C);
	op_plain_offset	(x,	129,	0X1000457C);
	create_insn	(x=0XFFFE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10002);
	op_plain_offset	(x,	1,	0X1000457C);
	op_plain_offset	(x,	129,	0X1000457C);
	create_insn	(x=0X10004);
	op_stkvar	(x,	1);
	create_insn	(x=0X10008);
	op_plain_offset	(x,	1,	0X1000457C);
	op_plain_offset	(x,	129,	0X1000457C);
	create_insn	(x=0X1000A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1000E);
	op_plain_offset	(x,	1,	0X1000457C);
	op_plain_offset	(x,	129,	0X1000457C);
	create_insn	(x=0X10010);
	op_stkvar	(x,	1);
	create_insn	(x=0X10014);
	op_plain_offset	(x,	1,	0X1000457C);
	op_plain_offset	(x,	129,	0X1000457C);
	create_insn	(x=0X10016);
	op_stkvar	(x,	1);
	create_insn	(x=0X10018);
	op_plain_offset	(x,	1,	0X1000457C);
	op_plain_offset	(x,	129,	0X1000457C);
	create_insn	(x=0X1001A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1001E);
	op_stkvar	(x,	1);
	set_cmt	(0X10020,	"cmd",	0);
	set_cmt	(0X10022,	"smdset",	0);
	set_cmt	(0X10024,	"ack",	0);
	set_cmt	(0X10026,	"receiver",	0);
	set_cmt	(0X10028,	"payload_buf",	0);
	create_insn	(x=0X10030);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10032);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	set_cmt	(0X10038,	"cmd",	0);
	set_cmt	(0X1003A,	"smdset",	0);
	set_cmt	(0X1003C,	"ack",	0);
	set_cmt	(0X1003E,	"receiver",	0);
	set_cmt	(0X10040,	"payload_buf",	0);
	create_insn	(0X1004C);
	create_insn	(x=0X10052);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10054);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10056);
	op_plain_offset	(x,	1,	0X100006F1);
	op_plain_offset	(x,	129,	0X100006F1);
	create_insn	(x=0X1005A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1005E);
	op_plain_offset	(x,	1,	0X100006F1);
	op_plain_offset	(x,	129,	0X100006F1);
	create_insn	(x=0X10060);
	op_stkvar	(x,	1);
	create_insn	(x=0X10064);
	op_plain_offset	(x,	1,	0X100006F1);
	op_plain_offset	(x,	129,	0X100006F1);
	create_insn	(x=0X10066);
	op_stkvar	(x,	1);
	create_insn	(x=0X1006C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10070);
	op_plain_offset	(x,	1,	0X100006F1);
	op_plain_offset	(x,	129,	0X100006F1);
	create_insn	(x=0X10072);
	op_stkvar	(x,	1);
	create_insn	(x=0X10076);
	op_plain_offset	(x,	1,	0X100006F1);
	op_plain_offset	(x,	129,	0X100006F1);
	create_insn	(x=0X10078);
	op_stkvar	(x,	1);
	create_insn	(x=0X1007C);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X1007E);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0X10080);
	op_stkvar	(x,	1);
	set_cmt	(0X1008A,	"cmd",	0);
	set_cmt	(0X1008C,	"smdset",	0);
	set_cmt	(0X1008E,	"ack",	0);
	set_cmt	(0X10090,	"receiver",	0);
	set_cmt	(0X10092,	"payload_buf",	0);
	create_insn	(x=0X1009A);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	set_cmt	(0X100A2,	"cmd",	0);
	set_cmt	(0X100A4,	"smdset",	0);
	set_cmt	(0X100A6,	"ack",	0);
	set_cmt	(0X100A8,	"receiver",	0);
	set_cmt	(0X100AA,	"payload_buf",	0);
	create_insn	(0X100B6);
	create_insn	(x=0X100B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X100BC,	"cmd",	0);
	create_insn	(x=0X100C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X100C4);
	op_stkvar	(x,	1);
	set_cmt	(0X100C6,	"payload_buf",	0);
	set_cmt	(0X100CA,	"smdset",	0);
	set_cmt	(0X100CC,	"ack",	0);
	set_cmt	(0X100CE,	"receiver",	0);
	create_insn	(0X100D6);
	create_insn	(x=0X100D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X100DC,	"cmd",	0);
	create_insn	(x=0X100E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X100EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X100F2);
	op_stkvar	(x,	1);
	set_cmt	(0X100F4,	"payload_buf",	0);
	set_cmt	(0X100F8,	"smdset",	0);
	set_cmt	(0X100FA,	"ack",	0);
	set_cmt	(0X100FC,	"receiver",	0);
	create_insn	(0X10104);
	create_insn	(x=0X10106);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X10108,	"cmd",	0);
	set_cmt	(0X1010A,	"smdset",	0);
	create_insn	(x=0X1010C);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X1010E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10112);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10116);
	op_stkvar	(x,	1);
	create_insn	(x=0X1011A);
	op_plain_offset	(x,	1,	0X10000244);
	op_plain_offset	(x,	129,	0X10000244);
	create_insn	(x=0X1011C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10120);
	op_plain_offset	(x,	1,	0X10000244);
	op_plain_offset	(x,	129,	0X10000244);
	create_insn	(x=0X10122);
	op_stkvar	(x,	1);
	create_insn	(x=0X10128);
	op_stkvar	(x,	1);
	set_cmt	(0X1012A,	"payload_buf",	0);
	set_cmt	(0X1012E,	"ack",	0);
	set_cmt	(0X10130,	"receiver",	0);
	create_insn	(0X10138);
	create_insn	(x=0X1013C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10140);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10144);
	op_plain_offset	(x,	1,	0X10000244);
	op_plain_offset	(x,	129,	0X10000244);
	create_insn	(x=0X1014A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1014E);
	op_plain_offset	(x,	1,	0X10000244);
	op_plain_offset	(x,	129,	0X10000244);
	create_insn	(x=0X10154);
	op_stkvar	(x,	1);
	create_insn	(x=0X10158);
	op_hex		(x,	1);
	create_insn	(x=0X1015C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10160);
	op_plain_offset	(x,	1,	0X10000244);
	op_plain_offset	(x,	129,	0X10000244);
	create_insn	(x=0X10166);
	op_stkvar	(x,	1);
	create_insn	(x=0X1016A);
	op_hex		(x,	1);
	create_insn	(x=0X1016E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10172);
	op_plain_offset	(x,	1,	0X10000244);
	op_plain_offset	(x,	129,	0X10000244);
	create_insn	(x=0X10178);
	op_stkvar	(x,	1);
	create_insn	(x=0X1017C);
	op_hex		(x,	1);
	create_insn	(x=0X10180);
	op_stkvar	(x,	1);
	create_insn	(x=0X10184);
	op_plain_offset	(x,	1,	0X10000244);
	op_plain_offset	(x,	129,	0X10000244);
	create_insn	(x=0X1018A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1018E);
	op_hex		(x,	1);
	create_insn	(x=0X10192);
	op_stkvar	(x,	1);
	create_insn	(x=0X10196);
	op_plain_offset	(x,	1,	0X10000244);
	op_plain_offset	(x,	129,	0X10000244);
	create_insn	(x=0X1019C);
	op_stkvar	(x,	1);
	create_insn	(x=0X101A0);
	op_hex		(x,	1);
	create_insn	(x=0X101A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X101A8);
	op_stkvar	(x,	1);
	set_cmt	(0X101AA,	"payload_buf",	0);
	set_cmt	(0X101AE,	"cmd",	0);
	set_cmt	(0X101B0,	"smdset",	0);
	set_cmt	(0X101B2,	"ack",	0);
	set_cmt	(0X101B4,	"receiver",	0);
	create_insn	(0X101BC);
	create_insn	(x=0X101C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X101C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X101CC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X101CE,	"a3",	0);
	create_insn	(x=0X101D0);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X101D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X101DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X101E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X101E4);
	op_stkvar	(x,	1);
	set_cmt	(0X101E8,	"param_buf",	0);
	create_insn	(x=0X101E8);
	op_stkvar	(x,	1);
	set_cmt	(0X101EA,	"a1",	0);
	create_insn	(x=0X101EA);
	op_stkvar	(x,	1);
	create_insn	(0X101FE);
	create_insn	(x=0X10202);
	op_stkvar	(x,	1);
	create_insn	(x=0X10208);
	op_stkvar	(x,	1);
	create_insn	(x=0X1020C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10212);
	op_stkvar	(x,	1);
	set_cmt	(0X10214,	"payload_buf",	0);
	set_cmt	(0X10218,	"cmd",	0);
	set_cmt	(0X1021A,	"smdset",	0);
	set_cmt	(0X1021C,	"ack",	0);
	set_cmt	(0X1021E,	"receiver",	0);
	create_insn	(0X10226);
	create_insn	(x=0X10228);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1022A,	"cmd",	0);
	set_cmt	(0X1022C,	"smdset",	0);
	create_insn	(x=0X10230);
	op_stkvar	(x,	1);
	create_insn	(x=0X10234);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X10236);
	op_stkvar	(x,	1);
	create_insn	(x=0X1023A);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X1023C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10240);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X10242);
	op_stkvar	(x,	1);
	create_insn	(x=0X10248);
	op_stkvar	(x,	1);
	set_cmt	(0X1024A,	"payload_buf",	0);
	set_cmt	(0X1024E,	"ack",	0);
	set_cmt	(0X10250,	"receiver",	0);
	create_dword	(x=0X10258);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1025C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10260);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10264);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10268);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1026C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10270);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10274);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10278);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1027C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10280);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10284);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X10288);
	create_insn	(0X1028C);
	create_insn	(x=0X10290);
	op_stkvar	(x,	1);
	create_insn	(x=0X10294);
	op_stkvar	(x,	1);
	create_insn	(x=0X1029A);
	op_stkvar	(x,	1);
	set_cmt	(0X1029C,	"payload_buf",	0);
	set_cmt	(0X102A0,	"cmd",	0);
	set_cmt	(0X102A2,	"smdset",	0);
	set_cmt	(0X102A4,	"ack",	0);
	set_cmt	(0X102A6,	"receiver",	0);
	create_insn	(0X102AE);
	set_cmt	(0X102B2,	"payload_buf",	0);
	create_insn	(x=0X102B2);
	op_stkvar	(x,	1);
	set_cmt	(0X102B4,	"ack",	0);
	set_cmt	(0X102B6,	"payload_len",	0);
	create_insn	(x=0X102B6);
	op_stkvar	(x,	1);
	set_cmt	(0X102B8,	"cmd",	0);
	set_cmt	(0X102BA,	"smdset",	0);
	set_cmt	(0X102BC,	"receiver",	0);
	create_insn	(0X102C4);
	create_insn	(x=0X102C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X102D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X102D8);
	op_stkvar	(x,	1);
	set_cmt	(0X102DA,	"payload_buf",	0);
	set_cmt	(0X102DE,	"cmd",	0);
	set_cmt	(0X102E0,	"smdset",	0);
	set_cmt	(0X102E2,	"ack",	0);
	set_cmt	(0X102E4,	"receiver",	0);
	create_insn	(0X102EC);
	set_cmt	(0X102F2,	"payload_buf",	0);
	set_cmt	(0X102F6,	"cmd",	0);
	set_cmt	(0X102F8,	"smdset",	0);
	set_cmt	(0X102FA,	"ack",	0);
	set_cmt	(0X102FC,	"receiver",	0);
	create_insn	(0X10304);
	create_insn	(x=0X1030A);
	op_stkvar	(x,	1);
	set_cmt	(0X1030C,	"payload_buf",	0);
	set_cmt	(0X10310,	"cmd",	0);
	set_cmt	(0X10312,	"smdset",	0);
	set_cmt	(0X10314,	"ack",	0);
	set_cmt	(0X10316,	"receiver",	0);
	create_insn	(0X1031E);
	create_insn	(x=0X10324);
	op_stkvar	(x,	1);
	create_insn	(x=0X10328);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1032A,	"cmd",	0);
	set_cmt	(0X1032C,	"smdset",	0);
	create_insn	(x=0X1032E);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X10332);
	op_stkvar	(x,	1);
	create_insn	(x=0X10338);
	op_stkvar	(x,	1);
	create_insn	(x=0X1033E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10344);
	op_stkvar	(x,	1);
	create_insn	(x=0X1034C);
	op_stkvar	(x,	1);
	create_insn	(x=0X10352);
	op_stkvar	(x,	1);
	create_insn	(x=0X10358);
	op_stkvar	(x,	1);
	set_cmt	(0X1035A,	"payload_buf",	0);
	set_cmt	(0X1035E,	"ack",	0);
	set_cmt	(0X10360,	"receiver",	0);
	create_insn	(0X10368);
	create_insn	(x=0X1036A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1036C);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0X10370);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0X1038A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10392);
	op_stkvar	(x,	1);
	create_insn	(x=0X10398);
	op_stkvar	(x,	1);
	set_cmt	(0X1039A,	"payload_buf",	0);
	set_cmt	(0X1039E,	"smdset",	0);
	set_cmt	(0X103A0,	"cmd",	0);
	set_cmt	(0X103A2,	"ack",	0);
	set_cmt	(0X103A4,	"receiver",	0);
	create_insn	(0X103AC);
	create_insn	(x=0X103AE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X103B4);
	op_plain_offset	(x,	1,	0X10000160);
	op_plain_offset	(x,	129,	0X10000160);
	set_cmt	(0X103BA,	"p_err",	0);
	create_insn	(x=0X103BA);
	op_stkvar	(x,	1);
	set_cmt	(0X103CA,	"p_err",	0);
	create_insn	(x=0X103CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X103D2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X103D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X103D8);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(0X103E6);
	set_cmt	(0X103E8,	"payload_len",	0);
	set_cmt	(0X103EC,	"cmd",	0);
	set_cmt	(0X103F0,	"smdset",	0);
	set_cmt	(0X103F2,	"ack",	0);
	set_cmt	(0X103F4,	"receiver",	0);
	set_cmt	(0X103F6,	"sender",	0);
	create_insn	(x=0X103FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10400);
	op_plain_offset	(x,	1,	0X10000160);
	op_plain_offset	(x,	129,	0X10000160);
	set_cmt	(0X10402,	"pkt",	0);
	create_insn	(x=0X10402);
	op_stkvar	(x,	1);
	create_insn	(0X1040A);
	set_cmt	(0X1040C,	"payload_len",	0);
	set_cmt	(0X10410,	"cmd",	0);
	set_cmt	(0X10414,	"receiver",	0);
	set_cmt	(0X10416,	"smdset",	0);
	set_cmt	(0X10418,	"ack",	0);
	set_cmt	(0X1041A,	"sender",	0);
	create_insn	(x=0X10420);
	op_stkvar	(x,	1);
	create_insn	(x=0X10424);
	op_plain_offset	(x,	1,	0X10000160);
	op_plain_offset	(x,	129,	0X10000160);
	create_insn	(x=0X10426);
	op_stkvar	(x,	1);
	create_insn	(x=0X1042E);
	op_plain_offset	(x,	1,	0X10000160);
	op_plain_offset	(x,	129,	0X10000160);
	create_insn	(x=0X10436);
	op_plain_offset	(x,	1,	0X10000160);
	op_plain_offset	(x,	129,	0X10000160);
	create_insn	(0X1043C);
	set_cmt	(0X10440,	"payload_buf",	0);
	create_insn	(x=0X10440);
	op_stkvar	(x,	1);
	set_cmt	(0X10442,	"payload_len",	0);
	create_insn	(x=0X10442);
	op_stkvar	(x,	1);
	set_cmt	(0X10444,	"cmd",	0);
	set_cmt	(0X10446,	"smdset",	0);
	set_cmt	(0X10448,	"ack",	0);
	set_cmt	(0X1044A,	"receiver",	0);
	create_insn	(0X10452);
	create_insn	(x=0X1045A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1045E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10460);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0X10462);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10472);
	op_plain_offset	(x,	1,	0X10002A50);
	op_plain_offset	(x,	129,	0X10002A50);
	create_insn	(x=0X1047C);
	op_plain_offset	(x,	1,	0X10002A50);
	op_plain_offset	(x,	129,	0X10002A50);
	create_insn	(x=0X10480);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0X104A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X104A6);
	op_plain_offset	(x,	1,	0X10002A50);
	op_plain_offset	(x,	129,	0X10002A50);
	set_cmt	(0X104AC,	"pkt",	0);
	create_insn	(x=0X104AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X104B6,	"pkt",	0);
	create_insn	(x=0X104BC);
	op_stkvar	(x,	1);
	create_insn	(0X104CA);
	create_insn	(x=0X104CE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X104D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X104D4);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0X104D6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X104EA);
	op_plain_offset	(x,	1,	0X10002B74);
	op_plain_offset	(x,	129,	0X10002B74);
	create_insn	(x=0X104F6);
	op_plain_offset	(x,	1,	0X10002B74);
	op_plain_offset	(x,	129,	0X10002B74);
	create_insn	(x=0X104FC);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0X104FE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10502);
	op_plain_offset	(x,	1,	0X10006850);
	op_plain_offset	(x,	129,	0X10006850);
	create_insn	(x=0X10504);
	op_plain_offset	(x,	1,	0X10006850);
	op_plain_offset	(x,	129,	0X10006850);
	create_insn	(x=0X1050E);
	op_plain_offset	(x,	1,	0X10006850);
	op_plain_offset	(x,	129,	0X10006850);
	create_insn	(x=0X10514);
	op_plain_offset	(x,	1,	0X10006850);
	op_plain_offset	(x,	129,	0X10006850);
	create_insn	(x=0X1051C);
	op_plain_offset	(x,	1,	0X10006850);
	op_plain_offset	(x,	129,	0X10006850);
	create_insn	(0X1052C);
	create_insn	(x=0X1052E);
	op_stkvar	(x,	1);
	create_insn	(x=0X10530);
	op_plain_offset	(x,	1,	0X10002B74);
	op_plain_offset	(x,	129,	0X10002B74);
	set_cmt	(0X10538,	"pkt",	0);
	create_insn	(x=0X10538);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X10542,	"pkt",	0);
	create_insn	(x=0X10548);
	op_stkvar	(x,	1);
	create_insn	(0X10552);
	create_insn	(x=0X10558);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1055C);
	op_stkvar	(x,	1);
	create_insn	(x=0X1055E);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0X10560);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10574);
	op_plain_offset	(x,	1,	0X10002D98);
	op_plain_offset	(x,	129,	0X10002D98);
	create_insn	(x=0X10580);
	op_plain_offset	(x,	1,	0X10002D98);
	op_plain_offset	(x,	129,	0X10002D98);
	create_insn	(x=0X10586);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0X10588);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1058C);
	op_plain_offset	(x,	1,	0X10006A70);
	op_plain_offset	(x,	129,	0X10006A70);
	create_insn	(x=0X1058E);
	op_plain_offset	(x,	1,	0X10006A70);
	op_plain_offset	(x,	129,	0X10006A70);
	create_insn	(x=0X10598);
	op_plain_offset	(x,	1,	0X10006A70);
	op_plain_offset	(x,	129,	0X10006A70);
	create_insn	(x=0X105A2);
	op_plain_offset	(x,	1,	0X10006A70);
	op_plain_offset	(x,	129,	0X10006A70);
	create_insn	(x=0X105AA);
	op_plain_offset	(x,	1,	0X10006A70);
	op_plain_offset	(x,	129,	0X10006A70);
	create_insn	(0X105BA);
	create_insn	(x=0X105BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X105BE);
	op_plain_offset	(x,	1,	0X10002D98);
	op_plain_offset	(x,	129,	0X10002D98);
	set_cmt	(0X105C6,	"pkt",	0);
	create_insn	(x=0X105C6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X105D0,	"pkt",	0);
	create_insn	(x=0X105D6);
	op_stkvar	(x,	1);
	create_insn	(0X105E2);
	create_insn	(x=0X105E6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X105EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X105EC);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0X105F0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10600);
	op_plain_offset	(x,	1,	0X10002EBC);
	op_plain_offset	(x,	129,	0X10002EBC);
	create_insn	(x=0X1060A);
	op_plain_offset	(x,	1,	0X10002EBC);
	op_plain_offset	(x,	129,	0X10002EBC);
	create_insn	(x=0X1060E);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0X10618);
	op_plain_offset	(x,	1,	0X10003F23);
	op_plain_offset	(x,	129,	0X10003F23);
	create_insn	(x=0X1061C);
	op_hex		(x,	1);
	create_insn	(x=0X10628);
	op_plain_offset	(x,	1,	0X10003F23);
	op_plain_offset	(x,	129,	0X10003F23);
	create_insn	(x=0X10632);
	op_plain_offset	(x,	1,	0X10003F23);
	op_plain_offset	(x,	129,	0X10003F23);
	create_insn	(x=0X1063C);
	op_stkvar	(x,	1);
	create_insn	(x=0X1063E);
	op_plain_offset	(x,	1,	0X10002EBC);
	op_plain_offset	(x,	129,	0X10002EBC);
	set_cmt	(0X10644,	"pkt",	0);
	create_insn	(x=0X10644);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1064E,	"pkt",	0);
	create_insn	(x=0X10654);
	op_stkvar	(x,	1);
	create_insn	(0X1065C);
	create_insn	(x=0X1065E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X10672);
	create_insn	(x=0X10674);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10686);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10688);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(0X1068C);
	create_insn	(x=0X10690);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10694);
	op_stkvar	(x,	1);
	create_insn	(x=0X10696);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1069A);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0X106B2);
	op_plain_offset	(x,	1,	0X10002F20);
	op_plain_offset	(x,	129,	0X10002F20);
	create_insn	(x=0X106BC);
	op_plain_offset	(x,	1,	0X10002F20);
	op_plain_offset	(x,	129,	0X10002F20);
	create_insn	(x=0X106C2);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0X106C6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X106CA);
	op_plain_offset	(x,	1,	0X100067F0);
	op_plain_offset	(x,	129,	0X100067F0);
	create_insn	(x=0X106CC);
	op_plain_offset	(x,	1,	0X100067F0);
	op_plain_offset	(x,	129,	0X100067F0);
	create_insn	(x=0X106D6);
	op_plain_offset	(x,	1,	0X100067F0);
	op_plain_offset	(x,	129,	0X100067F0);
	create_insn	(x=0X106DC);
	op_plain_offset	(x,	1,	0X100067F0);
	op_plain_offset	(x,	129,	0X100067F0);
	create_insn	(x=0X106E4);
	op_plain_offset	(x,	1,	0X100067F0);
	op_plain_offset	(x,	129,	0X100067F0);
	create_dword	(x=0X106EC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X106EC,	"payload_buf");
	create_dword	(x=0X106F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X106F4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X106F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X106F8,	"pkt");
	create_dword	(x=0X106FC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10700);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10704);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10708);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1070C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10710);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X10714);
	create_dword	(x=0X1071C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10720);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X10724);
	create_insn	(0X1072E);
	create_insn	(x=0X10730);
	op_stkvar	(x,	1);
	create_insn	(x=0X10732);
	op_plain_offset	(x,	1,	0X10002F20);
	op_plain_offset	(x,	129,	0X10002F20);
	set_cmt	(0X1073A,	"pkt",	0);
	create_insn	(x=0X1073A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X10744,	"pkt",	0);
	create_insn	(x=0X1074A);
	op_stkvar	(x,	1);
	create_insn	(0X10754);
	create_insn	(x=0X10758);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10760);
	op_plain_offset	(x,	1,	0X10006760);
	op_plain_offset	(x,	129,	0X10006760);
	create_insn	(x=0X10764);
	op_plain_offset	(x,	1,	0X10006760);
	op_plain_offset	(x,	129,	0X10006760);
	create_insn	(x=0X1076A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1076E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1077A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1077E);
	set_cmt	(0X107A8,	"jumptable 00006832 default case",	1);
	set_name	(0X107A8,	"def_6832");
	create_insn	(0X107B0);
	create_insn	(0X107BA);
	create_insn	(0X107C0);
	create_insn	(0X107CC);
	create_insn	(0X107DC);
	create_insn	(0X107EC);
	create_insn	(0X10806);
	create_insn	(0X10816);
	set_cmt	(0X1082C,	"switch 5 cases ",	0);
	set_cmt	(0X10832,	"switch jump",	0);
	set_cmt	(0X10836,	"jump table for switch statement",	0);
	create_byte	(0X10836);
	set_name	(0X10836,	"jpt_6832");
	create_byte	(0X10837);
	create_byte	(0X10838);
	create_byte	(0X10839);
	create_byte	(0X1083A);
	set_cmt	(0X1083C,	"jumptable 00006832 case 2",	1);
	create_insn	(0X1083C);
	set_cmt	(0X1083E,	"jumptable 00006832 case 3",	1);
	create_insn	(0X1083E);
	create_insn	(x=0X1084A);
	op_hex		(x,	1);
	create_insn	(0X10852);
	create_insn	(x=0X10854);
	op_hex		(x,	1);
	set_cmt	(0X1085A,	"jumptable 00006832 case 4",	1);
	create_insn	(0X1085A);
	create_insn	(0X10870);
	create_insn	(x=0X10874);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1087C,	"jumptable 00006832 case 5",	1);
	create_insn	(0X1087C);
	set_cmt	(0X10882,	"jumptable 00006832 case 6",	1);
	create_insn	(0X10882);
	create_insn	(x=0X10886);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10892);
	op_hex		(x,	1);
	create_insn	(x=0X1089A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X108A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X108A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X108A8);
	op_hex		(x,	1);
	create_insn	(x=0X108AE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X108B0);
	op_plain_offset	(x,	1,	0X10000018);
	op_plain_offset	(x,	129,	0X10000018);
	create_insn	(x=0X108B2);
	op_hex		(x,	1);
	create_insn	(x=0X108B6);
	op_plain_offset	(x,	1,	0X10000018);
	op_plain_offset	(x,	129,	0X10000018);
	create_insn	(x=0X108BE);
	op_plain_offset	(x,	1,	0X100006F1);
	op_plain_offset	(x,	129,	0X100006F1);
	create_insn	(0X108CA);
	create_insn	(x=0X108CE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X108D6);
	op_plain_offset	(x,	1,	0X10006130);
	op_plain_offset	(x,	129,	0X10006130);
	create_insn	(x=0X108DA);
	op_plain_offset	(x,	1,	0X10006130);
	op_plain_offset	(x,	129,	0X10006130);
	create_insn	(x=0X108E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X108E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X108F4);
	create_insn	(x=0X1093E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1095C);
	create_insn	(x=0X10966);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1097E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10986);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1098A);
	op_hex		(x,	1);
	create_insn	(x=0X10990);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10994);
	op_hex		(x,	1);
	create_insn	(0X109A4);
	create_insn	(0X109A8);
	create_insn	(x=0X109AE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X109B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X109B4);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0X109B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X109CC);
	op_plain_offset	(x,	1,	0X10003258);
	op_plain_offset	(x,	129,	0X10003258);
	create_insn	(x=0X109D8);
	op_plain_offset	(x,	1,	0X10003258);
	op_plain_offset	(x,	129,	0X10003258);
	create_insn	(x=0X109DE);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0X109E2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X109E6);
	op_plain_offset	(x,	1,	0X10006740);
	op_plain_offset	(x,	129,	0X10006740);
	create_insn	(x=0X109E8);
	op_plain_offset	(x,	1,	0X10006740);
	op_plain_offset	(x,	129,	0X10006740);
	create_insn	(x=0X109F2);
	op_plain_offset	(x,	1,	0X10006740);
	op_plain_offset	(x,	129,	0X10006740);
	create_insn	(x=0X109FC);
	op_plain_offset	(x,	1,	0X10006740);
	op_plain_offset	(x,	129,	0X10006740);
	create_insn	(x=0X10A04);
	op_plain_offset	(x,	1,	0X10006740);
	op_plain_offset	(x,	129,	0X10006740);
	create_insn	(0X10A14);
	create_insn	(x=0X10A16);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A18);
	op_plain_offset	(x,	1,	0X10003258);
	op_plain_offset	(x,	129,	0X10003258);
	set_cmt	(0X10A20,	"pkt",	0);
	create_insn	(x=0X10A20);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X10A2A,	"pkt",	0);
	create_insn	(x=0X10A30);
	op_stkvar	(x,	1);
	create_insn	(0X10A38);
	create_insn	(x=0X10A3C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10A40);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A42);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0X10A46);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10A54);
	op_plain_offset	(x,	1,	0X1000337C);
	op_plain_offset	(x,	129,	0X1000337C);
	create_insn	(x=0X10A5E);
	op_plain_offset	(x,	1,	0X1000337C);
	op_plain_offset	(x,	129,	0X1000337C);
	create_insn	(x=0X10A62);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0X10A66);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10A70);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10A74);
	op_plain_offset	(x,	1,	0X10000018);
	op_plain_offset	(x,	129,	0X10000018);
	create_insn	(x=0X10A76);
	op_hex		(x,	1);
	create_insn	(x=0X10A7A);
	op_plain_offset	(x,	1,	0X10000018);
	op_plain_offset	(x,	129,	0X10000018);
	create_insn	(x=0X10A8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X10A8C);
	op_plain_offset	(x,	1,	0X1000337C);
	op_plain_offset	(x,	129,	0X1000337C);
	set_cmt	(0X10A8E,	"pkt",	0);
	create_insn	(x=0X10A8E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X10A98,	"pkt",	0);
	create_insn	(x=0X10A9E);
	op_stkvar	(x,	1);
	create_insn	(0X10AA8);
	set_name	(0X10AA8,	"task_UNPACK_worker");
	create_insn	(x=0X10AAA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10AB0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10AB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10AB6);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ABC);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AC6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10ACA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10ACC);
	op_plain_offset	(x,	1,	0X10000489);
	op_plain_offset	(x,	129,	0X10000489);
	create_insn	(x=0X10ACE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AE6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10AE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X10AFA);
	op_stkvar	(x,	1);
	set_cmt	(0X10B02,	"cmd",	0);
	set_cmt	(0X10B04,	"payload_buf",	0);
	set_cmt	(0X10B08,	"smdset",	0);
	set_cmt	(0X10B0A,	"ack",	0);
	set_cmt	(0X10B0C,	"receiver",	0);
	create_insn	(x=0X10B14);
	op_stkvar	(x,	1);
	create_insn	(x=0X10B1C);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_dword	(x=0X10B28);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10B2C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10B30);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10B34);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10B38);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10B3C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10B40);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10B44);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10B48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10B4C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10B50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10B54);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X10B58,	0X10B5D);
	set_name	(0X10B58,	"a_2x");
	create_byte	(0X10B5D);
	make_array	(0X10B5D,	0X3);
	create_dword	(x=0X10B60);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10B64);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10B68);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10B6C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10B70);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10B74);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10B78);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X10B7C);
	create_insn	(0X10B7E);
	create_insn	(x=0X10B8E);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X10B9C);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0X10BA2);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X10BAA);
	op_plain_offset	(x,	1,	0X100000C8);
	op_plain_offset	(x,	129,	0X100000C8);
	create_insn	(x=0X10BB8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10BBC);
	op_plain_offset	(x,	1,	0X10006850);
	op_plain_offset	(x,	129,	0X10006850);
	set_cmt	(0X10BDE,	"seconds",	0);
	set_cmt	(0X10BE0,	"opt",	0);
	set_cmt	(0X10BE4,	"milli",	0);
	set_cmt	(0X10BE6,	"minutes",	0);
	set_cmt	(0X10BE8,	"hours",	0);
	create_dword	(x=0X10BF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X10BF4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10C00);
	op_hex		(x,	1);
	create_insn	(x=0X10C08);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X10C12);
	create_insn	(x=0X10C16);
	op_hex		(x,	1);
	create_insn	(x=0X10C1C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10C28);
	op_hex		(x,	1);
	create_insn	(x=0X10C30);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X10C3A);
	create_insn	(x=0X10C3E);
	op_hex		(x,	1);
	create_insn	(x=0X10C44);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10C50);
	op_hex		(x,	1);
	create_insn	(x=0X10C58);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X10C62);
	create_insn	(x=0X10C66);
	op_hex		(x,	1);
	create_insn	(x=0X10C6C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10C76);
	op_hex		(x,	1);
	create_insn	(0X10C7E);
	create_insn	(x=0X10C80);
	op_hex		(x,	1);
	create_insn	(x=0X10C88);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10C92);
	op_hex		(x,	1);
	create_insn	(0X10C98);
	create_insn	(x=0X10C9A);
	op_hex		(x,	1);
	create_insn	(0X10CA0);
	create_insn	(x=0X10CA4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10CAA);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(0X10CC8);
	create_insn	(x=0X10CCE);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X10CD2);
	op_plain_offset	(x,	1,	0X1000007E);
	op_plain_offset	(x,	129,	0X1000007E);
	create_insn	(0X10CDA);
	create_insn	(x=0X10D0E);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	set_cmt	(0X10D12,	"p_err",	0);
	create_insn	(x=0X10D18);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X10D1A);
	op_plain_offset	(x,	1,	0X1000007E);
	op_plain_offset	(x,	129,	0X1000007E);
	create_insn	(0X10D20);
	set_cmt	(0X10D50,	"p_err",	0);
	create_insn	(x=0X10D56);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X10D6A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10D76);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X10D7C);
	op_plain_offset	(x,	1,	0X1000007E);
	op_plain_offset	(x,	129,	0X1000007E);
	create_insn	(0X10D82);
	create_insn	(0X10DCC);
	create_insn	(0X10DFE);
	create_insn	(0X10E12);
	create_insn	(0X10E8C);
	create_insn	(x=0X10E90);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X10E96);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X10E9A);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X10EA6);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X10EB6);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	set_cmt	(0X10EC2,	"switch 5 cases ",	0);
	set_cmt	(0X10EC8,	"switch jump",	0);
	set_cmt	(0X10ECC,	"jump table for switch statement",	0);
	create_byte	(0X10ECC);
	set_name	(0X10ECC,	"jpt_6EC8");
	create_byte	(0X10ECD);
	create_byte	(0X10ECE);
	create_byte	(0X10ECF);
	create_byte	(0X10ED0);
	set_cmt	(0X10ED2,	"jumptable 00006EC8 case 0",	1);
	create_insn	(x=0X10ED2);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X10EE2);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(0X10EE8);
	create_insn	(x=0X10EEC);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(0X10EF2);
	create_insn	(x=0X10EFA);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(0X10F00);
	create_insn	(x=0X10F02);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	set_cmt	(0X10F06,	"jumptable 00006EC8 case 1",	1);
	create_insn	(0X10F06);
	create_insn	(x=0X10F0C);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X10F1A);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X10F1E);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X10F20);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	set_cmt	(0X10F26,	"jumptable 00006EC8 case 2",	1);
	create_insn	(0X10F26);
	create_insn	(x=0X10F2C);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X10F3A);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X10F3E);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X10F40);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	set_cmt	(0X10F46,	"jumptable 00006EC8 case 3",	1);
	create_insn	(0X10F46);
	create_insn	(x=0X10F4E);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X10F5C);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X10F60);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X10F62);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	set_cmt	(0X10F68,	"jumptable 00006EC8 case 4",	1);
	create_insn	(0X10F68);
	create_insn	(x=0X10F6E);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(0X10F7C);
	create_insn	(0X10F7E);
	create_insn	(x=0X10F80);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X10F84);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X10F88);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X10F8A);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	set_cmt	(0X10F8C,	"jumptable 00006EC8 default case",	1);
	create_insn	(x=0X10F8C);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	set_name	(0X10F8C,	"def_6EC8");
	create_insn	(0X10F92);
	create_insn	(0X10F9A);
	create_insn	(0X10FA0);
	create_insn	(0X10FC4);
	create_dword	(x=0X10FDC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X10FE0);
	create_dword	(x=0X10FE4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X10FE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X10FEC);
	create_insn	(0X10FFE);
	create_insn	(0X11014);
	create_insn	(x=0X11016);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11018);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X11020);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X11026);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X11028);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	set_cmt	(0X1102A,	"p_err",	0);
	create_insn	(x=0X11030);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X11032);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	set_cmt	(0X1103A,	"p_err",	0);
	create_insn	(x=0X11040);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X1104A);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X1105C);
	op_hex		(x,	1);
	create_insn	(0X1106C);
	create_insn	(x=0X11074);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(0X11078);
	create_insn	(x=0X1107A);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X1107C);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(0X11082);
	create_insn	(x=0X11084);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11088);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X1108C);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X11090);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X1109C);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X1109E);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X110A0);
	op_hex		(x,	1);
	create_insn	(x=0X110A4);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X110A8);
	op_hex		(x,	1);
	create_insn	(x=0X110AC);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(0X110B4);
	create_insn	(x=0X110BA);
	op_hex		(x,	1);
	create_insn	(x=0X110BE);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X110CA);
	op_hex		(x,	1);
	create_insn	(x=0X110D0);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X110D2);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(0X110D6);
	create_insn	(0X110DC);
	create_insn	(x=0X110DE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X110E8);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X110EA);
	op_hex		(x,	1);
	create_insn	(x=0X11106);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X11116);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11118);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X11122);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11124);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X1112E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11130);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(0X1113A);
	create_insn	(0X11146);
	create_insn	(x=0X11148);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11152);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X11156);
	op_hex		(x,	1);
	create_insn	(x=0X11172);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X11184);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11186);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X11192);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11194);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X111A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X111A2);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(0X111AE);
	create_insn	(x=0X111BA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X111BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X111BE);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X111C0);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X111C2);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X111C6);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X111CE);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X111D4);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(0X111D8);
	create_insn	(x=0X111DE);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X111E0);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X111E6);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X111EC);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X111EE);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X111F2);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(0X111FE);
	create_insn	(x=0X11204);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X11208);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X1120C);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X1120E);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(0X11212);
	set_name	(0X11212,	"task_ADCKEY_worker");
	create_insn	(x=0X11218);
	op_stkvar	(x,	1);
	create_insn	(x=0X1121A);
	op_stkvar	(x,	1);
	create_insn	(x=0X11236);
	op_hex		(x,	1);
	create_insn	(x=0X11240);
	op_hex		(x,	1);
	create_insn	(x=0X11248);
	op_hex		(x,	1);
	create_insn	(x=0X11250);
	op_hex		(x,	1);
	create_insn	(x=0X11258);
	op_hex		(x,	1);
	create_insn	(x=0X11260);
	op_hex		(x,	1);
	create_insn	(x=0X11268);
	op_hex		(x,	1);
	create_insn	(x=0X11270);
	op_hex		(x,	1);
	create_insn	(x=0X11278);
	op_hex		(x,	1);
	create_insn	(x=0X11280);
	op_hex		(x,	1);
	create_insn	(x=0X11288);
	op_hex		(x,	1);
	create_insn	(x=0X11296);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X112A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X112AA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X112BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X112C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X112D2);
	op_plain_offset	(x,	1,	0X100001AE);
	op_plain_offset	(x,	129,	0X100001AE);
	create_insn	(x=0X112D8);
	op_plain_offset	(x,	1,	0X100001AE);
	op_plain_offset	(x,	129,	0X100001AE);
	create_insn	(x=0X112E6);
	op_plain_offset	(x,	1,	0X100001AE);
	op_plain_offset	(x,	129,	0X100001AE);
	create_insn	(x=0X112EC);
	op_plain_offset	(x,	1,	0X100001AE);
	op_plain_offset	(x,	129,	0X100001AE);
	create_insn	(x=0X112F2);
	op_plain_offset	(x,	1,	0X100001AE);
	op_plain_offset	(x,	129,	0X100001AE);
	create_insn	(x=0X112FC);
	op_plain_offset	(x,	1,	0X100001AE);
	op_plain_offset	(x,	129,	0X100001AE);
	create_insn	(x=0X11302);
	op_plain_offset	(x,	1,	0X100001AE);
	op_plain_offset	(x,	129,	0X100001AE);
	create_insn	(x=0X11308);
	op_plain_offset	(x,	1,	0X100001AE);
	op_plain_offset	(x,	129,	0X100001AE);
	create_insn	(x=0X11312);
	op_plain_offset	(x,	1,	0X100001AE);
	op_plain_offset	(x,	129,	0X100001AE);
	create_insn	(x=0X11318);
	op_plain_offset	(x,	1,	0X100001AE);
	op_plain_offset	(x,	129,	0X100001AE);
	create_insn	(x=0X1131E);
	op_plain_offset	(x,	1,	0X100001AE);
	op_plain_offset	(x,	129,	0X100001AE);
	create_insn	(x=0X11328);
	op_plain_offset	(x,	1,	0X100001AE);
	op_plain_offset	(x,	129,	0X100001AE);
	create_insn	(x=0X1132E);
	op_plain_offset	(x,	1,	0X100001AE);
	op_plain_offset	(x,	129,	0X100001AE);
	create_insn	(x=0X11334);
	op_plain_offset	(x,	1,	0X100001AE);
	op_plain_offset	(x,	129,	0X100001AE);
	create_insn	(x=0X1134A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11354);
	op_plain_offset	(x,	1,	0X100001D2);
	op_plain_offset	(x,	129,	0X100001D2);
	create_insn	(x=0X1135A);
	op_plain_offset	(x,	1,	0X100001D2);
	op_plain_offset	(x,	129,	0X100001D2);
	create_insn	(x=0X11368);
	op_plain_offset	(x,	1,	0X100001D2);
	op_plain_offset	(x,	129,	0X100001D2);
	create_insn	(x=0X1136E);
	op_plain_offset	(x,	1,	0X100001D2);
	op_plain_offset	(x,	129,	0X100001D2);
	create_insn	(x=0X11374);
	op_plain_offset	(x,	1,	0X100001D2);
	op_plain_offset	(x,	129,	0X100001D2);
	create_insn	(x=0X1137E);
	op_plain_offset	(x,	1,	0X100001D2);
	op_plain_offset	(x,	129,	0X100001D2);
	create_insn	(x=0X11384);
	op_plain_offset	(x,	1,	0X100001D2);
	op_plain_offset	(x,	129,	0X100001D2);
	create_insn	(x=0X1138A);
	op_plain_offset	(x,	1,	0X100001D2);
	op_plain_offset	(x,	129,	0X100001D2);
	create_insn	(x=0X11394);
	op_plain_offset	(x,	1,	0X100001D2);
	op_plain_offset	(x,	129,	0X100001D2);
	create_insn	(x=0X1139A);
	op_plain_offset	(x,	1,	0X100001D2);
	op_plain_offset	(x,	129,	0X100001D2);
	create_insn	(x=0X113A0);
	op_plain_offset	(x,	1,	0X100001D2);
	op_plain_offset	(x,	129,	0X100001D2);
	create_insn	(x=0X113AA);
	op_plain_offset	(x,	1,	0X100001D2);
	op_plain_offset	(x,	129,	0X100001D2);
	create_insn	(x=0X113B0);
	op_plain_offset	(x,	1,	0X100001D2);
	op_plain_offset	(x,	129,	0X100001D2);
	create_insn	(0X113B8);
	create_insn	(x=0X113BA);
	op_plain_offset	(x,	1,	0X100001D2);
	op_plain_offset	(x,	129,	0X100001D2);
	create_insn	(x=0X113C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X113C6,	"a3",	0);
	set_cmt	(0X113C8,	"param_buf",	0);
	set_cmt	(0X113CA,	"a1",	0);
	create_insn	(x=0X113D2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X113E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X113E2,	"a2",	0);
	set_cmt	(0X113E4,	"a1",	0);
	set_cmt	(0X113EA,	"a2",	0);
	set_cmt	(0X113EC,	"a1",	0);
	create_insn	(x=0X113EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X113F2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X11410);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X11414);
	create_dword	(x=0X11418);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1141C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X11420);
	create_dword	(x=0X11424);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X11428);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1142C);
	create_insn	(x=0X1143A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X11456);
	create_insn	(0X1146C);
	create_insn	(0X11486);
	create_insn	(0X1148A);
	create_insn	(0X114BC);
	create_insn	(0X114D0);
	create_insn	(x=0X114DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X114DE);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X114E0);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X114F6);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X114FE);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11502);
	op_hex		(x,	1);
	create_insn	(x=0X1151E);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11526);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X1154A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11556);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1155A);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	set_cmt	(0X11562,	"channel",	0);
	create_insn	(x=0X11572);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X11584);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X11590);
	op_hex		(x,	1);
	create_insn	(0X11596);
	create_insn	(x=0X11598);
	op_hex		(x,	1);
	create_insn	(x=0X1159E);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X115A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X115B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X115D2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X115D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X115D8);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X115E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X115F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X115F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X11606);
	op_stkvar	(x,	1);
	create_insn	(x=0X11608);
	op_stkvar	(x,	1);
	create_insn	(x=0X11612);
	op_stkvar	(x,	1);
	create_insn	(x=0X1163A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1163C);
	op_stkvar	(x,	1);
	create_insn	(x=0X1163E);
	op_stkvar	(x,	1);
	create_insn	(x=0X11642);
	op_stkvar	(x,	1);
	create_insn	(x=0X11648);
	op_plain_offset	(x,	1,	0X100001A6);
	op_plain_offset	(x,	129,	0X100001A6);
	create_insn	(x=0X11650);
	op_stkvar	(x,	1);
	create_insn	(x=0X11656);
	op_plain_offset	(x,	1,	0X100001AE);
	op_plain_offset	(x,	129,	0X100001AE);
	create_insn	(x=0X1165A);
	op_plain_offset	(x,	1,	0X100001AE);
	op_plain_offset	(x,	129,	0X100001AE);
	create_insn	(x=0X1165E);
	op_plain_offset	(x,	1,	0X100001AE);
	op_plain_offset	(x,	129,	0X100001AE);
	create_insn	(x=0X1166A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1166C);
	op_stkvar	(x,	1);
	create_insn	(x=0X1166E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11674);
	op_stkvar	(x,	1);
	create_insn	(x=0X11676);
	op_plain_offset	(x,	1,	0X1000271C);
	op_plain_offset	(x,	129,	0X1000271C);
	create_insn	(x=0X11678);
	op_stkvar	(x,	1);
	create_insn	(x=0X1167A);
	op_plain_offset	(x,	1,	0X1000271C);
	op_plain_offset	(x,	129,	0X1000271C);
	create_insn	(x=0X1167C);
	op_stkvar	(x,	1);
	create_insn	(x=0X11680);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X1168C);
	op_stkvar	(x,	1);
	create_insn	(x=0X11694);
	op_stkvar	(x,	1);
	create_insn	(0X1169E);
	create_insn	(x=0X116A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X116A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X116B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X116B8);
	op_hex		(x,	1);
	create_insn	(x=0X116C0);
	op_plain_offset	(x,	1,	0X100001AE);
	op_plain_offset	(x,	129,	0X100001AE);
	create_insn	(x=0X116C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X116CE);
	op_hex		(x,	1);
	create_insn	(x=0X116DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X116EC);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X116F6);
	op_hex		(x,	1);
	create_insn	(x=0X11706);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X11710);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X11718);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X1171A);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X1171E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11720);
	op_plain_offset	(x,	1,	0X100001AE);
	op_plain_offset	(x,	129,	0X100001AE);
	create_insn	(x=0X1172E);
	op_stkvar	(x,	1);
	create_insn	(x=0X11732);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X11736);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X1173A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1173E);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X1174E);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X11764);
	op_stkvar	(x,	1);
	create_insn	(x=0X1176A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1176E);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11770);
	op_stkvar	(x,	1);
	create_insn	(x=0X11776);
	op_stkvar	(x,	1);
	create_insn	(x=0X1177C);
	op_stkvar	(x,	1);
	create_insn	(x=0X11780);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11782);
	op_stkvar	(x,	1);
	create_insn	(x=0X11786);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11788);
	op_stkvar	(x,	1);
	create_insn	(x=0X1178C);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11790);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11794);
	op_plain_offset	(x,	1,	0X10004442);
	op_plain_offset	(x,	129,	0X10004442);
	create_insn	(x=0X1179C);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X117A2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X117AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X117AE);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X117C6);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X117C8);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X117D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X117F2);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X117F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X117FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X11800);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11802);
	op_stkvar	(x,	1);
	create_insn	(x=0X11806);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11808);
	op_stkvar	(x,	1);
	create_insn	(0X1180E);
	create_dword	(x=0X11810);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X11814);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X11818);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1181C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X11820);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X11824);
	create_dword	(x=0X11828);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1182C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X11830);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X11834);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X11838);
	create_insn	(0X1183C);
	create_insn	(0X1183E);
	create_insn	(0X11840);
	create_insn	(x=0X11842);
	op_stkvar	(x,	1);
	create_insn	(x=0X1184C);
	op_stkvar	(x,	1);
	create_insn	(x=0X11854);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11856);
	op_stkvar	(x,	1);
	create_insn	(x=0X1185E);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11860);
	op_stkvar	(x,	1);
	create_insn	(x=0X1186A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1186E);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X11882);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(0X11886);
	create_insn	(x=0X1188C);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11892);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11898);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X118B0);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X118B4);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X118B8);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X118CC);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X118CE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X118D4);
	op_plain_offset	(x,	1,	0X10002728);
	op_plain_offset	(x,	129,	0X10002728);
	create_insn	(0X118D8);
	create_insn	(0X118DA);
	create_insn	(0X118DC);
	create_insn	(0X118DE);
	create_insn	(x=0X118EC);
	op_plain_offset	(x,	1,	0X10002728);
	op_plain_offset	(x,	129,	0X10002728);
	create_insn	(x=0X118EE);
	op_plain_offset	(x,	1,	0X10002728);
	op_plain_offset	(x,	129,	0X10002728);
	create_insn	(x=0X11902);
	op_plain_offset	(x,	1,	0X10002728);
	op_plain_offset	(x,	129,	0X10002728);
	create_insn	(x=0X1190A);
	op_plain_offset	(x,	1,	0X10002728);
	op_plain_offset	(x,	129,	0X10002728);
	create_insn	(x=0X11914);
	op_hex		(x,	1);
	create_insn	(x=0X1191C);
	op_plain_offset	(x,	1,	0X10002728);
	op_plain_offset	(x,	129,	0X10002728);
	create_insn	(0X11920);
	create_insn	(x=0X1192A);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(0X11930);
	create_insn	(x=0X11944);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(0X11948);
	create_insn	(x=0X11950);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11952);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X1195C);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11962);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11966);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(0X1196A);
	create_insn	(x=0X1197E);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(0X11982);
	create_insn	(x=0X1198A);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X1198C);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11996);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X1199C);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X119A0);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(0X119A4);
	create_insn	(x=0X119AC);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X119AE);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X119B6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X119C4);
	op_stkvar	(x,	1);
	create_insn	(0X119E2);
	create_insn	(x=0X119E4);
	op_stkvar	(x,	1);
	create_insn	(0X11A02);
	create_insn	(x=0X11A06);
	op_stkvar	(x,	1);
	create_insn	(x=0X11A30);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11A50);
	op_stkvar	(x,	1);
	create_insn	(x=0X11A54);
	op_stkvar	(x,	1);
	create_insn	(x=0X11A58);
	op_stkvar	(x,	1);
	create_insn	(x=0X11A5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X11A60);
	op_stkvar	(x,	1);
	create_insn	(x=0X11A64);
	op_stkvar	(x,	1);
	create_insn	(x=0X11A68);
	op_stkvar	(x,	1);
	create_insn	(x=0X11A6C);
	op_stkvar	(x,	1);
	create_insn	(0X11A72);
	create_insn	(x=0X11A74);
	op_stkvar	(x,	1);
	create_insn	(x=0X11A7A);
	op_stkvar	(x,	1);
	create_insn	(x=0X11A80);
	op_stkvar	(x,	1);
	create_insn	(x=0X11A86);
	op_stkvar	(x,	1);
	create_insn	(x=0X11A8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X11A92);
	op_stkvar	(x,	1);
	create_insn	(x=0X11A98);
	op_stkvar	(x,	1);
	create_insn	(x=0X11A9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X11AA2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11AA8);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X11ABE);
	op_stkvar	(x,	1);
	create_insn	(x=0X11AC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X11AC8);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11ACA);
	op_stkvar	(x,	1);
	create_insn	(x=0X11AD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X11AD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X11ADA);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11ADC);
	op_stkvar	(x,	1);
	create_insn	(x=0X11AE0);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11AE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X11AE6);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11AE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X11AEC);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X11B00);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11B04);
	op_stkvar	(x,	1);
	create_insn	(x=0X11B0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X11B0E);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11B10);
	op_stkvar	(x,	1);
	create_insn	(x=0X11B14);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11B16);
	op_stkvar	(x,	1);
	create_insn	(0X11B1C);
	create_insn	(x=0X11B1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X11B28);
	op_stkvar	(x,	1);
	create_insn	(x=0X11B30);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11B32);
	op_stkvar	(x,	1);
	create_insn	(x=0X11B3A);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11B3C);
	op_stkvar	(x,	1);
	create_insn	(0X11B46);
	create_insn	(x=0X11B48);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11B4A);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11B4C);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11B4E);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X11B5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X11B64);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11B66);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11B68);
	op_stkvar	(x,	1);
	create_insn	(x=0X11B6E);
	op_stkvar	(x,	1);
	create_insn	(x=0X11B76);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X11B8E);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11B90);
	op_stkvar	(x,	1);
	create_insn	(x=0X11B98);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X11BAA);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11BAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X11BB4);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X11BC6);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11BC8);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11BCA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11BD4);
	op_plain_offset	(x,	1,	0X10004442);
	op_plain_offset	(x,	129,	0X10004442);
	create_insn	(x=0X11BDC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11BE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X11BEA);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11BEC);
	op_plain_offset	(x,	1,	0X10002728);
	op_plain_offset	(x,	129,	0X10002728);
	create_insn	(x=0X11BF4);
	op_plain_offset	(x,	1,	0X10002728);
	op_plain_offset	(x,	129,	0X10002728);
	create_insn	(x=0X11BFA);
	op_plain_offset	(x,	1,	0X10002728);
	op_plain_offset	(x,	129,	0X10002728);
	create_insn	(x=0X11C16);
	op_plain_offset	(x,	1,	0X10002728);
	op_plain_offset	(x,	129,	0X10002728);
	create_insn	(x=0X11C18);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11C1A);
	op_plain_offset	(x,	1,	0X10002728);
	op_plain_offset	(x,	129,	0X10002728);
	create_insn	(x=0X11C34);
	op_plain_offset	(x,	1,	0X10002728);
	op_plain_offset	(x,	129,	0X10002728);
	create_insn	(x=0X11C3A);
	op_plain_offset	(x,	1,	0X10002728);
	op_plain_offset	(x,	129,	0X10002728);
	create_insn	(x=0X11C42);
	op_plain_offset	(x,	1,	0X10002728);
	op_plain_offset	(x,	129,	0X10002728);
	create_insn	(x=0X11C44);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11C4A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11C4C);
	op_plain_offset	(x,	1,	0X10002728);
	op_plain_offset	(x,	129,	0X10002728);
	create_insn	(x=0X11C50);
	op_hex		(x,	1);
	create_insn	(0X11C56);
	create_insn	(x=0X11C58);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11C5A);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11C5C);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11C5E);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11C60);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11C62);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11C66);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11C6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X11C78);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11C7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X11C80);
	op_stkvar	(x,	1);
	create_insn	(x=0X11C84);
	op_stkvar	(x,	1);
	create_insn	(x=0X11C88);
	op_stkvar	(x,	1);
	create_insn	(x=0X11C8C);
	op_stkvar	(x,	1);
	create_dword	(0X11C9C);
	create_dword	(x=0X11CA0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X11CA4);
	create_dword	(x=0X11CA8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X11CAC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X11CB0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X11CB4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X11CB8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X11CBC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X11CC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X11CC4);
	create_insn	(0X11CC6);
	create_insn	(x=0X11CC8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11CCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X11CD0);
	op_plain_offset	(x,	1,	0X10003A12);
	op_plain_offset	(x,	129,	0X10003A12);
	create_insn	(x=0X11CD2);
	op_stkvar	(x,	1);
	create_insn	(x=0X11CD6);
	op_plain_offset	(x,	1,	0X10003A12);
	op_plain_offset	(x,	129,	0X10003A12);
	create_insn	(x=0X11CD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X11CDC);
	op_plain_offset	(x,	1,	0X10003A12);
	op_plain_offset	(x,	129,	0X10003A12);
	create_insn	(x=0X11CDE);
	op_stkvar	(x,	1);
	create_insn	(x=0X11CE2);
	op_plain_offset	(x,	1,	0X10003A12);
	op_plain_offset	(x,	129,	0X10003A12);
	create_insn	(x=0X11CE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X11CF2);
	op_stkvar	(x,	1);
	create_insn	(x=0X11CF6);
	op_plain_offset	(x,	1,	0X10003A12);
	op_plain_offset	(x,	129,	0X10003A12);
	create_insn	(x=0X11CF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X11D06);
	op_stkvar	(x,	1);
	create_insn	(x=0X11D0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X11D1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X11D20);
	op_stkvar	(x,	1);
	create_insn	(x=0X11D24);
	op_stkvar	(x,	1);
	create_insn	(x=0X11D28);
	op_stkvar	(x,	1);
	create_insn	(x=0X11D2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X11D30);
	op_hex		(x,	1);
	create_insn	(x=0X11D34);
	op_stkvar	(x,	1);
	create_insn	(x=0X11D38);
	op_stkvar	(x,	1);
	create_insn	(x=0X11D3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X11D40);
	op_hex		(x,	1);
	create_insn	(x=0X11D44);
	op_stkvar	(x,	1);
	create_insn	(0X11D4A);
	create_insn	(x=0X11D4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X11D50);
	op_hex		(x,	1);
	create_insn	(x=0X11D54);
	op_stkvar	(x,	1);
	create_insn	(x=0X11D5E);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X11D62);
	op_stkvar	(x,	1);
	create_insn	(x=0X11D66);
	op_stkvar	(x,	1);
	create_insn	(x=0X11D6A);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X11D6E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11D92);
	op_stkvar	(x,	1);
	create_insn	(x=0X11D98);
	op_stkvar	(x,	1);
	create_insn	(x=0X11D9E);
	op_stkvar	(x,	1);
	create_insn	(x=0X11DA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X11DAA);
	op_stkvar	(x,	1);
	create_insn	(x=0X11DB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X11DB6);
	op_stkvar	(x,	1);
	create_insn	(x=0X11DC6);
	op_stkvar	(x,	1);
	create_insn	(x=0X11DCA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11DD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X11DE2);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11DE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X11DEC);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X11E04);
	op_stkvar	(x,	1);
	create_insn	(x=0X11E0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X11E0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X11E14);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11E16);
	op_plain_offset	(x,	1,	0X10002728);
	op_plain_offset	(x,	129,	0X10002728);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_2(void) {
        auto x;
#define id x

	create_insn	(x=0X11E1E);
	op_plain_offset	(x,	1,	0X10002728);
	op_plain_offset	(x,	129,	0X10002728);
	create_insn	(x=0X11E24);
	op_plain_offset	(x,	1,	0X10002728);
	op_plain_offset	(x,	129,	0X10002728);
	create_insn	(x=0X11E40);
	op_plain_offset	(x,	1,	0X10002728);
	op_plain_offset	(x,	129,	0X10002728);
	create_insn	(x=0X11E42);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11E44);
	op_plain_offset	(x,	1,	0X10002728);
	op_plain_offset	(x,	129,	0X10002728);
	create_insn	(x=0X11E5E);
	op_plain_offset	(x,	1,	0X10002728);
	op_plain_offset	(x,	129,	0X10002728);
	create_insn	(x=0X11E66);
	op_plain_offset	(x,	1,	0X10002728);
	op_plain_offset	(x,	129,	0X10002728);
	create_insn	(x=0X11E6C);
	op_plain_offset	(x,	1,	0X10002728);
	op_plain_offset	(x,	129,	0X10002728);
	create_insn	(x=0X11E70);
	op_hex		(x,	1);
	create_insn	(x=0X11E74);
	op_plain_offset	(x,	1,	0X10002728);
	op_plain_offset	(x,	129,	0X10002728);
	create_insn	(x=0X11E76);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11E78);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X11E7C);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X11E84);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X11E8C);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X11E90);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X11E94);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(0X11E9C);
	create_insn	(0X11E9E);
	create_insn	(x=0X11EA0);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X11EB2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11EB6);
	op_plain_offset	(x,	1,	0X10000244);
	op_plain_offset	(x,	129,	0X10000244);
	create_insn	(x=0X11EC4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11EC8);
	op_plain_offset	(x,	1,	0X10002728);
	op_plain_offset	(x,	129,	0X10002728);
	create_insn	(x=0X11ED0);
	op_plain_offset	(x,	1,	0X10002728);
	op_plain_offset	(x,	129,	0X10002728);
	create_insn	(x=0X11ED2);
	op_plain_offset	(x,	1,	0X10002728);
	op_plain_offset	(x,	129,	0X10002728);
	create_insn	(x=0X11EE8);
	op_plain_offset	(x,	1,	0X10002728);
	op_plain_offset	(x,	129,	0X10002728);
	create_insn	(x=0X11EF4);
	op_plain_offset	(x,	1,	0X10002728);
	op_plain_offset	(x,	129,	0X10002728);
	create_insn	(x=0X11F00);
	op_hex		(x,	1);
	create_insn	(x=0X11F08);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11F0A);
	op_plain_offset	(x,	1,	0X10002728);
	op_plain_offset	(x,	129,	0X10002728);
	create_insn	(x=0X11F1A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11F22);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X11F2A);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X11F32);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X11F36);
	create_insn	(0X11F38);
	create_insn	(x=0X11F3E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11F4A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11F50);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11F58);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11F5A);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X11F64);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X11F68);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11F72);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(0X11F7E);
	create_insn	(x=0X11F86);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(0X11F8C);
	create_insn	(0X11F92);
	create_insn	(0X11F96);
	create_insn	(0X11F9E);
	create_insn	(x=0X11FA4);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(0X11FAC);
	create_insn	(x=0X11FB0);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X11FB8);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X11FC0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11FC2);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X11FCC);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X11FD4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11FD6);
	op_plain_offset	(x,	1,	0X10002728);
	op_plain_offset	(x,	129,	0X10002728);
	create_insn	(x=0X11FDC);
	op_plain_offset	(x,	1,	0X10002728);
	op_plain_offset	(x,	129,	0X10002728);
	create_insn	(x=0X11FDE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11FE0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X11FE4);
	op_plain_offset	(x,	1,	0X10002728);
	op_plain_offset	(x,	129,	0X10002728);
	create_insn	(x=0X11FE8);
	op_plain_offset	(x,	1,	0X10003A08);
	op_plain_offset	(x,	129,	0X10003A08);
	create_insn	(x=0X11FEA);
	op_plain_offset	(x,	1,	0X10002728);
	op_plain_offset	(x,	129,	0X10002728);
	create_insn	(x=0X11FEE);
	op_plain_offset	(x,	1,	0X10003A08);
	op_plain_offset	(x,	129,	0X10003A08);
	create_insn	(x=0X11FF0);
	op_plain_offset	(x,	1,	0X10002728);
	op_plain_offset	(x,	129,	0X10002728);
	create_insn	(x=0X11FF6);
	op_plain_offset	(x,	1,	0X10002728);
	op_plain_offset	(x,	129,	0X10002728);
	create_insn	(x=0X11FF8);
	op_plain_offset	(x,	1,	0X10004442);
	op_plain_offset	(x,	129,	0X10004442);
	create_insn	(x=0X11FFE);
	op_plain_offset	(x,	1,	0X10004442);
	op_plain_offset	(x,	129,	0X10004442);
	create_insn	(x=0X12004);
	op_plain_offset	(x,	1,	0X10004442);
	op_plain_offset	(x,	129,	0X10004442);
	create_insn	(x=0X1200E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12012);
	op_plain_offset	(x,	1,	0X100033D0);
	op_plain_offset	(x,	129,	0X100033D0);
	set_cmt	(0X12022,	"a3",	0);
	create_insn	(x=0X12024);
	op_plain_offset	(x,	1,	0X10002728);
	op_plain_offset	(x,	129,	0X10002728);
	set_cmt	(0X12026,	"param_buf",	0);
	set_cmt	(0X12028,	"a1",	0);
	create_insn	(x=0X12028);
	op_stkvar	(x,	1);
	create_insn	(0X12030);
	set_cmt	(0X12034,	"a2",	0);
	create_insn	(0X12034);
	set_cmt	(0X12036,	"a1",	0);
	create_insn	(x=0X12036);
	op_stkvar	(x,	1);
	set_cmt	(0X1203E,	"a3",	0);
	create_insn	(0X1203E);
	set_cmt	(0X12040,	"param_buf",	0);
	create_insn	(x=0X12040);
	op_stkvar	(x,	1);
	set_cmt	(0X12042,	"a1",	0);
	create_insn	(x=0X12042);
	op_stkvar	(x,	1);
	create_insn	(x=0X12048);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1204C);
	op_plain_offset	(x,	1,	0X100033D0);
	op_plain_offset	(x,	129,	0X100033D0);
	create_insn	(x=0X12072);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12074);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X1207A);
	op_plain_offset	(x,	1,	0X10002728);
	op_plain_offset	(x,	129,	0X10002728);
	create_insn	(x=0X1207E);
	op_hex		(x,	1);
	create_insn	(x=0X12082);
	op_stkvar	(x,	1);
	create_insn	(x=0X12084);
	op_plain_offset	(x,	1,	0X10002728);
	op_plain_offset	(x,	129,	0X10002728);
	create_insn	(x=0X1208A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12090);
	op_plain_offset	(x,	1,	0X10002728);
	op_plain_offset	(x,	129,	0X10002728);
	create_insn	(x=0X12094);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X12096,	"a3",	0);
	set_cmt	(0X12098,	"param_buf",	0);
	create_insn	(x=0X12098);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1209A,	"a1",	0);
	create_insn	(x=0X120A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X120AA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X120B2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X120C4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X120C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X120CC);
	create_dword	(x=0X120D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X120D4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X120D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X120DC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X120E0);
	create_dword	(x=0X120E4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X120E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X120EC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X120F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X120F4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X120F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X120FC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X12100);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X12104);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X12108);
	op_stkvar	(x,	1);
	create_insn	(x=0X1210E);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X12114);
	op_plain_offset	(x,	1,	0X10002728);
	op_plain_offset	(x,	129,	0X10002728);
	create_insn	(x=0X12116);
	op_stkvar	(x,	1);
	create_insn	(x=0X1211C);
	op_plain_offset	(x,	1,	0X10002728);
	op_plain_offset	(x,	129,	0X10002728);
	create_insn	(x=0X1211E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1212A);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X12130);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X12134);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X1213E);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	create_insn	(x=0X12144);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	set_cmt	(0X12146,	"p_err",	0);
	create_insn	(x=0X12146);
	op_stkvar	(x,	1);
	create_insn	(x=0X1214A);
	op_plain_offset	(x,	1,	0X10000170);
	op_plain_offset	(x,	129,	0X10000170);
	set_cmt	(0X1214C,	"opt",	0);
	set_cmt	(0X1214E,	"dly",	0);
	create_dword	(x=0X12158);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1215C);
	set_cmt	(0X1215E,	"minutes",	0);
	create_insn	(x=0X12160);
	op_stkvar	(x,	1);
	set_cmt	(0X12162,	"opt",	0);
	set_cmt	(0X12166,	"milli",	0);
	set_cmt	(0X12168,	"seconds",	0);
	set_cmt	(0X1216A,	"hours",	0);
	create_insn	(0X12172);
	set_name	(0X12172,	"task_Radio_worker");
	create_insn	(x=0X1217C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1217E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12182);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12186);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12188);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X121A0);
	op_enum		(x,	1,	GetEnum("BoardVersion"),0);
	create_insn	(0X121A6);
	create_insn	(x=0X121B2);
	op_hex		(x,	1);
	create_insn	(0X121BA);
	create_insn	(0X121F0);
	create_insn	(x=0X121FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X12210);
	op_stkvar	(x,	1);
	create_insn	(x=0X12226);
	op_stkvar	(x,	1);
	create_insn	(x=0X12230);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X12232,	"lev",	0);
	create_insn	(x=0X12232);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12238);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12244);
	op_hex		(x,	1);
	create_insn	(x=0X1224E);
	op_hex		(x,	1);
	create_insn	(0X12260);
	create_insn	(0X12266);
	create_insn	(0X1226E);
	create_insn	(x=0X12270);
	op_hex		(x,	1);
	create_insn	(x=0X1227E);
	op_hex		(x,	1);
	create_insn	(x=0X12286);
	op_hex		(x,	1);
	create_insn	(x=0X1228E);
	op_hex		(x,	1);
	create_insn	(x=0X12296);
	op_hex		(x,	1);
	create_insn	(x=0X1229C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1229E,	"cnt",	0);
	set_cmt	(0X122A0,	"p_err",	0);
	create_insn	(x=0X122A2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X122A4,	"p_sem",	0);
	create_insn	(x=0X122A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X122AE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X122B2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X122B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X122BA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X122BC,	"p_ts",	0);
	set_cmt	(0X122C0,	"p_err",	0);
	create_insn	(x=0X122C0);
	op_stkvar	(x,	1);
	set_cmt	(0X122C2,	"opt",	0);
	set_cmt	(0X122C4,	"timeout",	0);
	set_cmt	(0X122C6,	"p_sem",	0);
	create_insn	(x=0X122C6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X122EC);
	op_hex		(x,	1);
	create_insn	(0X122F4);
	create_insn	(x=0X122F6);
	op_hex		(x,	1);
	create_insn	(x=0X12304);
	op_hex		(x,	1);
	create_insn	(0X1230C);
	create_insn	(x=0X1230E);
	op_hex		(x,	1);
	create_insn	(x=0X12320);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X12342);
	create_insn	(0X1234E);
	create_insn	(x=0X1237C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12382);
	op_stkvar	(x,	1);
	create_insn	(0X123A2);
	create_insn	(0X123A8);
	create_insn	(x=0X123AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X12404);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X12478);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1247C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X12480);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X12484);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X12488);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X1248C,	0X124AE);
	set_name	(0X1248C,	"aXXXXXXXXXXX");
	make_array	(0X124AE,	0X2);
	create_dword	(0X124B0);
	create_strlit	(0X124B4,	0X124BC);
	set_name	(0X124B4,	"aAmcSem");
	create_dword	(x=0X124BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X124BC,	"p_sem");
	create_dword	(x=0X124C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X124C4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X124C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X124CC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X124D0);
	create_insn	(0X124DC);
	create_insn	(0X124E2);
	create_insn	(0X124F4);
	set_cmt	(0X124FE,	"a3",	0);
	set_cmt	(0X12530,	"a1",	0);
	set_cmt	(0X12532,	"param_buf",	0);
	set_cmt	(0X12544,	"a2",	0);
	set_cmt	(0X12546,	"a1",	0);
	create_insn	(0X12560);
	set_cmt	(0X12596,	"a3",	0);
	set_cmt	(0X125A4,	"a1",	0);
	create_insn	(0X125BC);
	create_insn	(x=0X125CA);
	op_hex		(x,	1);
	create_insn	(x=0X125DA);
	op_hex		(x,	1);
	create_insn	(x=0X125F2);
	op_hex		(x,	1);
	create_insn	(x=0X12600);
	op_hex		(x,	1);
	create_insn	(0X12612);
	create_insn	(x=0X1261C);
	op_hex		(x,	1);
	create_insn	(x=0X12630);
	op_hex		(x,	1);
	create_insn	(0X12640);
	create_insn	(x=0X12646);
	op_hex		(x,	1);
	create_insn	(x=0X12658);
	op_hex		(x,	1);
	create_insn	(0X12660);
	create_insn	(x=0X1266E);
	op_hex		(x,	1);
	create_insn	(0X1267C);
	create_insn	(x=0X1268E);
	op_hex		(x,	1);
	create_insn	(0X1269A);
	create_insn	(x=0X126A8);
	op_hex		(x,	1);
	create_insn	(x=0X126B0);
	op_hex		(x,	1);
	create_insn	(x=0X126C0);
	op_hex		(x,	1);
	create_insn	(x=0X126C8);
	op_hex		(x,	1);
	create_insn	(x=0X126D0);
	op_hex		(x,	1);
	create_insn	(0X126D8);
	create_insn	(x=0X126E6);
	op_hex		(x,	1);
	create_insn	(x=0X126EE);
	op_hex		(x,	1);
	create_insn	(x=0X126FE);
	op_hex		(x,	1);
	create_insn	(x=0X12706);
	op_hex		(x,	1);
	create_insn	(x=0X1270E);
	op_hex		(x,	1);
	create_insn	(0X12716);
	create_insn	(0X1271C);
	create_insn	(x=0X12726);
	op_hex		(x,	1);
	create_insn	(0X12730);
	create_insn	(0X1273E);
	create_insn	(x=0X12746);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12754);
	op_hex		(x,	1);
	create_insn	(x=0X12774);
	op_hex		(x,	1);
	create_insn	(x=0X12788);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X127A6);
	op_hex		(x,	1);
	create_insn	(x=0X127D4);
	op_hex		(x,	1);
	create_insn	(x=0X127E6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X127FA);
	set_name	(0X127FA,	"rf_power_unkn1");
	create_insn	(x=0X12804);
	op_hex		(x,	1);
	create_insn	(0X12820);
	create_insn	(x=0X1282C);
	op_hex		(x,	1);
	create_insn	(0X12848);
	create_insn	(0X1284A);
	create_insn	(x=0X12854);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1285A);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X12860);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12872);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X12880);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1288A);
	op_hex		(x,	1);
	create_insn	(0X1289A);
	create_insn	(x=0X128AE);
	op_hex		(x,	1);
	create_insn	(x=0X128B6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X128B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X128C6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X128D0);
	op_plain_offset	(x,	1,	0X10003B54);
	op_plain_offset	(x,	129,	0X10003B54);
	create_insn	(x=0X128DA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X128FC);
	create_insn	(x=0X1291A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1291C);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X12926);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12934);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X12938);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(0X12940);
	create_insn	(0X12942);
	create_insn	(0X12954);
	create_insn	(0X1296C);
	create_insn	(0X1296E);
	create_insn	(x=0X1297C);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(0X12988);
	create_insn	(x=0X12994);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_dword	(0X129A0);
	create_dword	(x=0X129A4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X129A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X129AC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X129B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X129B4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X129B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X129B8,	"unkn09_IRQHandler");
	create_insn	(x=0X129BE);
	op_hex		(x,	1);
	create_insn	(0X129C8);
	create_insn	(0X129D0);
	create_insn	(x=0X129DE);
	op_hex		(x,	1);
	create_insn	(0X129F2);
	create_insn	(x=0X129FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X12A08);
	op_hex		(x,	1);
	create_insn	(x=0X12A16);
	op_hex		(x,	1);
	set_cmt	(0X12A24,	"a1",	0);
	set_cmt	(0X12A34,	"a3",	0);
	create_insn	(x=0X12A3E);
	op_hex		(x,	1);
	create_insn	(x=0X12A52);
	op_hex		(x,	1);
	create_insn	(0X12A58);
	set_name	(0X12A58,	"unkn12_IRQHandler");
	create_insn	(x=0X12A68);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12A7C);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X12A82);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X12A8A);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X12A90);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X12A92);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12A98);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12AA4);
	op_hex		(x,	1);
	create_insn	(x=0X12AC0);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(0X12AC4);
	create_insn	(0X12AC8);
	create_insn	(x=0X12ACC);
	op_plain_offset	(x,	1,	0X10000168);
	op_plain_offset	(x,	129,	0X10000168);
	create_insn	(x=0X12ACE);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X12AD4);
	op_plain_offset	(x,	1,	0X10000168);
	op_plain_offset	(x,	129,	0X10000168);
	create_insn	(x=0X12AD8);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X12AE0);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X12AF2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12AF4);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X12AF8);
	op_plain_offset	(x,	1,	0X10000233);
	op_plain_offset	(x,	129,	0X10000233);
	create_insn	(x=0X12AFE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12B00);
	op_plain_offset	(x,	1,	0X10000238);
	op_plain_offset	(x,	129,	0X10000238);
	create_insn	(x=0X12B08);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12B12);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12B18);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12B1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X12B24);
	op_plain_offset	(x,	1,	0X10003B94);
	op_plain_offset	(x,	129,	0X10003B94);
	create_insn	(x=0X12B26);
	op_plain_offset	(x,	1,	0X10003B94);
	op_plain_offset	(x,	129,	0X10003B94);
	create_insn	(x=0X12B2A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12B2C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12B2E);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X12B30);
	op_plain_offset	(x,	1,	0X10003D02);
	op_plain_offset	(x,	129,	0X10003D02);
	create_insn	(x=0X12B32);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X12B36);
	op_plain_offset	(x,	1,	0X10003D02);
	op_plain_offset	(x,	129,	0X10003D02);
	create_insn	(x=0X12B38);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X12B3C);
	op_plain_offset	(x,	1,	0X10003D02);
	op_plain_offset	(x,	129,	0X10003D02);
	create_insn	(x=0X12B3E);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X12B40);
	op_plain_offset	(x,	1,	0X10003D02);
	op_plain_offset	(x,	129,	0X10003D02);
	create_insn	(x=0X12B42);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X12B46);
	op_plain_offset	(x,	1,	0X10003D02);
	op_plain_offset	(x,	129,	0X10003D02);
	create_insn	(x=0X12B48);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X12B4C);
	op_plain_offset	(x,	1,	0X10003D02);
	op_plain_offset	(x,	129,	0X10003D02);
	create_insn	(x=0X12B4E);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X12B52);
	op_plain_offset	(x,	1,	0X10003D02);
	op_plain_offset	(x,	129,	0X10003D02);
	create_insn	(x=0X12B58);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X12B5C);
	op_plain_offset	(x,	1,	0X10003CD4);
	op_plain_offset	(x,	129,	0X10003CD4);
	create_insn	(x=0X12B62);
	op_plain_offset	(x,	1,	0X10003CD4);
	op_plain_offset	(x,	129,	0X10003CD4);
	create_insn	(x=0X12B6A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12B6C);
	op_stkvar	(x,	1);
	create_insn	(0X12B74);
	create_insn	(0X12B76);
	create_insn	(x=0X12B7E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12B84);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12B86);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X12B92);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X12B98);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X12B9E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12BA0);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X12BA8);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X12BAE);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X12BBC);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X12BC2);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X12BC6);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(0X12BD0);
	create_insn	(x=0X12BD2);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X12BD4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X12BD8,	"switch 7 cases ",	0);
	set_cmt	(0X12BE0,	"switch jump",	0);
	set_cmt	(0X12BE4,	"jump table for switch statement",	0);
	create_byte	(0X12BE4);
	set_name	(0X12BE4,	"jpt_8BE0");
	create_byte	(0X12BE5);
	create_byte	(0X12BE6);
	create_byte	(0X12BE7);
	create_byte	(0X12BE8);
	create_byte	(0X12BE9);
	create_byte	(0X12BEA);
	create_insn	(0X12BEC);
	set_cmt	(0X12BF0,	"jumptable 00008BE0 case 1",	1);
	create_insn	(0X12BF0);
	create_insn	(x=0X12BF4);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X12BFA);
	op_hex		(x,	1);
	create_insn	(x=0X12C04);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	set_cmt	(0X12C0C,	"jumptable 00008BE0 case 2",	1);
	create_insn	(0X12C0C);
	create_insn	(x=0X12C10);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X12C12);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X12C1A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12C20);
	op_plain_offset	(x,	1,	0X10000233);
	op_plain_offset	(x,	129,	0X10000233);
	create_insn	(x=0X12C22);
	op_plain_offset	(x,	1,	0X10000238);
	op_plain_offset	(x,	129,	0X10000238);
	set_cmt	(0X12C2A,	"jumptable 00008BE0 default case",	1);
	create_insn	(x=0X12C2A);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	set_name	(0X12C2A,	"def_8BE0");
	create_insn	(x=0X12C2E);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	set_cmt	(0X12C34,	"jumptable 00008BE0 case 3",	1);
	create_insn	(0X12C34);
	create_insn	(x=0X12C38);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X12C3A);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	set_cmt	(0X12C46,	"jumptable 00008BE0 case 4",	1);
	create_insn	(0X12C46);
	create_insn	(x=0X12C4A);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X12C4C);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	set_cmt	(0X12C58,	"jumptable 00008BE0 case 5",	1);
	create_insn	(0X12C58);
	create_insn	(x=0X12C5C);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X12C5E);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	set_cmt	(0X12C6A,	"jumptable 00008BE0 case 6",	1);
	create_insn	(0X12C6A);
	create_insn	(x=0X12C6E);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X12C70);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(0X12C7C);
	set_name	(0X12C7C,	"unkn11_IRQHandler");
	create_insn	(x=0X12C80);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12C8C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12CAC);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X12CB0);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X12CC0);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X12CC6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12CC8);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X12CD2);
	op_plain_offset	(x,	1,	0X10000238);
	op_plain_offset	(x,	129,	0X10000238);
	create_insn	(x=0X12CD4);
	op_plain_offset	(x,	1,	0X10000233);
	op_plain_offset	(x,	129,	0X10000233);
	create_insn	(x=0X12CDE);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X12CFA);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X12D0E);
	op_hex		(x,	1);
	create_insn	(x=0X12D18);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X12D1C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12D1E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12D22);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X12D3E);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X12D48);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X12D4C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12D58);
	op_plain_offset	(x,	1,	0X10000233);
	op_plain_offset	(x,	129,	0X10000233);
	create_insn	(x=0X12D5A);
	op_plain_offset	(x,	1,	0X10000238);
	op_plain_offset	(x,	129,	0X10000238);
	create_insn	(x=0X12D62);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12D6E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12D7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X12D82);
	op_plain_offset	(x,	1,	0X10003BAD);
	op_plain_offset	(x,	129,	0X10003BAD);
	create_insn	(x=0X12D84);
	op_plain_offset	(x,	1,	0X10003BAD);
	op_plain_offset	(x,	129,	0X10003BAD);
	create_insn	(x=0X12D86);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(0X12D8A);
	create_insn	(x=0X12D8C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12D8E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12D90);
	op_plain_offset	(x,	1,	0X10004442);
	op_plain_offset	(x,	129,	0X10004442);
	create_insn	(x=0X12D96);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12D98);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12DA8);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X12DAC);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_dword	(x=0X12DB4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X12DB8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X12DBC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X12DC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X12DC4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X12DC8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X12DCC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X12DD0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X12DD4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X12DD8);
	create_dword	(0X12DDC);
	create_dword	(x=0X12DE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X12DE4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X12DE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X12DEC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X12DF0);
	create_insn	(x=0X12DF2);
	op_plain_offset	(x,	1,	0X1000001C);
	op_plain_offset	(x,	129,	0X1000001C);
	create_insn	(x=0X12DF6);
	op_plain_offset	(x,	1,	0X10003D54);
	op_plain_offset	(x,	129,	0X10003D54);
	create_insn	(x=0X12DFA);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X12DFC);
	op_plain_offset	(x,	1,	0X10003D95);
	op_plain_offset	(x,	129,	0X10003D95);
	create_insn	(x=0X12E00);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X12E02);
	op_plain_offset	(x,	1,	0X10003D95);
	op_plain_offset	(x,	129,	0X10003D95);
	create_insn	(x=0X12E06);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X12E08);
	op_plain_offset	(x,	1,	0X10003D95);
	op_plain_offset	(x,	129,	0X10003D95);
	create_insn	(x=0X12E10);
	op_plain_offset	(x,	1,	0X10003D95);
	op_plain_offset	(x,	129,	0X10003D95);
	create_insn	(x=0X12E14);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12E16);
	op_plain_offset	(x,	1,	0X1000271C);
	op_plain_offset	(x,	129,	0X1000271C);
	create_insn	(x=0X12E18);
	op_plain_offset	(x,	1,	0X10003D95);
	op_plain_offset	(x,	129,	0X10003D95);
	create_insn	(x=0X12E20);
	op_plain_offset	(x,	1,	0X10003D95);
	op_plain_offset	(x,	129,	0X10003D95);
	create_insn	(x=0X12E28);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(0X12E38);
	create_insn	(x=0X12E3A);
	op_plain_offset	(x,	1,	0X10003D95);
	op_plain_offset	(x,	129,	0X10003D95);
	create_insn	(x=0X12E3E);
	op_plain_offset	(x,	1,	0X10003D95);
	op_plain_offset	(x,	129,	0X10003D95);
	create_insn	(x=0X12E42);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X12E66);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X12E70);
	op_plain_offset	(x,	1,	0X10003D95);
	op_plain_offset	(x,	129,	0X10003D95);
	create_insn	(x=0X12E74);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X12E76);
	op_plain_offset	(x,	1,	0X10003D95);
	op_plain_offset	(x,	129,	0X10003D95);
	create_insn	(x=0X12E7A);
	op_stkvar	(x,	1);
	create_insn	(x=0X12E82);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(0X12E86);
	create_insn	(0X12E88);
	create_insn	(0X12F10);
	create_insn	(0X12F12);
	create_insn	(x=0X12F20);
	op_stkvar	(x,	1);
	create_insn	(x=0X12F2E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12F36);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X12F38,	"lev",	0);
	create_insn	(x=0X12F38);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12F40);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12F48);
	op_plain_offset	(x,	1,	0X10003CD4);
	op_plain_offset	(x,	129,	0X10003CD4);
	create_insn	(x=0X12F4E);
	op_plain_offset	(x,	1,	0X10003CD4);
	op_plain_offset	(x,	129,	0X10003CD4);
	create_insn	(x=0X12F52);
	op_plain_offset	(x,	1,	0X10003CD4);
	op_plain_offset	(x,	129,	0X10003CD4);
	create_insn	(x=0X12F5A);
	op_plain_offset	(x,	1,	0X10003D10);
	op_plain_offset	(x,	129,	0X10003D10);
	create_insn	(x=0X12F5E);
	op_plain_offset	(x,	1,	0X10003D10);
	op_plain_offset	(x,	129,	0X10003D10);
	create_insn	(x=0X12F62);
	op_plain_offset	(x,	1,	0X10003D10);
	op_plain_offset	(x,	129,	0X10003D10);
	create_insn	(x=0X12F68);
	op_plain_offset	(x,	1,	0X10003D10);
	op_plain_offset	(x,	129,	0X10003D10);
	create_insn	(x=0X12F8A);
	op_plain_offset	(x,	1,	0X10003D10);
	op_plain_offset	(x,	129,	0X10003D10);
	create_insn	(x=0X12F8E);
	op_plain_offset	(x,	1,	0X10003D10);
	op_plain_offset	(x,	129,	0X10003D10);
	create_insn	(x=0X12F94);
	op_stkvar	(x,	1);
	create_insn	(x=0X12FA0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X12FCE);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X12FF8);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X12FFE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X13008);
	op_plain_offset	(x,	1,	0X10000233);
	op_plain_offset	(x,	129,	0X10000233);
	create_insn	(x=0X1300A);
	op_plain_offset	(x,	1,	0X10000238);
	op_plain_offset	(x,	129,	0X10000238);
	create_insn	(0X13016);
	create_insn	(x=0X1302E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X13030);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X13036);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X13038);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X1303E);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X13044);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X13048);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X1304E);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X13058);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X13068);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X1306E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X13072);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X13078);
	op_plain_offset	(x,	1,	0X10000238);
	op_plain_offset	(x,	129,	0X10000238);
	create_insn	(x=0X1307C);
	op_plain_offset	(x,	1,	0X10000233);
	op_plain_offset	(x,	129,	0X10000233);
	create_insn	(0X13088);
	create_insn	(x=0X1308C);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X13092);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X13098);
	op_plain_offset	(x,	1,	0X10000233);
	op_plain_offset	(x,	129,	0X10000233);
	create_insn	(x=0X1309A);
	op_plain_offset	(x,	1,	0X10000238);
	op_plain_offset	(x,	129,	0X10000238);
	create_insn	(0X130A8);
	create_insn	(x=0X130AC);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X130B2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X130BA);
	op_plain_offset	(x,	1,	0X10000233);
	op_plain_offset	(x,	129,	0X10000233);
	create_insn	(x=0X130BC);
	op_plain_offset	(x,	1,	0X10000238);
	op_plain_offset	(x,	129,	0X10000238);
	create_insn	(x=0X130C8);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(0X130CC);
	create_insn	(0X130CE);
	create_insn	(x=0X130D2);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X130D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X130E2);
	op_plain_offset	(x,	1,	0X10000233);
	op_plain_offset	(x,	129,	0X10000233);
	create_insn	(x=0X130E4);
	op_plain_offset	(x,	1,	0X10000238);
	op_plain_offset	(x,	129,	0X10000238);
	create_insn	(0X130F2);
	create_insn	(x=0X130F6);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X130FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X13106);
	op_plain_offset	(x,	1,	0X10000233);
	op_plain_offset	(x,	129,	0X10000233);
	create_insn	(x=0X13108);
	op_plain_offset	(x,	1,	0X10000238);
	op_plain_offset	(x,	129,	0X10000238);
	create_insn	(0X13116);
	create_insn	(0X13118);
	create_insn	(x=0X1311C);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X13122);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1312C);
	op_plain_offset	(x,	1,	0X10000233);
	op_plain_offset	(x,	129,	0X10000233);
	create_insn	(x=0X1312E);
	op_plain_offset	(x,	1,	0X10000238);
	op_plain_offset	(x,	129,	0X10000238);
	create_insn	(0X1313C);
	set_name	(0X1313C,	"unkn10_IRQHandler");
	create_insn	(x=0X1314C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1314E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X13170);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X13174);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X13184);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X1318A);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X13196);
	op_plain_offset	(x,	1,	0X10000238);
	op_plain_offset	(x,	129,	0X10000238);
	create_insn	(x=0X13198);
	op_plain_offset	(x,	1,	0X10000233);
	op_plain_offset	(x,	129,	0X10000233);
	create_insn	(x=0X131C2);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X131C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X131F4);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X131FA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X13204);
	op_plain_offset	(x,	1,	0X10000233);
	op_plain_offset	(x,	129,	0X10000233);
	create_insn	(x=0X13206);
	op_plain_offset	(x,	1,	0X10000238);
	op_plain_offset	(x,	129,	0X10000238);
	create_dword	(x=0X13210);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X13214);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X13218,	0X1321A);
	set_name	(0X13218,	"aC");
	create_byte	(0X1321A);
	make_array	(0X1321A,	0X2);
	create_dword	(x=0X1321C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X13220);
	create_dword	(x=0X13224);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X13228);
	create_insn	(0X1322E);
	create_insn	(x=0X13246);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X13248);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X1324E);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X13250);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X13256);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X1325C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1325E);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X1327E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X13284);
	op_plain_offset	(x,	1,	0X10000238);
	op_plain_offset	(x,	129,	0X10000238);
	create_insn	(x=0X13288);
	op_plain_offset	(x,	1,	0X10000233);
	op_plain_offset	(x,	129,	0X10000233);
	create_insn	(0X13294);
	create_insn	(x=0X13298);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X1329E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X132A4);
	op_plain_offset	(x,	1,	0X10000233);
	op_plain_offset	(x,	129,	0X10000233);
	create_insn	(x=0X132A6);
	op_plain_offset	(x,	1,	0X10000238);
	op_plain_offset	(x,	129,	0X10000238);
	create_insn	(0X132B4);
	create_insn	(0X132B6);
	create_insn	(0X132B8);
	create_insn	(x=0X132BC);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X132C2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X132CA);
	op_plain_offset	(x,	1,	0X10000233);
	op_plain_offset	(x,	129,	0X10000233);
	create_insn	(x=0X132CC);
	op_plain_offset	(x,	1,	0X10000238);
	op_plain_offset	(x,	129,	0X10000238);
	create_insn	(x=0X132D8);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(0X132DE);
	create_insn	(x=0X132E2);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X132E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X132F2);
	op_plain_offset	(x,	1,	0X10000233);
	op_plain_offset	(x,	129,	0X10000233);
	create_insn	(x=0X132F4);
	op_plain_offset	(x,	1,	0X10000238);
	op_plain_offset	(x,	129,	0X10000238);
	create_insn	(0X13302);
	create_insn	(x=0X13306);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X1330C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X13316);
	op_plain_offset	(x,	1,	0X10000233);
	op_plain_offset	(x,	129,	0X10000233);
	create_insn	(x=0X13318);
	op_plain_offset	(x,	1,	0X10000238);
	op_plain_offset	(x,	129,	0X10000238);
	create_insn	(0X13326);
	create_insn	(0X13328);
	create_insn	(x=0X1332C);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X13332);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1333C);
	op_plain_offset	(x,	1,	0X10000233);
	op_plain_offset	(x,	129,	0X10000233);
	create_insn	(x=0X1333E);
	op_plain_offset	(x,	1,	0X10000238);
	op_plain_offset	(x,	129,	0X10000238);
	create_insn	(0X1334C);
	create_insn	(x=0X13354);
	op_hex		(x,	1);
	create_insn	(x=0X1335E);
	op_hex		(x,	1);
	create_insn	(x=0X1336E);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X13372);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X13376);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X1337C);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X13382);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X13386);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	set_cmt	(0X13388,	"handler",	0);
	create_insn	(x=0X13388);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1338C,	"num",	0);
	create_insn	(x=0X133A6);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X133AA);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X133AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X133AE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X133B2);
	op_plain_offset	(x,	1,	0X1000001C);
	op_plain_offset	(x,	129,	0X1000001C);
	create_insn	(x=0X133B6);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X133B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X133BA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X133BC);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X133C0);
	op_plain_offset	(x,	1,	0X10003CD4);
	op_plain_offset	(x,	129,	0X10003CD4);
	create_insn	(x=0X133C6);
	op_plain_offset	(x,	1,	0X10003CD4);
	op_plain_offset	(x,	129,	0X10003CD4);
	create_insn	(x=0X133CC);
	op_plain_offset	(x,	1,	0X10003D02);
	op_plain_offset	(x,	129,	0X10003D02);
	create_insn	(x=0X133D0);
	op_plain_offset	(x,	1,	0X10003D02);
	op_plain_offset	(x,	129,	0X10003D02);
	create_insn	(x=0X133D4);
	op_plain_offset	(x,	1,	0X10003D02);
	op_plain_offset	(x,	129,	0X10003D02);
	create_insn	(0X133D8);
	create_insn	(x=0X133E0);
	op_hex		(x,	1);
	create_insn	(x=0X133EA);
	op_hex		(x,	1);
	create_insn	(x=0X133FA);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X133FE);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X13402);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X13408);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X1340C);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X1340E);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X13412);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	set_cmt	(0X13414,	"handler",	0);
	create_insn	(x=0X13414);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X13418,	"num",	0);
	create_insn	(x=0X13432);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X13436);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X1343C);
	op_hex		(x,	1);
	create_insn	(x=0X13442);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X13444);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X13448);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X1344A);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(0X1344E);
	create_insn	(x=0X13456);
	op_hex		(x,	1);
	create_insn	(x=0X13460);
	op_hex		(x,	1);
	create_insn	(x=0X13470);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X13474);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X13478);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X1347E);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X13482);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X13484);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X13488);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	set_cmt	(0X1348A,	"handler",	0);
	create_insn	(x=0X1348A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1348E,	"num",	0);
	create_insn	(x=0X134A8);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X134AC);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X134B2);
	op_hex		(x,	1);
	create_insn	(x=0X134B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X134BA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X134BE);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X134C0);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(0X134C4);
	create_insn	(x=0X134C6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X134CA);
	op_hex		(x,	1);
	create_insn	(x=0X134D2);
	op_hex		(x,	1);
	create_insn	(x=0X134DA);
	op_hex		(x,	1);
	create_insn	(x=0X134E2);
	op_hex		(x,	1);
	create_insn	(x=0X134EA);
	op_hex		(x,	1);
	create_insn	(x=0X134F2);
	op_hex		(x,	1);
	create_insn	(x=0X134FA);
	op_hex		(x,	1);
	create_insn	(x=0X13502);
	op_hex		(x,	1);
	create_insn	(x=0X1350A);
	op_hex		(x,	1);
	create_insn	(x=0X13510);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X13512);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X13514);
	op_hex		(x,	1);
	create_insn	(x=0X13518);
	op_hex		(x,	1);
	create_insn	(x=0X1351C);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X1351E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X13524);
	op_hex		(x,	1);
	create_insn	(x=0X13530);
	op_hex		(x,	1);
	create_insn	(x=0X1353C);
	op_hex		(x,	1);
	set_cmt	(0X13544,	"handler",	0);
	create_insn	(x=0X13544);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X13548,	"num",	0);
	create_insn	(x=0X13550);
	op_hex		(x,	1);
	create_insn	(x=0X13558);
	op_hex		(x,	1);
	create_insn	(0X13560);
	create_insn	(x=0X13564);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1356C);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X13572);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X13576);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X1357C);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X13582);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X13584);
	op_hex		(x,	1);
	create_insn	(x=0X13596);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X13598);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X135A8);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X135AC);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X135B0);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X135BE);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X135C0);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X135C2);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X135C4);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X135C6);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X135C8);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(0X135CE);
	create_insn	(x=0X135D0);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(0X135D4);
	create_insn	(x=0X135DE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X135F2);
	create_dword	(x=0X13640);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X13644);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X13648);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1364C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X13650);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X13654);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X13658);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1365C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X13660);
	create_insn	(0X13662);
	create_insn	(0X13696);
	create_insn	(0X136B6);
	create_insn	(x=0X136CE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X136D6);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(0X13704);
	set_cmt	(0X13724,	"a1",	0);
	set_cmt	(0X13726,	"param_buf",	0);
	set_cmt	(0X1372C,	"a3",	0);
	create_insn	(0X13732);
	create_insn	(x=0X13764);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X1376E);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X1377A);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X13784);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X137A2);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X137B2);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X137B8);
	op_plain_offset	(x,	1,	0X10003D02);
	op_plain_offset	(x,	129,	0X10003D02);
	create_insn	(0X137BC);
	create_insn	(0X137CA);
	create_insn	(x=0X137DC);
	op_hex		(x,	1);
	create_insn	(x=0X137E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X137EC);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X137EE);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X137F0);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X137FA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1380E);
	create_insn	(0X13810);
	create_insn	(x=0X13816);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1381C);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X13820);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X13826);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X13834);
	op_plain_offset	(x,	1,	0X100033A0);
	op_plain_offset	(x,	129,	0X100033A0);
	create_insn	(x=0X13838);
	op_stkvar	(x,	1);
	create_insn	(x=0X1383A);
	op_plain_offset	(x,	1,	0X100033A0);
	op_plain_offset	(x,	129,	0X100033A0);
	create_insn	(x=0X1383E);
	op_stkvar	(x,	1);
	create_insn	(x=0X13840);
	op_plain_offset	(x,	1,	0X100033A0);
	op_plain_offset	(x,	129,	0X100033A0);
	create_insn	(x=0X13844);
	op_stkvar	(x,	1);
	create_insn	(x=0X13848);
	op_plain_offset	(x,	1,	0X100033A0);
	op_plain_offset	(x,	129,	0X100033A0);
	create_insn	(x=0X1384A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1384E);
	op_plain_offset	(x,	1,	0X100033A0);
	op_plain_offset	(x,	129,	0X100033A0);
	create_insn	(x=0X13850);
	op_stkvar	(x,	1);
	create_insn	(0X1385A);
	create_insn	(0X1385E);
	create_insn	(x=0X13860);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1386A);
	op_plain_offset	(x,	1,	0X10003A08);
	op_plain_offset	(x,	129,	0X10003A08);
	create_insn	(x=0X1386E);
	op_plain_offset	(x,	1,	0X10003A08);
	op_plain_offset	(x,	129,	0X10003A08);
	set_cmt	(0X13870,	"p_err",	0);
	create_insn	(x=0X13876);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1387C);
	create_insn	(x=0X13890);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X13896);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	set_cmt	(0X138C0,	"a3",	0);
	set_cmt	(0X138C2,	"param_buf",	0);
	set_cmt	(0X138C4,	"a1",	0);
	create_insn	(x=0X138CA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X138F4);
	create_insn	(x=0X138F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X138FA);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X138FE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X13900);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1390A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1391A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1392C,	"switch 6 cases ",	0);
	set_cmt	(0X13932,	"switch jump",	0);
	set_cmt	(0X13936,	"jump table for switch statement",	0);
	create_byte	(0X13936);
	set_name	(0X13936,	"jpt_9932");
	create_byte	(0X13937);
	create_byte	(0X13938);
	create_byte	(0X13939);
	create_byte	(0X1393A);
	create_byte	(0X1393B);
	set_cmt	(0X1393C,	"jumptable 00009932 case 2",	1);
	create_insn	(0X1393C);
	set_cmt	(0X13944,	"jumptable 00009932 case 3",	1);
	create_insn	(0X13944);
	set_cmt	(0X1394C,	"jumptable 00009932 case 4",	1);
	create_insn	(0X1394C);
	set_cmt	(0X13950,	"jumptable 00009932 case 5",	1);
	create_insn	(0X13950);
	set_cmt	(0X13954,	"jumptable 00009932 case 6",	1);
	create_insn	(0X13954);
	set_cmt	(0X1395C,	"jumptable 00009932 case 7",	1);
	create_insn	(0X1395C);
	create_insn	(x=0X13964);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X13982,	"jumptable 00009932 default case",	1);
	set_name	(0X13982,	"def_9932");
	create_insn	(0X13984);
	create_insn	(0X13986);
	create_insn	(0X139A6);
	create_insn	(0X139AE);
	create_insn	(0X139B4);
	create_insn	(0X139BA);
	create_insn	(0X139C8);
	create_insn	(0X139D4);
	create_insn	(0X139DC);
	create_insn	(x=0X139E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X139EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X139F2);
	op_plain_offset	(x,	1,	0X10003E21);
	op_plain_offset	(x,	129,	0X10003E21);
	create_insn	(x=0X139F6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X13A04);
	create_insn	(x=0X13A08);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X13A0C);
	op_stkvar	(x,	1);
	create_insn	(0X13A28);
	create_insn	(0X13A34);
	create_insn	(x=0X13A3A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X13A3C,	"lev",	0);
	create_insn	(x=0X13A3C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X13A44);
	create_insn	(0X13A52);
	create_insn	(0X13A68);
	create_insn	(0X13A7A);
	create_insn	(x=0X13A8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X13A9A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X13A9C,	"lev",	0);
	create_insn	(x=0X13A9C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X13AA4);
	create_dword	(x=0X13AB0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X13AB4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X13AB8);
	create_dword	(x=0X13ABC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X13AC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X13AC4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X13AC8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X13ACC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X13AD0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X13AD4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X13AD8,	0X13AE9);
	set_name	(0X13AD8,	"a5_8gVerErrD");
	create_byte	(0X13AE9);
	make_array	(0X13AE9,	0X3);
	create_dword	(0X13AEC);
	create_strlit	(0X13AF0,	0X13AFD);
	set_name	(0X13AF0,	"aRfmCrcErr");
	create_byte	(0X13AFD);
	make_array	(0X13AFD,	0X3);
	create_insn	(0X13B00);
	create_insn	(x=0X13B18);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X13B3A);
	create_insn	(0X13B46);
	set_name	(0X13B46,	"task_BK5811_worker");
	set_cmt	(0X13B4E,	"a2",	0);
	set_cmt	(0X13B50,	"a1",	0);
	set_cmt	(0X13B56,	"a1",	0);
	set_cmt	(0X13B5A,	"a2",	0);
	create_insn	(x=0X13B60);
	op_plain_offset	(x,	1,	0X10003E21);
	op_plain_offset	(x,	129,	0X10003E21);
	create_insn	(x=0X13B66);
	op_stkvar	(x,	1);
	set_cmt	(0X13B6A,	"milli",	0);
	set_cmt	(0X13B6C,	"opt",	0);
	set_cmt	(0X13B70,	"seconds",	0);
	set_cmt	(0X13B72,	"minutes",	0);
	set_cmt	(0X13B74,	"hours",	0);
	create_insn	(x=0X13B7A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X13B92);
	op_hex		(x,	1);
	create_insn	(0X13B98);
	create_insn	(0X13B9E);
	create_insn	(x=0X13BA0);
	op_hex		(x,	1);
	create_insn	(x=0X13BA4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X13BAA);
	op_plain_offset	(x,	1,	0X10000018);
	op_plain_offset	(x,	129,	0X10000018);
	create_insn	(x=0X13BAE);
	op_hex		(x,	1);
	create_insn	(x=0X13BB4);
	op_hex		(x,	1);
	create_insn	(x=0X13BB8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X13BBC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X13BBE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X13BC0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X13BC2);
	op_plain_offset	(x,	1,	0X10000018);
	op_plain_offset	(x,	129,	0X10000018);
	create_insn	(x=0X13BCE);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X13BD0);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(0X13BE6);
	create_insn	(x=0X13BF0);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X13BF4);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X13BF8);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X13BFE);
	op_plain_offset	(x,	1,	0X10003CD4);
	op_plain_offset	(x,	129,	0X10003CD4);
	create_insn	(x=0X13C02);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X13C06);
	op_plain_offset	(x,	1,	0X10003CD4);
	op_plain_offset	(x,	129,	0X10003CD4);
	create_insn	(x=0X13C0A);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X13C0E);
	op_plain_offset	(x,	1,	0X10003D02);
	op_plain_offset	(x,	129,	0X10003D02);
	create_insn	(x=0X13C12);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X13C14);
	op_plain_offset	(x,	1,	0X10003D02);
	op_plain_offset	(x,	129,	0X10003D02);
	create_insn	(x=0X13C16);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X13C18);
	op_plain_offset	(x,	1,	0X10003D02);
	op_plain_offset	(x,	129,	0X10003D02);
	create_insn	(x=0X13C1A);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X13C1C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X13C20);
	create_insn	(x=0X13C2A);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X13C2E);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X13C32);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X13C34);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X13C36);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X13C3A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X13C42);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X13C48);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(0X13C4C);
	create_insn	(x=0X13C4E);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X13C50);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X13C58);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X13C66);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X13C6A);
	op_hex		(x,	1);
	create_insn	(x=0X13C72);
	op_hex		(x,	1);
	create_insn	(x=0X13C84);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X13C86);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X13C88);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(0X13C8E);
	create_insn	(0X13C94);
	create_insn	(0X13C9A);
	create_insn	(x=0X13C9E);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X13CA0);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X13CA2);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X13CA4);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(0X13CB2);
	create_insn	(0X13CB6);
	create_insn	(x=0X13CBC);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X13CBE);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X13CC0);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X13CC6);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X13CC8);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(0X13CDA);
	create_insn	(0X13CE0);
	create_insn	(0X13CE6);
	create_insn	(x=0X13CEA);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X13CEC);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X13CEE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X13CF0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X13CFE);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X13D02);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X13D04);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X13D06);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X13D08);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	create_insn	(x=0X13D10);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X13D26);
	op_hex		(x,	1);
	create_insn	(x=0X13D2C);
	op_hex		(x,	1);
	create_insn	(x=0X13D46);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X13D48);
	op_plain_offset	(x,	1,	0X10000214);
	op_plain_offset	(x,	129,	0X10000214);
	set_cmt	(0X13D4E,	"seconds",	0);
	set_cmt	(0X13D50,	"opt",	0);
	set_cmt	(0X13D54,	"milli",	0);
	set_cmt	(0X13D56,	"minutes",	0);
	set_cmt	(0X13D58,	"hours",	0);
	create_insn	(0X13D60);
	create_insn	(0X13D64);
	create_insn	(0X13D6C);
	create_dword	(x=0X13D90);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X13D94);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X13D98);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X13D9C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X13DA0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X13DA4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X13DA8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X13DAC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X13DB0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X13DB4,	0X13DBB);
	set_name	(0X13DB4,	"aMaster");
	create_byte	(0X13DBB);
	create_strlit	(0X13DBC,	0X13DC3);
	set_name	(0X13DBC,	"aSlaver");
	create_byte	(0X13DC3);
	create_dword	(x=0X13DC4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X13DC8);
	create_insn	(x=0X13DD6);
	op_hex		(x,	1);
	create_insn	(x=0X13DE6);
	op_hex		(x,	1);
	create_insn	(x=0X13DFE);
	op_hex		(x,	1);
	create_insn	(x=0X13E0C);
	op_hex		(x,	1);
	create_insn	(0X13E1E);
	create_insn	(0X13E32);
	create_insn	(x=0X13E36);
	op_hex		(x,	1);
	create_insn	(0X13E44);
	create_insn	(0X13E5A);
	create_insn	(0X13E70);
	create_insn	(0X13E84);
	create_insn	(0X13E8E);
	create_insn	(0X13E96);
	create_insn	(0X13EA8);
	create_insn	(0X13EB0);
	create_insn	(x=0X13EBC);
	op_hex		(x,	1);
	create_insn	(x=0X13EDE);
	op_hex		(x,	1);
	create_insn	(0X13EEA);
	create_insn	(x=0X13EF2);
	op_stkvar	(x,	1);
	create_insn	(x=0X13EF8);
	op_hex		(x,	1);
	create_insn	(x=0X13F20);
	op_hex		(x,	1);
	create_insn	(0X13F2C);
	create_insn	(0X13F40);
	create_insn	(x=0X13F46);
	op_stkvar	(x,	1);
	create_insn	(0X13F54);
	create_insn	(0X13F64);
	create_insn	(0X13F78);
	create_insn	(x=0X13F7E);
	op_stkvar	(x,	1);
	create_insn	(0X13F8C);
	create_insn	(0X13F9C);
	create_insn	(0X13FA6);
	create_insn	(0X13FB0);
	create_insn	(0X13FB6);
	create_insn	(0X13FBC);
	create_insn	(x=0X13FC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X13FDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X13FE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X13FEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X14006);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400E);
	op_stkvar	(x,	1);
	create_insn	(x=0X14018);
	op_stkvar	(x,	1);
	create_insn	(x=0X14020);
	op_stkvar	(x,	1);
	create_insn	(x=0X1403E);
	op_stkvar	(x,	1);
	create_insn	(x=0X1404C);
	op_stkvar	(x,	1);
	create_insn	(x=0X14050);
	op_stkvar	(x,	1);
	create_insn	(x=0X14066);
	op_stkvar	(x,	1);
	create_insn	(x=0X1406E);
	op_stkvar	(x,	1);
	create_insn	(x=0X14078);
	op_stkvar	(x,	1);
	create_insn	(x=0X14080);
	op_stkvar	(x,	1);
	create_insn	(x=0X14098);
	op_stkvar	(x,	1);
	create_insn	(x=0X1409C);
	op_stkvar	(x,	1);
	create_insn	(x=0X140A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X140B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X140B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X140C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X140CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X140D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X140DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X140EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X140EE);
	op_stkvar	(x,	1);
	create_insn	(0X14102);
	create_insn	(x=0X1410A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1410E);
	op_stkvar	(x,	1);
	set_cmt	(0X14112,	"a3",	0);
	set_cmt	(0X14114,	"a1",	0);
	create_insn	(x=0X14114);
	op_stkvar	(x,	1);
	create_insn	(0X1413E);
	create_insn	(x=0X14148);
	op_stkvar	(x,	1);
	create_insn	(x=0X14152);
	op_stkvar	(x,	1);
	create_insn	(x=0X14160);
	op_stkvar	(x,	1);
	create_insn	(x=0X1416A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1416E);
	op_hex		(x,	1);
	create_insn	(x=0X14178);
	op_stkvar	(x,	1);
	create_insn	(x=0X1417E);
	op_stkvar	(x,	1);
	create_insn	(x=0X14182);
	op_stkvar	(x,	1);
	create_insn	(0X1419C);
	create_insn	(0X141A6);
	create_insn	(x=0X141B0);
	op_stkvar	(x,	1);
	create_byte	(0X141C6);
	make_array	(0X141C6,	0X2);
	create_dword	(0X141C8);
	create_insn	(x=0X141CC);
	op_stkvar	(x,	1);
	set_cmt	(0X141D0,	"a1",	0);
	set_cmt	(0X141D2,	"param_buf",	0);
	set_cmt	(0X141D4,	"a3",	0);
	create_insn	(0X141DC);
	create_insn	(0X141E0);
	set_name	(0X141E0,	"unkn8_IRQHandler");
	create_insn	(x=0X141E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X141F2);
	op_hex		(x,	1);
	create_insn	(x=0X14204);
	op_stkvar	(x,	1);
	create_insn	(x=0X1420C);
	op_stkvar	(x,	1);
	create_insn	(0X1421E);
	create_insn	(x=0X14234);
	op_hex		(x,	1);
	create_insn	(x=0X1423E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14254);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14266);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14268);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X14272);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14282);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X14286);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X14288);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X14296);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X14298);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X142A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X142A2);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X142A4);
	op_hex		(x,	1);
	create_insn	(x=0X142A8);
	op_hex		(x,	1);
	create_insn	(x=0X142AC);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X142B4);
	op_hex		(x,	1);
	create_insn	(x=0X142C0);
	op_hex		(x,	1);
	create_insn	(x=0X142CC);
	op_hex		(x,	1);
	set_cmt	(0X142D4,	"handler",	0);
	create_insn	(x=0X142D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X142D8,	"num",	0);
	create_insn	(0X142DE);
	create_insn	(x=0X142E4);
	op_hex		(x,	1);
	create_insn	(x=0X142EC);
	op_hex		(x,	1);
	create_insn	(x=0X142F4);
	op_hex		(x,	1);
	create_insn	(x=0X142FC);
	op_hex		(x,	1);
	create_insn	(x=0X14302);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14304);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X1430A);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X1430E);
	op_hex		(x,	1);
	create_insn	(x=0X1431A);
	op_hex		(x,	1);
	create_insn	(x=0X14322);
	op_hex		(x,	1);
	create_insn	(0X1432A);
	create_insn	(x=0X14332);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14348);
	op_stkvar	(x,	1);
	create_insn	(0X14360);
	create_insn	(x=0X14362);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14376);
	op_stkvar	(x,	1);
	create_insn	(0X14384);
	create_insn	(0X14390);
	create_insn	(x=0X14398);
	op_stkvar	(x,	1);
	create_insn	(x=0X143AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X143BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X143CC);
	op_stkvar	(x,	1);
	create_insn	(0X143D6);
	create_insn	(0X143F0);
	set_name	(0X143F0,	"unkn7_IRQHandler");
	create_insn	(x=0X14400);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1440A);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X1440E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14418);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14420);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1442C);
	op_hex		(x,	1);
	create_insn	(0X14448);
	create_insn	(0X1444E);
	create_insn	(0X14452);
	create_insn	(x=0X14456);
	op_plain_offset	(x,	1,	0X10000168);
	op_plain_offset	(x,	129,	0X10000168);
	create_insn	(x=0X1445E);
	op_plain_offset	(x,	1,	0X10000168);
	op_plain_offset	(x,	129,	0X10000168);
	create_insn	(x=0X14462);
	op_plain_offset	(x,	1,	0X10000264);
	op_plain_offset	(x,	129,	0X10000264);
	create_insn	(x=0X1446A);
	op_plain_offset	(x,	1,	0X10000264);
	op_plain_offset	(x,	129,	0X10000264);
	create_insn	(x=0X1446C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1447C);
	op_stkvar	(x,	1);
	create_insn	(x=0X14484);
	op_stkvar	(x,	1);
	create_insn	(x=0X14488);
	op_stkvar	(x,	1);
	create_insn	(x=0X1448C);
	op_stkvar	(x,	1);
	create_insn	(x=0X14494);
	op_stkvar	(x,	1);
	create_insn	(x=0X14496);
	op_stkvar	(x,	1);
	create_insn	(x=0X1449A);
	op_stkvar	(x,	1);
	create_insn	(x=0X144A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X144A2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X144A4);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X144A6);
	op_plain_offset	(x,	1,	0X10003D02);
	op_plain_offset	(x,	129,	0X10003D02);
	create_insn	(x=0X144A8);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X144AC);
	op_plain_offset	(x,	1,	0X10003D02);
	op_plain_offset	(x,	129,	0X10003D02);
	create_insn	(x=0X144AE);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X144B2);
	op_plain_offset	(x,	1,	0X10003D02);
	op_plain_offset	(x,	129,	0X10003D02);
	create_insn	(x=0X144B4);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X144B6);
	op_plain_offset	(x,	1,	0X10003D02);
	op_plain_offset	(x,	129,	0X10003D02);
	create_insn	(x=0X144B8);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X144BC);
	op_plain_offset	(x,	1,	0X10003D02);
	op_plain_offset	(x,	129,	0X10003D02);
	create_insn	(x=0X144BE);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X144C2);
	op_plain_offset	(x,	1,	0X10003D02);
	op_plain_offset	(x,	129,	0X10003D02);
	create_insn	(x=0X144C4);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X144C8);
	op_plain_offset	(x,	1,	0X10003D02);
	op_plain_offset	(x,	129,	0X10003D02);
	create_insn	(x=0X144CA);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X144D2);
	op_plain_offset	(x,	1,	0X10003D02);
	op_plain_offset	(x,	129,	0X10003D02);
	create_insn	(x=0X144DA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X144E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X144F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X144F8);
	op_plain_offset	(x,	1,	0X10000264);
	op_plain_offset	(x,	129,	0X10000264);
	create_insn	(x=0X144FE);
	op_plain_offset	(x,	1,	0X10000264);
	op_plain_offset	(x,	129,	0X10000264);
	create_insn	(0X14504);
	create_insn	(0X14506);
	create_insn	(x=0X14508);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1450A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1450E);
	op_plain_offset	(x,	1,	0X10000264);
	op_plain_offset	(x,	129,	0X10000264);
	create_insn	(x=0X14524);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X14526);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14544);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X14546);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X14558);
	create_insn	(0X1455A);
	create_insn	(0X1455E);
	create_insn	(x=0X14562);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X14564);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X14572);
	create_insn	(x=0X14576);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X14578);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X14592);
	set_name	(0X14592,	"unkn6_IRQHandler");
	create_insn	(x=0X14596);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X145A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X145A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X145A6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X145AA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X145BA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X145C6);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X145C8);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X145D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X145D2);
	op_plain_offset	(x,	1,	0X10000264);
	op_plain_offset	(x,	129,	0X10000264);
	create_insn	(x=0X145D8);
	op_plain_offset	(x,	1,	0X10000264);
	op_plain_offset	(x,	129,	0X10000264);
	create_byte	(0X145E6);
	make_array	(0X145E6,	0X2);
	create_dword	(x=0X145E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X145EC);
	create_dword	(x=0X145F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X145F4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X145F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X145FC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X14600);
	create_dword	(x=0X14604);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X14608);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X1460C);
	create_dword	(x=0X14610);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X14614);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X14618);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1461C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X14620);
	create_dword	(x=0X14624);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X14628);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1462C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X14630);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X14634);
	create_insn	(x=0X1465A);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X1465C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1467C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14682);
	op_plain_offset	(x,	1,	0X10000264);
	op_plain_offset	(x,	129,	0X10000264);
	create_insn	(x=0X14696);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1469C);
	op_plain_offset	(x,	1,	0X10000264);
	op_plain_offset	(x,	129,	0X10000264);
	create_insn	(x=0X146B2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X146B8);
	op_plain_offset	(x,	1,	0X10000264);
	op_plain_offset	(x,	129,	0X10000264);
	create_insn	(0X146D0);
	create_insn	(x=0X146D2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X146D4);
	op_plain_offset	(x,	1,	0X10000264);
	op_plain_offset	(x,	129,	0X10000264);
	create_insn	(x=0X146DA);
	op_plain_offset	(x,	1,	0X10000264);
	op_plain_offset	(x,	129,	0X10000264);
	create_insn	(x=0X146DC);
	op_plain_offset	(x,	1,	0X10000264);
	op_plain_offset	(x,	129,	0X10000264);
	create_insn	(x=0X146E2);
	op_plain_offset	(x,	1,	0X10000264);
	op_plain_offset	(x,	129,	0X10000264);
	create_insn	(x=0X146E8);
	op_plain_offset	(x,	1,	0X10000264);
	op_plain_offset	(x,	129,	0X10000264);
	create_insn	(x=0X14712);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X14718);
	op_stkvar	(x,	1);
	create_insn	(x=0X14720);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14722);
	op_stkvar	(x,	1);
	create_insn	(x=0X14726);
	op_stkvar	(x,	1);
	create_insn	(x=0X1472A);
	op_stkvar	(x,	1);
	create_insn	(x=0X14732);
	op_stkvar	(x,	1);
	create_insn	(x=0X14734);
	op_stkvar	(x,	1);
	create_insn	(x=0X14738);
	op_stkvar	(x,	1);
	create_insn	(x=0X1473C);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(0X14740);
	create_insn	(x=0X14742);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14744);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14746);
	op_plain_offset	(x,	1,	0X10004442);
	op_plain_offset	(x,	129,	0X10004442);
	create_insn	(x=0X1474E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14750);
	op_plain_offset	(x,	1,	0X1000001C);
	op_plain_offset	(x,	129,	0X1000001C);
	create_insn	(x=0X14756);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X1475A);
	op_plain_offset	(x,	1,	0X10003D10);
	op_plain_offset	(x,	129,	0X10003D10);
	create_insn	(x=0X1475E);
	op_plain_offset	(x,	1,	0X10003D10);
	op_plain_offset	(x,	129,	0X10003D10);
	create_insn	(x=0X14760);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X14762);
	op_plain_offset	(x,	1,	0X10003D10);
	op_plain_offset	(x,	129,	0X10003D10);
	create_insn	(x=0X14764);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X14766);
	op_plain_offset	(x,	1,	0X10003D10);
	op_plain_offset	(x,	129,	0X10003D10);
	create_insn	(x=0X14768);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X1476A);
	op_plain_offset	(x,	1,	0X10003D10);
	op_plain_offset	(x,	129,	0X10003D10);
	create_insn	(x=0X1476C);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X1476E);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X14770);
	op_plain_offset	(x,	1,	0X10003D10);
	op_plain_offset	(x,	129,	0X10003D10);
	create_insn	(x=0X14790);
	op_plain_offset	(x,	1,	0X10003D10);
	op_plain_offset	(x,	129,	0X10003D10);
	create_insn	(x=0X14792);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X14794);
	op_plain_offset	(x,	1,	0X10003D10);
	op_plain_offset	(x,	129,	0X10003D10);
	create_insn	(x=0X147A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X147AA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X147B2);
	op_stkvar	(x,	1);
	create_insn	(0X147BE);
	create_insn	(x=0X147C0);
	op_plain_offset	(x,	1,	0X1000001C);
	op_plain_offset	(x,	129,	0X1000001C);
	create_insn	(x=0X147C6);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X147C8);
	op_plain_offset	(x,	1,	0X10003D95);
	op_plain_offset	(x,	129,	0X10003D95);
	create_insn	(x=0X147CA);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X147CC);
	op_plain_offset	(x,	1,	0X10003D95);
	op_plain_offset	(x,	129,	0X10003D95);
	create_insn	(x=0X147CE);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X147D0);
	op_plain_offset	(x,	1,	0X10003D95);
	op_plain_offset	(x,	129,	0X10003D95);
	create_insn	(x=0X147D6);
	op_plain_offset	(x,	1,	0X10003D95);
	op_plain_offset	(x,	129,	0X10003D95);
	create_insn	(x=0X147D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X147DA);
	op_plain_offset	(x,	1,	0X1000271C);
	op_plain_offset	(x,	129,	0X1000271C);
	create_insn	(x=0X147DC);
	op_plain_offset	(x,	1,	0X10003D95);
	op_plain_offset	(x,	129,	0X10003D95);
	create_insn	(x=0X147DE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X147E0);
	op_plain_offset	(x,	1,	0X10003D95);
	op_plain_offset	(x,	129,	0X10003D95);
	create_insn	(x=0X147E8);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X147F6);
	op_plain_offset	(x,	1,	0X10003D95);
	op_plain_offset	(x,	129,	0X10003D95);
	create_insn	(x=0X147F8);
	op_plain_offset	(x,	1,	0X10003D95);
	op_plain_offset	(x,	129,	0X10003D95);
	create_insn	(x=0X147FA);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X1481E);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X14826);
	op_plain_offset	(x,	1,	0X10003D95);
	op_plain_offset	(x,	129,	0X10003D95);
	create_insn	(x=0X14828);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X1482A);
	op_plain_offset	(x,	1,	0X10003D95);
	op_plain_offset	(x,	129,	0X10003D95);
	create_insn	(x=0X14832);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(0X14838);
	set_name	(0X14838,	"unkn5_IRQHandler");
	create_insn	(x=0X14844);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14848);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1484A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1484E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1485E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1486A);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X14872);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14874);
	op_plain_offset	(x,	1,	0X10000264);
	op_plain_offset	(x,	129,	0X10000264);
	create_insn	(x=0X1487A);
	op_plain_offset	(x,	1,	0X10000264);
	op_plain_offset	(x,	129,	0X10000264);
	create_insn	(x=0X148AC);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X148AE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X148CE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X148D0);
	op_plain_offset	(x,	1,	0X10000264);
	op_plain_offset	(x,	129,	0X10000264);
	create_insn	(x=0X148D6);
	op_plain_offset	(x,	1,	0X10000264);
	op_plain_offset	(x,	129,	0X10000264);
	create_insn	(x=0X148D8);
	op_plain_offset	(x,	1,	0X10000264);
	op_plain_offset	(x,	129,	0X10000264);
	create_insn	(x=0X148DE);
	op_plain_offset	(x,	1,	0X10000264);
	op_plain_offset	(x,	129,	0X10000264);
	create_insn	(x=0X148E6);
	op_plain_offset	(x,	1,	0X10000264);
	op_plain_offset	(x,	129,	0X10000264);
	create_insn	(x=0X14910);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14916);
	op_plain_offset	(x,	1,	0X10000264);
	op_plain_offset	(x,	129,	0X10000264);
	create_insn	(x=0X1492A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14930);
	op_plain_offset	(x,	1,	0X10000264);
	op_plain_offset	(x,	129,	0X10000264);
	create_insn	(x=0X14944);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X1494A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14950);
	op_plain_offset	(x,	1,	0X10000264);
	op_plain_offset	(x,	129,	0X10000264);
	create_insn	(0X14968);
	create_insn	(x=0X14970);
	op_hex		(x,	1);
	create_insn	(x=0X1497A);
	op_hex		(x,	1);
	create_insn	(x=0X1498A);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X1498E);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X14992);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X14998);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X1499E);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X149A2);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	set_cmt	(0X149A4,	"handler",	0);
	create_insn	(x=0X149A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X149A8,	"num",	0);
	create_insn	(x=0X149C2);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X149C6);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X149C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X149CA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X149CC);
	op_plain_offset	(x,	1,	0X1000001C);
	op_plain_offset	(x,	129,	0X1000001C);
	create_insn	(x=0X149D2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X149D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X149D6);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X149DE);
	op_plain_offset	(x,	1,	0X10003D02);
	op_plain_offset	(x,	129,	0X10003D02);
	create_insn	(x=0X149E2);
	op_plain_offset	(x,	1,	0X10003D02);
	op_plain_offset	(x,	129,	0X10003D02);
	create_insn	(x=0X149E6);
	op_plain_offset	(x,	1,	0X10003D02);
	op_plain_offset	(x,	129,	0X10003D02);
	create_insn	(x=0X149EA);
	op_plain_offset	(x,	1,	0X10003D02);
	op_plain_offset	(x,	129,	0X10003D02);
	create_insn	(0X149EE);
	create_insn	(x=0X149F6);
	op_hex		(x,	1);
	create_insn	(x=0X14A00);
	op_hex		(x,	1);
	create_insn	(x=0X14A10);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X14A14);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X14A18);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X14A1E);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X14A22);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X14A24);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X14A28);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	set_cmt	(0X14A2A,	"handler",	0);
	create_insn	(x=0X14A2A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X14A2E,	"num",	0);
	create_insn	(x=0X14A48);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X14A4C);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X14A4E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14A50);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14A52);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_dword	(x=0X14A58);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X14A5C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X14A60);
	create_dword	(x=0X14A64);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X14A68);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X14A6C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X14A70);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X14A74);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X14A78);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X14A7C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X14A80);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X14A84);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X14A88);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X14A8C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X14A90);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X14A94);
	create_dword	(x=0X14A98);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X14A9C);
	create_insn	(x=0X14AA4);
	op_hex		(x,	1);
	create_insn	(x=0X14AAE);
	op_hex		(x,	1);
	create_insn	(x=0X14ABE);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X14AC2);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X14AC6);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X14ACC);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X14AD0);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X14AD4);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	set_cmt	(0X14AD6,	"handler",	0);
	create_insn	(x=0X14AD6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X14ADA,	"num",	0);
	create_insn	(x=0X14AF4);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X14AF8);
	op_plain_offset	(x,	1,	0X40004000);
	op_plain_offset	(x,	129,	0X40004000);
	create_insn	(x=0X14AFA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14AFC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14AFE);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(0X14B04);
	set_name	(0X14B04,	"task_CC1120_worker");
	set_cmt	(0X14B0C,	"a2",	0);
	set_cmt	(0X14B0E,	"a1",	0);
	create_insn	(x=0X14B14);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X14B18);
	create_insn	(x=0X14B26);
	op_hex		(x,	1);
	create_insn	(x=0X14B2A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14B2E);
	op_plain_offset	(x,	1,	0X10000018);
	op_plain_offset	(x,	129,	0X10000018);
	create_insn	(x=0X14B32);
	op_hex		(x,	1);
	create_insn	(0X14B38);
	create_insn	(x=0X14B3A);
	op_hex		(x,	1);
	create_insn	(x=0X14B42);
	op_hex		(x,	1);
	create_insn	(x=0X14B48);
	op_hex		(x,	1);
	create_insn	(x=0X14B4C);
	op_plain_offset	(x,	1,	0X10000018);
	op_plain_offset	(x,	129,	0X10000018);
	create_insn	(x=0X14B52);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14B56);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14B5A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14B5E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14B60);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14B62);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14B70);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X14B74);
	op_plain_offset	(x,	1,	0X10000264);
	op_plain_offset	(x,	129,	0X10000264);
	create_insn	(0X14B8A);
	create_insn	(x=0X14B94);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14B96);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X14B9C);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X14BA0);
	op_plain_offset	(x,	1,	0X10003D02);
	op_plain_offset	(x,	129,	0X10003D02);
	create_insn	(x=0X14BA2);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X14BA6);
	op_plain_offset	(x,	1,	0X10003D02);
	op_plain_offset	(x,	129,	0X10003D02);
	create_insn	(x=0X14BAA);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X14BAC);
	op_plain_offset	(x,	1,	0X10003D02);
	op_plain_offset	(x,	129,	0X10003D02);
	create_insn	(x=0X14BAE);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X14BB0);
	op_plain_offset	(x,	1,	0X10003D02);
	op_plain_offset	(x,	129,	0X10003D02);
	create_insn	(x=0X14BB2);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X14BB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X14BB8);
	create_insn	(x=0X14BC4);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X14BC6);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X14BC8);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X14BCC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X14BCE,	"lev",	0);
	create_insn	(x=0X14BCE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14BD4);
	op_plain_offset	(x,	1,	0X10003AD0);
	op_plain_offset	(x,	129,	0X10003AD0);
	create_insn	(x=0X14BDC);
	op_plain_offset	(x,	1,	0X10000264);
	op_plain_offset	(x,	129,	0X10000264);
	create_insn	(0X14BE0);
	create_insn	(x=0X14BE2);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X14BE4);
	op_plain_offset	(x,	1,	0X10000264);
	op_plain_offset	(x,	129,	0X10000264);
	create_insn	(x=0X14BEC);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(0X14BFA);
	create_insn	(x=0X14C06);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14C0A);
	op_plain_offset	(x,	1,	0X10000244);
	op_plain_offset	(x,	129,	0X10000244);
	create_insn	(x=0X14C0C);
	op_plain_offset	(x,	1,	0X10000244);
	op_plain_offset	(x,	129,	0X10000244);
	create_insn	(0X14C10);
	create_insn	(0X14C16);
	create_insn	(0X14C1C);
	create_insn	(x=0X14C20);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X14C22);
	op_plain_offset	(x,	1,	0X10000264);
	op_plain_offset	(x,	129,	0X10000264);
	create_insn	(x=0X14C24);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X14C2A);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X14C2C);
	op_plain_offset	(x,	1,	0X10000264);
	op_plain_offset	(x,	129,	0X10000264);
	create_insn	(0X14C3E);
	create_insn	(x=0X14C42);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X14C46);
	set_cmt	(0X14C4A,	"fmt",	0);
	create_insn	(x=0X14C4A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X14C4C,	"lev",	0);
	create_insn	(x=0X14C4C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14C52);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X14C54);
	op_plain_offset	(x,	1,	0X10000264);
	op_plain_offset	(x,	129,	0X10000264);
	create_insn	(x=0X14C56);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14C5C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14C64);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X14C68);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X14C6C);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X14C6E);
	op_plain_offset	(x,	1,	0X10000264);
	op_plain_offset	(x,	129,	0X10000264);
	create_insn	(x=0X14C76);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X14C8C);
	op_hex		(x,	1);
	create_insn	(0X14C92);
	create_insn	(x=0X14C96);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14C9A);
	op_hex		(x,	1);
	create_insn	(x=0X14CB4);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X14CB6);
	op_plain_offset	(x,	1,	0X10000264);
	op_plain_offset	(x,	129,	0X10000264);
	create_insn	(x=0X14CBC);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	set_cmt	(0X14CBE,	"seconds",	0);
	create_insn	(x=0X14CC0);
	op_hex		(x,	1);
	create_insn	(x=0X14CC4);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X14CC6);
	op_stkvar	(x,	1);
	set_cmt	(0X14CC8,	"opt",	0);
	set_cmt	(0X14CCC,	"milli",	0);
	set_cmt	(0X14CCE,	"minutes",	0);
	set_cmt	(0X14CD0,	"hours",	0);
	create_insn	(0X14CD8);
	create_insn	(0X14CDC);
	create_insn	(0X14CE4);
	create_insn	(x=0X14CEC);
	op_hex		(x,	1);
	create_insn	(x=0X14D00);
	op_hex		(x,	1);
	create_dword	(0X14D08);
	create_dword	(x=0X14D0C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X14D10);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X14D14);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X14D18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X14D1C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X14D20);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X14D24);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X14D28);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X14D2C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X14D30);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X14D34,	0X14D3F);
	set_name	(0X14D34,	"aTestmaster");
	create_byte	(0X14D3F);
	create_strlit	(0X14D40,	0X14D4B);
	set_name	(0X14D40,	"aTestslaver");
	create_byte	(0X14D4B);
	create_dword	(x=0X14D4C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X14D50,	0X14D58);
	set_name	(0X14D50,	"aMonitor");
	create_dword	(0X14D58);
	create_insn	(0X14D5C);
	create_insn	(0X14D70);
	create_insn	(0X14DA0);
	create_insn	(0X14DDA);
	create_insn	(0X14DEE);
	create_insn	(0X14E26);
	create_insn	(0X14E2C);
	create_insn	(0X14E3C);
	create_insn	(0X14E48);
	create_insn	(x=0X14E52);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14E6C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14E88);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14EA4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X14EC2);
	create_insn	(x=0X14ECE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X14ED4);
	create_insn	(x=0X14ED6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14EDC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X14EE2);
	create_insn	(0X14EFA);
	create_insn	(0X14F04);
	create_insn	(x=0X14F12);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14F16);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X14F1E);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(0X14F28);
	create_insn	(0X14F3C);
	create_insn	(x=0X14F40);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14F4E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14F50);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14F88);
	op_hex		(x,	1);
	create_insn	(0X14FBA);
	create_insn	(x=0X14FE8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1503C);
	create_insn	(x=0X15040);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X15046);
	op_stkvar	(x,	1);
	create_insn	(0X1505A);
	create_insn	(0X15068);
	create_insn	(x=0X15076);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X150B0);
	create_insn	(x=0X150B6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X150B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X150C6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X150FC);
	op_hex		(x,	1);
	create_insn	(0X1512E);
	create_insn	(x=0X1515C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1517E);
	create_insn	(0X151A4);
	create_insn	(0X151B8);
	create_insn	(0X15214);
	create_insn	(x=0X15216);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X15226);
	create_dword	(x=0X15240);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X15244);
	create_dword	(x=0X15248);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_byte	(0X1524C);
	create_byte	(0X1524D);
	make_array	(0X1524D,	0X3);
	create_dword	(0X15250);
	create_dword	(x=0X15254);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X15258);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X1525C);
	create_dword	(0X15260);
	create_insn	(0X15264);
	create_insn	(x=0X15270);
	op_plain_offset	(x,	1,	0X100042AD);
	op_plain_offset	(x,	129,	0X100042AD);
	create_insn	(0X1527A);
	create_insn	(0X152A6);
	create_insn	(0X152BE);
	create_insn	(0X152C8);
	create_insn	(x=0X152CC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X152CE);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(0X152DC);
	create_insn	(0X152DE);
	create_insn	(x=0X152E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X152E2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X152E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X152E6);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X152EA);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X152EE);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X152FE);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X15306);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X15308);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X1530A);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X1530C);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X1530E);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X15310);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X15312);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X15314);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(0X15318);
	create_insn	(x=0X1531C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1531E);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(0X1532A);
	create_insn	(x=0X15330);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X15336);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X1533C);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X15342);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X15350);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X15352);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X15358);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X1535E);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X15362);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X15366);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X15378);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X1537A);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X15386);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X15388);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X153A6);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X153A8);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X153AA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X153AC);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	create_insn	(x=0X153AE);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X153B0);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(0X153BC);
	create_insn	(x=0X153BE);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X153C0);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(0X153CC);
	create_insn	(x=0X153CE);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X153D0);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(0X153DC);
	create_insn	(x=0X153E0);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X153E6);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(0X153EA);
	create_insn	(x=0X153EC);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X153EE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X153F0);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	create_insn	(x=0X153F2);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	create_insn	(x=0X153FA);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(0X15428);
	create_insn	(x=0X15430);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X15438);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1543C);
	op_plain_offset	(x,	1,	0X100040C4);
	op_plain_offset	(x,	129,	0X100040C4);
	create_insn	(x=0X15444);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X15454);
	create_insn	(0X15456);
	create_insn	(0X15496);
	create_insn	(x=0X1549E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X154B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X154B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X154C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X154CC);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	create_insn	(x=0X154D0);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X154D2);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X154DC);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	create_insn	(x=0X154E4);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X154E6);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X154EC);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(0X154F0);
	create_insn	(x=0X154FE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X15504);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X15506);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	create_insn	(x=0X1550C);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X15512);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X15518);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X15522);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X15530);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X15540);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X15546);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X15552);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X15556);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X15558);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X1555A);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X15560);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X1556A);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X15570);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X15572);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X15578);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X1557C);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X1557E);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X15584);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X15586);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X15588);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X1558C);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(0X15590);
	create_insn	(0X15592);
	create_insn	(0X15594);
	create_insn	(0X155EE);
	create_insn	(0X1562E);
	create_insn	(x=0X15650);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X15658);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_insn	(x=0X1567E);
	op_plain_offset	(x,	1,	0X10000270);
	op_plain_offset	(x,	129,	0X10000270);
	create_byte	(0X15692);
	make_array	(0X15692,	0X2);
	create_dword	(0X15694);
	create_dword	(x=0X15698);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1569C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X156A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X156A4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X156A8);
	create_dword	(0X156AC);
	create_dword	(x=0X156B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X156B4);
	create_insn	(0X156BC);
	create_insn	(0X156C0);
	set_name	(0X156C0,	"packet_perm_store");
	set_cmt	(0X156C8,	"len",	0);
	set_cmt	(0X156CE,	"a2",	0);
	set_cmt	(0X156D0,	"pkt",	0);
	create_insn	(0X156DE);
	create_insn	(0X156FC);
	set_cmt	(0X15708,	"a3",	0);
	set_cmt	(0X1570A,	"param_buf",	0);
	create_insn	(x=0X1570A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1570C,	"a1",	0);
	create_insn	(x=0X1570C);
	op_stkvar	(x,	1);
	create_insn	(x=0X1571E);
	op_stkvar	(x,	1);
	set_cmt	(0X15724,	"a4",	0);
	create_insn	(x=0X15724);
	op_stkvar	(x,	1);
	create_insn	(x=0X15728);
	op_stkvar	(x,	1);
	create_insn	(x=0X1572E);
	op_stkvar	(x,	1);
	set_cmt	(0X15732,	"a3",	0);
	create_insn	(x=0X15736);
	op_hex		(x,	1);
	set_cmt	(0X1573C,	"param_buf",	0);
	set_cmt	(0X1573E,	"pkt",	0);
	set_cmt	(0X15744,	"pkt",	0);
	create_insn	(x=0X15744);
	op_stkvar	(x,	1);
	create_insn	(0X15750);
	set_cmt	(0X15764,	"a3",	0);
	set_cmt	(0X15766,	"a1",	0);
	set_cmt	(0X15768,	"param_buf",	0);
	create_insn	(x=0X15780);
	op_stkvar	(x,	1);
	create_insn	(x=0X15786);
	op_stkvar	(x,	1);
	create_insn	(x=0X15796);
	op_stkvar	(x,	1);
	set_cmt	(0X1579C,	"a4",	0);
	create_insn	(x=0X1579C);
	op_stkvar	(x,	1);
	create_insn	(x=0X157A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X157A6);
	op_stkvar	(x,	1);
	set_cmt	(0X157AA,	"a3",	0);
	create_insn	(x=0X157AC);
	op_hex		(x,	1);
	set_cmt	(0X157B2,	"param_buf",	0);
	create_insn	(x=0X157B2);
	op_stkvar	(x,	1);
	set_cmt	(0X157B4,	"pkt",	0);
	set_cmt	(0X157BA,	"pkt",	0);
	create_insn	(x=0X157BA);
	op_stkvar	(x,	1);
	create_insn	(0X157C4);
	set_cmt	(0X157D2,	"TimeOut",	0);
	create_insn	(x=0X157E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X157F2);
	op_stkvar	(x,	1);
	set_cmt	(0X157F8,	"a4",	0);
	create_insn	(x=0X157FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X15802);
	op_stkvar	(x,	1);
	set_cmt	(0X15806,	"a3",	0);
	create_insn	(x=0X15808);
	op_hex		(x,	1);
	set_cmt	(0X1580E,	"param_buf",	0);
	create_insn	(x=0X1580E);
	op_stkvar	(x,	1);
	set_cmt	(0X15810,	"pkt",	0);
	set_cmt	(0X15816,	"pkt",	0);
	create_insn	(0X15820);
	create_insn	(x=0X15822);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X15826);
	op_stkvar	(x,	1);
	create_insn	(x=0X15840);
	op_stkvar	(x,	1);
	set_cmt	(0X15846,	"a4",	0);
	create_insn	(x=0X1584A);
	op_stkvar	(x,	1);
	create_insn	(x=0X15850);
	op_stkvar	(x,	1);
	set_cmt	(0X15854,	"a3",	0);
	create_insn	(x=0X15856);
	op_hex		(x,	1);
	set_cmt	(0X1585C,	"param_buf",	0);
	create_insn	(x=0X1585C);
	op_stkvar	(x,	1);
	set_cmt	(0X15862,	"pkt",	0);
	create_insn	(0X1586C);
	create_insn	(x=0X15872);
	op_stkvar	(x,	1);
	create_insn	(x=0X15878);
	op_stkvar	(x,	1);
	create_insn	(x=0X1588C);
	op_stkvar	(x,	1);
	set_cmt	(0X15892,	"a4",	0);
	create_insn	(x=0X15896);
	op_stkvar	(x,	1);
	create_insn	(x=0X1589C);
	op_stkvar	(x,	1);
	set_cmt	(0X158A0,	"a3",	0);
	create_insn	(x=0X158A2);
	op_hex		(x,	1);
	set_cmt	(0X158A8,	"param_buf",	0);
	create_insn	(x=0X158A8);
	op_stkvar	(x,	1);
	set_cmt	(0X158AE,	"pkt",	0);
	create_insn	(0X158B8);
	create_insn	(x=0X158CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X158DA);
	op_stkvar	(x,	1);
	set_cmt	(0X158E0,	"a4",	0);
	create_insn	(x=0X158E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X158EA);
	op_stkvar	(x,	1);
	set_cmt	(0X158EE,	"a3",	0);
	create_insn	(x=0X158F0);
	op_hex		(x,	1);
	set_cmt	(0X158F6,	"param_buf",	0);
	create_insn	(x=0X158F6);
	op_stkvar	(x,	1);
	set_cmt	(0X158F8,	"pkt",	0);
	set_cmt	(0X158FE,	"pkt",	0);
	create_insn	(0X15906);
	create_insn	(x=0X1591E);
	op_stkvar	(x,	1);
	create_insn	(x=0X1592E);
	op_stkvar	(x,	1);
	set_cmt	(0X15934,	"a4",	0);
	create_insn	(x=0X15934);
	op_stkvar	(x,	1);
	create_insn	(x=0X15938);
	op_stkvar	(x,	1);
	create_insn	(x=0X1593E);
	op_stkvar	(x,	1);
	set_cmt	(0X15942,	"a3",	0);
	create_insn	(x=0X15944);
	op_hex		(x,	1);
	set_cmt	(0X1594A,	"param_buf",	0);
	set_cmt	(0X1594C,	"pkt",	0);
	set_cmt	(0X15952,	"pkt",	0);
	create_insn	(x=0X15952);
	op_stkvar	(x,	1);
	set_cmt	(0X1595C,	"atten_ctrl_type",	0);
	create_insn	(0X1595C);
	set_cmt	(0X15962,	"flag",	0);
	set_cmt	(0X15968,	"flag",	0);
	set_cmt	(0X15980,	"atten_ctrl_type",	0);
	create_insn	(0X15980);
	create_insn	(x=0X15998);
	op_stkvar	(x,	1);
	create_insn	(0X1599E);
	create_insn	(0X159B8);
	create_insn	(x=0X159BA);
	op_stkvar	(x,	1);
	create_insn	(0X159C4);
	create_insn	(x=0X159C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X159CA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X159D0);
	op_stkvar	(x,	1);
	create_insn	(0X159D4);
	create_insn	(x=0X159D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X159DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X159DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X159EE);
	op_stkvar	(x,	1);
	set_cmt	(0X159F4,	"a4",	0);
	create_insn	(x=0X159F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X159F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X159FE);
	op_stkvar	(x,	1);
	set_cmt	(0X15A02,	"a3",	0);
	create_insn	(x=0X15A04);
	op_hex		(x,	1);
	set_cmt	(0X15A0A,	"param_buf",	0);
	set_cmt	(0X15A0C,	"pkt",	0);
	set_cmt	(0X15A12,	"pkt",	0);
	create_insn	(x=0X15A12);
	op_stkvar	(x,	1);
	create_insn	(0X15A1C);
	set_name	(0X15A1C,	"cmd_exec_set09_cmd2C");
	create_insn	(0X15A42);
	create_insn	(0X15A50);
	create_insn	(0X15A52);
	create_insn	(0X15A54);
	create_insn	(0X15A56);
	create_insn	(0X15A58);
	create_insn	(0X15A5A);
	create_insn	(0X15A5C);
	create_byte	(0X15A5E);
	make_array	(0X15A5E,	0X2);
	create_dword	(x=0X15A60);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X15A64);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X15A68);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X15A6C);
	set_name	(0X15A6C,	"ofdm_init_instruction");
	create_insn	(x=0X15A76);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X15A78,	"switch 8 cases ",	0);
	set_cmt	(0X15A7E,	"switch jump",	0);
	set_cmt	(0X15A82,	"jump table for switch statement",	0);
	create_byte	(0X15A82);
	set_name	(0X15A82,	"jpt_BA7E");
	create_byte	(0X15A83);
	create_byte	(0X15A84);
	create_byte	(0X15A85);
	create_byte	(0X15A86);
	create_byte	(0X15A87);
	create_byte	(0X15A88);
	create_byte	(0X15A89);
	set_cmt	(0X15A8A,	"jumptable 0000BA7E case 5",	1);
	create_insn	(0X15A8A);
	set_cmt	(0X15A92,	"jumptable 0000BA7E case 6",	1);
	create_insn	(0X15A92);
	set_cmt	(0X15A96,	"addr10",	0);
	set_cmt	(0X15AA2,	"val",	0);
	set_cmt	(0X15AA8,	"wrflag",	0);
	create_insn	(x=0X15AA8);
	op_enum		(x,	1,	GetEnum("SPI_FPGA_REG_DEFINES"),0);
	create_insn	(0X15AAE);
	create_insn	(x=0X15AB0);
	op_hex		(x,	1);
	create_insn	(x=0X15AB4);
	op_hex		(x,	1);
	set_cmt	(0X15ABA,	"jumptable 0000BA7E case 7",	1);
	create_insn	(0X15ABA);
	set_cmt	(0X15ABC,	"bus_n_bytes",	0);
	set_cmt	(0X15AC6,	"jumptable 0000BA7E case 8",	1);
	create_insn	(0X15AC6);
	set_cmt	(0X15ACE,	"wrflag",	0);
	set_cmt	(0X15AD0,	"addr10",	0);
	set_cmt	(0X15AE0,	"jumptable 0000BA7E default case",	1);
	set_name	(0X15AE0,	"def_BA7E");
	set_cmt	(0X15AE4,	"jumptable 0000BA7E case 9",	1);
	create_insn	(0X15AE4);
	set_cmt	(0X15AE6,	"bus_n_bytes",	0);
	set_cmt	(0X15AEE,	"jumptable 0000BA7E case 10",	1);
	create_insn	(0X15AEE);
	create_insn	(x=0X15AF8);
	op_hex		(x,	1);
	set_cmt	(0X15B04,	"wrflag",	0);
	set_cmt	(0X15B06,	"addr10",	0);
	set_cmt	(0X15B2C,	"jumptable 0000BA7E case 11",	1);
	create_insn	(0X15B2C);
	set_cmt	(0X15B36,	"jumptable 0000BA7E case 12",	1);
	create_insn	(0X15B36);
	create_insn	(0X15B4C);
	set_cmt	(0X15B50,	"data8",	0);
	create_insn	(0X15B50);
	set_cmt	(0X15B52,	"addr8",	0);
	set_cmt	(0X15B54,	"bus_n_bytes",	0);
	create_insn	(0X15B5E);
	set_cmt	(0X15B60,	"addr8",	0);
	set_cmt	(0X15B62,	"bus_n_bytes",	0);
	create_insn	(x=0X15B68);
	op_hex		(x,	1);
	set_cmt	(0X15B6C,	"data8",	0);
	set_cmt	(0X15B6E,	"addr8",	0);
	set_cmt	(0X15B70,	"bus_n_bytes",	0);
	create_insn	(x=0X15B76);
	op_hex		(x,	1);
	set_cmt	(0X15B7A,	"addr8",	0);
	set_cmt	(0X15B80,	"bus_n_bytes",	0);
	create_insn	(0X15B86);
	set_name	(0X15B86,	"init_fpga_config");
	create_insn	(x=0X15B98);
	op_enum		(x,	1,	GetEnum("BoardVersion"),0);
	create_insn	(x=0X15BA4);
	op_plain_offset	(x,	1,	0X2009C000);
	op_plain_offset	(x,	129,	0X2009C000);
	create_insn	(x=0X15BA6);
	op_hex		(x,	1);
	create_insn	(x=0X15BAA);
	op_plain_offset	(x,	1,	0X2009C000);
	op_plain_offset	(x,	129,	0X2009C000);
	create_insn	(x=0X15BB2);
	op_plain_offset	(x,	1,	0X2009C000);
	op_plain_offset	(x,	129,	0X2009C000);
	create_insn	(x=0X15BB4);
	op_hex		(x,	1);
	create_insn	(x=0X15BB8);
	op_plain_offset	(x,	1,	0X2009C000);
	op_plain_offset	(x,	129,	0X2009C000);
	create_insn	(x=0X15BBA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X15BC0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X15BD8);
	op_enum		(x,	1,	GetEnum("BoardVersion"),0);
	create_insn	(x=0X15BE6);
	op_enum		(x,	1,	GetEnum("BoardVersion"),0);
	create_insn	(0X15BEC);
	create_insn	(0X15BF6);
	create_insn	(0X15C00);
	create_insn	(0X15C10);
	create_insn	(x=0X15C14);
	op_enum		(x,	1,	GetEnum("BoardVersion"),0);
	create_insn	(x=0X15C18);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X15C24);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X15C38);
	op_enum		(x,	1,	GetEnum("BoardVersion"),0);
	create_insn	(x=0X15C40);
	op_enum		(x,	1,	GetEnum("BoardVersion"),0);
	set_cmt	(0X15C4C,	"wrflag",	0);
	create_insn	(0X15C4C);
	set_cmt	(0X15C4E,	"val",	0);
	set_cmt	(0X15C50,	"addr10",	0);
	create_insn	(x=0X15C50);
	op_enum		(x,	1,	GetEnum("SPI_AD9363_REG_DEFINES"),0);
	set_cmt	(0X15C56,	"wrflag",	0);
	set_cmt	(0X15C58,	"addr10",	0);
	create_insn	(x=0X15C58);
	op_enum		(x,	1,	GetEnum("SPI_AD9363_REG_DEFINES"),0);
	set_cmt	(0X15C64,	"wrflag",	0);
	set_cmt	(0X15C66,	"addr10",	0);
	create_insn	(x=0X15C66);
	op_enum		(x,	1,	GetEnum("SPI_AD9363_REG_DEFINES"),0);
	set_cmt	(0X15C70,	"wrflag",	0);
	set_cmt	(0X15C72,	"addr10",	0);
	create_insn	(x=0X15C72);
	op_enum		(x,	1,	GetEnum("SPI_AD9363_REG_DEFINES"),0);
	set_cmt	(0X15C80,	"wrflag",	0);
	set_cmt	(0X15C82,	"addr10",	0);
	create_insn	(x=0X15C82);
	op_enum		(x,	1,	GetEnum("SPI_AD9363_REG_DEFINES"),0);
	create_insn	(0X15C92);
	set_cmt	(0X15C96,	"wrflag",	0);
	create_insn	(0X15C96);
	set_cmt	(0X15C98,	"val",	0);
	set_cmt	(0X15C9A,	"addr10",	0);
	create_insn	(x=0X15C9A);
	op_enum		(x,	1,	GetEnum("SPI_AR9003_REG_DEFINES"),0);
	set_cmt	(0X15CA0,	"wrflag",	0);
	set_cmt	(0X15CA2,	"val",	0);
	set_cmt	(0X15CA4,	"addr10",	0);
	create_insn	(x=0X15CA4);
	op_enum		(x,	1,	GetEnum("SPI_AR9003_REG_DEFINES"),0);
	set_cmt	(0X15CAA,	"wrflag",	0);
	set_cmt	(0X15CAC,	"val",	0);
	set_cmt	(0X15CAE,	"addr10",	0);
	create_insn	(x=0X15CAE);
	op_enum		(x,	1,	GetEnum("SPI_AR9003_REG_DEFINES"),0);
	set_cmt	(0X15CBA,	"wrflag",	0);
	set_cmt	(0X15CBC,	"val",	0);
	set_cmt	(0X15CBE,	"addr10",	0);
	create_insn	(x=0X15CBE);
	op_enum		(x,	1,	GetEnum("SPI_AR9003_REG_DEFINES"),0);
	set_cmt	(0X15CCA,	"wrflag",	0);
	set_cmt	(0X15CCC,	"addr10",	0);
	create_insn	(x=0X15CCC);
	op_enum		(x,	1,	GetEnum("SPI_AR9003_REG_DEFINES"),0);
	set_cmt	(0X15CD8,	"data8",	0);
	set_cmt	(0X15CDA,	"addr8",	0);
	set_cmt	(0X15CDC,	"bus_n_bytes",	0);
	create_insn	(0X15CEC);
	create_insn	(0X15CFA);
	set_cmt	(0X15CFC,	"addr8",	0);
	set_cmt	(0X15CFE,	"bus_n_bytes",	0);
	create_insn	(x=0X15D04);
	op_hex		(x,	1);
	set_cmt	(0X15D08,	"data8",	0);
	set_cmt	(0X15D0A,	"addr8",	0);
	set_cmt	(0X15D0C,	"bus_n_bytes",	0);
	create_insn	(x=0X15D12);
	op_hex		(x,	1);
	set_cmt	(0X15D16,	"addr8",	0);
	set_cmt	(0X15D1C,	"bus_n_bytes",	0);
	create_insn	(0X15D22);
	set_cmt	(0X15D24,	"addr8",	0);
	set_cmt	(0X15D26,	"bus_n_bytes",	0);
	create_insn	(x=0X15D2C);
	op_hex		(x,	1);
	set_cmt	(0X15D30,	"data8",	0);
	set_cmt	(0X15D32,	"addr8",	0);
	set_cmt	(0X15D34,	"bus_n_bytes",	0);
	create_insn	(x=0X15D3A);
	op_hex		(x,	1);
	create_insn	(0X15D4A);
	set_cmt	(0X15D56,	"addr8",	0);
	set_cmt	(0X15D58,	"bus_n_bytes",	0);
	create_insn	(x=0X15D62);
	op_hex		(x,	1);
	set_cmt	(0X15D66,	"addr8",	0);
	set_cmt	(0X15D6C,	"bus_n_bytes",	0);
	create_insn	(x=0X15D72);
	op_hex		(x,	1);
	create_insn	(0X15D78);
	create_insn	(0X15D7A);
	set_cmt	(0X15D7C,	"addr8",	0);
	set_cmt	(0X15D7E,	"bus_n_bytes",	0);
	set_cmt	(0X15D84,	"data8",	0);
	create_insn	(x=0X15D84);
	op_hex		(x,	1);
	set_cmt	(0X15D88,	"addr8",	0);
	set_cmt	(0X15D8A,	"bus_n_bytes",	0);
	create_insn	(0X15D96);
	set_cmt	(0X15D98,	"minutes",	0);
	create_insn	(x=0X15D9A);
	op_stkvar	(x,	1);
	set_cmt	(0X15D9C,	"opt",	0);
	set_cmt	(0X15DA0,	"milli",	0);
	set_cmt	(0X15DA2,	"seconds",	0);
	set_cmt	(0X15DA4,	"hours",	0);
	create_dword	(x=0X15DAC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X15DB0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X15DB4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X15DB8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X15DBC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X15DC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X15DC4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X15DC4,	"get_board_version");
	create_insn	(x=0X15DCA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X15DCE);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X15DD0);
	op_hex		(x,	1);
	create_insn	(x=0X15DD4);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X15DDA);
	op_hex		(x,	1);
	create_insn	(x=0X15DE0);
	op_enum		(x,	1,	GetEnum("system_defines"),0);
	create_insn	(x=0X15DE8);
	op_hex		(x,	1);
	create_insn	(x=0X15DEE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X15DF6);
	set_name	(0X15DF6,	"spi_raw_ct16_dt8_write");
	create_insn	(x=0X15DF8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X15E02);
	op_hex		(x,	1);
	set_cmt	(0X15E0A,	"The first six bits set the bus direction and number of bytes to transfer.",	1);
	set_cmt	(0X15E10,	"The next 10 bits set the address where data is to be written.",	1);
	set_cmt	(0X15E16,	"The final eight bits are the data to be transferred to the specified register address.",	1);
	create_insn	(x=0X15E1C);
	op_hex		(x,	1);
	create_insn	(0X15E24);
	set_name	(0X15E24,	"spi_raw_ct16_dt8_read");
	create_insn	(x=0X15E2E);
	op_hex		(x,	1);
	create_insn	(x=0X15E48);
	op_hex		(x,	1);
	create_insn	(0X15E50);
	set_name	(0X15E50,	"spi_ad936x_raw_write_multi");
	create_insn	(x=0X15E60);
	op_hex		(x,	1);
	create_insn	(0X15E70);
	create_insn	(x=0X15E80);
	op_hex		(x,	1);
	create_insn	(0X15E8A);
	set_name	(0X15E8A,	"spi_ad936x_raw_read_multi");
	create_insn	(x=0X15E9A);
	op_hex		(x,	1);
	create_insn	(0X15EAE);
	create_insn	(x=0X15EC0);
	op_hex		(x,	1);
	create_insn	(0X15EC8);
	set_name	(0X15EC8,	"ad936x_reg_sync_write");
	set_cmt	(0X15ED2,	"data8",	0);
	set_cmt	(0X15ED4,	"addr8",	0);
	set_cmt	(0X15ED6,	"bus_n_bytes",	0);
	create_insn	(x=0X15EE0);
	op_hex		(x,	1);
	create_insn	(x=0X15EFE);
	op_hex		(x,	1);
	set_cmt	(0X15F0A,	"data8",	0);
	create_insn	(0X15F0A);
	set_cmt	(0X15F10,	"addr8",	0);
	set_cmt	(0X15F12,	"bus_n_bytes",	0);
	create_insn	(0X15F16);
	set_name	(0X15F16,	"ad936x_reg_sync_read");
	set_cmt	(0X15F1C,	"data8",	0);
	set_cmt	(0X15F1E,	"addr8",	0);
	set_cmt	(0X15F20,	"bus_n_bytes",	0);
	create_insn	(x=0X15F2A);
	op_hex		(x,	1);
	create_insn	(x=0X15F48);
	op_hex		(x,	1);
	set_cmt	(0X15F54,	"data8",	0);
	create_insn	(0X15F54);
	set_cmt	(0X15F56,	"addr8",	0);
	set_cmt	(0X15F58,	"bus_n_bytes",	0);
	create_byte	(0X15F62);
	make_array	(0X15F62,	0X2);
	create_dword	(x=0X15F64);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X15F68);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X15F6C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X15F70);
	op_enum		(x,	0,	GetEnum("system_defines"),0);
	create_insn	(0X15F74);
	create_insn	(x=0X15F78);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X15F7A);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X15F80);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X15F88);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X15F8C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X15FA2);
	op_enum		(x,	1,	GetEnum("BoardVersion"),0);
	create_insn	(x=0X15FAA);
	op_enum		(x,	1,	GetEnum("BoardVersion"),0);
	create_insn	(0X15FB6);
	create_insn	(x=0X15FBC);
	op_hex		(x,	1);
	create_insn	(x=0X15FC6);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X15FC8);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X15FCC);
	op_hex		(x,	1);
	create_insn	(0X15FD8);
	create_insn	(x=0X15FDC);
	op_enum		(x,	1,	GetEnum("BoardVersion"),0);
	create_insn	(x=0X15FE4);
	op_enum		(x,	1,	GetEnum("BoardVersion"),0);
	create_insn	(0X15FF0);
	create_insn	(x=0X15FF6);
	op_hex		(x,	1);
	create_insn	(x=0X16004);
	op_hex		(x,	1);
	create_insn	(x=0X1601C);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X1601E);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X16022);
	op_hex		(x,	1);
	create_insn	(x=0X1602C);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X1602E);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X16032);
	op_hex		(x,	1);
	create_insn	(x=0X1604A);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X1604C);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(0X16054);
	create_insn	(x=0X16056);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X16058);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X1605A);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X1605E);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X16060);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X1606A);
	op_enum		(x,	1,	GetEnum("BoardVersion"),0);
	create_insn	(x=0X16072);
	op_enum		(x,	1,	GetEnum("BoardVersion"),0);
	create_insn	(x=0X1607E);
	op_hex		(x,	1);
	create_insn	(x=0X16088);
	op_hex		(x,	1);
	create_insn	(x=0X16090);
	op_hex		(x,	1);
	create_insn	(x=0X16094);
	op_hex		(x,	1);
	create_insn	(x=0X16098);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(0X1609E);
	create_insn	(x=0X160A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X160AC);
	op_hex		(x,	1);
	create_insn	(x=0X160B0);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X160B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X160E0);
	create_insn	(x=0X160F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X16124);
	create_insn	(x=0X1612A);
	op_hex		(x,	1);
	create_insn	(0X16136);
	set_cmt	(0X16142,	"a3",	0);
	create_insn	(x=0X16148);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X16156);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X16158,	"param_buf",	0);
	create_insn	(x=0X16158);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1615A,	"a1",	0);
	create_insn	(0X16166);
	create_insn	(x=0X16168);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1616A);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X1616E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X16176);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X16178);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X1617A);
	op_hex		(x,	1);
	create_insn	(x=0X16182);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X16184);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X1618E);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X16196);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X1619E);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	set_cmt	(0X161A8,	"addr8",	0);
	create_insn	(0X161A8);
	set_cmt	(0X161AA,	"bus_n_bytes",	0);
	create_insn	(x=0X161B0);
	op_hex		(x,	1);
	set_cmt	(0X161B4,	"data8",	0);
	create_insn	(x=0X161B4);
	op_hex		(x,	1);
	set_cmt	(0X161B8,	"addr8",	0);
	set_cmt	(0X161BA,	"bus_n_bytes",	0);
	set_cmt	(0X161C0,	"addr8",	0);
	set_cmt	(0X161C2,	"bus_n_bytes",	0);
	create_insn	(x=0X161C8);
	op_hex		(x,	1);
	set_cmt	(0X161CE,	"addr8",	0);
	create_insn	(0X161CE);
	set_cmt	(0X161D0,	"bus_n_bytes",	0);
	create_insn	(x=0X161D6);
	op_hex		(x,	1);
	set_cmt	(0X161DA,	"data8",	0);
	create_insn	(x=0X161DA);
	op_hex		(x,	1);
	set_cmt	(0X161DE,	"addr8",	0);
	set_cmt	(0X161E0,	"bus_n_bytes",	0);
	set_cmt	(0X161E6,	"addr8",	0);
	set_cmt	(0X161E8,	"bus_n_bytes",	0);
	create_insn	(x=0X161EE);
	op_hex		(x,	1);
	create_insn	(x=0X161F4);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X161F6);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X161F8);
	op_hex		(x,	1);
	set_cmt	(0X16206,	"addr8",	0);
	set_cmt	(0X16208,	"bus_n_bytes",	0);
	set_cmt	(0X1620E,	"data8",	0);
	create_insn	(x=0X1620E);
	op_hex		(x,	1);
	set_cmt	(0X16212,	"addr8",	0);
	set_cmt	(0X16214,	"bus_n_bytes",	0);
	create_insn	(x=0X1621A);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X1621C);
	op_hex		(x,	1);
	set_cmt	(0X16230,	"addr8",	0);
	set_cmt	(0X16232,	"bus_n_bytes",	0);
	set_cmt	(0X1623E,	"addr8",	0);
	set_cmt	(0X16240,	"bus_n_bytes",	0);
	create_insn	(x=0X16246);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X1624C);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X1624E);
	op_hex		(x,	1);
	create_insn	(x=0X16252);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X16254);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X1625A);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(0X1625E);
	create_insn	(x=0X1626E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X16272);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X16274);
	op_enum		(x,	1,	GetEnum("BoardVersion"),0);
	create_insn	(x=0X1627C);
	op_enum		(x,	1,	GetEnum("BoardVersion"),0);
	create_insn	(x=0X16288);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X1628E);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(0X16298);
	create_insn	(x=0X1629E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X162A6,	"addr8",	0);
	set_cmt	(0X162A8,	"data8",	0);
	set_cmt	(0X162AC,	"bus_n_bytes",	0);
	set_cmt	(0X162B4,	"addr8",	0);
	set_cmt	(0X162B6,	"data8",	0);
	set_cmt	(0X162B8,	"bus_n_bytes",	0);
	set_cmt	(0X162BE,	"data8",	0);
	set_cmt	(0X162C0,	"addr8",	0);
	set_cmt	(0X162C2,	"bus_n_bytes",	0);
	set_cmt	(0X162C8,	"data8",	0);
	set_cmt	(0X162CA,	"addr8",	0);
	set_cmt	(0X162CC,	"bus_n_bytes",	0);
	set_cmt	(0X162D2,	"data8",	0);
	set_cmt	(0X162D4,	"addr8",	0);
	set_cmt	(0X162D6,	"bus_n_bytes",	0);
	create_insn	(x=0X162DE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X162EA,	"addr8",	0);
	set_cmt	(0X162EC,	"data8",	0);
	set_cmt	(0X162EE,	"bus_n_bytes",	0);
	set_cmt	(0X162F4,	"data8",	0);
	set_cmt	(0X162F6,	"addr8",	0);
	set_cmt	(0X162F8,	"bus_n_bytes",	0);
	set_cmt	(0X162FE,	"data8",	0);
	set_cmt	(0X16300,	"addr8",	0);
	set_cmt	(0X16302,	"bus_n_bytes",	0);
	set_cmt	(0X16308,	"data8",	0);
	set_cmt	(0X1630C,	"addr8",	0);
	set_cmt	(0X1630E,	"bus_n_bytes",	0);
	create_insn	(x=0X1631A);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X16326);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1632A,	"addr8",	0);
	set_cmt	(0X1632C,	"data8",	0);
	set_cmt	(0X1632E,	"bus_n_bytes",	0);
	create_insn	(x=0X1633A);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X16342);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X16346);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1634C);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_byte	(0X16356);
	make_array	(0X16356,	0X2);
	create_dword	(x=0X16358);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1635C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X16360);
	create_dword	(x=0X16364);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X16368);
	create_dword	(x=0X1636C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X16370);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X16374);
	create_dword	(x=0X16378);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1637C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X16380);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X16384);
	create_insn	(0X16388);
	create_insn	(x=0X1638A);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X1638E);
	op_hex		(x,	1);
	create_insn	(x=0X163A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X163CC);
	create_insn	(x=0X163D2);
	op_hex		(x,	1);
	set_cmt	(0X163DE,	"data8",	0);
	set_cmt	(0X163E0,	"addr8",	0);
	set_cmt	(0X163E2,	"bus_n_bytes",	0);
	create_insn	(x=0X163EE);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	set_cmt	(0X163F6,	"data8",	0);
	set_cmt	(0X163F8,	"addr8",	0);
	set_cmt	(0X163FA,	"bus_n_bytes",	0);
	create_insn	(x=0X16404);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(0X1640A);
	set_cmt	(0X1640C,	"addr8",	0);
	set_cmt	(0X1640E,	"bus_n_bytes",	0);
	create_insn	(0X16414);
	create_insn	(x=0X16418);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1641A);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X1641C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X16422);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X16428);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X1642C);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X16432);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X16436);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X1643C);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X1643E);
	op_hex		(x,	1);
	create_insn	(x=0X1644A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X16454);
	op_enum		(x,	1,	GetEnum("BoardVersion"),0);
	create_insn	(x=0X1645C);
	op_enum		(x,	1,	GetEnum("BoardVersion"),0);
	create_insn	(x=0X16460);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X16462);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	set_cmt	(0X16476,	"addr8",	0);
	set_cmt	(0X16478,	"data8",	0);
	set_cmt	(0X1647A,	"bus_n_bytes",	0);
	create_insn	(x=0X16480);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X16482);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	set_cmt	(0X16492,	"addr8",	0);
	set_cmt	(0X16494,	"data8",	0);
	set_cmt	(0X16496,	"bus_n_bytes",	0);
	create_insn	(x=0X1649C);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X1649E);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	set_cmt	(0X164AE,	"addr8",	0);
	set_cmt	(0X164B0,	"data8",	0);
	set_cmt	(0X164B2,	"bus_n_bytes",	0);
	create_insn	(x=0X164B8);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X164BA);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X164CE);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X164D6);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X164D8);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X164E2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X164E8,	"addr8",	0);
	set_cmt	(0X164EA,	"data8",	0);
	set_cmt	(0X164EC,	"bus_n_bytes",	0);
	create_insn	(x=0X164F2);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X164F4);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	set_cmt	(0X16504,	"addr8",	0);
	set_cmt	(0X16506,	"data8",	0);
	set_cmt	(0X16508,	"bus_n_bytes",	0);
	create_insn	(x=0X1650E);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X16510);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	set_cmt	(0X16520,	"addr8",	0);
	set_cmt	(0X16522,	"data8",	0);
	set_cmt	(0X16524,	"bus_n_bytes",	0);
	create_insn	(x=0X1652A);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X1652C);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(0X16538);
	create_insn	(0X1653A);
	create_insn	(0X1653C);
	create_insn	(0X1653E);
	set_cmt	(0X16544,	"addr8",	0);
	set_cmt	(0X16546,	"data8",	0);
	set_cmt	(0X16548,	"bus_n_bytes",	0);
	create_insn	(x=0X1654E);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X16550);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	set_cmt	(0X16560,	"addr8",	0);
	set_cmt	(0X16562,	"data8",	0);
	set_cmt	(0X16564,	"bus_n_bytes",	0);
	create_insn	(x=0X1656A);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X16572);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X16574);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X16584);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X1659E);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(0X165A2);
	create_insn	(x=0X165B4);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X165B6);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X165BC);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X165BE);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X165C2);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X165C4);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X165C8);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X165CA);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X165D6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X165DA);
	op_enum		(x,	1,	GetEnum("BoardVersion"),0);
	create_insn	(x=0X165E2);
	op_enum		(x,	1,	GetEnum("BoardVersion"),0);
	create_insn	(x=0X165EA);
	op_enum		(x,	1,	GetEnum("BoardVersion"),0);
	create_insn	(x=0X165EE);
	op_plain_offset	(x,	1,	0X100042A1);
	op_plain_offset	(x,	129,	0X100042A1);
	set_cmt	(0X165F2,	"addr8",	0);
	create_insn	(x=0X165F2);
	op_enum		(x,	1,	GetEnum("SPI_FPGA_REG_DEFINES"),0);
	set_cmt	(0X165FA,	"data8",	0);
	set_cmt	(0X165FC,	"bus_n_bytes",	0);
	create_insn	(x=0X16602);
	op_plain_offset	(x,	1,	0X100042A1);
	op_plain_offset	(x,	129,	0X100042A1);
	set_cmt	(0X16606,	"addr8",	0);
	set_cmt	(0X1660E,	"data8",	0);
	set_cmt	(0X16610,	"bus_n_bytes",	0);
	create_insn	(x=0X16616);
	op_plain_offset	(x,	1,	0X100042A1);
	op_plain_offset	(x,	129,	0X100042A1);
	set_cmt	(0X1661A,	"addr8",	0);
	set_cmt	(0X16622,	"data8",	0);
	set_cmt	(0X16624,	"bus_n_bytes",	0);
	create_insn	(x=0X1662A);
	op_plain_offset	(x,	1,	0X100042A1);
	op_plain_offset	(x,	129,	0X100042A1);
	set_cmt	(0X1662E,	"addr8",	0);
	set_cmt	(0X16636,	"data8",	0);
	set_cmt	(0X16638,	"bus_n_bytes",	0);
	create_insn	(x=0X1663E);
	op_plain_offset	(x,	1,	0X100042A1);
	op_plain_offset	(x,	129,	0X100042A1);
	create_insn	(0X1664A);
	set_cmt	(0X1664E,	"addr8",	0);
	set_cmt	(0X16656,	"data8",	0);
	set_cmt	(0X16658,	"bus_n_bytes",	0);
	set_cmt	(0X16662,	"addr8",	0);
	set_cmt	(0X1666A,	"data8",	0);
	set_cmt	(0X1666C,	"bus_n_bytes",	0);
	set_cmt	(0X16676,	"addr8",	0);
	set_cmt	(0X1667E,	"data8",	0);
	set_cmt	(0X16680,	"bus_n_bytes",	0);
	set_cmt	(0X1668A,	"addr8",	0);
	set_cmt	(0X16692,	"data8",	0);
	set_cmt	(0X16694,	"bus_n_bytes",	0);
	create_insn	(0X166AA);
	create_insn	(x=0X166AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X166AE);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X166B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X166B6);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X166BC);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X166BE);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X166C8);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X166CE);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X166D0);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X166D6);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X166D8);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X166DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X166DE);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(0X166EC);
	set_cmt	(0X166F0,	"data8",	0);
	set_cmt	(0X166F2,	"addr8",	0);
	create_insn	(x=0X166F2);
	op_enum		(x,	1,	GetEnum("SPI_FPGA_REG_DEFINES"),0);
	set_cmt	(0X166F4,	"bus_n_bytes",	0);
	create_insn	(x=0X166FA);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X16702);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X16706);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X1670C);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X16710);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	set_cmt	(0X16716,	"data8",	0);
	set_cmt	(0X16718,	"addr8",	0);
	set_cmt	(0X1671A,	"bus_n_bytes",	0);
	set_cmt	(0X16720,	"addr8",	0);
	set_cmt	(0X16722,	"bus_n_bytes",	0);
	create_insn	(x=0X16728);
	op_hex		(x,	1);
	set_cmt	(0X1672E,	"data8",	0);
	create_insn	(0X1672E);
	set_cmt	(0X16730,	"addr8",	0);
	set_cmt	(0X16732,	"bus_n_bytes",	0);
	set_cmt	(0X16738,	"addr8",	0);
	set_cmt	(0X1673A,	"bus_n_bytes",	0);
	create_insn	(x=0X16740);
	op_hex		(x,	1);
	set_cmt	(0X16744,	"addr8",	0);
	set_cmt	(0X16746,	"bus_n_bytes",	0);
	create_insn	(0X16754);
	create_insn	(0X16756);
	create_insn	(x=0X16758);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1675A);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	set_cmt	(0X16762,	"addr8",	0);
	set_cmt	(0X16764,	"bus_n_bytes",	0);
	create_insn	(x=0X1676A);
	op_hex		(x,	1);
	create_insn	(x=0X1676E);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X16776);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X16780);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	set_cmt	(0X16784,	"data8",	0);
	set_cmt	(0X16786,	"addr8",	0);
	set_cmt	(0X16788,	"bus_n_bytes",	0);
	create_insn	(x=0X1678E);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X16792);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X16794);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_byte	(0X167A2);
	make_array	(0X167A2,	0X2);
	create_dword	(x=0X167A4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X167A8);
	create_dword	(x=0X167AC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X167B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X167B4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X167B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X167BC);
	create_dword	(x=0X167C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X167C4);
	set_cmt	(0X167C8,	"data8",	0);
	set_cmt	(0X167CA,	"addr8",	0);
	create_insn	(x=0X167CA);
	op_enum		(x,	1,	GetEnum("SPI_FPGA_REG_DEFINES"),0);
	set_cmt	(0X167CC,	"bus_n_bytes",	0);
	set_cmt	(0X167D6,	"addr8",	0);
	set_cmt	(0X167D8,	"bus_n_bytes",	0);
	set_cmt	(0X167DE,	"data8",	0);
	create_insn	(x=0X167DE);
	op_hex		(x,	1);
	set_cmt	(0X167E2,	"addr8",	0);
	create_insn	(x=0X167E2);
	op_enum		(x,	1,	GetEnum("SPI_FPGA_REG_DEFINES"),0);
	set_cmt	(0X167E4,	"bus_n_bytes",	0);
	set_cmt	(0X167EA,	"addr8",	0);
	set_cmt	(0X167EC,	"bus_n_bytes",	0);
	create_insn	(x=0X167F2);
	op_hex		(x,	1);
	set_cmt	(0X167F6,	"addr8",	0);
	set_cmt	(0X167F8,	"bus_n_bytes",	0);
	create_insn	(x=0X167FE);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X16804);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	set_cmt	(0X16808,	"data8",	0);
	set_cmt	(0X1680A,	"addr8",	0);
	set_cmt	(0X1680C,	"bus_n_bytes",	0);
	set_cmt	(0X16814,	"data8",	0);
	create_insn	(x=0X16814);
	op_hex		(x,	1);
	set_cmt	(0X16818,	"addr8",	0);
	create_insn	(x=0X16818);
	op_enum		(x,	1,	GetEnum("SPI_FPGA_REG_DEFINES"),0);
	set_cmt	(0X1681A,	"bus_n_bytes",	0);
	set_cmt	(0X1682A,	"addr8",	0);
	create_insn	(0X1682A);
	set_cmt	(0X1682C,	"bus_n_bytes",	0);
	set_cmt	(0X16832,	"data8",	0);
	create_insn	(x=0X16832);
	op_hex		(x,	1);
	set_cmt	(0X16836,	"addr8",	0);
	set_cmt	(0X16838,	"bus_n_bytes",	0);
	create_insn	(0X16846);
	create_insn	(x=0X16848);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_3(void) {
        auto x;
#define id x

	create_insn	(x=0X1684A);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(0X16850);
	set_name	(0X16850,	"fpga_set_receiver_id");
	set_cmt	(0X1685A,	"data8",	0);
	set_cmt	(0X1685C,	"addr8",	0);
	set_cmt	(0X1685E,	"bus_n_bytes",	0);
	set_cmt	(0X16864,	"data8",	0);
	set_cmt	(0X16866,	"addr8",	0);
	set_cmt	(0X16868,	"bus_n_bytes",	0);
	set_cmt	(0X1686E,	"data8",	0);
	set_cmt	(0X16870,	"addr8",	0);
	set_cmt	(0X16872,	"bus_n_bytes",	0);
	set_cmt	(0X16878,	"data8",	0);
	set_cmt	(0X1687A,	"addr8",	0);
	set_cmt	(0X1687C,	"bus_n_bytes",	0);
	set_cmt	(0X16882,	"data8",	0);
	set_cmt	(0X16884,	"addr8",	0);
	set_cmt	(0X16886,	"bus_n_bytes",	0);
	create_insn	(0X16896);
	create_insn	(x=0X16898);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1689C);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X168A2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X168A4);
	op_enum		(x,	1,	GetEnum("BoardVersion"),0);
	create_insn	(x=0X168AC);
	op_enum		(x,	1,	GetEnum("BoardVersion"),0);
	create_insn	(x=0X168B4);
	op_enum		(x,	1,	GetEnum("BoardVersion"),0);
	create_insn	(x=0X168B8);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	set_cmt	(0X168C4,	"addr8",	0);
	create_insn	(x=0X168C4);
	op_enum		(x,	1,	GetEnum("SPI_FPGA_REG_DEFINES"),0);
	set_cmt	(0X168C6,	"data8",	0);
	set_cmt	(0X168C8,	"bus_n_bytes",	0);
	create_insn	(x=0X168CE);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	set_cmt	(0X168D0,	"addr8",	0);
	create_insn	(x=0X168D0);
	op_enum		(x,	1,	GetEnum("SPI_FPGA_REG_DEFINES"),0);
	set_cmt	(0X168D8,	"data8",	0);
	set_cmt	(0X168DA,	"bus_n_bytes",	0);
	create_insn	(x=0X168E0);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	set_cmt	(0X168E2,	"addr8",	0);
	create_insn	(x=0X168E2);
	op_enum		(x,	1,	GetEnum("SPI_FPGA_REG_DEFINES"),0);
	set_cmt	(0X168EA,	"data8",	0);
	set_cmt	(0X168EC,	"bus_n_bytes",	0);
	create_insn	(x=0X168F2);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	set_cmt	(0X168F4,	"addr8",	0);
	create_insn	(x=0X168F4);
	op_enum		(x,	1,	GetEnum("SPI_FPGA_REG_DEFINES"),0);
	set_cmt	(0X168FA,	"data8",	0);
	set_cmt	(0X168FC,	"bus_n_bytes",	0);
	create_insn	(x=0X16908);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X1690C);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(0X16916);
	set_cmt	(0X16918,	"addr8",	0);
	set_cmt	(0X1691E,	"data8",	0);
	set_cmt	(0X16920,	"bus_n_bytes",	0);
	set_cmt	(0X16928,	"addr8",	0);
	set_cmt	(0X16930,	"data8",	0);
	set_cmt	(0X16932,	"bus_n_bytes",	0);
	set_cmt	(0X1693A,	"addr8",	0);
	set_cmt	(0X16942,	"data8",	0);
	set_cmt	(0X16944,	"bus_n_bytes",	0);
	set_cmt	(0X1694C,	"addr8",	0);
	set_cmt	(0X16954,	"data8",	0);
	set_cmt	(0X16956,	"bus_n_bytes",	0);
	set_cmt	(0X1695E,	"addr8",	0);
	set_cmt	(0X16966,	"data8",	0);
	set_cmt	(0X1696C,	"bus_n_bytes",	0);
	create_insn	(x=0X16972);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X16974,	"data8",	0);
	set_cmt	(0X16976,	"addr8",	0);
	set_cmt	(0X16978,	"bus_n_bytes",	0);
	create_insn	(0X16988);
	create_insn	(0X1698A);
	create_insn	(x=0X1698E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X16994);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X16998);
	op_stkvar	(x,	1);
	create_insn	(x=0X1699A);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X1699E);
	op_stkvar	(x,	1);
	create_insn	(x=0X169A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X169A6);
	op_enum		(x,	1,	GetEnum("BoardVersion"),0);
	create_insn	(x=0X169AE);
	op_enum		(x,	1,	GetEnum("BoardVersion"),0);
	create_insn	(x=0X169B6);
	op_enum		(x,	1,	GetEnum("BoardVersion"),0);
	create_insn	(x=0X169C4);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X169CA);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X169CC);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X169D0);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	set_cmt	(0X169D6,	"seed",	0);
	set_cmt	(0X169DA,	"len",	0);
	set_cmt	(0X169DC,	"buf",	0);
	set_cmt	(0X169E2,	"seed",	0);
	set_cmt	(0X169E4,	"len",	0);
	set_cmt	(0X169E6,	"buf",	0);
	create_insn	(x=0X169F4);
	op_hex		(x,	1);
	create_insn	(x=0X169FC);
	op_plain_offset	(x,	1,	0X100041D9);
	op_plain_offset	(x,	129,	0X100041D9);
	set_cmt	(0X16A1A,	"data8",	0);
	set_cmt	(0X16A1C,	"addr8",	0);
	create_insn	(x=0X16A1C);
	op_enum		(x,	1,	GetEnum("SPI_FPGA_REG_DEFINES"),0);
	set_cmt	(0X16A1E,	"bus_n_bytes",	0);
	set_cmt	(0X16A24,	"data8",	0);
	set_cmt	(0X16A26,	"addr8",	0);
	create_insn	(x=0X16A26);
	op_enum		(x,	1,	GetEnum("SPI_FPGA_REG_DEFINES"),0);
	set_cmt	(0X16A28,	"bus_n_bytes",	0);
	set_cmt	(0X16A2E,	"data8",	0);
	set_cmt	(0X16A30,	"addr8",	0);
	create_insn	(x=0X16A30);
	op_enum		(x,	1,	GetEnum("SPI_FPGA_REG_DEFINES"),0);
	set_cmt	(0X16A32,	"bus_n_bytes",	0);
	set_cmt	(0X16A38,	"data8",	0);
	set_cmt	(0X16A3A,	"addr8",	0);
	create_insn	(x=0X16A3A);
	op_enum		(x,	1,	GetEnum("SPI_FPGA_REG_DEFINES"),0);
	set_cmt	(0X16A3C,	"bus_n_bytes",	0);
	set_cmt	(0X16A42,	"data8",	0);
	set_cmt	(0X16A44,	"addr8",	0);
	create_insn	(x=0X16A44);
	op_enum		(x,	1,	GetEnum("SPI_FPGA_REG_DEFINES"),0);
	set_cmt	(0X16A46,	"bus_n_bytes",	0);
	set_cmt	(0X16A4C,	"data8",	0);
	set_cmt	(0X16A4E,	"addr8",	0);
	create_insn	(x=0X16A4E);
	op_enum		(x,	1,	GetEnum("SPI_FPGA_REG_DEFINES"),0);
	set_cmt	(0X16A50,	"bus_n_bytes",	0);
	set_cmt	(0X16A56,	"data8",	0);
	set_cmt	(0X16A58,	"addr8",	0);
	create_insn	(x=0X16A58);
	op_enum		(x,	1,	GetEnum("SPI_FPGA_REG_DEFINES"),0);
	set_cmt	(0X16A5A,	"bus_n_bytes",	0);
	set_cmt	(0X16A60,	"data8",	0);
	set_cmt	(0X16A62,	"addr8",	0);
	create_insn	(x=0X16A62);
	op_enum		(x,	1,	GetEnum("SPI_FPGA_REG_DEFINES"),0);
	set_cmt	(0X16A64,	"bus_n_bytes",	0);
	set_cmt	(0X16A72,	"data8",	0);
	set_cmt	(0X16A74,	"bus_n_bytes",	0);
	create_insn	(x=0X16A82);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X16A86);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X16A88);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X16A8E);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	set_cmt	(0X16A92,	"addr8",	0);
	set_cmt	(0X16A98,	"bus_n_bytes",	0);
	create_insn	(x=0X16AA2);
	op_hex		(x,	1);
	create_insn	(0X16AA8);
	create_insn	(0X16AAA);
	create_insn	(0X16AAC);
	create_insn	(0X16AB0);
	create_insn	(x=0X16AB4);
	op_hex		(x,	1);
	set_cmt	(0X16AB8,	"addr8",	0);
	set_cmt	(0X16ABA,	"bus_n_bytes",	0);
	create_insn	(x=0X16AC0);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X16AC4);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X16AD0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X16AD2);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(0X16AD8);
	create_insn	(x=0X16ADC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X16AE6);
	op_plain_offset	(x,	1,	0X100042A1);
	op_plain_offset	(x,	129,	0X100042A1);
	create_insn	(x=0X16AFE);
	op_enum		(x,	1,	GetEnum("BoardVersion"),0);
	create_insn	(x=0X16B06);
	op_enum		(x,	1,	GetEnum("BoardVersion"),0);
	create_insn	(x=0X16B0E);
	op_enum		(x,	1,	GetEnum("BoardVersion"),0);
	set_cmt	(0X16B12,	"addr8",	0);
	set_cmt	(0X16B14,	"bus_n_bytes",	0);
	set_cmt	(0X16B1C,	"addr8",	0);
	set_cmt	(0X16B1E,	"bus_n_bytes",	0);
	set_cmt	(0X16B28,	"addr8",	0);
	set_cmt	(0X16B2A,	"bus_n_bytes",	0);
	create_insn	(x=0X16B40);
	op_enum		(x,	1,	GetEnum("BoardVersion"),0);
	create_insn	(x=0X16B48);
	op_enum		(x,	1,	GetEnum("BoardVersion"),0);
	set_cmt	(0X16B54,	"addr8",	0);
	create_insn	(0X16B54);
	set_cmt	(0X16B56,	"bus_n_bytes",	0);
	set_cmt	(0X16B5E,	"addr8",	0);
	set_cmt	(0X16B60,	"bus_n_bytes",	0);
	create_insn	(0X16B6C);
	create_insn	(0X16B86);
	create_insn	(x=0X16BA6);
	op_plain_offset	(x,	1,	0X100042A1);
	op_plain_offset	(x,	129,	0X100042A1);
	create_insn	(x=0X16BAC);
	op_plain_offset	(x,	1,	0X100042A1);
	op_plain_offset	(x,	129,	0X100042A1);
	create_insn	(x=0X16BC4);
	op_plain_offset	(x,	1,	0X100042A1);
	op_plain_offset	(x,	129,	0X100042A1);
	create_insn	(x=0X16BD4);
	op_plain_offset	(x,	1,	0X100042A1);
	op_plain_offset	(x,	129,	0X100042A1);
	create_insn	(x=0X16BDC);
	op_plain_offset	(x,	1,	0X100042A1);
	op_plain_offset	(x,	129,	0X100042A1);
	create_insn	(0X16BF0);
	create_insn	(0X16BF2);
	create_insn	(x=0X16C04);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X16C06);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X16C0E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X16C10);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X16C16);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X16C1A);
	op_plain_offset	(x,	1,	0X100042A1);
	op_plain_offset	(x,	129,	0X100042A1);
	create_insn	(x=0X16C22);
	op_plain_offset	(x,	1,	0X100042A1);
	op_plain_offset	(x,	129,	0X100042A1);
	create_insn	(x=0X16C2A);
	op_plain_offset	(x,	1,	0X100042A1);
	op_plain_offset	(x,	129,	0X100042A1);
	create_insn	(0X16C32);
	create_dword	(x=0X16C34);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X16C38);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X16C3C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X16C40);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X16C44);
	create_dword	(0X16C48);
	create_dword	(0X16C4C);
	create_dword	(0X16C50);
	create_dword	(0X16C54);
	create_dword	(x=0X16C58);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X16C5C);
	op_plain_offset	(x,	1,	0X100042A1);
	op_plain_offset	(x,	129,	0X100042A1);
	create_insn	(x=0X16C64);
	op_plain_offset	(x,	1,	0X100042A1);
	op_plain_offset	(x,	129,	0X100042A1);
	create_insn	(x=0X16C6E);
	op_plain_offset	(x,	1,	0X100042A1);
	op_plain_offset	(x,	129,	0X100042A1);
	create_insn	(0X16C74);
	create_insn	(x=0X16C76);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X16C78);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X16C7C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X16C82);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X16C8A);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	create_insn	(x=0X16C8E);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	create_insn	(x=0X16C9A);
	op_plain_offset	(x,	1,	0X100040D0);
	op_plain_offset	(x,	129,	0X100040D0);
	create_insn	(x=0X16CA0);
	op_plain_offset	(x,	1,	0X100040D0);
	op_plain_offset	(x,	129,	0X100040D0);
	create_insn	(x=0X16CA6);
	op_plain_offset	(x,	1,	0X100040D0);
	op_plain_offset	(x,	129,	0X100040D0);
	create_insn	(x=0X16CB0);
	op_plain_offset	(x,	1,	0X100040D0);
	op_plain_offset	(x,	129,	0X100040D0);
	create_insn	(x=0X16CD0);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X16CD2);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X16CD4);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	create_insn	(x=0X16CD8);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X16CDA);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X16CE4);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	create_insn	(x=0X16CEC);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X16CF6);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X16CF8);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(0X16CFC);
	create_insn	(x=0X16CFE);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X16D00);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X16D02);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X16D04);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(0X16D08);
	create_insn	(0X16D20);
	create_insn	(0X16D2A);
	create_insn	(0X16D34);
	create_insn	(0X16D40);
	create_insn	(x=0X16D4C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X16D54);
	set_name	(0X16D54,	"tcx_config_update1");
	create_insn	(x=0X16D56);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X16D58);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X16D5C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X16D62);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X16D66);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	set_cmt	(0X16D6C,	"addr8",	0);
	set_cmt	(0X16D6E,	"bus_n_bytes",	0);
	create_insn	(x=0X16D74);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	set_cmt	(0X16D76,	"data8",	0);
	create_insn	(x=0X16D76);
	op_hex		(x,	1);
	set_cmt	(0X16D7A,	"addr8",	0);
	set_cmt	(0X16D7C,	"bus_n_bytes",	0);
	create_insn	(x=0X16D86);
	op_enum		(x,	1,	GetEnum("BoardVersion"),0);
	create_insn	(x=0X16D8E);
	op_enum		(x,	1,	GetEnum("BoardVersion"),0);
	set_cmt	(0X16D9A,	"wrflag",	0);
	create_insn	(0X16D9A);
	set_cmt	(0X16D9C,	"addr10",	0);
	create_insn	(x=0X16D9C);
	op_enum		(x,	1,	GetEnum("SPI_AD9363_REG_DEFINES"),0);
	set_cmt	(0X16DAA,	"val",	0);
	set_cmt	(0X16DAE,	"wrflag",	0);
	set_cmt	(0X16DB0,	"addr10",	0);
	create_insn	(x=0X16DB0);
	op_enum		(x,	1,	GetEnum("SPI_AD9363_REG_DEFINES"),0);
	set_cmt	(0X16DB6,	"wrflag",	0);
	set_cmt	(0X16DB8,	"addr10",	0);
	create_insn	(x=0X16DB8);
	op_enum		(x,	1,	GetEnum("SPI_AD9363_REG_DEFINES"),0);
	create_insn	(x=0X16DCC);
	op_enum		(x,	1,	GetEnum("SPI_AD9363_REG_DEFINES"),0);
	create_insn	(0X16DD0);
	set_cmt	(0X16DD6,	"addr8",	0);
	create_insn	(x=0X16DD6);
	op_enum		(x,	1,	GetEnum("SPI_FPGA_REG_DEFINES"),0);
	set_cmt	(0X16DD8,	"bus_n_bytes",	0);
	create_insn	(x=0X16DDE);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	set_cmt	(0X16DE6,	"data8",	0);
	create_insn	(x=0X16DE6);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	set_cmt	(0X16DEA,	"addr8",	0);
	create_insn	(x=0X16DEA);
	op_enum		(x,	1,	GetEnum("SPI_FPGA_REG_DEFINES"),0);
	set_cmt	(0X16DEC,	"bus_n_bytes",	0);
	create_insn	(x=0X16DF2);
	op_bin		(x,	1);
	set_cmt	(0X16DF8,	"wrflag",	0);
	set_cmt	(0X16DFA,	"addr10",	0);
	create_insn	(x=0X16DFA);
	op_enum		(x,	1,	GetEnum("SPI_AR9003_REG_DEFINES"),0);
	create_insn	(x=0X16E00);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	set_cmt	(0X16E08,	"val",	0);
	create_insn	(x=0X16E08);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	set_cmt	(0X16E0C,	"wrflag",	0);
	set_cmt	(0X16E0E,	"addr10",	0);
	create_insn	(x=0X16E0E);
	op_enum		(x,	1,	GetEnum("SPI_AR9003_REG_DEFINES"),0);
	set_cmt	(0X16E14,	"wrflag",	0);
	set_cmt	(0X16E16,	"addr10",	0);
	create_insn	(x=0X16E16);
	op_enum		(x,	1,	GetEnum("SPI_AR9003_REG_DEFINES"),0);
	create_insn	(x=0X16E1C);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	set_cmt	(0X16E24,	"val",	0);
	create_insn	(x=0X16E24);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	set_cmt	(0X16E28,	"wrflag",	0);
	set_cmt	(0X16E2A,	"addr10",	0);
	create_insn	(x=0X16E2A);
	op_enum		(x,	1,	GetEnum("SPI_AR9003_REG_DEFINES"),0);
	set_cmt	(0X16E30,	"data8",	0);
	create_insn	(x=0X16E30);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	set_cmt	(0X16E32,	"addr8",	0);
	set_cmt	(0X16E34,	"bus_n_bytes",	0);
	create_insn	(x=0X16E3A);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X16E3E);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X16E40);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X16E48);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X16E50);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X16E52);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X16E5A);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	set_cmt	(0X16E60,	"addr8",	0);
	set_cmt	(0X16E62,	"bus_n_bytes",	0);
	create_insn	(x=0X16E68);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	set_cmt	(0X16E6A,	"data8",	0);
	create_insn	(x=0X16E6A);
	op_hex		(x,	1);
	set_cmt	(0X16E6E,	"addr8",	0);
	set_cmt	(0X16E70,	"bus_n_bytes",	0);
	create_insn	(x=0X16E76);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X16E80);
	op_enum		(x,	1,	GetEnum("BoardVersion"),0);
	set_cmt	(0X16E84,	"wrflag",	0);
	set_cmt	(0X16E86,	"val",	0);
	set_cmt	(0X16E88,	"addr10",	0);
	create_insn	(x=0X16E88);
	op_enum		(x,	1,	GetEnum("SPI_AD9363_REG_DEFINES"),0);
	create_insn	(0X16E94);
	set_cmt	(0X16E9A,	"data8",	0);
	set_cmt	(0X16E9C,	"addr8",	0);
	create_insn	(x=0X16E9C);
	op_enum		(x,	1,	GetEnum("SPI_FPGA_REG_DEFINES"),0);
	set_cmt	(0X16E9E,	"bus_n_bytes",	0);
	set_cmt	(0X16EAA,	"wrflag",	0);
	set_cmt	(0X16EAC,	"val",	0);
	set_cmt	(0X16EAE,	"addr10",	0);
	create_insn	(x=0X16EAE);
	op_enum		(x,	1,	GetEnum("SPI_AR9003_REG_DEFINES"),0);
	create_insn	(x=0X16EB8);
	op_enum		(x,	1,	GetEnum("SPI_AR9003_REG_DEFINES"),0);
	create_insn	(0X16EBC);
	create_insn	(x=0X16EC0);
	op_enum		(x,	1,	GetEnum("BoardVersion"),0);
	create_insn	(x=0X16EC8);
	op_enum		(x,	1,	GetEnum("BoardVersion"),0);
	set_cmt	(0X16ECE,	"wrflag",	0);
	create_insn	(0X16ECE);
	set_cmt	(0X16ED0,	"val",	0);
	set_cmt	(0X16ED2,	"addr10",	0);
	create_insn	(x=0X16ED2);
	op_enum		(x,	1,	GetEnum("SPI_AD9363_REG_DEFINES"),0);
	set_cmt	(0X16ED8,	"wrflag",	0);
	set_cmt	(0X16EDA,	"val",	0);
	set_cmt	(0X16EDC,	"addr10",	0);
	create_insn	(x=0X16EDC);
	op_enum		(x,	1,	GetEnum("SPI_AD9363_REG_DEFINES"),0);
	set_cmt	(0X16EE4,	"data8",	0);
	create_insn	(x=0X16EE4);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	set_cmt	(0X16EE6,	"addr8",	0);
	set_cmt	(0X16EE8,	"bus_n_bytes",	0);
	create_insn	(x=0X16EEE);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X16EF2);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X16EF6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X16EFA);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X16EFE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X16F00);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X16F06);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X16F0A);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X16F18);
	op_hex		(x,	1);
	set_cmt	(0X16F1E,	"addr8",	0);
	create_insn	(x=0X16F1E);
	op_enum		(x,	1,	GetEnum("SPI_FPGA_REG_DEFINES"),0);
	set_cmt	(0X16F20,	"bus_n_bytes",	0);
	set_cmt	(0X16F26,	"data8",	0);
	create_insn	(x=0X16F26);
	op_hex		(x,	1);
	set_cmt	(0X16F2A,	"addr8",	0);
	set_cmt	(0X16F2C,	"bus_n_bytes",	0);
	set_cmt	(0X16F32,	"wrflag",	0);
	set_cmt	(0X16F34,	"val",	0);
	set_cmt	(0X16F36,	"addr10",	0);
	create_insn	(x=0X16F36);
	op_enum		(x,	1,	GetEnum("SPI_AD9363_REG_DEFINES"),0);
	set_cmt	(0X16F3C,	"wrflag",	0);
	set_cmt	(0X16F3E,	"val",	0);
	set_cmt	(0X16F40,	"addr10",	0);
	create_insn	(x=0X16F40);
	op_enum		(x,	1,	GetEnum("SPI_AD9363_REG_DEFINES"),0);
	set_cmt	(0X16F46,	"data8",	0);
	set_cmt	(0X16F48,	"addr8",	0);
	create_insn	(x=0X16F48);
	op_enum		(x,	1,	GetEnum("SPI_FPGA_REG_DEFINES"),0);
	set_cmt	(0X16F4A,	"bus_n_bytes",	0);
	set_cmt	(0X16F50,	"data8",	0);
	set_cmt	(0X16F52,	"addr8",	0);
	create_insn	(x=0X16F52);
	op_enum		(x,	1,	GetEnum("SPI_FPGA_REG_DEFINES"),0);
	set_cmt	(0X16F54,	"bus_n_bytes",	0);
	set_cmt	(0X16F5A,	"data8",	0);
	set_cmt	(0X16F5C,	"addr8",	0);
	create_insn	(x=0X16F5C);
	op_enum		(x,	1,	GetEnum("SPI_FPGA_REG_DEFINES"),0);
	set_cmt	(0X16F5E,	"bus_n_bytes",	0);
	set_cmt	(0X16F64,	"data8",	0);
	set_cmt	(0X16F66,	"addr8",	0);
	create_insn	(x=0X16F66);
	op_enum		(x,	1,	GetEnum("SPI_FPGA_REG_DEFINES"),0);
	set_cmt	(0X16F68,	"bus_n_bytes",	0);
	set_cmt	(0X16F6E,	"data8",	0);
	set_cmt	(0X16F70,	"addr8",	0);
	set_cmt	(0X16F72,	"bus_n_bytes",	0);
	set_cmt	(0X16F78,	"data8",	0);
	set_cmt	(0X16F7A,	"addr8",	0);
	create_insn	(x=0X16F7A);
	op_enum		(x,	1,	GetEnum("SPI_FPGA_REG_DEFINES"),0);
	set_cmt	(0X16F7C,	"bus_n_bytes",	0);
	set_cmt	(0X16F82,	"data8",	0);
	set_cmt	(0X16F84,	"addr8",	0);
	create_insn	(x=0X16F84);
	op_enum		(x,	1,	GetEnum("SPI_FPGA_REG_DEFINES"),0);
	set_cmt	(0X16F86,	"bus_n_bytes",	0);
	set_cmt	(0X16F8C,	"data8",	0);
	set_cmt	(0X16F8E,	"addr8",	0);
	create_insn	(x=0X16F8E);
	op_enum		(x,	1,	GetEnum("SPI_FPGA_REG_DEFINES"),0);
	set_cmt	(0X16F90,	"bus_n_bytes",	0);
	set_cmt	(0X16F96,	"data8",	0);
	set_cmt	(0X16F98,	"addr8",	0);
	create_insn	(x=0X16F98);
	op_enum		(x,	1,	GetEnum("SPI_FPGA_REG_DEFINES"),0);
	set_cmt	(0X16F9A,	"bus_n_bytes",	0);
	set_cmt	(0X16FA0,	"data8",	0);
	set_cmt	(0X16FA2,	"addr8",	0);
	create_insn	(x=0X16FA2);
	op_enum		(x,	1,	GetEnum("SPI_FPGA_REG_DEFINES"),0);
	set_cmt	(0X16FA4,	"bus_n_bytes",	0);
	set_cmt	(0X16FAA,	"addr8",	0);
	set_cmt	(0X16FAC,	"bus_n_bytes",	0);
	create_insn	(x=0X16FB2);
	op_hex		(x,	1);
	set_cmt	(0X16FB6,	"addr8",	0);
	set_cmt	(0X16FBC,	"bus_n_bytes",	0);
	create_insn	(0X16FC2);
	create_insn	(x=0X16FC4);
	op_hex		(x,	1);
	set_cmt	(0X16FCA,	"addr8",	0);
	set_cmt	(0X16FCC,	"bus_n_bytes",	0);
	set_cmt	(0X16FD2,	"data8",	0);
	create_insn	(x=0X16FD2);
	op_hex		(x,	1);
	set_cmt	(0X16FD6,	"addr8",	0);
	create_insn	(x=0X16FD6);
	op_enum		(x,	1,	GetEnum("SPI_AD9363_REG_DEFINES"),0);
	set_cmt	(0X16FD8,	"bus_n_bytes",	0);
	set_cmt	(0X16FDE,	"wrflag",	0);
	set_cmt	(0X16FE0,	"val",	0);
	set_cmt	(0X16FE2,	"addr10",	0);
	create_insn	(x=0X16FE2);
	op_enum		(x,	1,	GetEnum("SPI_AD9363_REG_DEFINES"),0);
	set_cmt	(0X16FE8,	"wrflag",	0);
	set_cmt	(0X16FEA,	"val",	0);
	set_cmt	(0X16FEC,	"addr10",	0);
	create_insn	(x=0X16FEC);
	op_enum		(x,	1,	GetEnum("SPI_AD9363_REG_DEFINES"),0);
	set_cmt	(0X16FF2,	"data8",	0);
	set_cmt	(0X16FF4,	"addr8",	0);
	create_insn	(x=0X16FF4);
	op_enum		(x,	1,	GetEnum("SPI_FPGA_REG_DEFINES"),0);
	set_cmt	(0X16FF6,	"bus_n_bytes",	0);
	set_cmt	(0X16FFC,	"data8",	0);
	set_cmt	(0X16FFE,	"addr8",	0);
	create_insn	(x=0X16FFE);
	op_enum		(x,	1,	GetEnum("SPI_FPGA_REG_DEFINES"),0);
	set_cmt	(0X17000,	"bus_n_bytes",	0);
	create_insn	(0X17004);
	create_insn	(0X17006);
	set_cmt	(0X1700A,	"data8",	0);
	set_cmt	(0X1700C,	"addr8",	0);
	create_insn	(x=0X1700C);
	op_enum		(x,	1,	GetEnum("SPI_FPGA_REG_DEFINES"),0);
	set_cmt	(0X1700E,	"bus_n_bytes",	0);
	set_cmt	(0X17014,	"data8",	0);
	set_cmt	(0X17016,	"addr8",	0);
	create_insn	(x=0X17016);
	op_enum		(x,	1,	GetEnum("SPI_FPGA_REG_DEFINES"),0);
	set_cmt	(0X17018,	"bus_n_bytes",	0);
	set_cmt	(0X1701E,	"data8",	0);
	set_cmt	(0X17020,	"addr8",	0);
	set_cmt	(0X17022,	"bus_n_bytes",	0);
	set_cmt	(0X17028,	"data8",	0);
	set_cmt	(0X1702A,	"addr8",	0);
	create_insn	(x=0X1702A);
	op_enum		(x,	1,	GetEnum("SPI_FPGA_REG_DEFINES"),0);
	set_cmt	(0X1702C,	"bus_n_bytes",	0);
	set_cmt	(0X17032,	"data8",	0);
	set_cmt	(0X17034,	"addr8",	0);
	set_cmt	(0X17036,	"bus_n_bytes",	0);
	set_cmt	(0X1703C,	"data8",	0);
	set_cmt	(0X1703E,	"addr8",	0);
	create_insn	(x=0X1703E);
	op_enum		(x,	1,	GetEnum("SPI_FPGA_REG_DEFINES"),0);
	set_cmt	(0X17040,	"bus_n_bytes",	0);
	set_cmt	(0X17046,	"data8",	0);
	set_cmt	(0X17048,	"addr8",	0);
	create_insn	(x=0X17048);
	op_enum		(x,	1,	GetEnum("SPI_FPGA_REG_DEFINES"),0);
	set_cmt	(0X1704A,	"bus_n_bytes",	0);
	create_dword	(x=0X17054);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X17058);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1705C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X17060);
	create_insn	(0X17062);
	create_insn	(0X17070);
	create_insn	(0X17084);
	create_insn	(x=0X17086);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17088);
	op_plain_offset	(x,	1,	0X100042D0);
	op_plain_offset	(x,	129,	0X100042D0);
	create_insn	(x=0X1708C);
	op_stkvar	(x,	1);
	create_insn	(x=0X17090);
	op_stkvar	(x,	1);
	create_insn	(x=0X1709A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1709E);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(0X170BE);
	create_insn	(x=0X170C2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X170C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X170C6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X170D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X170DA);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(0X170EE);
	create_insn	(x=0X170F0);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(0X170F6);
	create_insn	(x=0X170F8);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X170FE);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X1710A);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17110);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17112);
	op_hex		(x,	1);
	create_insn	(x=0X17118);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1711A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17124);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	set_cmt	(0X17126,	"addr8",	0);
	set_cmt	(0X17128,	"bus_n_bytes",	0);
	create_insn	(x=0X1712E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17132);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	set_cmt	(0X17134,	"addr8",	0);
	set_cmt	(0X17136,	"bus_n_bytes",	0);
	create_insn	(x=0X1713C);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	create_insn	(x=0X17140);
	op_hex		(x,	1);
	create_insn	(x=0X17146);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	create_insn	(x=0X1714A);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X1714C);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X1714E);
	op_hex		(x,	1);
	create_insn	(x=0X17156);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X1715E);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X17162);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X17164);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	create_insn	(x=0X17166);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X1716C);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17172);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17174);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17176);
	op_hex		(x,	1);
	create_insn	(x=0X1717A);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17180);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X17186);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X1718C);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X17190);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17196);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17198);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X1719A);
	op_hex		(x,	1);
	create_insn	(x=0X1719E);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X171A2);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(0X171A6);
	set_name	(0X171A6,	"unkn4_IRQHandler");
	create_insn	(x=0X171A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X171AE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X171C0,	"addr8",	0);
	set_cmt	(0X171C2,	"bus_n_bytes",	0);
	create_insn	(x=0X171C8);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	set_cmt	(0X171CA,	"addr8",	0);
	set_cmt	(0X171CC,	"bus_n_bytes",	0);
	create_insn	(x=0X171D2);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	set_cmt	(0X171D4,	"addr8",	0);
	set_cmt	(0X171D6,	"bus_n_bytes",	0);
	create_insn	(x=0X171DC);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	set_cmt	(0X171DE,	"addr8",	0);
	set_cmt	(0X171E0,	"bus_n_bytes",	0);
	create_insn	(x=0X171E6);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	set_cmt	(0X171E8,	"addr8",	0);
	set_cmt	(0X171EA,	"bus_n_bytes",	0);
	create_insn	(x=0X171F0);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	create_insn	(x=0X171F2);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	create_insn	(x=0X171F4);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X171F8);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	create_insn	(x=0X171FA);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	set_cmt	(0X171FE,	"p_err",	0);
	set_cmt	(0X17200,	"opt",	0);
	set_cmt	(0X17204,	"p_sem",	0);
	create_insn	(x=0X17204);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1721E);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17224);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	set_cmt	(0X1722C,	"addr8",	0);
	set_cmt	(0X1722E,	"bus_n_bytes",	0);
	create_insn	(x=0X17234);
	op_hex		(x,	1);
	set_cmt	(0X17238,	"addr8",	0);
	set_cmt	(0X1723A,	"bus_n_bytes",	0);
	set_cmt	(0X17240,	"addr8",	0);
	set_cmt	(0X17242,	"bus_n_bytes",	0);
	set_cmt	(0X17248,	"data8",	0);
	create_insn	(x=0X17248);
	op_hex		(x,	1);
	set_cmt	(0X1724C,	"addr8",	0);
	set_cmt	(0X1724E,	"bus_n_bytes",	0);
	set_cmt	(0X17258,	"addr8",	0);
	set_cmt	(0X1725A,	"bus_n_bytes",	0);
	set_cmt	(0X17262,	"addr8",	0);
	set_cmt	(0X17264,	"bus_n_bytes",	0);
	create_insn	(x=0X1726A);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	set_cmt	(0X1726C,	"addr8",	0);
	set_cmt	(0X1726E,	"bus_n_bytes",	0);
	create_insn	(x=0X17274);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	set_cmt	(0X17276,	"addr8",	0);
	set_cmt	(0X17278,	"bus_n_bytes",	0);
	create_insn	(x=0X1727E);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	set_cmt	(0X17280,	"addr8",	0);
	set_cmt	(0X17282,	"bus_n_bytes",	0);
	create_insn	(x=0X17288);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	set_cmt	(0X1728A,	"addr8",	0);
	set_cmt	(0X1728C,	"bus_n_bytes",	0);
	create_insn	(x=0X17292);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	set_cmt	(0X17294,	"addr8",	0);
	set_cmt	(0X17296,	"bus_n_bytes",	0);
	create_insn	(x=0X1729C);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	set_cmt	(0X1729E,	"addr8",	0);
	set_cmt	(0X172A0,	"bus_n_bytes",	0);
	create_insn	(x=0X172A6);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	set_cmt	(0X172A8,	"addr8",	0);
	set_cmt	(0X172AA,	"bus_n_bytes",	0);
	create_insn	(x=0X172B0);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	set_cmt	(0X172B2,	"addr8",	0);
	set_cmt	(0X172B4,	"bus_n_bytes",	0);
	create_insn	(x=0X172BA);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	set_cmt	(0X172BC,	"addr8",	0);
	set_cmt	(0X172BE,	"bus_n_bytes",	0);
	create_insn	(x=0X172C4);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	set_cmt	(0X172C6,	"addr8",	0);
	set_cmt	(0X172C8,	"bus_n_bytes",	0);
	create_insn	(x=0X172CE);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	set_cmt	(0X172D0,	"addr8",	0);
	set_cmt	(0X172D2,	"bus_n_bytes",	0);
	create_insn	(x=0X172D8);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	set_cmt	(0X172DA,	"addr8",	0);
	set_cmt	(0X172DC,	"bus_n_bytes",	0);
	create_insn	(x=0X172E2);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	set_cmt	(0X172E4,	"addr8",	0);
	set_cmt	(0X172E6,	"bus_n_bytes",	0);
	create_insn	(x=0X172EC);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	set_cmt	(0X172EE,	"addr8",	0);
	set_cmt	(0X172F0,	"bus_n_bytes",	0);
	create_insn	(x=0X172F6);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	set_cmt	(0X172F8,	"addr8",	0);
	set_cmt	(0X172FA,	"bus_n_bytes",	0);
	create_insn	(x=0X17300);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	set_cmt	(0X17302,	"addr8",	0);
	set_cmt	(0X17304,	"bus_n_bytes",	0);
	create_insn	(x=0X1730A);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	set_cmt	(0X1730C,	"addr8",	0);
	set_cmt	(0X1730E,	"bus_n_bytes",	0);
	create_insn	(x=0X17314);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	set_cmt	(0X17316,	"addr8",	0);
	set_cmt	(0X17318,	"bus_n_bytes",	0);
	create_insn	(x=0X1731E);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	create_insn	(x=0X17320);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X17322,	"a3",	0);
	set_cmt	(0X17324,	"a1",	0);
	set_cmt	(0X17326,	"param_buf",	0);
	create_insn	(x=0X17326);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17334);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	set_cmt	(0X1733E,	"addr8",	0);
	set_cmt	(0X17340,	"bus_n_bytes",	0);
	create_insn	(x=0X17346);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	set_cmt	(0X1734C,	"addr8",	0);
	set_cmt	(0X1734E,	"bus_n_bytes",	0);
	create_insn	(0X17352);
	create_insn	(0X17354);
	create_insn	(x=0X17358);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	set_cmt	(0X1735E,	"addr8",	0);
	set_cmt	(0X17360,	"bus_n_bytes",	0);
	create_insn	(x=0X17366);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	set_cmt	(0X1736C,	"addr8",	0);
	set_cmt	(0X1736E,	"bus_n_bytes",	0);
	create_insn	(x=0X17374);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X1737C);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17380);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X1738A);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17390);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17396);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X1739C);
	op_hex		(x,	1);
	set_cmt	(0X173A0,	"switch 8 cases ",	0);
	set_cmt	(0X173A4,	"switch jump",	0);
	set_cmt	(0X173A8,	"jump table for switch statement",	0);
	create_byte	(0X173A8);
	set_name	(0X173A8,	"jpt_D3A4");
	create_byte	(0X173A9);
	create_byte	(0X173AA);
	create_byte	(0X173AB);
	create_byte	(0X173AC);
	create_byte	(0X173AD);
	create_byte	(0X173AE);
	create_byte	(0X173AF);
	set_cmt	(0X173B0,	"jumptable 0000D3A4 case 0",	1);
	create_insn	(0X173B0);
	set_cmt	(0X173B6,	"jumptable 0000D3A4 case 1",	1);
	create_insn	(0X173B6);
	create_insn	(x=0X173BA);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	set_cmt	(0X173C0,	"jumptable 0000D3A4 case 5",	1);
	create_insn	(0X173C0);
	set_cmt	(0X173C6,	"jumptable 0000D3A4 case 2",	1);
	create_insn	(0X173C6);
	set_cmt	(0X173CC,	"jumptable 0000D3A4 case 3",	1);
	create_insn	(0X173CC);
	set_cmt	(0X173D2,	"jumptable 0000D3A4 case 7",	1);
	create_insn	(0X173D2);
	set_cmt	(0X173D8,	"jumptable 0000D3A4 default case",	1);
	create_insn	(0X173D8);
	set_name	(0X173D8,	"def_D3A4");
	create_insn	(0X173EA);
	create_insn	(x=0X173EC);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X173F0);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X173F4);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X173FA);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X173FE);
	op_hex		(x,	1);
	create_insn	(x=0X17404);
	op_hex		(x,	1);
	create_insn	(x=0X17408);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X1740A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1740C);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X17426);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17428);
	op_hex		(x,	1);
	create_insn	(x=0X1742E);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17432);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X1743A);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(0X1743E);
	create_insn	(x=0X17446);
	op_hex		(x,	1);
	create_insn	(x=0X17450);
	op_hex		(x,	1);
	create_insn	(x=0X17456);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1745A);
	op_plain_offset	(x,	1,	0X40008000);
	op_plain_offset	(x,	129,	0X40008000);
	create_insn	(x=0X17462);
	op_plain_offset	(x,	1,	0X40008000);
	op_plain_offset	(x,	129,	0X40008000);
	create_insn	(x=0X17464);
	op_plain_offset	(x,	1,	0X40008000);
	op_plain_offset	(x,	129,	0X40008000);
	create_insn	(x=0X17468);
	op_plain_offset	(x,	1,	0X40008000);
	op_plain_offset	(x,	129,	0X40008000);
	create_insn	(x=0X1746E);
	op_plain_offset	(x,	1,	0X40008000);
	op_plain_offset	(x,	129,	0X40008000);
	create_insn	(x=0X17474);
	op_plain_offset	(x,	1,	0X40008000);
	op_plain_offset	(x,	129,	0X40008000);
	create_insn	(x=0X1747A);
	op_plain_offset	(x,	1,	0X40008000);
	op_plain_offset	(x,	129,	0X40008000);
	create_byte	(0X1747E);
	make_array	(0X1747E,	0X2);
	create_dword	(x=0X17480);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X17484);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X17488);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1748C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X17490);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X17494);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X17498);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1749C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X1749C,	"p_err");
	create_dword	(x=0X174A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X174A4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X174A8);
	create_insn	(0X174AC);
	create_insn	(x=0X174B0);
	op_plain_offset	(x,	1,	0X40008000);
	op_plain_offset	(x,	129,	0X40008000);
	create_insn	(x=0X174B6);
	op_plain_offset	(x,	1,	0X40008000);
	op_plain_offset	(x,	129,	0X40008000);
	set_cmt	(0X174B8,	"handler",	0);
	create_insn	(x=0X174B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X174BC,	"num",	0);
	create_insn	(x=0X174D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X174D8);
	op_plain_offset	(x,	1,	0X40008000);
	op_plain_offset	(x,	129,	0X40008000);
	create_insn	(x=0X174DE);
	op_plain_offset	(x,	1,	0X40008000);
	op_plain_offset	(x,	129,	0X40008000);
	create_insn	(x=0X174E2);
	op_plain_offset	(x,	1,	0X40008000);
	op_plain_offset	(x,	129,	0X40008000);
	create_insn	(x=0X174E6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X174EA);
	op_plain_offset	(x,	1,	0X40008000);
	op_plain_offset	(x,	129,	0X40008000);
	create_insn	(x=0X174EE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X174F0);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X174F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X174FC);
	op_plain_offset	(x,	1,	0X40008000);
	op_plain_offset	(x,	129,	0X40008000);
	create_insn	(x=0X17502);
	op_plain_offset	(x,	1,	0X40008000);
	op_plain_offset	(x,	129,	0X40008000);
	create_insn	(x=0X17506);
	op_plain_offset	(x,	1,	0X40008000);
	op_plain_offset	(x,	129,	0X40008000);
	create_insn	(x=0X1750A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X1750A,	"unkn3_IRQHandler");
	create_insn	(x=0X1750E);
	op_plain_offset	(x,	1,	0X40028000);
	op_plain_offset	(x,	129,	0X40028000);
	create_insn	(x=0X17512);
	op_hex		(x,	1);
	create_insn	(x=0X1751C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17520);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17526);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1752A);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X1752C);
	op_hex		(x,	1);
	create_insn	(x=0X17530);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X17532);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17536);
	op_hex		(x,	1);
	set_cmt	(0X1753C,	"handler",	0);
	create_insn	(x=0X1753C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X17540,	"num",	0);
	create_insn	(x=0X17550);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17552);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17558);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(0X1755C);
	create_insn	(x=0X17566);
	op_stkvar	(x,	1);
	create_insn	(x=0X17568);
	op_stkvar	(x,	1);
	create_insn	(x=0X1756A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1756C);
	op_stkvar	(x,	1);
	create_insn	(x=0X17576);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17580);
	op_plain_offset	(x,	1,	0X100041D0);
	op_plain_offset	(x,	129,	0X100041D0);
	create_insn	(x=0X17586);
	op_plain_offset	(x,	1,	0X100041D0);
	op_plain_offset	(x,	129,	0X100041D0);
	create_insn	(x=0X1758A);
	op_plain_offset	(x,	1,	0X100041D0);
	op_plain_offset	(x,	129,	0X100041D0);
	create_insn	(x=0X1758E);
	op_plain_offset	(x,	1,	0X100041D0);
	op_plain_offset	(x,	129,	0X100041D0);
	create_insn	(x=0X17596);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X175AA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X175AC);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X175B0);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X175B4);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X175B6);
	op_hex		(x,	1);
	create_insn	(x=0X175BE);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X175C0);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X175C2);
	op_hex		(x,	1);
	create_insn	(x=0X175CA);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X175CC);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X175CE);
	op_hex		(x,	1);
	create_insn	(x=0X175D2);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X175D4);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X175D6);
	op_hex		(x,	1);
	create_insn	(x=0X175DA);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X175DE);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X175E2);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X175E4);
	op_hex		(x,	1);
	create_insn	(x=0X175EA);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X175EC);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X175EE);
	op_hex		(x,	1);
	create_insn	(x=0X175F2);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X175F4);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X175F6);
	op_hex		(x,	1);
	create_insn	(x=0X175FA);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X175FC);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17600);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17604);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17608);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X1760C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17612);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17614);
	op_hex		(x,	1);
	create_insn	(x=0X1761E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17624);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17626);
	op_hex		(x,	1);
	create_insn	(x=0X17630);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17632);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17634);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1763E);
	op_enum		(x,	1,	GetEnum("BoardVersion"),0);
	create_insn	(x=0X17646);
	op_enum		(x,	1,	GetEnum("BoardVersion"),0);
	create_insn	(x=0X1764E);
	op_enum		(x,	1,	GetEnum("BoardVersion"),0);
	create_insn	(x=0X17652);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17666);
	op_plain_offset	(x,	1,	0X100042A1);
	op_plain_offset	(x,	129,	0X100042A1);
	create_insn	(x=0X1766A);
	op_plain_offset	(x,	1,	0X100042A1);
	op_plain_offset	(x,	129,	0X100042A1);
	create_insn	(x=0X1767E);
	op_plain_offset	(x,	1,	0X100042A1);
	op_plain_offset	(x,	129,	0X100042A1);
	create_insn	(x=0X17682);
	op_plain_offset	(x,	1,	0X100042A1);
	op_plain_offset	(x,	129,	0X100042A1);
	create_insn	(x=0X17686);
	op_plain_offset	(x,	1,	0X100042A1);
	op_plain_offset	(x,	129,	0X100042A1);
	create_insn	(x=0X1768C);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X1768E);
	op_hex		(x,	1);
	create_insn	(x=0X17692);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17694);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17698);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X1769E);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X176A4);
	op_plain_offset	(x,	1,	0X10004442);
	op_plain_offset	(x,	129,	0X10004442);
	create_insn	(x=0X176AA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X176AC);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X176B0);
	op_plain_offset	(x,	1,	0X100041D0);
	op_plain_offset	(x,	129,	0X100041D0);
	create_insn	(x=0X176B6);
	op_plain_offset	(x,	1,	0X100041D0);
	op_plain_offset	(x,	129,	0X100041D0);
	create_insn	(x=0X176BC);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X176BE);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X176DC);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(0X176E8);
	create_insn	(0X176EE);
	create_insn	(x=0X176F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X176FA);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17702);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17704);
	op_plain_offset	(x,	1,	0X40028000);
	op_plain_offset	(x,	129,	0X40028000);
	create_insn	(x=0X17708);
	op_hex		(x,	1);
	create_insn	(x=0X17710);
	op_hex		(x,	1);
	create_insn	(x=0X17718);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X1771E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17720);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17728);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1772A);
	op_plain_offset	(x,	1,	0X40028000);
	op_plain_offset	(x,	129,	0X40028000);
	create_insn	(x=0X1772E);
	op_hex		(x,	1);
	create_insn	(x=0X17736);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X1773A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1773E);
	op_plain_offset	(x,	1,	0X40008000);
	op_plain_offset	(x,	129,	0X40008000);
	create_insn	(0X17742);
	create_insn	(x=0X17744);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17746);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17764);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17766);
	op_hex		(x,	1);
	create_insn	(x=0X1776A);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17774);
	op_plain_offset	(x,	1,	0X10004442);
	op_plain_offset	(x,	129,	0X10004442);
	create_insn	(0X1777E);
	create_insn	(x=0X17780);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17784);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17788);
	op_hex		(x,	1);
	create_insn	(x=0X1778C);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(0X17790);
	create_insn	(x=0X1779E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X177A8);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X177AA);
	op_hex		(x,	1);
	create_insn	(x=0X177AE);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X177B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X177BC);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X177C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X177C4);
	op_plain_offset	(x,	1,	0X100041D0);
	op_plain_offset	(x,	129,	0X100041D0);
	create_insn	(x=0X177D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X177D4);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X177DA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X177E0);
	op_plain_offset	(x,	1,	0X100041D0);
	op_plain_offset	(x,	129,	0X100041D0);
	create_insn	(0X177E8);
	create_insn	(x=0X177EA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X177F0);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	create_insn	(x=0X177F2);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	create_insn	(x=0X177FA);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	create_insn	(x=0X177FC);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	create_insn	(x=0X17802);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	create_insn	(x=0X17806);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	create_insn	(x=0X17808);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	create_insn	(x=0X1780A);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	create_insn	(x=0X17810);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	create_insn	(x=0X17812);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	create_insn	(x=0X17814);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	create_insn	(x=0X1781A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1781E);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X17822);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X1782A);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X17830);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17836);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X1783A);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17844);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17846);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17848);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X1784C);
	op_plain_offset	(x,	1,	0X100005E8);
	op_plain_offset	(x,	129,	0X100005E8);
	create_insn	(x=0X1785A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1785E);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X17860);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17864);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X17866);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X1786C);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17870);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X1787C);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X1788A);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17890);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17894);
	op_hex		(x,	1);
	create_insn	(x=0X1789A);
	op_hex		(x,	1);
	create_insn	(x=0X1789E);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X178A6);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X178AA);
	op_hex		(x,	1);
	create_insn	(x=0X178B0);
	op_hex		(x,	1);
	create_insn	(x=0X178B4);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_dword	(x=0X178BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X178C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X178C4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X178C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X178CC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X178D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X178D4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X178D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X178DC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X178E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X178E4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X178E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X178EC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X178F0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X178F0,	"set_transciever_flag_20001A28_E");
	create_insn	(x=0X178F4);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X178F8);
	op_hex		(x,	1);
	create_insn	(x=0X178FE);
	op_hex		(x,	1);
	create_insn	(x=0X17902);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17906);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X17906,	"set_transciever_flag_20001A28_D");
	create_insn	(x=0X17908);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X1790E);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17912);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X17912,	"get_transciever_flag_20001A28_D");
	create_insn	(x=0X17914);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(0X1791C);
	set_name	(0X1791C,	"set_transciever_flag_20001A28_B");
	create_insn	(x=0X17920);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17922);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17924);
	op_hex		(x,	1);
	create_insn	(x=0X1792C);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X1792E);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17934);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17938);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1793A);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(0X17942);
	set_name	(0X17942,	"set_transciever_flag_20001A28_C");
	create_insn	(x=0X17946);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17948);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X1794E);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17952);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17954);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X1795C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X1795C,	"update_tcx_power_zone_flag");
	create_insn	(x=0X1795E);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17966);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X1796C);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17970);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17972);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17978);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X17978,	"set_transciever_attenuation");
	create_insn	(x=0X1797A);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17980);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X17980,	"get_transciever_attenuation");
	create_insn	(x=0X17982);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17988);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1798C);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17990);
	op_hex		(x,	1);
	create_insn	(x=0X17996);
	op_hex		(x,	1);
	create_insn	(x=0X1799A);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X1799E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X179A0);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(0X179AA);
	create_insn	(x=0X179AE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X179B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X179B6);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(0X179CA);
	create_insn	(x=0X179CC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X179D8);
	op_plain_offset	(x,	1,	0X100042A1);
	op_plain_offset	(x,	129,	0X100042A1);
	create_insn	(x=0X179EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X179F0);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	create_insn	(x=0X179F2);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	create_insn	(x=0X179FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17A00);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	create_insn	(x=0X17A04);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	create_insn	(x=0X17A0A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17A0C);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17A12);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17A16);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17A1A);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17A1E);
	op_hex		(x,	1);
	create_insn	(x=0X17A24);
	op_hex		(x,	1);
	create_insn	(x=0X17A28);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(0X17A2C);
	create_insn	(x=0X17A38);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17A3A);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17A40);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17A42);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(0X17A48);
	create_insn	(x=0X17A4C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17A4E);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17A54);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17A56);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17A58);
	op_hex		(x,	1);
	create_insn	(x=0X17A60);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17A66);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17A6A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17A6C);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17A6E);
	op_hex		(x,	1);
	create_insn	(x=0X17A74);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17A76);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17A7C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17A7E);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17A84);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17A86);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17A8C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17A8E);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(0X17A94);
	set_name	(0X17A94,	"tcx_config_80105FA");
	create_insn	(x=0X17A96);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17AA0);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17AAE);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17AB2);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17AB6);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17ABA);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17AC0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17AC4);
	op_plain_offset	(x,	1,	0X100041D0);
	op_plain_offset	(x,	129,	0X100041D0);
	create_insn	(x=0X17ACA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17ADC);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17AE4);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17AEA);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17AF2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17AF4);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(0X17B02);
	create_insn	(x=0X17B06);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17B0A);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17B12);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17B14);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17B20);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17B24);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17B28);
	op_hex		(x,	1);
	create_insn	(x=0X17B30);
	op_hex		(x,	1);
	create_insn	(x=0X17B38);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17B3E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17B40);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17B46);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17B48);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	set_cmt	(0X17B4E,	"data8",	0);
	create_insn	(0X17B4E);
	set_cmt	(0X17B50,	"addr8",	0);
	set_cmt	(0X17B52,	"bus_n_bytes",	0);
	set_cmt	(0X17B58,	"addr8",	0);
	create_insn	(0X17B58);
	set_cmt	(0X17B5A,	"bus_n_bytes",	0);
	create_insn	(0X17B60);
	set_name	(0X17B60,	"ad936x_config_set");
	create_insn	(x=0X17B66);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17B74);
	op_hex		(x,	1);
	set_cmt	(0X17BAA,	"data8",	0);
	set_cmt	(0X17BAC,	"bus_n_bytes",	0);
	create_insn	(x=0X17BBC);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17BC4);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17BC6);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17BCE);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17BD6);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17BD8);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17BDE);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(0X17BE2);
	create_insn	(x=0X17BEA);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17BF0);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17BF8);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17BFA);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17C00);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17C04);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17C0A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17C0E);
	op_plain_offset	(x,	1,	0X100042A1);
	op_plain_offset	(x,	129,	0X100042A1);
	create_insn	(x=0X17C14);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17C1A);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17C1E);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	set_cmt	(0X17C24,	"val",	0);
	create_insn	(0X17C24);
	set_cmt	(0X17C26,	"addr10",	0);
	create_insn	(0X17C30);
	set_name	(0X17C30,	"ad936x_config_get");
	create_insn	(x=0X17C34);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X17C70,	"bus_n_bytes",	0);
	create_insn	(x=0X17C82);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17C84);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17C94);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17C96);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17CA6);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17CAE);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17CB4);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17CB6);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17CBC);
	op_hex		(x,	1);
	create_insn	(x=0X17CC6);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17CCC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17CD0);
	op_plain_offset	(x,	1,	0X100042A1);
	op_plain_offset	(x,	129,	0X100042A1);
	create_byte	(0X17CD6);
	make_array	(0X17CD6,	0X2);
	create_dword	(x=0X17CD8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X17CDC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X17CE0);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	create_insn	(x=0X17CE6);
	op_plain_offset	(x,	1,	0X100041D8);
	op_plain_offset	(x,	129,	0X100041D8);
	set_cmt	(0X17CEE,	"addr10",	0);
	create_insn	(0X17CEE);
	create_insn	(0X17CFA);
	set_name	(0X17CFA,	"spi_clear_flag_r00_f02");
	set_cmt	(0X17CFC,	"addr8",	0);
	set_cmt	(0X17CFE,	"bus_n_bytes",	0);
	create_insn	(x=0X17D04);
	op_hex		(x,	1);
	set_cmt	(0X17D08,	"addr8",	0);
	set_cmt	(0X17D0E,	"bus_n_bytes",	0);
	create_insn	(x=0X17D14);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17D16);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	create_insn	(x=0X17D18);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17D1A);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X17D20);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	create_insn	(x=0X17D22);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X17D28);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	create_insn	(x=0X17D2A);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X17D2C);
	op_plain_offset	(x,	1,	0X10004288);
	op_plain_offset	(x,	129,	0X10004288);
	create_insn	(x=0X17D2E);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X17D32);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X17D36);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(x=0X17D3C);
	op_plain_offset	(x,	1,	0X10000314);
	op_plain_offset	(x,	129,	0X10000314);
	create_insn	(0X17D46);
	create_byte	(0X17D4A);
	make_array	(0X17D4A,	0X2);
	create_dword	(x=0X17D4C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X17D50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X17D54);
	set_name	(0X17D54,	"SPI_Init");
	create_insn	(x=0X17D58);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17D60);
	op_hex		(x,	1);
	create_insn	(x=0X17D68);
	op_hex		(x,	1);
	create_insn	(x=0X17D6E);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X17D70);
	op_hex		(x,	1);
	create_insn	(x=0X17D74);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X17D76);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X17D78);
	op_hex		(x,	1);
	create_insn	(x=0X17D7C);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X17D7E);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X17D80);
	op_hex		(x,	1);
	create_insn	(x=0X17D84);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X17D86);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X17D88);
	op_hex		(x,	1);
	create_insn	(x=0X17D8C);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X17D94);
	op_hex		(x,	1);
	create_insn	(x=0X17DA0);
	op_hex		(x,	1);
	create_insn	(x=0X17DA8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X17DB0,	"ClkType",	0);
	create_insn	(x=0X17DB0);
	op_enum		(x,	1,	GetEnum("CLKPWR_PCLKSEL"),0);
	create_insn	(0X17DC4);
	create_insn	(x=0X17DCC);
	op_hex		(x,	1);
	create_insn	(0X17DD6);
	create_insn	(x=0X17DD8);
	op_plain_offset	(x,	1,	0X40020000);
	op_plain_offset	(x,	129,	0X40020000);
	create_insn	(0X17DDC);
	set_name	(0X17DDC,	"SPI_UsrWaitTransferComplete");
	create_insn	(x=0X17DDE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X17DE0);
	op_plain_offset	(x,	1,	0X40020000);
	op_plain_offset	(x,	129,	0X40020000);
	create_insn	(x=0X17DE2);
	op_plain_offset	(x,	1,	0X40020000);
	op_plain_offset	(x,	129,	0X40020000);
	create_insn	(x=0X17DEA);
	op_plain_offset	(x,	1,	0X40020000);
	op_plain_offset	(x,	129,	0X40020000);
	create_dword	(x=0X17DF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X17DF4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X17DF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X17DFC);
	create_insn	(x=0X17E02);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X17E06,	"bus_n_bytes",	0);
	set_cmt	(0X17E08,	"addr8",	0);
	set_cmt	(0X17E10,	"addr8",	0);
	set_cmt	(0X17E12,	"data8",	0);
	set_cmt	(0X17E18,	"bus_n_bytes",	0);
	create_insn	(0X17E1E);
	create_insn	(x=0X17E24);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X17E28,	"bus_n_bytes",	0);
	set_cmt	(0X17E2A,	"addr8",	0);
	set_cmt	(0X17E36,	"addr8",	0);
	set_cmt	(0X17E3C,	"bus_n_bytes",	0);
	create_insn	(0X17E42);
	create_insn	(x=0X17E48);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X17E4C,	"bus_n_bytes",	0);
	set_cmt	(0X17E4E,	"addr8",	0);
	create_insn	(0X17E5C);
	create_insn	(x=0X17E60);
	op_stkvar	(x,	1);
	set_cmt	(0X17E62,	"addr8",	0);
	set_cmt	(0X17E64,	"bus_n_bytes",	0);
	create_insn	(x=0X17E6A);
	op_stkvar	(x,	1);
	set_cmt	(0X17E6E,	"addr8",	0);
	set_cmt	(0X17E70,	"bus_n_bytes",	0);
	create_insn	(x=0X17E76);
	op_stkvar	(x,	1);
	set_cmt	(0X17E7A,	"addr8",	0);
	set_cmt	(0X17E7C,	"bus_n_bytes",	0);
	create_insn	(x=0X17E82);
	op_stkvar	(x,	1);
	set_cmt	(0X17E86,	"addr8",	0);
	set_cmt	(0X17E88,	"bus_n_bytes",	0);
	create_insn	(x=0X17E8E);
	op_stkvar	(x,	1);
	create_insn	(x=0X17E92);
	op_stkvar	(x,	1);
	create_insn	(0X17E96);
	set_cmt	(0X17E9C,	"data8",	0);
	set_cmt	(0X17E9E,	"addr8",	0);
	set_cmt	(0X17EA0,	"bus_n_bytes",	0);
	set_cmt	(0X17EA6,	"addr8",	0);
	set_cmt	(0X17EA8,	"bus_n_bytes",	0);
	set_cmt	(0X17EAE,	"data8",	0);
	create_insn	(x=0X17EAE);
	op_hex		(x,	1);
	set_cmt	(0X17EB2,	"addr8",	0);
	set_cmt	(0X17EB4,	"bus_n_bytes",	0);
	create_insn	(0X17ED0);
	create_insn	(0X17ED4);
	create_insn	(0X17EF2);
	create_insn	(0X17EFE);
	create_insn	(x=0X17F10);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X17F3C);
	create_insn	(0X17F48);
	create_insn	(0X17F52);
	create_insn	(0X17F78);
	create_insn	(0X17F84);
	create_insn	(0X17F86);
	create_insn	(0X17F8E);
	create_insn	(0X17FDE);
	create_insn	(x=0X17FE0);
	op_hex		(x,	1);
	create_insn	(0X17FEA);
	create_insn	(x=0X17FEC);
	op_hex		(x,	1);
	create_insn	(0X17FF6);
	create_insn	(0X18000);
	set_cmt	(0X18004,	"data8",	0);
	set_cmt	(0X18006,	"addr8",	0);
	set_cmt	(0X18008,	"bus_n_bytes",	0);
	set_cmt	(0X1800E,	"addr8",	0);
	set_cmt	(0X18010,	"bus_n_bytes",	0);
	set_cmt	(0X18016,	"data8",	0);
	create_insn	(x=0X18016);
	op_hex		(x,	1);
	set_cmt	(0X1801A,	"addr8",	0);
	set_cmt	(0X1801C,	"bus_n_bytes",	0);
	create_insn	(0X18032);
	create_insn	(0X18036);
	create_insn	(0X18054);
	create_insn	(0X18060);
	create_insn	(0X18068);
	create_insn	(0X1808E);
	create_insn	(0X1809A);
	create_insn	(0X180A2);
	create_insn	(x=0X180BA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X180BC);
	op_plain_offset	(x,	1,	0X10000344);
	op_plain_offset	(x,	129,	0X10000344);
	create_insn	(x=0X180BE);
	op_hex		(x,	1);
	create_insn	(x=0X180C2);
	op_plain_offset	(x,	1,	0X10000344);
	op_plain_offset	(x,	129,	0X10000344);
	create_insn	(0X180C8);
	create_insn	(x=0X180D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X180F4);
	create_insn	(x=0X18104);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1810E,	"addr8",	0);
	set_cmt	(0X18110,	"bus_n_bytes",	0);
	set_cmt	(0X1811C,	"addr8",	0);
	set_cmt	(0X1811E,	"bus_n_bytes",	0);
	create_insn	(0X1812E);
	create_insn	(0X18132);
	create_insn	(0X18150);
	create_insn	(0X1815C);
	create_insn	(0X18164);
	create_insn	(0X181BC);
	create_insn	(0X181C0);
	create_insn	(0X181C4);
	create_insn	(x=0X181C6);
	op_hex		(x,	1);
	create_insn	(0X181D0);
	create_dword	(x=0X181FC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X18200);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X18204);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X18208);
	create_insn	(0X1820E);
	create_byte	(0X18212);
	make_array	(0X18212,	0X2);
	create_insn	(0X18214);
	create_insn	(0X18228);
	create_insn	(0X18246);
	create_insn	(x=0X1824E);
	op_hex		(x,	1);
	create_insn	(x=0X1825E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1827E);
	create_insn	(0X1828A);
	create_insn	(0X182C2);
	create_insn	(x=0X182CA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X182CC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X182DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X182E4);
	op_plain_offset	(x,	1,	0X10000350);
	op_plain_offset	(x,	129,	0X10000350);
	create_insn	(x=0X182EA);
	op_plain_offset	(x,	1,	0X10000350);
	op_plain_offset	(x,	129,	0X10000350);
	create_insn	(x=0X182F6);
	op_plain_offset	(x,	1,	0X10000350);
	op_plain_offset	(x,	129,	0X10000350);
	create_insn	(x=0X18300);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X18322);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X18340);
	op_stkvar	(x,	1);
	create_insn	(x=0X18358);
	op_stkvar	(x,	1);
	create_insn	(x=0X18376);
	op_stkvar	(x,	1);
	create_insn	(x=0X1838E);
	op_stkvar	(x,	1);
	create_insn	(x=0X183A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X183AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X183E2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X183EA);
	create_insn	(0X183EC);
	create_insn	(x=0X183F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1841A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1846E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1848A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X184A4);
	op_stkvar	(x,	1);
	create_insn	(0X184A8);
	create_insn	(x=0X184B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X184B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X184BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X184C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X184C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X184C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X184CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X184D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X184DE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X184F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X184FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X184FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X184FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X18500);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X18504);
	op_stkvar	(x,	1);
	create_insn	(x=0X1850A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1850E);
	op_stkvar	(x,	1);
	create_insn	(x=0X18510);
	op_plain_offset	(x,	1,	0X1000457C);
	op_plain_offset	(x,	129,	0X1000457C);
	create_insn	(x=0X18512);
	op_stkvar	(x,	1);
	create_insn	(x=0X18514);
	op_plain_offset	(x,	1,	0X1000457C);
	op_plain_offset	(x,	129,	0X1000457C);
	create_insn	(x=0X18518);
	op_stkvar	(x,	1);
	create_insn	(x=0X18522);
	op_stkvar	(x,	1);
	create_insn	(x=0X18524);
	op_stkvar	(x,	1);
	create_insn	(x=0X18526);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1852A);
	op_stkvar	(x,	1);
	create_insn	(x=0X18530);
	op_stkvar	(x,	1);
	create_insn	(x=0X18532);
	op_plain_offset	(x,	1,	0X1000457C);
	op_plain_offset	(x,	129,	0X1000457C);
	create_insn	(x=0X18534);
	op_stkvar	(x,	1);
	create_insn	(x=0X18536);
	op_plain_offset	(x,	1,	0X1000457C);
	op_plain_offset	(x,	129,	0X1000457C);
	create_insn	(x=0X18538);
	op_stkvar	(x,	1);
	create_insn	(x=0X18540);
	op_plain_offset	(x,	1,	0X1000457C);
	op_plain_offset	(x,	129,	0X1000457C);
	create_insn	(x=0X18542);
	op_stkvar	(x,	1);
	create_insn	(x=0X18554);
	op_stkvar	(x,	1);
	create_insn	(x=0X1855E);
	op_stkvar	(x,	1);
	create_insn	(x=0X18560);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X18562);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X18568);
	op_stkvar	(x,	1);
	create_insn	(x=0X185AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X185CA);
	op_plain_offset	(x,	1,	0X1000457C);
	op_plain_offset	(x,	129,	0X1000457C);
	create_insn	(x=0X185CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X185D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X185DC);
	create_insn	(0X185DE);
	create_insn	(0X185E0);
	create_insn	(x=0X185E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X185F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X185F2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X185F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X185FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X18640);
	op_stkvar	(x,	1);
	create_insn	(0X1865A);
	create_dword	(x=0X1865C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X18660);
	create_dword	(x=0X18664);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X18668);
	create_dword	(0X1866C);
	create_dword	(0X18670);
	create_dword	(0X18674);
	create_dword	(0X18678);
	create_dword	(x=0X1867C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X18680,	0X1868A);
	set_name	(0X18680,	"a2d2d2d");
	create_byte	(0X1868A);
	make_array	(0X1868A,	0X2);
	create_strlit	(0X1868C,	0X18696);
	set_name	(0X1868C,	"a2d2d4d");
	create_byte	(0X18696);
	make_array	(0X18696,	0X2);
	create_strlit	(0X18698,	0X1869B);
	set_name	(0X18698,	"aF_1");
	create_byte	(0X1869B);
	create_dword	(0X1869C);
	create_dword	(0X186A0);
	create_dword	(0X186A4);
	create_insn	(0X186A8);
	create_insn	(x=0X186AC);
	op_plain_offset	(x,	1,	0X1000457C);
	op_plain_offset	(x,	129,	0X1000457C);
	create_insn	(x=0X186B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X186BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X186BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X186C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X186C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X186D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X186DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X186E6);
	op_stkvar	(x,	1);
	create_insn	(0X186EA);
	create_insn	(x=0X186EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X186F0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X186F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1871C);
	op_stkvar	(x,	1);
	create_insn	(x=0X18736);
	op_plain_offset	(x,	1,	0X1000457C);
	op_plain_offset	(x,	129,	0X1000457C);
	create_insn	(x=0X18738);
	op_stkvar	(x,	1);
	create_insn	(0X18744);
	create_insn	(0X18746);
	create_insn	(x=0X1875A);
	op_stkvar	(x,	1);
	create_insn	(x=0X18774);
	op_plain_offset	(x,	1,	0X1000457C);
	op_plain_offset	(x,	129,	0X1000457C);
	create_insn	(x=0X18778);
	op_stkvar	(x,	1);
	create_insn	(x=0X18782);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1878A);
	op_plain_offset	(x,	1,	0X1000457C);
	op_plain_offset	(x,	129,	0X1000457C);
	create_insn	(0X18794);
	create_insn	(0X18798);
	create_insn	(x=0X1879C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1879E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X187B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X187BE);
	op_plain_offset	(x,	1,	0X10000350);
	op_plain_offset	(x,	129,	0X10000350);
	create_insn	(x=0X187D8);
	op_plain_offset	(x,	1,	0X10000350);
	op_plain_offset	(x,	129,	0X10000350);
	create_insn	(x=0X187F2);
	op_plain_offset	(x,	1,	0X1000457C);
	op_plain_offset	(x,	129,	0X1000457C);
	create_insn	(x=0X18808);
	op_stkvar	(x,	1);
	create_insn	(x=0X1880C);
	op_plain_offset	(x,	1,	0X1000457C);
	op_plain_offset	(x,	129,	0X1000457C);
	create_insn	(x=0X18828);
	op_stkvar	(x,	1);
	create_insn	(x=0X18838);
	op_plain_offset	(x,	1,	0X10000350);
	op_plain_offset	(x,	129,	0X10000350);
	create_insn	(x=0X1883E);
	op_plain_offset	(x,	1,	0X10000350);
	op_plain_offset	(x,	129,	0X10000350);
	create_insn	(x=0X18846);
	op_plain_offset	(x,	1,	0X10000350);
	op_plain_offset	(x,	129,	0X10000350);
	create_insn	(x=0X1884A);
	op_plain_offset	(x,	1,	0X1000457C);
	op_plain_offset	(x,	129,	0X1000457C);
	create_insn	(0X1884E);
	create_insn	(x=0X18856);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X18868);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X18870);
	op_plain_offset	(x,	1,	0X10004508);
	op_plain_offset	(x,	129,	0X10004508);
	create_insn	(x=0X18872);
	op_plain_offset	(x,	1,	0X10004508);
	op_plain_offset	(x,	129,	0X10004508);
	create_insn	(x=0X1887C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X188AA);
	op_plain_offset	(x,	1,	0X10000350);
	op_plain_offset	(x,	129,	0X10000350);
	create_insn	(0X188AE);
	create_insn	(0X188B8);
	create_insn	(x=0X188BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X188C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X188D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X188D2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X188D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X188DE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X188E0,	"a3",	0);
	set_cmt	(0X188E2,	"param_buf",	0);
	set_cmt	(0X188E4,	"a1",	0);
	create_insn	(x=0X188E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X188EA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X188EC,	"a2",	0);
	set_cmt	(0X188EE,	"a1",	0);
	create_insn	(x=0X18902);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X18904);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X18916);
	op_stkvar	(x,	1);
	create_insn	(x=0X18918);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1891A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X18920);
	op_stkvar	(x,	1);
	create_insn	(x=0X18922);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1892E);
	op_stkvar	(x,	1);
	create_insn	(x=0X18942);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X18944);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X18956);
	op_stkvar	(x,	1);
	create_insn	(x=0X18958);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1895A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X18960);
	op_stkvar	(x,	1);
	create_insn	(x=0X1896A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1897E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X18980);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X18992);
	op_stkvar	(x,	1);
	create_insn	(x=0X18994);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X18996);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1899C);
	op_stkvar	(x,	1);
	create_insn	(x=0X189A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X189BA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X189BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X189CC);
	create_insn	(0X189CE);
	create_insn	(x=0X189D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X189D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X189D6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X189DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X189E6);
	op_stkvar	(x,	1);
	create_insn	(0X189EE);
	create_insn	(x=0X189F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X189FE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X18A0A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X18A1E);
	create_insn	(x=0X18A20);
	op_stkvar	(x,	1);
	create_insn	(x=0X18A30);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X18A32);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X18A38);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X18A3A);
	op_stkvar	(x,	1);
	create_insn	(x=0X18A3E);
	op_plain_offset	(x,	1,	0X1000457C);
	op_plain_offset	(x,	129,	0X1000457C);
	create_insn	(x=0X18A4C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X18A4E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X18A52);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X18A5A);
	create_insn	(0X18A62);
	set_name	(0X18A62,	"RTC_UsrGetTimeComponents");
	create_insn	(x=0X18A64);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X18A66,	"Timetype",	0);
	create_insn	(x=0X18A66);
	op_enum		(x,	1,	GetEnum("RTC_TIMETYPE_Num"),0);
	set_cmt	(0X18A68,	"RTCx",	0);
	create_insn	(x=0X18A6E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X18A70,	"Timetype",	0);
	create_insn	(x=0X18A70);
	op_enum		(x,	1,	GetEnum("RTC_TIMETYPE_Num"),0);
	set_cmt	(0X18A76,	"RTCx",	0);
	create_insn	(x=0X18A7C);
	op_plain_offset	(x,	1,	0X1000457C);
	op_plain_offset	(x,	129,	0X1000457C);
	set_cmt	(0X18A7E,	"Timetype",	0);
	create_insn	(x=0X18A7E);
	op_enum		(x,	1,	GetEnum("RTC_TIMETYPE_Num"),0);
	set_cmt	(0X18A80,	"RTCx",	0);
	create_insn	(x=0X18A86);
	op_plain_offset	(x,	1,	0X1000457C);
	op_plain_offset	(x,	129,	0X1000457C);
	set_cmt	(0X18A88,	"Timetype",	0);
	create_insn	(x=0X18A88);
	op_enum		(x,	1,	GetEnum("RTC_TIMETYPE_Num"),0);
	set_cmt	(0X18A8A,	"RTCx",	0);
	create_insn	(x=0X18A90);
	op_plain_offset	(x,	1,	0X1000457C);
	op_plain_offset	(x,	129,	0X1000457C);
	set_cmt	(0X18A92,	"Timetype",	0);
	create_insn	(x=0X18A92);
	op_enum		(x,	1,	GetEnum("RTC_TIMETYPE_Num"),0);
	set_cmt	(0X18A94,	"RTCx",	0);
	create_insn	(x=0X18A9A);
	op_plain_offset	(x,	1,	0X1000457C);
	op_plain_offset	(x,	129,	0X1000457C);
	set_cmt	(0X18A9C,	"Timetype",	0);
	create_insn	(x=0X18A9C);
	op_enum		(x,	1,	GetEnum("RTC_TIMETYPE_Num"),0);
	set_cmt	(0X18A9E,	"RTCx",	0);
	create_insn	(x=0X18AA4);
	op_plain_offset	(x,	1,	0X1000457C);
	op_plain_offset	(x,	129,	0X1000457C);
	create_insn	(x=0X18AA8);
	op_plain_offset	(x,	1,	0X1000457C);
	op_plain_offset	(x,	129,	0X1000457C);
	create_dword	(x=0X18AAC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X18AB0);
	create_dword	(0X18AB4);
	create_dword	(0X18AB8);
	create_dword	(0X18ABC);
	create_dword	(0X18AC0);
	create_dword	(0X18AC4);
	create_dword	(0X18AC8);
	create_dword	(x=0X18ACC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X18AD0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X18AD4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X18AD8);
	create_dword	(0X18ADC);
	create_dword	(0X18AE0);
	create_dword	(0X18AE4);
	create_byte	(0X18AE8);
	create_byte	(0X18AE9);
	make_array	(0X18AE9,	0X3);
	create_strlit	(0X18AEC,	0X18AF3);
	set_name	(0X18AEC,	"aGpgga");
	create_byte	(0X18AF3);
	create_strlit	(0X18AF4,	0X18AFB);
	set_name	(0X18AF4,	"aGprmc");
	create_byte	(0X18AFB);
	create_strlit	(0X18AFC,	0X18B03);
	set_name	(0X18AFC,	"aGpgsv");
	create_byte	(0X18B03);
	create_strlit	(0X18B04,	0X18B07);
	set_name	(0X18B04,	"aD");
	create_byte	(0X18B07);
	create_strlit	(0X18B08,	0X18B0B);
	set_name	(0X18B08,	"aF_0");
	create_byte	(0X18B0B);
	create_dword	(x=0X18B0C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X18B10);
	set_name	(0X18B10,	"compute_buf_crc8");
	create_insn	(x=0X18B12);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X18B16);
	create_insn	(0X18B24);
	create_insn	(0X18B32);
	set_name	(0X18B32,	"packet_unkn_18B32");
	set_cmt	(0X18B66,	"p_err",	0);
	create_insn	(x=0X18B66);
	op_stkvar	(x,	1);
	create_insn	(0X18B7C);
	create_insn	(0X18B82);
	create_insn	(0X18B92);
	set_cmt	(0X18B9E,	"p_err",	0);
	create_insn	(x=0X18B9E);
	op_stkvar	(x,	1);
	create_insn	(0X18BAA);
	set_cmt	(0X18BAC,	"len",	0);
	set_cmt	(0X18BAE,	"seed",	0);
	set_cmt	(0X18BB0,	"buf",	0);
	create_insn	(x=0X18BC4);
	op_hex		(x,	1);
	create_insn	(0X18BD8);
	create_insn	(0X18BDE);
	create_insn	(0X18BF2);
	create_insn	(0X18C04);
	set_cmt	(0X18C06,	"a3",	0);
	set_cmt	(0X18C08,	"param_buf",	0);
	set_cmt	(0X18C0A,	"a1",	0);
	set_cmt	(0X18C1C,	"seed",	0);
	set_cmt	(0X18C20,	"len",	0);
	set_cmt	(0X18C22,	"buf",	0);
	create_insn	(x=0X18C38);
	op_stkvar	(x,	1);
	create_insn	(0X18C5A);
	set_name	(0X18C5A,	"packet_set_checksum");
	create_insn	(x=0X18C60);
	op_stkvar	(x,	1);
	create_dword	(x=0X18C68);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X18C6C);
	create_insn	(0X18C70);
	create_insn	(0X18C78);
	create_insn	(0X18C82);
	create_insn	(0X18C8A);
	create_insn	(0X18C90);
	create_insn	(x=0X18C9C);
	op_hex		(x,	1);
	create_insn	(x=0X18CA4);
	op_stkvar	(x,	1);
	create_insn	(0X18CAA);
	create_insn	(x=0X18CB6);
	op_hex		(x,	1);
	create_insn	(x=0X18CBE);
	op_stkvar	(x,	1);
	create_insn	(0X18CC4);
	create_insn	(x=0X18CD0);
	op_hex		(x,	1);
	create_insn	(x=0X18CDE);
	op_hex		(x,	1);
	create_insn	(x=0X18CE6);
	op_stkvar	(x,	1);
	create_insn	(0X18CEC);
	create_insn	(0X18CF4);
	create_insn	(0X18D02);
	create_insn	(x=0X18D08);
	op_hex		(x,	1);
	create_insn	(x=0X18D14);
	op_hex		(x,	1);
	create_insn	(x=0X18D2C);
	op_hex		(x,	1);
	create_insn	(x=0X18D3E);
	op_stkvar	(x,	1);
	create_insn	(0X18D44);
	create_insn	(x=0X18D4A);
	op_hex		(x,	1);
	create_insn	(x=0X18D56);
	op_hex		(x,	1);
	create_insn	(x=0X18D6E);
	op_hex		(x,	1);
	create_insn	(x=0X18D76);
	op_stkvar	(x,	1);
	create_insn	(0X18D7C);
	create_insn	(x=0X18D84);
	op_hex		(x,	1);
	create_insn	(x=0X18D96);
	op_hex		(x,	1);
	create_insn	(0X18D9E);
	create_insn	(x=0X18DA0);
	op_hex		(x,	1);
	create_insn	(x=0X18DBC);
	op_hex		(x,	1);
	create_insn	(0X18DCE);
	create_insn	(x=0X18DE8);
	op_hex		(x,	1);
	create_insn	(0X18DF2);
	create_insn	(0X18DF6);
	create_insn	(x=0X18DFE);
	op_hex		(x,	1);
	create_insn	(x=0X18E0C);
	op_hex		(x,	1);
	create_insn	(0X18E14);
	create_insn	(x=0X18E16);
	op_hex		(x,	1);
	create_insn	(x=0X18E2C);
	op_stkvar	(x,	1);
	create_insn	(0X18E32);
	create_insn	(x=0X18E3A);
	op_hex		(x,	1);
	create_insn	(x=0X18E42);
	op_hex		(x,	1);
	create_insn	(x=0X18E60);
	op_hex		(x,	1);
	create_insn	(0X18E6A);
	create_insn	(x=0X18E72);
	op_hex		(x,	1);
	create_insn	(0X18E7C);
	create_insn	(0X18E9C);
	create_insn	(0X18EA6);
	create_insn	(0X18ECC);
	create_insn	(0X18ED6);
	create_insn	(0X18EEE);
	create_insn	(0X18EF2);
	create_insn	(x=0X18EF8);
	op_hex		(x,	1);
	create_insn	(x=0X18F04);
	op_hex		(x,	1);
	create_insn	(x=0X18F1C);
	op_hex		(x,	1);
	create_insn	(0X18F36);
	create_insn	(x=0X18F3C);
	op_hex		(x,	1);
	create_insn	(x=0X18F48);
	op_hex		(x,	1);
	create_insn	(x=0X18F60);
	op_hex		(x,	1);
	create_insn	(0X18F70);
	create_insn	(0X18F84);
	create_insn	(0X18FA4);
	create_insn	(0X18FAC);
	create_insn	(x=0X18FBE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X18FC0,	"lev",	0);
	create_insn	(x=0X18FC0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X18FD0);
	create_insn	(0X18FEA);
	create_insn	(0X18FF8);
	create_insn	(x=0X18FFC);
	op_stkvar	(x,	1);
	create_insn	(0X1901E);
	create_insn	(0X1902A);
	create_insn	(0X1903E);
	create_insn	(0X1904C);
	create_insn	(x=0X1905E);
	op_hex		(x,	1);
	create_byte	(0X19076);
	make_array	(0X19076,	0X2);
	create_dword	(0X19078);
	create_strlit	(0X1907C,	0X190A3);
	set_name	(0X1907C,	"aSha204p_send_s");
	create_byte	(0X190A3);
	create_insn	(0X190A4);
	create_insn	(x=0X190AA);
	op_stkvar	(x,	1);
	create_insn	(0X190CE);
	create_insn	(0X190EE);
	create_insn	(0X190F8);
	create_insn	(0X19110);
	create_insn	(x=0X1912E);
	op_stkvar	(x,	1);
	create_insn	(0X1913A);
	create_insn	(x=0X19148);
	op_stkvar	(x,	1);
	create_insn	(0X19152);
	create_insn	(0X19158);
	create_insn	(x=0X19162);
	op_stkvar	(x,	1);
	create_insn	(x=0X19176);
	op_stkvar	(x,	1);
	create_insn	(x=0X1917C);
	op_stkvar	(x,	1);
	create_insn	(x=0X19180);
	op_stkvar	(x,	1);
	create_insn	(0X1918C);
	create_insn	(x=0X19196);
	op_stkvar	(x,	1);
	create_insn	(x=0X191A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X191B0);
	op_stkvar	(x,	1);
	create_insn	(0X191BE);
	create_insn	(0X191CC);
	create_insn	(0X191DC);
	create_insn	(0X191F8);
	create_insn	(0X19200);
	create_insn	(0X19204);
	create_insn	(0X19208);
	create_insn	(0X1921C);
	create_insn	(x=0X19220);
	op_stkvar	(x,	1);
	create_insn	(x=0X1922A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1922C);
	op_stkvar	(x,	1);
	create_insn	(0X19282);
	create_insn	(0X19290);
	create_insn	(0X192A4);
	create_insn	(0X192AE);
	create_insn	(x=0X192B2);
	op_hex		(x,	1);
	create_insn	(0X192BE);
	create_insn	(x=0X192C0);
	op_hex		(x,	1);
	create_insn	(0X192C6);
	create_insn	(x=0X192D0);
	op_hex		(x,	1);
	create_insn	(x=0X192D6);
	op_hex		(x,	1);
	create_insn	(x=0X192E4);
	op_hex		(x,	1);
	create_insn	(x=0X192EA);
	op_hex		(x,	1);
	create_insn	(0X192F4);
	create_insn	(0X19300);
	create_insn	(x=0X19306);
	op_hex		(x,	1);
	create_insn	(0X19316);
	create_insn	(x=0X19318);
	op_hex		(x,	1);
	create_insn	(0X19322);
	create_insn	(0X19326);
	create_insn	(x=0X19332);
	op_stkvar	(x,	1);
	create_insn	(x=0X19334);
	op_stkvar	(x,	1);
	create_insn	(x=0X19338);
	op_stkvar	(x,	1);
	create_insn	(x=0X1933C);
	op_stkvar	(x,	1);
	create_insn	(x=0X19348);
	op_stkvar	(x,	1);
	create_insn	(x=0X1934E);
	op_stkvar	(x,	1);
	create_insn	(x=0X19350);
	op_stkvar	(x,	1);
	create_insn	(x=0X19356);
	op_stkvar	(x,	1);
	create_insn	(x=0X19358);
	op_stkvar	(x,	1);
	create_insn	(x=0X1935E);
	op_stkvar	(x,	1);
	create_insn	(x=0X19360);
	op_stkvar	(x,	1);
	create_insn	(x=0X1936A);
	op_stkvar	(x,	1);
	create_insn	(0X19386);
	create_insn	(0X19394);
	create_insn	(0X193A8);
	create_insn	(x=0X193BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X193C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X193C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X193D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X193D8);
	op_stkvar	(x,	1);
	set_cmt	(0X193E6,	"a3",	0);
	set_cmt	(0X193E8,	"a1",	0);
	set_cmt	(0X193EA,	"param_buf",	0);
	create_insn	(x=0X193EA);
	op_stkvar	(x,	1);
	set_cmt	(0X193F8,	"a3",	0);
	set_cmt	(0X193FA,	"a1",	0);
	set_cmt	(0X193FC,	"param_buf",	0);
	create_insn	(x=0X193FC);
	op_stkvar	(x,	1);
	set_cmt	(0X1940A,	"a3",	0);
	set_cmt	(0X1940C,	"a1",	0);
	set_cmt	(0X1940E,	"param_buf",	0);
	create_insn	(x=0X1940E);
	op_stkvar	(x,	1);
	create_insn	(x=0X19416);
	op_stkvar	(x,	1);
	create_insn	(x=0X1941E);
	op_stkvar	(x,	1);
	create_insn	(x=0X19424);
	op_stkvar	(x,	1);
	create_insn	(x=0X1942A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1942C);
	op_stkvar	(x,	1);
	create_insn	(0X19436);
	create_insn	(0X1943C);
	create_insn	(0X19442);
	create_insn	(0X19448);
	create_insn	(0X1944E);
	create_insn	(0X19450);
	create_insn	(0X19452);
	create_insn	(0X19454);
	create_insn	(0X19456);
	create_insn	(0X1945C);
	create_insn	(0X19462);
	create_insn	(0X19468);
	create_insn	(0X19476);
	create_insn	(0X19478);
	create_insn	(0X1947A);
	create_insn	(0X1947C);
	create_insn	(0X1947E);
	create_insn	(0X19484);
	create_insn	(0X1948A);
	create_insn	(0X19498);
	create_insn	(0X1949C);
	create_insn	(0X194A2);
	create_insn	(0X194A8);
	create_insn	(0X194AE);
	create_insn	(x=0X194D0);
	op_hex		(x,	1);
	create_insn	(x=0X194D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X194E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X194F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X194F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X194FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X194FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X194FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X19502);
	op_stkvar	(x,	1);
	set_cmt	(0X1951E,	"a3",	0);
	create_insn	(0X1951E);
	set_cmt	(0X19520,	"param_buf",	0);
	set_cmt	(0X19522,	"a1",	0);
	create_insn	(0X1952C);
	create_insn	(x=0X1954E);
	op_hex		(x,	1);
	create_insn	(x=0X19552);
	op_stkvar	(x,	1);
	create_insn	(x=0X19560);
	op_hex		(x,	1);
	create_insn	(x=0X19566);
	op_stkvar	(x,	1);
	create_insn	(x=0X19568);
	op_stkvar	(x,	1);
	create_insn	(x=0X1956C);
	op_stkvar	(x,	1);
	create_insn	(x=0X19576);
	op_stkvar	(x,	1);
	create_insn	(x=0X19578);
	op_stkvar	(x,	1);
	create_insn	(x=0X1957A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1957C);
	op_stkvar	(x,	1);
	create_insn	(x=0X19584);
	op_stkvar	(x,	1);
	create_insn	(0X195A0);
	create_insn	(x=0X195AC);
	op_hex		(x,	1);
	create_insn	(x=0X195B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X195BE);
	op_hex		(x,	1);
	create_insn	(x=0X195C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X195C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X195CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X195D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X195D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X195D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X195DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X195E0);
	op_stkvar	(x,	1);
	create_insn	(0X195FC);
	create_insn	(x=0X1960C);
	op_stkvar	(x,	1);
	create_insn	(x=0X1961A);
	op_hex		(x,	1);
	create_insn	(x=0X19622);
	op_stkvar	(x,	1);
	create_insn	(x=0X1962C);
	op_stkvar	(x,	1);
	create_insn	(x=0X19632);
	op_stkvar	(x,	1);
	create_insn	(x=0X19634);
	op_stkvar	(x,	1);
	create_insn	(x=0X19636);
	op_stkvar	(x,	1);
	create_insn	(x=0X19638);
	op_stkvar	(x,	1);
	create_insn	(x=0X1963A);
	op_stkvar	(x,	1);
	set_cmt	(0X1965C,	"a3",	0);
	create_insn	(0X1965C);
	set_cmt	(0X1965E,	"param_buf",	0);
	set_cmt	(0X19660,	"a1",	0);
	create_insn	(0X1966A);
	create_insn	(0X19670);
	create_insn	(0X19688);
	create_insn	(0X1968E);
	create_insn	(0X196A6);
	set_name	(0X196A6,	"factory_Info");
	create_insn	(x=0X196BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X196C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X196CA);
	op_stkvar	(x,	1);
	create_insn	(0X196DC);
	set_name	(0X196DC,	"chip_Info");
	create_insn	(x=0X196EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X196F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X196F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X196F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X196F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X196FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X196FE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X19702);
	op_stkvar	(x,	1);
	create_insn	(0X19714);
	set_name	(0X19714,	"get_mac");
	create_insn	(x=0X19720);
	op_stkvar	(x,	1);
	create_insn	(x=0X19722);
	op_plain_offset	(x,	1,	0X100006F1);
	op_plain_offset	(x,	129,	0X100006F1);
	create_insn	(x=0X19724);
	op_stkvar	(x,	1);
	create_insn	(x=0X19726);
	op_plain_offset	(x,	1,	0X100006F1);
	op_plain_offset	(x,	129,	0X100006F1);
	create_insn	(x=0X19728);
	op_stkvar	(x,	1);
	create_insn	(x=0X1972C);
	op_stkvar	(x,	1);
	create_insn	(x=0X1972E);
	op_stkvar	(x,	1);
	set_cmt	(0X19738,	"a3",	0);
	set_cmt	(0X1973A,	"param_buf",	0);
	set_cmt	(0X1973C,	"a1",	0);
	set_cmt	(0X19744,	"a3",	0);
	set_cmt	(0X19746,	"param_buf",	0);
	create_insn	(x=0X19746);
	op_stkvar	(x,	1);
	set_cmt	(0X19748,	"a1",	0);
	create_insn	(x=0X19752);
	op_stkvar	(x,	1);
	create_insn	(x=0X19756);
	op_stkvar	(x,	1);
	create_insn	(x=0X1975A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1975E);
	op_stkvar	(x,	1);
	create_insn	(x=0X19764);
	op_stkvar	(x,	1);
	create_insn	(x=0X19768);
	op_stkvar	(x,	1);
	create_insn	(x=0X1976C);
	op_stkvar	(x,	1);
	create_insn	(x=0X19770);
	op_stkvar	(x,	1);
	create_insn	(x=0X19772);
	op_stkvar	(x,	1);
	create_insn	(x=0X19776);
	op_stkvar	(x,	1);
	create_insn	(x=0X19784);
	op_stkvar	(x,	1);
	create_insn	(x=0X19790);
	op_stkvar	(x,	1);
	create_insn	(x=0X19792);
	op_stkvar	(x,	1);
	create_insn	(0X197A2);
	create_insn	(x=0X197A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X197D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X197D2,	"lev",	0);
	create_insn	(x=0X197D2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X197DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X197E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X197E4);
	set_name	(0X197E4,	"encrypt_sub_197E4");
	create_insn	(x=0X197EC);
	op_hex		(x,	1);
	create_insn	(x=0X197F4);
	op_hex		(x,	1);
	create_insn	(x=0X197FC);
	op_hex		(x,	1);
	create_insn	(x=0X19804);
	op_hex		(x,	1);
	create_insn	(x=0X1980A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1981C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X19820);
	op_plain_offset	(x,	1,	0X10002760);
	op_plain_offset	(x,	129,	0X10002760);
	create_insn	(x=0X19822);
	op_plain_offset	(x,	1,	0X10002760);
	op_plain_offset	(x,	129,	0X10002760);
	create_insn	(x=0X19828);
	op_plain_offset	(x,	1,	0X10002760);
	op_plain_offset	(x,	129,	0X10002760);
	create_insn	(x=0X1982C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1982E,	"lev",	0);
	create_insn	(x=0X1982E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X19834);
	op_plain_offset	(x,	1,	0X10002760);
	op_plain_offset	(x,	129,	0X10002760);
	create_insn	(x=0X19836);
	op_stkvar	(x,	1);
	create_insn	(x=0X19838);
	op_plain_offset	(x,	1,	0X10002760);
	op_plain_offset	(x,	129,	0X10002760);
	create_insn	(x=0X1983A);
	op_plain_offset	(x,	1,	0X10002760);
	op_plain_offset	(x,	129,	0X10002760);
	create_insn	(x=0X1983C);
	op_plain_offset	(x,	1,	0X10002760);
	op_plain_offset	(x,	129,	0X10002760);
	create_insn	(x=0X19842);
	op_plain_offset	(x,	1,	0X10002760);
	op_plain_offset	(x,	129,	0X10002760);
	create_insn	(x=0X19844);
	op_plain_offset	(x,	1,	0X10002760);
	op_plain_offset	(x,	129,	0X10002760);
	create_insn	(x=0X19846);
	op_plain_offset	(x,	1,	0X10002760);
	op_plain_offset	(x,	129,	0X10002760);
	create_insn	(x=0X19848);
	op_plain_offset	(x,	1,	0X10002760);
	op_plain_offset	(x,	129,	0X10002760);
	create_insn	(x=0X1984E);
	op_plain_offset	(x,	1,	0X10002760);
	op_plain_offset	(x,	129,	0X10002760);
	create_insn	(x=0X19850);
	op_plain_offset	(x,	1,	0X10002760);
	op_plain_offset	(x,	129,	0X10002760);
	create_insn	(x=0X19852);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X19854,	"lev",	0);
	create_insn	(x=0X19854);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1985C);
	op_plain_offset	(x,	1,	0X100027A7);
	op_plain_offset	(x,	129,	0X100027A7);
	create_insn	(x=0X1985E);
	op_plain_offset	(x,	1,	0X100027A7);
	op_plain_offset	(x,	129,	0X100027A7);
	create_insn	(x=0X19864);
	op_plain_offset	(x,	1,	0X100027A7);
	op_plain_offset	(x,	129,	0X100027A7);
	create_insn	(x=0X19868);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1986A,	"lev",	0);
	create_insn	(x=0X1986A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X19870);
	op_plain_offset	(x,	1,	0X100027A7);
	op_plain_offset	(x,	129,	0X100027A7);
	create_insn	(x=0X19872);
	op_stkvar	(x,	1);
	create_insn	(x=0X19876);
	op_plain_offset	(x,	1,	0X100027A7);
	op_plain_offset	(x,	129,	0X100027A7);
	create_insn	(x=0X19878);
	op_plain_offset	(x,	1,	0X100027A7);
	op_plain_offset	(x,	129,	0X100027A7);
	create_insn	(x=0X1987A);
	op_plain_offset	(x,	1,	0X100027A7);
	op_plain_offset	(x,	129,	0X100027A7);
	create_insn	(x=0X19880);
	op_plain_offset	(x,	1,	0X100027A7);
	op_plain_offset	(x,	129,	0X100027A7);
	create_insn	(x=0X19882);
	op_plain_offset	(x,	1,	0X100027A7);
	op_plain_offset	(x,	129,	0X100027A7);
	create_insn	(x=0X19884);
	op_plain_offset	(x,	1,	0X100027A7);
	op_plain_offset	(x,	129,	0X100027A7);
	create_insn	(x=0X19886);
	op_plain_offset	(x,	1,	0X100027A7);
	op_plain_offset	(x,	129,	0X100027A7);
	create_insn	(x=0X1988C);
	op_plain_offset	(x,	1,	0X100027A7);
	op_plain_offset	(x,	129,	0X100027A7);
	create_insn	(x=0X1988E);
	op_plain_offset	(x,	1,	0X100027A7);
	op_plain_offset	(x,	129,	0X100027A7);
	create_insn	(x=0X19890);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X19892,	"lev",	0);
	create_insn	(x=0X19892);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X198AA);
	op_plain_offset	(x,	1,	0X10002760);
	op_plain_offset	(x,	129,	0X10002760);
	create_insn	(x=0X198B0);
	op_plain_offset	(x,	1,	0X10002760);
	op_plain_offset	(x,	129,	0X10002760);
	create_insn	(x=0X198B6);
	op_plain_offset	(x,	1,	0X10002760);
	op_plain_offset	(x,	129,	0X10002760);
	create_insn	(x=0X198C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X198CE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X198D2);
	op_plain_offset	(x,	1,	0X100027A7);
	op_plain_offset	(x,	129,	0X100027A7);
	create_insn	(x=0X198D8);
	op_plain_offset	(x,	1,	0X100027A7);
	op_plain_offset	(x,	129,	0X100027A7);
	create_insn	(x=0X198DE);
	op_plain_offset	(x,	1,	0X100027A7);
	op_plain_offset	(x,	129,	0X100027A7);
	create_insn	(x=0X198E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X198E6,	"a3",	0);
	set_cmt	(0X198E8,	"param_buf",	0);
	set_cmt	(0X198EA,	"a1",	0);
	create_insn	(x=0X198F0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X198FA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X198FC,	"lev",	0);
	create_insn	(x=0X198FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X19902);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X19908);
	op_stkvar	(x,	1);
	create_insn	(x=0X19914);
	op_stkvar	(x,	1);
	create_insn	(x=0X1991C);
	op_stkvar	(x,	1);
	create_insn	(x=0X19936);
	op_hex		(x,	1);
	create_insn	(0X19940);
	create_insn	(x=0X19942);
	op_hex		(x,	1);
	create_insn	(x=0X19948);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1994A);
	op_plain_offset	(x,	1,	0X10000018);
	op_plain_offset	(x,	129,	0X10000018);
	create_insn	(x=0X1994C);
	op_hex		(x,	1);
	create_insn	(x=0X19950);
	op_plain_offset	(x,	1,	0X10000018);
	op_plain_offset	(x,	129,	0X10000018);
	create_insn	(0X19954);
	create_insn	(x=0X1995C);
	op_stkvar	(x,	1);
	create_insn	(0X19976);
	create_insn	(x=0X19980);
	op_stkvar	(x,	1);
	create_insn	(x=0X19986);
	op_stkvar	(x,	1);
	create_insn	(x=0X1998C);
	op_stkvar	(x,	1);
	create_insn	(x=0X19990);
	op_stkvar	(x,	1);
	create_insn	(x=0X19998);
	op_stkvar	(x,	1);
	create_insn	(x=0X199A0);
	op_stkvar	(x,	1);
	create_insn	(0X199AE);
	create_insn	(0X199B6);
	create_insn	(x=0X199BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X199C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X199C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X199CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X199D6);
	op_stkvar	(x,	1);
	create_insn	(0X199F4);
	create_insn	(0X19A00);
	create_insn	(x=0X19A12);
	op_stkvar	(x,	1);
	create_insn	(0X19A20);
	create_insn	(0X19A24);
	create_insn	(0X19A2C);
	create_insn	(x=0X19A3E);
	op_stkvar	(x,	1);
	create_insn	(0X19A4C);
	create_insn	(0X19A50);
	create_insn	(0X19A58);
	create_insn	(x=0X19A7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X19A80);
	op_stkvar	(x,	1);
	create_insn	(x=0X19A84);
	op_stkvar	(x,	1);
	create_insn	(0X19A8C);
	create_insn	(x=0X19AAE);
	op_stkvar	(x,	1);
	create_insn	(0X19AB4);
	create_byte	(0X19AB6);
	make_array	(0X19AB6,	0X2);
	create_dword	(x=0X19AB8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X19ABC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X19AC0,	0X19AD1);
	set_name	(0X19AC0,	"aFactory_infoEr");
	create_byte	(0X19AD1);
	make_array	(0X19AD1,	0X3);
	create_strlit	(0X19AD4,	0X19ADC);
	set_name	(0X19AD4,	"aMacErr");
	create_strlit	(0X19ADC,	0X19AEA);
	set_name	(0X19ADC,	"aChip_infoErr");
	create_byte	(0X19AEA);
	make_array	(0X19AEA,	0X2);
	create_dword	(0X19AEC);
	create_dword	(x=0X19AF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X19AF4,	0X19B18);
	set_name	(0X19AF4,	"aIsareadyencrpt");
	create_strlit	(0X19B18,	0X19B30);
	set_name	(0X19B18,	"aBnCCCCCCCCCC");
	create_strlit	(0X19B30,	0X19B55);
	set_name	(0X19B30,	"aIsareadyencr_0");
	create_byte	(0X19B55);
	make_array	(0X19B55,	0X3);
	create_strlit	(0X19B58,	0X19B71);
	set_name	(0X19B58,	"aBn2CCCCCCCCCC");
	create_byte	(0X19B71);
	make_array	(0X19B71,	0X3);
	create_strlit	(0X19B74,	0X19B86);
	set_name	(0X19B74,	"aEncryptChange");
	create_byte	(0X19B86);
	make_array	(0X19B86,	0X2);
	create_strlit	(0X19B88,	0X19B98);
	set_name	(0X19B88,	"aEncryptLoss");
	create_dword	(x=0X19B98);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X19B9C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X19BA0);
	create_insn	(x=0X19BB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X19BBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X19BC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X19BC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X19BCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X19BD0);
	op_stkvar	(x,	1);
	create_insn	(0X19BD8);
	set_cmt	(0X19BFA,	"a3",	0);
	create_insn	(0X19BFA);
	set_cmt	(0X19BFC,	"param_buf",	0);
	set_cmt	(0X19BFE,	"a1",	0);
	create_insn	(0X19C06);
	create_insn	(x=0X19C1C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X19C1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X19C22);
	op_stkvar	(x,	1);
	create_insn	(x=0X19C24);
	op_stkvar	(x,	1);
	create_insn	(x=0X19C26);
	op_plain_offset	(x,	1,	0X10002760);
	op_plain_offset	(x,	129,	0X10002760);
	create_insn	(0X19C32);
	create_insn	(x=0X19C3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X19C48);
	op_stkvar	(x,	1);
	create_insn	(x=0X19C4E);
	op_stkvar	(x,	1);
	create_insn	(0X19C58);
	create_insn	(0X19C60);
	create_insn	(0X19C76);
	create_insn	(0X19C8C);
	create_insn	(0X19CA2);
	create_insn	(0X19CB8);
	create_insn	(0X19CCE);
	create_insn	(0X19CDE);
	create_insn	(0X19CE8);
	create_insn	(0X19CF6);
	create_insn	(0X19D02);
	set_name	(0X19D02,	"sha204p_send_slave_address");
	create_insn	(x=0X19D04);
	op_hex		(x,	1);
	create_insn	(x=0X19D08);
	op_stkvar	(x,	1);
	create_insn	(0X19D28);
	create_insn	(0X19D32);
	create_dword	(x=0X19D50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X19D54);
	create_insn	(0X19D66);
	create_insn	(x=0X19DDE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X19DEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X19DEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X19E04);
	op_stkvar	(x,	1);
	create_insn	(x=0X19E18);
	op_stkvar	(x,	1);
	create_insn	(x=0X19E24);
	op_stkvar	(x,	1);
	create_insn	(x=0X19E26);
	op_stkvar	(x,	1);
	create_insn	(x=0X19E36);
	op_stkvar	(x,	1);
	create_insn	(x=0X19E38);
	op_stkvar	(x,	1);
	create_insn	(x=0X19E3A);
	op_stkvar	(x,	1);
	create_insn	(x=0X19E3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X19E3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X19E40);
	op_stkvar	(x,	1);
	create_insn	(x=0X19E42);
	op_stkvar	(x,	1);
	create_insn	(x=0X19E48);
	op_stkvar	(x,	1);
	create_insn	(x=0X19E4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X19E4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X19E4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X19E56);
	op_stkvar	(x,	1);
	create_insn	(0X19E80);
	create_insn	(x=0X19E8A);
	op_hex		(x,	1);
	create_insn	(0X19E96);
	set_cmt	(0X19EA6,	"a2",	0);
	set_cmt	(0X19EAC,	"a1",	0);
	create_insn	(0X19F00);
	set_cmt	(0X19F1A,	"a1",	0);
	set_cmt	(0X19F1E,	"a3",	0);
	set_cmt	(0X19F20,	"param_buf",	0);
	create_insn	(0X19F32);
	create_insn	(x=0X19F4C);
	op_hex		(x,	1);
	set_cmt	(0X19F50,	"param_buf",	0);
	set_cmt	(0X19F54,	"a3",	0);
	set_cmt	(0X19F56,	"a1",	0);
	create_insn	(x=0X19F6C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X19F8E);
	create_insn	(0X19FB4);
	create_byte	(0X19FE2);
	make_array	(0X19FE2,	0X2);
	create_dword	(x=0X19FE4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X19FE8);
	create_insn	(x=0X1A0C0);
	op_hex		(x,	1);
	create_insn	(x=0X1A0C8);
	op_hex		(x,	1);
	create_insn	(x=0X1A0D0);
	op_hex		(x,	1);
	create_insn	(x=0X1A0D8);
	op_hex		(x,	1);
	create_insn	(x=0X1A0E0);
	op_hex		(x,	1);
	create_insn	(x=0X1A0E8);
	op_hex		(x,	1);
	create_insn	(x=0X1A0F0);
	op_hex		(x,	1);
	create_insn	(x=0X1A0F8);
	op_hex		(x,	1);
	create_insn	(0X1A20C);
	create_insn	(x=0X1A23E);
	op_hex		(x,	1);
	create_insn	(x=0X1A246);
	op_hex		(x,	1);
	create_insn	(0X1A40E);
	create_insn	(x=0X1A47C);
	op_hex		(x,	1);
	create_insn	(x=0X1A49C);
	op_hex		(x,	1);
	create_insn	(x=0X1A4BC);
	op_hex		(x,	1);
	create_insn	(x=0X1A4DA);
	op_hex		(x,	1);
	create_insn	(x=0X1A52C);
	op_hex		(x,	1);
	create_insn	(x=0X1A534);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1A550);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1A574);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1A576);
	op_hex		(x,	1);
	create_insn	(x=0X1A586);
	op_hex		(x,	1);
	create_insn	(x=0X1A590);
	op_hex		(x,	1);
	create_insn	(x=0X1A598);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1A5B6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1A5D0);
	op_hex		(x,	1);
	create_insn	(x=0X1A5D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1A5F0);
	op_hex		(x,	1);
	create_insn	(x=0X1A5F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1A606);
	op_hex		(x,	1);
	create_insn	(x=0X1A60C);
	op_hex		(x,	1);
	create_insn	(x=0X1A614);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1A72E);
	create_insn	(x=0X1A734);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1A740);
	op_stkvar	(x,	1);
	create_insn	(x=0X1A748);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1A74A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1A750);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1A756);
	op_stkvar	(x,	1);
	create_insn	(x=0X1A75C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1A76E);
	op_stkvar	(x,	1);
	create_insn	(x=0X1A778);
	op_hex		(x,	1);
	create_insn	(x=0X1A784);
	op_hex		(x,	1);
	create_insn	(x=0X1A79A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1A7A4);
	op_hex		(x,	1);
	create_insn	(x=0X1A7B0);
	op_hex		(x,	1);
	create_insn	(x=0X1A7C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1A7DA);
	op_hex		(x,	1);
	create_insn	(x=0X1A7E6);
	op_hex		(x,	1);
	create_insn	(x=0X1A810);
	op_hex		(x,	1);
	create_insn	(x=0X1A81C);
	op_hex		(x,	1);
	create_insn	(0X1A836);
	create_insn	(0X1A83C);
	create_insn	(x=0X1A84C);
	op_hex		(x,	1);
	create_insn	(x=0X1A852);
	op_hex		(x,	1);
	create_insn	(0X1A872);
	create_insn	(x=0X1A886);
	op_stkvar	(x,	1);
	create_insn	(x=0X1A892);
	op_stkvar	(x,	1);
	create_insn	(x=0X1A8A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1A8AC);
	op_stkvar	(x,	1);
	create_insn	(0X1A8B8);
	create_insn	(0X1A8EE);
	create_insn	(0X1A908);
	create_dword	(x=0X1A92C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1A930);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1A934);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1A938);
	set_name	(0X1A938,	"CAN_SetupAFLUT");
	create_insn	(x=0X1A940);
	op_stkvar	(x,	1);
	create_insn	(x=0X1A944);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1A948);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1A94C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1A95A);
	op_stkvar	(x,	1);
	create_insn	(0X1A95E);
	create_insn	(x=0X1A996);
	op_hex		(x,	1);
	create_insn	(0X1A9C8);
	create_insn	(x=0X1A9EC);
	op_hex		(x,	1);
	create_insn	(0X1AA14);
	create_insn	(0X1AA40);
	create_insn	(0X1AA42);
	create_insn	(0X1AA44);
	create_insn	(0X1AA80);
	create_insn	(0X1AA82);
	create_insn	(0X1AACA);
	create_insn	(x=0X1AAE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1AAEA);
	op_stkvar	(x,	1);
	create_insn	(0X1AAF6);
	create_insn	(0X1AAF8);
	create_insn	(x=0X1AB28);
	op_stkvar	(x,	1);
	create_insn	(x=0X1AB34);
	op_stkvar	(x,	1);
	create_insn	(0X1AB58);
	create_insn	(0X1AB98);
	create_insn	(0X1AB9A);
	create_insn	(0X1ABA6);
	create_insn	(0X1ABB4);
	create_insn	(0X1ABE4);
	create_insn	(x=0X1AC22);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1AC24);
	op_plain_offset	(x,	1,	0X4003C000);
	op_plain_offset	(x,	129,	0X4003C000);
	create_insn	(x=0X1AC26);
	op_plain_offset	(x,	1,	0X4003C000);
	op_plain_offset	(x,	129,	0X4003C000);
	create_insn	(x=0X1AC34);
	op_plain_offset	(x,	1,	0X4003C000);
	op_plain_offset	(x,	129,	0X4003C000);
	create_insn	(x=0X1AC36);
	op_plain_offset	(x,	1,	0X4003C000);
	op_plain_offset	(x,	129,	0X4003C000);
	create_insn	(x=0X1AC40);
	op_plain_offset	(x,	1,	0X4003C000);
	op_plain_offset	(x,	129,	0X4003C000);
	create_insn	(x=0X1AC42);
	op_plain_offset	(x,	1,	0X4003C000);
	op_plain_offset	(x,	129,	0X4003C000);
	create_insn	(x=0X1AC4A);
	op_plain_offset	(x,	1,	0X4003C000);
	op_plain_offset	(x,	129,	0X4003C000);
	create_insn	(x=0X1AC4C);
	op_plain_offset	(x,	1,	0X4003C000);
	op_plain_offset	(x,	129,	0X4003C000);
	create_insn	(x=0X1AC56);
	op_plain_offset	(x,	1,	0X4003C000);
	op_plain_offset	(x,	129,	0X4003C000);
	create_insn	(x=0X1AC58);
	op_stkvar	(x,	1);
	create_insn	(x=0X1AC64);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X1AC64,	"CAN_UsrInitAcceptanceFilter");
	create_insn	(x=0X1AC6C);
	op_plain_offset	(x,	1,	0X100045C8);
	op_plain_offset	(x,	129,	0X100045C8);
	create_insn	(x=0X1AC70);
	op_plain_offset	(x,	1,	0X100045C8);
	op_plain_offset	(x,	129,	0X100045C8);
	create_insn	(x=0X1AC72);
	op_plain_offset	(x,	1,	0X100045C8);
	op_plain_offset	(x,	129,	0X100045C8);
	create_insn	(x=0X1AC74);
	op_plain_offset	(x,	1,	0X100045C8);
	op_plain_offset	(x,	129,	0X100045C8);
	create_insn	(x=0X1AC7A);
	op_plain_offset	(x,	1,	0X100045C8);
	op_plain_offset	(x,	129,	0X100045C8);
	create_insn	(x=0X1AC7C);
	op_plain_offset	(x,	1,	0X100045C8);
	op_plain_offset	(x,	129,	0X100045C8);
	create_insn	(x=0X1AC7E);
	op_plain_offset	(x,	1,	0X100045C8);
	op_plain_offset	(x,	129,	0X100045C8);
	create_insn	(x=0X1AC82);
	op_plain_offset	(x,	1,	0X100045C8);
	op_plain_offset	(x,	129,	0X100045C8);
	create_insn	(x=0X1AC8A);
	op_plain_offset	(x,	1,	0X100045A0);
	op_plain_offset	(x,	129,	0X100045A0);
	create_insn	(x=0X1AC8C);
	op_plain_offset	(x,	1,	0X100045A0);
	op_plain_offset	(x,	129,	0X100045A0);
	create_insn	(x=0X1AC90);
	op_plain_offset	(x,	1,	0X100045A0);
	op_plain_offset	(x,	129,	0X100045A0);
	create_insn	(x=0X1AC92);
	op_plain_offset	(x,	1,	0X100045A0);
	op_plain_offset	(x,	129,	0X100045A0);
	create_insn	(x=0X1AC94);
	op_plain_offset	(x,	1,	0X100045A0);
	op_plain_offset	(x,	129,	0X100045A0);
	create_insn	(x=0X1AC96);
	op_plain_offset	(x,	1,	0X100045A0);
	op_plain_offset	(x,	129,	0X100045A0);
	create_insn	(x=0X1AC98);
	op_plain_offset	(x,	1,	0X100045A0);
	op_plain_offset	(x,	129,	0X100045A0);
	create_insn	(x=0X1AC9A);
	op_plain_offset	(x,	1,	0X100045A0);
	op_plain_offset	(x,	129,	0X100045A0);
	create_insn	(x=0X1AC9C);
	op_plain_offset	(x,	1,	0X100045A0);
	op_plain_offset	(x,	129,	0X100045A0);
	create_insn	(x=0X1ACA0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1ACB0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1ACB4,	"AFSection",	0);
	set_cmt	(0X1ACB6,	"CANAFx",	0);
	create_insn	(x=0X1ACB6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1ACBA);
	set_name	(0X1ACBA,	"CAN_LoadExplicitEntry");
	create_insn	(x=0X1ACBE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1ACCC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1ACD6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1ACDE);
	op_plain_offset	(x,	1,	0X1000047C);
	op_plain_offset	(x,	129,	0X1000047C);
	create_insn	(x=0X1ACEE);
	op_plain_offset	(x,	1,	0X1000047C);
	op_plain_offset	(x,	129,	0X1000047C);
	create_insn	(x=0X1ACF8);
	op_plain_offset	(x,	1,	0X1000047C);
	op_plain_offset	(x,	129,	0X1000047C);
	create_insn	(x=0X1AD00);
	op_plain_offset	(x,	1,	0X1000047C);
	op_plain_offset	(x,	129,	0X1000047C);
	create_insn	(x=0X1AD16);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1AD32);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_byte	(0X1AD36);
	make_array	(0X1AD36,	0X2);
	create_dword	(x=0X1AD38);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1AD3C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1AD40);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1AD44);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X1AD44,	"CANAFx");
	create_dword	(x=0X1AD48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1AD4C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1AD50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1AD54);
	create_insn	(x=0X1AD78);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1AD7C);
	op_stkvar	(x,	1);
	create_insn	(0X1AD80);
	create_insn	(0X1ADB2);
	create_insn	(x=0X1ADC6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1ADC8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1ADE4);
	create_insn	(0X1ADEE);
	create_insn	(0X1AE04);
	create_insn	(0X1AE10);
	create_insn	(0X1AE22);
	create_insn	(0X1AE36);
	create_insn	(0X1AE4C);
	create_insn	(0X1AE5A);
	create_insn	(x=0X1AE6E);
	op_stkvar	(x,	1);
	create_insn	(0X1AE76);
	create_insn	(0X1AE78);
	create_insn	(0X1AE80);
	create_insn	(x=0X1AEAC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1AEAE);
	op_plain_offset	(x,	1,	0X1000047C);
	op_plain_offset	(x,	129,	0X1000047C);
	create_insn	(0X1AECA);
	create_insn	(0X1AEEE);
	create_insn	(0X1AF28);
	create_insn	(0X1AF2C);
	set_name	(0X1AF2C,	"CAN_LoadFullCANEntry");
	create_insn	(x=0X1AF32);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1AF3A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1AF42);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1AF52);
	op_plain_offset	(x,	1,	0X1000047C);
	op_plain_offset	(x,	129,	0X1000047C);
	create_insn	(x=0X1AF5A);
	op_plain_offset	(x,	1,	0X1000047C);
	op_plain_offset	(x,	129,	0X1000047C);
	create_insn	(x=0X1AF5E);
	op_plain_offset	(x,	1,	0X1000047C);
	op_plain_offset	(x,	129,	0X1000047C);
	create_insn	(x=0X1AF62);
	op_plain_offset	(x,	1,	0X1000047C);
	op_plain_offset	(x,	129,	0X1000047C);
	create_insn	(x=0X1AF7A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1AF80);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1AF8C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1AF94);
	op_hex		(x,	1);
	create_insn	(0X1AFAA);
	create_insn	(x=0X1AFD8);
	op_hex		(x,	1);
	create_insn	(0X1AFDE);
	create_insn	(0X1AFE8);
	create_insn	(0X1B002);
	create_insn	(0X1B00E);
	create_insn	(0X1B022);
	create_insn	(0X1B03A);
	create_insn	(0X1B050);
	create_insn	(0X1B05A);
	create_insn	(0X1B076);
	create_insn	(0X1B07E);
	create_insn	(x=0X1B0BE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1B0DA);
	create_insn	(x=0X1B0FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1B102);
	op_plain_offset	(x,	1,	0X4003C000);
	op_plain_offset	(x,	129,	0X4003C000);
	create_insn	(x=0X1B106);
	op_plain_offset	(x,	1,	0X4003C000);
	op_plain_offset	(x,	129,	0X4003C000);
	create_insn	(x=0X1B108);
	op_plain_offset	(x,	1,	0X4003C000);
	op_plain_offset	(x,	129,	0X4003C000);
	create_insn	(x=0X1B10C);
	op_plain_offset	(x,	1,	0X4003C000);
	op_plain_offset	(x,	129,	0X4003C000);
	create_insn	(x=0X1B10E);
	op_plain_offset	(x,	1,	0X4003C000);
	op_plain_offset	(x,	129,	0X4003C000);
	create_insn	(x=0X1B112);
	op_plain_offset	(x,	1,	0X4003C000);
	op_plain_offset	(x,	129,	0X4003C000);
	create_insn	(x=0X1B114);
	op_plain_offset	(x,	1,	0X4003C000);
	op_plain_offset	(x,	129,	0X4003C000);
	create_insn	(x=0X1B118);
	op_plain_offset	(x,	1,	0X4003C000);
	op_plain_offset	(x,	129,	0X4003C000);
	create_insn	(x=0X1B11A);
	op_plain_offset	(x,	1,	0X4003C000);
	op_plain_offset	(x,	129,	0X4003C000);
	create_insn	(x=0X1B11E);
	op_plain_offset	(x,	1,	0X4003C000);
	op_plain_offset	(x,	129,	0X4003C000);
	create_insn	(0X1B128);
	set_name	(0X1B128,	"CAN_LoadGroupEntry");
	create_insn	(x=0X1B132);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1B13A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1B142);
	op_stkvar	(x,	1);
	create_insn	(x=0X1B14C);
	op_plain_offset	(x,	1,	0X1000047C);
	op_plain_offset	(x,	129,	0X1000047C);
	create_insn	(x=0X1B15A);
	op_plain_offset	(x,	1,	0X1000047C);
	op_plain_offset	(x,	129,	0X1000047C);
	create_insn	(x=0X1B160);
	op_plain_offset	(x,	1,	0X1000047C);
	op_plain_offset	(x,	129,	0X1000047C);
	create_insn	(x=0X1B162);
	op_stkvar	(x,	1);
	create_insn	(x=0X1B166);
	op_plain_offset	(x,	1,	0X1000047C);
	op_plain_offset	(x,	129,	0X1000047C);
	create_insn	(x=0X1B170);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1B188);
	create_insn	(x=0X1B1A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1B1B2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X1B1B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1B1BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1B1C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1B1C4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1B1C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1B1CC);
	create_insn	(x=0X1B1CE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1B1D4);
	create_insn	(0X1B1DA);
	create_insn	(0X1B212);
	create_insn	(0X1B214);
	create_insn	(0X1B234);
	create_insn	(x=0X1B248);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1B250);
	op_plain_offset	(x,	1,	0X4003C000);
	op_plain_offset	(x,	129,	0X4003C000);
	create_insn	(x=0X1B254);
	op_plain_offset	(x,	1,	0X4003C000);
	op_plain_offset	(x,	129,	0X4003C000);
	create_insn	(x=0X1B256);
	op_plain_offset	(x,	1,	0X4003C000);
	op_plain_offset	(x,	129,	0X4003C000);
	create_insn	(x=0X1B25A);
	op_plain_offset	(x,	1,	0X4003C000);
	op_plain_offset	(x,	129,	0X4003C000);
	create_insn	(x=0X1B25C);
	op_plain_offset	(x,	1,	0X4003C000);
	op_plain_offset	(x,	129,	0X4003C000);
	create_insn	(0X1B262);
	create_insn	(0X1B264);
	create_insn	(x=0X1B26A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1B26C);
	op_hex		(x,	1);
	create_insn	(x=0X1B270);
	op_hex		(x,	1);
	create_insn	(0X1B290);
	create_insn	(x=0X1B292);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1B29C);
	create_insn	(x=0X1B2A2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1B2C2);
	op_hex		(x,	1);
	create_insn	(x=0X1B2C6);
	op_hex		(x,	1);
	create_insn	(x=0X1B2CE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1B2DE);
	create_insn	(x=0X1B2EE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1B30E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1B312);
	create_insn	(0X1B314);
	create_insn	(0X1B318);
	create_insn	(x=0X1B336);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1B33C);
	op_plain_offset	(x,	1,	0X1000047C);
	op_plain_offset	(x,	129,	0X1000047C);
	create_insn	(x=0X1B340);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1B342);
	op_plain_offset	(x,	1,	0X4003C000);
	op_plain_offset	(x,	129,	0X4003C000);
	create_insn	(x=0X1B346);
	op_plain_offset	(x,	1,	0X4003C000);
	op_plain_offset	(x,	129,	0X4003C000);
	create_insn	(x=0X1B348);
	op_stkvar	(x,	1);
	create_insn	(x=0X1B34E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1B356);
	create_insn	(0X1B35A);
	set_name	(0X1B35A,	"CAN_RemoveEntry");
	create_insn	(x=0X1B35E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1B364);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1B368);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1B378);
	op_stkvar	(x,	1);
	create_insn	(x=0X1B37A);
	op_plain_offset	(x,	1,	0X1000047C);
	op_plain_offset	(x,	129,	0X1000047C);
	create_insn	(x=0X1B384);
	op_stkvar	(x,	1);
	create_insn	(x=0X1B386);
	op_plain_offset	(x,	1,	0X1000047C);
	op_plain_offset	(x,	129,	0X1000047C);
	create_insn	(x=0X1B38A);
	op_plain_offset	(x,	1,	0X1000047C);
	op_plain_offset	(x,	129,	0X1000047C);
	create_insn	(x=0X1B392);
	op_plain_offset	(x,	1,	0X1000047C);
	op_plain_offset	(x,	129,	0X1000047C);
	create_insn	(0X1B3BE);
	create_insn	(0X1B3DC);
	create_insn	(0X1B400);
	create_insn	(x=0X1B434);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1B43A);
	op_stkvar	(x,	1);
	create_insn	(0X1B43E);
	create_insn	(0X1B44E);
	create_insn	(0X1B458);
	create_insn	(0X1B4A6);
	create_insn	(0X1B4A8);
	create_insn	(0X1B4AA);
	create_insn	(0X1B4AC);
	create_insn	(0X1B4AE);
	create_insn	(0X1B4B8);
	create_insn	(0X1B4D6);
	create_insn	(x=0X1B4E2);
	op_stkvar	(x,	1);
	create_insn	(0X1B500);
	create_insn	(0X1B524);
	create_insn	(x=0X1B558);
	op_stkvar	(x,	1);
	create_insn	(x=0X1B560);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1B566);
	create_insn	(0X1B576);
	create_insn	(0X1B580);
	create_dword	(x=0X1B5BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1B5C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1B5C4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1B5C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1B5CC);
	create_insn	(x=0X1B5DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1B5DE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1B5EE);
	create_insn	(0X1B618);
	create_insn	(x=0X1B62E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1B634);
	create_insn	(0X1B670);
	create_insn	(0X1B682);
	create_insn	(0X1B6A2);
	create_byte	(0X1B6A6);
	make_array	(0X1B6A6,	0X2);
	create_dword	(x=0X1B6A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1B6AC);
	create_insn	(x=0X1B6B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1B6B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1B6D0);
	create_insn	(0X1B6D2);
	set_cmt	(0X1B6F4,	"CAN_Msg",	0);
	create_insn	(x=0X1B6F4);
	op_dec		(x,	1);
	set_cmt	(0X1B6F6,	"CANx",	0);
	create_insn	(0X1B700);
	set_cmt	(0X1B710,	"CAN_Msg",	0);
	create_insn	(x=0X1B710);
	op_dec		(x,	1);
	set_cmt	(0X1B712,	"CANx",	0);
	create_insn	(0X1B71A);
	create_insn	(0X1B71E);
	create_insn	(0X1B722);
	set_cmt	(0X1B726,	"CAN_Msg",	0);
	create_insn	(0X1B726);
	set_cmt	(0X1B728,	"CANx",	0);
	create_insn	(0X1B730);
	create_insn	(0X1B732);
	create_insn	(x=0X1B736);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1B744);
	op_plain_offset	(x,	1,	0X10004608);
	op_plain_offset	(x,	129,	0X10004608);
	create_insn	(x=0X1B748);
	op_plain_offset	(x,	1,	0X10004608);
	op_plain_offset	(x,	129,	0X10004608);
	create_insn	(x=0X1B74C);
	op_plain_offset	(x,	1,	0X10004608);
	op_plain_offset	(x,	129,	0X10004608);
	create_insn	(x=0X1B752);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1B764);
	op_plain_offset	(x,	1,	0X10004608);
	op_plain_offset	(x,	129,	0X10004608);
	create_insn	(x=0X1B770);
	op_plain_offset	(x,	1,	0X10004608);
	op_plain_offset	(x,	129,	0X10004608);
	create_insn	(x=0X1B772);
	op_plain_offset	(x,	1,	0X10000486);
	op_plain_offset	(x,	129,	0X10000486);
	create_insn	(x=0X1B776);
	op_plain_offset	(x,	1,	0X10004608);
	op_plain_offset	(x,	129,	0X10004608);
	create_insn	(x=0X1B778);
	op_plain_offset	(x,	1,	0X10000486);
	op_plain_offset	(x,	129,	0X10000486);
	create_insn	(x=0X1B77E);
	op_plain_offset	(x,	1,	0X10000486);
	op_plain_offset	(x,	129,	0X10000486);
	create_insn	(0X1B782);
	set_name	(0X1B782,	"unkn2_IRQHandler");
	create_insn	(0X1B786);
	create_insn	(x=0X1B788);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1B78A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1B798,	"handler",	0);
	create_insn	(x=0X1B798);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1B79C,	"num",	0);
	create_insn	(x=0X1B7AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1B7B4);
	op_plain_offset	(x,	1,	0X40044000);
	op_plain_offset	(x,	129,	0X40044000);
	create_insn	(x=0X1B7B6);
	op_plain_offset	(x,	1,	0X40044000);
	op_plain_offset	(x,	129,	0X40044000);
	create_insn	(x=0X1B7C2);
	op_hex		(x,	1);
	create_insn	(0X1B7CA);
	create_insn	(x=0X1B7CC);
	op_stkvar	(x,	1);
	create_insn	(0X1B7D8);
	create_insn	(x=0X1B7DA);
	op_stkvar	(x,	1);
	create_insn	(0X1B7E6);
	create_insn	(x=0X1B7E8);
	op_stkvar	(x,	1);
	create_insn	(0X1B7F4);
	create_insn	(x=0X1B7FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1B800);
	op_stkvar	(x,	1);
	create_insn	(x=0X1B802);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1B810);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1B828);
	create_insn	(x=0X1B82C);
	op_stkvar	(x,	1);
	create_insn	(x=0X1B852);
	op_stkvar	(x,	1);
	create_insn	(x=0X1B864);
	op_hex		(x,	1);
	create_insn	(x=0X1B86E);
	op_stkvar	(x,	1);
	create_insn	(x=0X1B87C);
	op_stkvar	(x,	1);
	create_insn	(0X1B88A);
	create_insn	(x=0X1B898);
	op_stkvar	(x,	1);
	create_insn	(x=0X1B89E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1B8AA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1B8C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1B8E6);
	op_stkvar	(x,	1);
	create_insn	(0X1B8F6);
	create_insn	(x=0X1B8FA);
	op_hex		(x,	1);
	create_insn	(x=0X1B906);
	op_stkvar	(x,	1);
	create_insn	(x=0X1B928);
	op_stkvar	(x,	1);
	create_insn	(0X1B938);
	create_insn	(x=0X1B93E);
	op_hex		(x,	1);
	create_insn	(x=0X1B948);
	op_stkvar	(x,	1);
	create_insn	(x=0X1B964);
	op_stkvar	(x,	1);
	create_insn	(0X1B97A);
	create_insn	(x=0X1B97C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1B97E);
	op_plain_offset	(x,	1,	0X40044000);
	op_plain_offset	(x,	129,	0X40044000);
	create_insn	(x=0X1B998);
	op_hex		(x,	1);
	create_insn	(x=0X1B9B6);
	op_plain_offset	(x,	1,	0X40044000);
	op_plain_offset	(x,	129,	0X40044000);
	create_insn	(x=0X1B9BE);
	op_plain_offset	(x,	1,	0X40044000);
	op_plain_offset	(x,	129,	0X40044000);
	create_insn	(x=0X1B9C0);
	op_plain_offset	(x,	1,	0X40044000);
	op_plain_offset	(x,	129,	0X40044000);
	create_insn	(0X1B9CE);
	create_insn	(0X1B9D0);
	create_insn	(x=0X1B9D2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1B9D6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1B9E0);
	op_hex		(x,	1);
	create_insn	(x=0X1B9E6);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X1B9E8);
	op_hex		(x,	1);
	create_insn	(x=0X1B9EC);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X1B9EE);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X1B9F0);
	op_hex		(x,	1);
	create_insn	(x=0X1B9F4);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X1B9F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1BA02);
	op_hex		(x,	1);
	create_insn	(x=0X1BA08);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X1BA0A);
	op_hex		(x,	1);
	create_insn	(x=0X1BA0E);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X1BA10);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X1BA12);
	op_hex		(x,	1);
	create_insn	(x=0X1BA16);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(0X1BA34);
	create_byte	(0X1BA42);
	make_array	(0X1BA42,	0X2);
	create_dword	(x=0X1BA44);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1BA48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X1BA4C);
	create_dword	(0X1BA50);
	create_dword	(x=0X1BA54);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X1BA58);
	create_dword	(x=0X1BA5C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1BA60);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X1BA64);
	create_dword	(x=0X1BA68);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1BA6C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1BA70);
	create_insn	(0X1BACC);
	create_insn	(0X1BAE0);
	create_insn	(0X1BAF2);
	create_insn	(0X1BB06);
	create_insn	(0X1BB0A);
	create_insn	(0X1BB1C);
	create_insn	(0X1BB20);
	create_insn	(0X1BB2C);
	create_insn	(0X1BB34);
	create_insn	(0X1BB4C);
	create_insn	(0X1BB50);
	create_insn	(0X1BB6C);
	create_insn	(0X1BB84);
	create_insn	(0X1BBA0);
	create_insn	(0X1BBDA);
	create_insn	(0X1BBE6);
	create_insn	(0X1BBF2);
	create_insn	(0X1BC06);
	create_insn	(0X1BC08);
	create_insn	(x=0X1BC20);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1BC40);
	create_byte	(0X1BC42);
	make_array	(0X1BC42,	0X2);
	create_dword	(x=0X1BC44);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X1BC48);
	create_dword	(0X1BC4C);
	create_strlit	(0X1BC50,	0X1BC65);
	set_name	(0X1BC50,	"aCanBufOverFlow");
	create_byte	(0X1BC65);
	make_array	(0X1BC65,	0X3);
	create_insn	(0X1BC68);
	set_name	(0X1BC68,	"CPU_TS_TmrInit");
	create_insn	(x=0X1BC6E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1BC72);
	toggle_bnot		(x,	1);
	op_hex		(x,	1);
	create_insn	(x=0X1BC78);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1BC7C);
	op_hex		(x,	1);
	create_insn	(x=0X1BC8A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X1BC8A,	"OS_TS_GET");
	create_insn	(x=0X1BC8C);
	op_plain_offset	(x,	1,	0XE0001000);
	op_plain_offset	(x,	129,	0XE0001000);
	create_insn	(0X1BC90);
	create_byte	(0X1BC96);
	make_array	(0X1BC96,	0X2);
	create_dword	(x=0X1BC98);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1BC9C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1BCA0);
	create_insn	(0X1BCA2);
	create_insn	(0X1BCAE);
	create_insn	(0X1BCB0);
	set_name	(0X1BCB0,	"j___disable_irq");
	create_insn	(0X1BCB4);
	create_insn	(0X1BCC0);
	create_insn	(0X1BCC2);
	set_name	(0X1BCC2,	"OS_CPU_UsrIntHandlerRegister");
	create_insn	(x=0X1BCD6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1BCE0,	"priMask",	0);
	create_insn	(0X1BCEA);
	create_insn	(0X1BCEC);
	set_cmt	(0X1BD04,	"prio",	0);
	set_cmt	(0X1BD0E,	"priMask",	0);
	create_insn	(0X1BD18);
	create_insn	(0X1BD1A);
	set_name	(0X1BD1A,	"nullsub_5");
	create_insn	(0X1BD1C);
	set_cmt	(0X1BD20,	"handler",	0);
	create_insn	(x=0X1BD20);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1BD22,	"num",	0);
	create_insn	(0X1BD30);
	create_insn	(0X1BD32);
	set_name	(0X1BD32,	"NMI_Handler");
	create_insn	(0X1BD34);
	set_name	(0X1BD34,	"HardFault_Handler");
	create_insn	(0X1BD36);
	set_name	(0X1BD36,	"MemManage_Handler");
	create_insn	(0X1BD38);
	set_name	(0X1BD38,	"BusFault_Handler");
	create_insn	(0X1BD3A);
	set_name	(0X1BD3A,	"UsageFault_Handler");
	create_insn	(0X1BD3C);
	set_name	(0X1BD3C,	"Dummy_Handler");
	create_insn	(0X1BD3E);
	set_name	(0X1BD3E,	"OS_CPU_IntHandler");
	set_cmt	(0X1BD54,	"priMask",	0);
	create_insn	(x=0X1BD5E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(0X1BD70);
	create_dword	(0X1BD74);
	create_dword	(0X1BD78);
	create_dword	(0X1BD7C);
	create_dword	(0X1BD80);
	create_dword	(0X1BD84);
	create_dword	(0X1BD88);
	create_dword	(0X1BD8C);
	create_dword	(0X1BD90);
	create_dword	(0X1BD94);
	create_dword	(0X1BD98);
	create_dword	(0X1BD9C);
	create_dword	(0X1BDA0);
	create_dword	(0X1BDA4);
	create_dword	(0X1BDA8);
	create_dword	(0X1BDAC);
	create_dword	(0X1BDB0);
	create_dword	(0X1BDB4);
	create_dword	(0X1BDB8);
	create_dword	(0X1BDBC);
	create_dword	(0X1BDC0);
	create_dword	(0X1BDC4);
	create_dword	(0X1BDC8);
	create_dword	(0X1BDCC);
	create_dword	(0X1BDD0);
	create_dword	(0X1BDD4);
	create_dword	(0X1BDD8);
	create_dword	(0X1BDDC);
	create_dword	(0X1BDE0);
	create_dword	(0X1BDE4);
	create_dword	(0X1BDE8);
	create_dword	(0X1BDEC);
	create_dword	(0X1BDF0);
	create_dword	(0X1BDF4);
	create_dword	(0X1BDF8);
	create_dword	(x=0X1BDFC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1BE00);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X1BE00,	"handler");
	create_dword	(0X1BE04);
	make_array	(0X1BE04,	0X2D);
	create_byte	(0X1BEB8);
	make_array	(0X1BEB8,	0X2);
	create_insn	(0X1BEBA);
	create_insn	(x=0X1BF20);
	op_hex		(x,	1);
	create_insn	(x=0X1BF58);
	op_hex		(x,	1);
	create_dword	(x=0X1BF70);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1BF74);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X1BF78);
	make_array	(0X1BF78,	0X4);
	create_dword	(0X1BF88);
	create_dword	(0X1BF8C);
	create_insn	(0X1BF90);
	set_name	(0X1BF90,	"OSCfg_Init");
	make_array	(0X1BF92,	0X2);
	create_insn	(x=0X1BF94);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X1BF94,	"OS_IdleTask");
	create_insn	(0X1BFA2);
	set_name	(0X1BFA2,	"OS_IdleTaskInit");
	create_insn	(x=0X1BFA4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1BFAE,	"time_quanta",	0);
	create_insn	(x=0X1BFAE);
	op_stkvar	(x,	1);
	set_cmt	(0X1BFB0,	"p_ext",	0);
	create_insn	(x=0X1BFB0);
	op_stkvar	(x,	1);
	set_cmt	(0X1BFB2,	"opt",	0);
	create_insn	(x=0X1BFB6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1BFB8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1BFBA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1BFC2,	"stk_limit",	0);
	create_insn	(x=0X1BFC2);
	op_stkvar	(x,	1);
	set_cmt	(0X1BFC4,	"stk_size",	0);
	set_cmt	(0X1BFCA,	"prio",	0);
	set_cmt	(0X1BFCE,	"p_arg",	0);
	set_cmt	(0X1BFD0,	"p_task",	0);
	create_insn	(x=0X1BFD0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1BFD4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1BFD6,	"p_tcb",	0);
	create_insn	(x=0X1BFD6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1BFE0);
	set_name	(0X1BFE0,	"OS_RdyListInit");
	create_insn	(x=0X1BFE2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1BFF8);
	op_dec		(x,	1);
	create_insn	(0X1BFFE);
	set_name	(0X1BFFE,	"OSInit");
	create_insn	(x=0X1C006);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1C00A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1C00E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1C012);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1C016);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1C01A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1C01E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1C026);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1C03C,	"p_err",	0);
	set_cmt	(0X1C048,	"p_err",	0);
	set_cmt	(0X1C054,	"p_err",	0);
	set_cmt	(0X1C060,	"p_err",	0);
	set_cmt	(0X1C06C,	"p_err",	0);
	create_insn	(0X1C084);
	create_insn	(x=0X1C086);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X1C086,	"OSIntEnter");
	create_insn	(x=0X1C08E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_4(void) {
        auto x;
#define id x

	create_insn	(x=0X1C092);
	op_dec		(x,	1);
	create_insn	(x=0X1C09C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X1C09C,	"OSIntExit");
	create_insn	(x=0X1C0AA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1C0B4);
	op_hex		(x,	1);
	create_insn	(x=0X1C0BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1C0C6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1C0CA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1C0D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1C0D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1C0E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1C0F0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1C0F8,	"priMask",	0);
	create_insn	(0X1C102);
	create_insn	(x=0X1C104);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X1C104,	"OSSched");
	create_insn	(x=0X1C10E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1C116,	"CPU_INT_DIS",	1);
	set_cmt	(0X1C11C,	"Find the highest priority ready",	1);
	create_insn	(x=0X1C120);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1C124);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1C12E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1C132);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1C13E,	"Inc. # of context switches to this task",	1);
	create_insn	(x=0X1C142);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1C146,	"Increment context switch counter",	1);
	create_insn	(x=0X1C14A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1C152,	"priMask",	0);
	create_insn	(0X1C15C);
	create_insn	(x=0X1C15E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X1C15E,	"OS_SchedLockTimeMeasStart");
	create_insn	(x=0X1C16C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1C172);
	set_name	(0X1C172,	"OSSchedLock");
	create_insn	(x=0X1C176);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1C184);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1C192);
	set_cmt	(0X1C1AA,	"priMask",	0);
	create_insn	(x=0X1C1B6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X1C1B6,	"OS_SchedLockTimeMeasStop");
	create_insn	(x=0X1C1C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1C1CA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1C1D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1C1E0);
	set_name	(0X1C1E0,	"OSSchedUnlock");
	create_insn	(x=0X1C1E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1C1F2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1C206);
	op_hex		(x,	1);
	set_cmt	(0X1C212,	"priMask",	0);
	create_insn	(0X1C21E);
	create_insn	(0X1C224);
	set_cmt	(0X1C22C,	"priMask",	0);
	create_insn	(0X1C23C);
	set_name	(0X1C23C,	"OSStart");
	create_insn	(x=0X1C23E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1C24E);
	create_insn	(x=0X1C252);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1C256);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1C25A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1C264);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1C268);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1C274);
	op_enum		(x,	1,	GetEnum("OS_ERR"),0);
	create_insn	(0X1C27A);
	set_name	(0X1C27A,	"OSVersion");
	create_insn	(x=0X1C27E);
	op_dec		(x,	1);
	create_insn	(0X1C284);
	set_name	(0X1C284,	"OS_PendDbgNameAdd");
	create_insn	(0X1C296);
	create_insn	(x=0X1C2A2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1C2A6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1C2AA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1C2B2);
	set_name	(0X1C2B2,	"OS_PendListInsertPrio");
	create_insn	(0X1C2C8);
	create_insn	(0X1C2D4);
	create_insn	(0X1C2E6);
	create_insn	(0X1C2F6);
	create_insn	(0X1C302);
	create_insn	(0X1C30C);
	set_name	(0X1C30C,	"OS_PendDataInit");
	create_insn	(0X1C318);
	create_insn	(0X1C33C);
	set_name	(0X1C33C,	"OS_RdyListRemove");
	create_insn	(x=0X1C344);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1C368);
	create_insn	(0X1C376);
	create_insn	(0X1C378);
	create_byte	(0X1C37A);
	make_array	(0X1C37A,	0X2);
	create_dword	(x=0X1C37C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1C380);
	make_array	(x,	0X3);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X1C38C,	0X1C3A0);
	set_name	(0X1C38C,	"aUcOsIiiIdleTask");
	create_dword	(x=0X1C3A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1C3A4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1C3A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1C3AC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1C3B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1C3B4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1C3B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1C3BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1C3C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1C3C4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1C3C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1C3CC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1C3D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1C3D4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1C3D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1C3DC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X1C3E0,	0X1C3E2);
	create_strlit	(0X1C3E4,	0X1C3EB);
	set_name	(0X1C3E4,	"aTaskQ");
	create_byte	(0X1C3EB);
	create_strlit	(0X1C3EC,	0X1C3F5);
	set_name	(0X1C3EC,	"aTaskSem");
	create_byte	(0X1C3F5);
	make_array	(0X1C3F5,	0X3);
	create_insn	(0X1C3F8);
	set_cmt	(0X1C3FE,	"prio",	0);
	create_insn	(0X1C408);
	create_insn	(0X1C40C);
	set_name	(0X1C40C,	"OS_TaskBlock");
	set_cmt	(0X1C414,	"p_err",	0);
	set_cmt	(0X1C416,	"opt",	0);
	create_insn	(x=0X1C41C);
	op_stkvar	(x,	1);
	set_cmt	(0X1C426,	"p_tcb",	0);
	create_insn	(0X1C42E);
	create_insn	(0X1C436);
	set_name	(0X1C436,	"OS_Pend");
	create_insn	(x=0X1C43A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1C440,	"p_tcb",	0);
	set_cmt	(0X1C444,	"timeout",	0);
	set_cmt	(0X1C45A,	"tbl_size",	0);
	set_cmt	(0X1C45C,	"p_pend_data_tbl",	0);
	set_cmt	(0X1C45E,	"p_tcb",	0);
	set_cmt	(0X1C464,	"p_pend_data",	0);
	set_cmt	(0X1C466,	"p_pend_list",	0);
	create_insn	(0X1C46E);
	set_cmt	(0X1C474,	"p_obj",	0);
	set_cmt	(0X1C476,	"p_tcb",	0);
	create_insn	(0X1C47E);
	set_name	(0X1C47E,	"OS_PendListRemove1");
	create_insn	(0X1C4A0);
	create_insn	(0X1C4A6);
	create_insn	(0X1C4AE);
	create_insn	(0X1C4B4);
	set_name	(0X1C4B4,	"OS_PendListRemove");
	create_insn	(0X1C4BE);
	set_cmt	(0X1C4C0,	"p_pend_data",	0);
	set_cmt	(0X1C4C2,	"p_pend_list",	0);
	create_insn	(0X1C4DA);
	set_name	(0X1C4DA,	"OS_PendAbort1");
	create_insn	(0X1C4E2);
	create_insn	(0X1C4EE);
	create_insn	(0X1C4FA);
	set_name	(0X1C4FA,	"OS_RdyListInsertHead");
	create_insn	(x=0X1C4FE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1C520);
	create_insn	(0X1C52E);
	set_name	(0X1C52E,	"OS_RdyListInsertTail");
	create_insn	(x=0X1C532);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1C552);
	create_insn	(0X1C55E);
	set_name	(0X1C55E,	"OS_RdyListInsert");
	set_cmt	(0X1C562,	"prio",	0);
	create_insn	(x=0X1C56A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1C574,	"p_tcb",	0);
	create_insn	(0X1C57E);
	create_insn	(0X1C584);
	set_name	(0X1C584,	"OS_TaskRdy");
	set_cmt	(0X1C594,	"p_tcb",	0);
	create_insn	(0X1C59C);
	create_insn	(0X1C59E);
	set_name	(0X1C59E,	"OS_PendAbort");
	set_cmt	(0X1C5B2,	"switch 8 cases ",	0);
	set_cmt	(0X1C5B6,	"switch jump",	0);
	set_cmt	(0X1C5BA,	"jump table for switch statement",	0);
	create_byte	(0X1C5BA);
	set_name	(0X1C5BA,	"jpt_125B6");
	create_byte	(0X1C5BB);
	create_byte	(0X1C5BC);
	create_byte	(0X1C5BD);
	create_byte	(0X1C5BE);
	create_byte	(0X1C5BF);
	set_cmt	(0X1C5C0,	"ts",	0);
	create_byte	(0X1C5C0);
	create_byte	(0X1C5C1);
	set_cmt	(0X1C5C2,	"jumptable 000125B6 cases 2,3",	1);
	create_insn	(0X1C5C2);
	set_cmt	(0X1C5CA,	"p_tcb",	0);
	set_cmt	(0X1C5CC,	"p_obj",	0);
	set_cmt	(0X1C5DC,	"p_tcb",	0);
	set_cmt	(0X1C5E2,	"p_tcb",	0);
	set_cmt	(0X1C5EE,	"jumptable 000125B6 cases 6,7",	1);
	create_insn	(0X1C5EE);
	set_cmt	(0X1C5F6,	"p_tcb",	0);
	set_cmt	(0X1C5F8,	"p_obj",	0);
	set_cmt	(0X1C608,	"p_tcb",	0);
	set_cmt	(0X1C60E,	"p_tcb",	0);
	set_cmt	(0X1C622,	"jumptable 000125B6 default case",	1);
	set_name	(0X1C622,	"def_126CC");
	create_insn	(x=0X1C626);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X1C626,	"OS_PendDbgNameRemove");
	create_insn	(x=0X1C636);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1C63C);
	set_name	(0X1C63C,	"OS_PendListChangePrio");
	create_insn	(0X1C648);
	set_cmt	(0X1C652,	"p_pend_data",	0);
	set_cmt	(0X1C654,	"p_pend_list",	0);
	set_cmt	(0X1C65A,	"p_pend_data",	0);
	set_cmt	(0X1C65C,	"p_pend_list",	0);
	create_insn	(0X1C66E);
	set_name	(0X1C66E,	"OS_PendListInit");
	create_insn	(0X1C678);
	set_name	(0X1C678,	"OS_PendListInsertHead");
	create_insn	(0X1C698);
	set_name	(0X1C698,	"OS_PendObjDel1");
	create_insn	(0X1C6A0);
	create_insn	(0X1C6AC);
	create_insn	(0X1C6B8);
	set_name	(0X1C6B8,	"OS_PendObjDel");
	set_cmt	(0X1C6C8,	"switch 8 cases ",	0);
	set_cmt	(0X1C6CC,	"switch jump",	0);
	set_cmt	(0X1C6D0,	"jump table for switch statement",	0);
	create_byte	(0X1C6D0);
	set_name	(0X1C6D0,	"jpt_126CC");
	create_byte	(0X1C6D1);
	create_byte	(0X1C6D2);
	create_byte	(0X1C6D3);
	create_byte	(0X1C6D4);
	create_byte	(0X1C6D5);
	create_byte	(0X1C6D6);
	create_byte	(0X1C6D7);
	set_cmt	(0X1C6D8,	"jumptable 000126CC cases 2,3",	1);
	create_insn	(0X1C6D8);
	set_cmt	(0X1C6E0,	"ts",	0);
	set_cmt	(0X1C6E2,	"p_tcb",	0);
	set_cmt	(0X1C6EE,	"p_tcb",	0);
	set_cmt	(0X1C6F6,	"p_tcb",	0);
	set_cmt	(0X1C702,	"jumptable 000126CC cases 6,7",	1);
	create_insn	(0X1C702);
	set_cmt	(0X1C70A,	"ts",	0);
	set_cmt	(0X1C70C,	"p_tcb",	0);
	set_cmt	(0X1C718,	"p_tcb",	0);
	set_cmt	(0X1C720,	"p_tcb",	0);
	set_cmt	(0X1C734,	"jumptable 000126CC cases 0,1,4,5",	1);
	create_insn	(0X1C736);
	set_name	(0X1C736,	"OS_Post1");
	create_insn	(x=0X1C73A);
	op_stkvar	(x,	1);
	create_insn	(0X1C740);
	create_insn	(0X1C750);
	create_insn	(0X1C75C);
	set_name	(0X1C75C,	"OS_Post");
	create_insn	(x=0X1C768);
	op_stkvar	(x,	1);
	set_cmt	(0X1C76A,	"switch 8 cases ",	0);
	set_cmt	(0X1C76E,	"switch jump",	0);
	set_cmt	(0X1C772,	"jump table for switch statement",	0);
	create_byte	(0X1C772);
	set_name	(0X1C772,	"jpt_1276E");
	create_byte	(0X1C773);
	create_byte	(0X1C774);
	create_byte	(0X1C775);
	create_byte	(0X1C776);
	create_byte	(0X1C777);
	create_byte	(0X1C778);
	create_byte	(0X1C779);
	set_cmt	(0X1C77A,	"jumptable 0001276E cases 2,3",	1);
	create_insn	(0X1C77A);
	set_cmt	(0X1C78C,	"p_tcb",	0);
	set_cmt	(0X1C792,	"p_tcb",	0);
	set_cmt	(0X1C794,	"p_obj",	0);
	set_cmt	(0X1C79A,	"p_tcb",	0);
	set_cmt	(0X1C7A6,	"ts",	0);
	create_insn	(x=0X1C7A6);
	op_stkvar	(x,	1);
	set_cmt	(0X1C7A8,	"p_tcb",	0);
	set_cmt	(0X1C7AA,	"p_obj",	0);
	set_cmt	(0X1C7B2,	"jumptable 0001276E cases 6,7",	1);
	create_insn	(0X1C7B2);
	set_cmt	(0X1C7C2,	"p_tcb",	0);
	set_cmt	(0X1C7CA,	"p_tcb",	0);
	set_cmt	(0X1C7D0,	"p_tcb",	0);
	set_cmt	(0X1C7D2,	"p_obj",	0);
	set_cmt	(0X1C7E6,	"jumptable 0001276E default case",	1);
	set_name	(0X1C7E6,	"def_1276E");
	set_cmt	(0X1C7E8,	"ts",	0);
	create_insn	(x=0X1C7E8);
	op_stkvar	(x,	1);
	set_cmt	(0X1C7EA,	"p_tcb",	0);
	set_cmt	(0X1C7EC,	"p_obj",	0);
	create_insn	(0X1C7F4);
	create_insn	(0X1C816);
	create_dword	(x=0X1C828);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1C82C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1C830);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X1C834,	0X1C836);
	create_byte	(0X1C836);
	make_array	(0X1C836,	0X2);
	create_insn	(0X1C838);
	set_name	(0X1C838,	"OSIdleTaskHook");
	create_insn	(0X1C83A);
	set_name	(0X1C83A,	"OSInitHook");
	set_cmt	(0X1C83C,	"OSCfg_ISRStkunk1",	1);
	create_insn	(x=0X1C83C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1C840,	"OSCfg_ISRStkunk2",	1);
	create_insn	(x=0X1C840);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1C848);
	create_insn	(x=0X1C854);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1C860);
	set_name	(0X1C860,	"OSStatTaskHook");
	create_insn	(0X1C862);
	set_name	(0X1C862,	"OSTaskCreateHook");
	create_insn	(0X1C864);
	set_name	(0X1C864,	"OSTaskDelHook");
	create_insn	(0X1C866);
	set_name	(0X1C866,	"OSTaskReturnHook");
	create_insn	(0X1C868);
	set_name	(0X1C868,	"OSTaskStkInit");
	create_insn	(x=0X1C86A);
	op_stkvar	(x,	1);
	set_cmt	(0X1C878,	"OS_TaskReturn ?",	1);
	create_insn	(x=0X1C878);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1C8C4);
	set_name	(0X1C8C4,	"OSTaskSwHook");
	create_insn	(x=0X1C8CA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1C8CC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1C8D6);
	op_stroff	(x,	1,	GetStrucIdByName("OS_TCB"),	0);
	create_insn	(x=0X1C8DC);
	op_stroff	(x,	1,	GetStrucIdByName("OS_TCB"),	0);
	create_insn	(x=0X1C8E6);
	op_stroff	(x,	1,	GetStrucIdByName("OS_TCB"),	0);
	create_insn	(x=0X1C8F0);
	op_stroff	(x,	1,	GetStrucIdByName("OS_TCB"),	0);
	create_insn	(x=0X1C8F8);
	op_stroff	(x,	1,	GetStrucIdByName("OS_TCB"),	0);
	create_insn	(x=0X1C8FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1C8FE);
	op_stroff	(x,	1,	GetStrucIdByName("OS_TCB"),	0);
	create_insn	(x=0X1C908);
	op_stroff	(x,	1,	GetStrucIdByName("OS_TCB"),	0);
	create_insn	(0X1C912);
	set_name	(0X1C912,	"OSTimeTickHook");
	create_insn	(0X1C914);
	set_name	(0X1C914,	"OS_CPU_SysTickHandler");
	create_insn	(x=0X1C920);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1C92C,	"priMask",	0);
	create_insn	(0X1C93E);
	set_name	(0X1C93E,	"OS_CPU_SysTickInit");
	create_insn	(x=0X1C944);
	op_plain_offset	(x,	1,	0XE000E000);
	op_plain_offset	(x,	129,	0XE000E000);
	create_insn	(x=0X1C946);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1C94A);
	op_hex		(x,	1);
	create_insn	(x=0X1C950);
	op_plain_offset	(x,	1,	0XE000E000);
	op_plain_offset	(x,	129,	0XE000E000);
	create_insn	(x=0X1C952);
	op_hex		(x,	1);
	create_insn	(x=0X1C956);
	op_plain_offset	(x,	1,	0XE000E000);
	op_plain_offset	(x,	129,	0XE000E000);
	create_insn	(x=0X1C958);
	op_plain_offset	(x,	1,	0XE000E000);
	op_plain_offset	(x,	129,	0XE000E000);
	create_insn	(x=0X1C95A);
	op_hex		(x,	1);
	create_insn	(x=0X1C95E);
	op_plain_offset	(x,	1,	0XE000E000);
	op_plain_offset	(x,	129,	0XE000E000);
	create_byte	(0X1C962);
	make_array	(0X1C962,	0X2);
	create_dword	(x=0X1C964);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1C968);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1C96C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1C970);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1C974);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1C978);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1C97C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1C980);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1C984);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1C988);
	set_name	(0X1C988,	"OS_Dbg_Init");
	create_byte	(0X1C98A);
	make_array	(0X1C98A,	0X2);
	create_insn	(0X1C98C);
	set_name	(0X1C98C,	"OS_MsgPoolCreate");
	create_insn	(0X1C99C);
	create_insn	(0X1C9BC);
	set_name	(0X1C9BC,	"OS_MsgUnkn_129BC");
	create_insn	(x=0X1C9C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1C9D6);
	op_plain_offset	(x,	1,	0X100004A8);
	op_plain_offset	(x,	129,	0X100004A8);
	create_insn	(x=0X1C9DA);
	op_plain_offset	(x,	1,	0X100004A8);
	op_plain_offset	(x,	129,	0X100004A8);
	create_insn	(0X1C9E2);
	set_name	(0X1C9E2,	"OS_MsgPoolInit");
	create_insn	(x=0X1C9E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1C9E6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1C9EA,	"size",	0);
	set_cmt	(0X1C9EC,	"p_msg",	0);
	create_insn	(x=0X1C9F2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1C9FC);
	op_plain_offset	(x,	1,	0X100004A8);
	op_plain_offset	(x,	129,	0X100004A8);
	create_insn	(x=0X1C9FE);
	op_plain_offset	(x,	1,	0X100004A8);
	op_plain_offset	(x,	129,	0X100004A8);
	create_insn	(0X1CA04);
	set_cmt	(0X1CA1A,	"priMask",	0);
	create_insn	(0X1CA24);
	set_name	(0X1CA24,	"OS_MsgQFreeAll");
	create_insn	(x=0X1CA2A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1CA36);
	op_plain_offset	(x,	1,	0X100004A8);
	op_plain_offset	(x,	129,	0X100004A8);
	create_insn	(x=0X1CA3C);
	op_plain_offset	(x,	1,	0X100004A8);
	op_plain_offset	(x,	129,	0X100004A8);
	create_insn	(x=0X1CA3E);
	op_plain_offset	(x,	1,	0X100004A8);
	op_plain_offset	(x,	129,	0X100004A8);
	create_insn	(x=0X1CA42);
	op_plain_offset	(x,	1,	0X100004A8);
	op_plain_offset	(x,	129,	0X100004A8);
	create_insn	(0X1CA52);
	set_name	(0X1CA52,	"OS_MsgQInit");
	create_insn	(0X1CA60);
	set_name	(0X1CA60,	"OS_MsgQGet");
	create_insn	(x=0X1CA82);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1CA8A);
	op_plain_offset	(x,	1,	0X100004A8);
	op_plain_offset	(x,	129,	0X100004A8);
	create_insn	(x=0X1CA8E);
	op_plain_offset	(x,	1,	0X100004A8);
	op_plain_offset	(x,	129,	0X100004A8);
	create_insn	(x=0X1CA90);
	op_plain_offset	(x,	1,	0X100004A8);
	op_plain_offset	(x,	129,	0X100004A8);
	create_insn	(x=0X1CA94);
	op_plain_offset	(x,	1,	0X100004A8);
	op_plain_offset	(x,	129,	0X100004A8);
	create_insn	(0X1CA9C);
	create_insn	(0X1CAAC);
	create_insn	(0X1CAB2);
	set_name	(0X1CAB2,	"OS_MsgQPut");
	create_insn	(x=0X1CAC8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1CACA);
	op_plain_offset	(x,	1,	0X100004A8);
	op_plain_offset	(x,	129,	0X100004A8);
	create_insn	(x=0X1CAE2);
	op_plain_offset	(x,	1,	0X100004A8);
	op_plain_offset	(x,	129,	0X100004A8);
	create_insn	(x=0X1CAE6);
	op_plain_offset	(x,	1,	0X100004A8);
	op_plain_offset	(x,	129,	0X100004A8);
	create_insn	(x=0X1CAEE);
	op_plain_offset	(x,	1,	0X100004A8);
	op_plain_offset	(x,	129,	0X100004A8);
	create_insn	(0X1CB04);
	create_insn	(0X1CB0E);
	create_insn	(0X1CB16);
	create_dword	(x=0X1CB38);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1CB3C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1CB40);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1CB44);
	set_name	(0X1CB44,	"OS_PrioInit");
	create_insn	(x=0X1CB46);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1CB54);
	set_name	(0X1CB54,	"OS_PrioGetHighest");
	create_insn	(x=0X1CB58);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1CB5C);
	set_cmt	(0X1CB68,	"val",	0);
	create_insn	(x=0X1CB74);
	op_hex		(x,	1);
	set_name	(0X1CB74,	"OS_PrioInsert");
	create_insn	(x=0X1CB82);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1CB90);
	op_hex		(x,	1);
	set_name	(0X1CB90,	"OS_PrioRemove");
	create_insn	(x=0X1CB9E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X1CBAC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1CBB0);
	set_name	(0X1CBB0,	"OS_SemDbgListAdd");
	create_insn	(x=0X1CBB2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1CBB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1CBC6);
	create_insn	(0X1CBCA);
	set_name	(0X1CBCA,	"OSSemCreate");
	set_cmt	(0X1CBEC,	"p_pend_list",	0);
	set_cmt	(0X1CBF4,	"p_sem",	0);
	create_insn	(x=0X1CBFA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1CC06,	"priMask",	0);
	create_insn	(0X1CC14);
	set_name	(0X1CC14,	"OS_SemClr");
	create_insn	(x=0X1CC22);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1CC2A);
	set_name	(0X1CC2A,	"OS_SemDbgListRemove");
	create_insn	(x=0X1CC3E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1CC4A);
	create_insn	(0X1CC4E);
	set_name	(0X1CC4E,	"OSSemDel");
	set_cmt	(0X1CC58,	"CPU_CRITICAL_ENTER 1/2",	1);
	create_insn	(x=0X1CC5C);
	op_stkvar	(x,	1);
	set_cmt	(0X1CC5E,	"CPU_CRITICAL_ENTER 2/2",	1);
	create_insn	(x=0X1CC6A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1CC82,	"priMask",	0);
	create_insn	(x=0X1CC82);
	op_stkvar	(x,	1);
	create_insn	(0X1CC8E);
	set_cmt	(0X1CC94,	"priMask",	0);
	create_insn	(x=0X1CC94);
	op_stkvar	(x,	1);
	set_cmt	(0X1CCA2,	"p_sem",	0);
	create_insn	(0X1CCA2);
	set_cmt	(0X1CCAC,	"p_sem",	0);
	set_cmt	(0X1CCBC,	"priMask",	0);
	create_insn	(x=0X1CCBC);
	op_stkvar	(x,	1);
	create_insn	(0X1CCC4);
	create_insn	(0X1CCCC);
	set_cmt	(0X1CCCE,	"ts",	0);
	set_cmt	(0X1CCD0,	"p_tcb",	0);
	set_cmt	(0X1CCD2,	"p_obj",	0);
	set_cmt	(0X1CCE0,	"p_sem",	0);
	set_cmt	(0X1CCEA,	"p_sem",	0);
	set_cmt	(0X1CCF6,	"CPU_CRITICAL_EXIT 1/2",	1);
	set_cmt	(0X1CCFA,	"priMask",	0);
	create_insn	(x=0X1CCFA);
	op_stkvar	(x,	1);
	set_cmt	(0X1CCFC,	"CPU_CRITICAL_EXIT 2/2",	1);
	create_insn	(0X1CD0E);
	set_name	(0X1CD0E,	"OSSemPend");
	create_insn	(x=0X1CD16);
	op_stkvar	(x,	1);
	set_cmt	(0X1CD4E,	"priMask",	0);
	create_insn	(0X1CD58);
	set_cmt	(0X1CD62,	"priMask",	0);
	create_insn	(x=0X1CD76);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1CD80,	"priMask",	0);
	set_cmt	(0X1CD8E,	"timeout",	0);
	create_insn	(0X1CD8E);
	set_cmt	(0X1CD90,	"pending_on",	0);
	create_insn	(x=0X1CD90);
	op_enum		(x,	1,	GetEnum("OS_STATE_PEND"),0);
	set_cmt	(0X1CD92,	"p_obj",	0);
	set_cmt	(0X1CD94,	"p_pend_data",	0);
	set_cmt	(0X1CD9E,	"priMask",	0);
	create_insn	(x=0X1CDB2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1CDD2,	"priMask",	0);
	create_insn	(0X1CDDC);
	create_insn	(0X1CDE6);
	create_insn	(0X1CDF2);
	set_cmt	(0X1CE02,	"priMask",	0);
	create_insn	(0X1CE0C);
	create_insn	(0X1CE18);
	set_name	(0X1CE18,	"OSSemPendAbort");
	create_insn	(0X1CE44);
	set_cmt	(0X1CE48,	"priMask",	0);
	create_insn	(0X1CE5A);
	set_cmt	(0X1CE5C,	"ts",	0);
	set_cmt	(0X1CE5E,	"p_tcb",	0);
	set_cmt	(0X1CE60,	"p_obj",	0);
	set_cmt	(0X1CE78,	"priMask",	0);
	create_insn	(0X1CE8E);
	set_name	(0X1CE8E,	"OS_SemPost");
	create_insn	(0X1CEBC);
	set_cmt	(0X1CECC,	"priMask",	0);
	create_insn	(0X1CED4);
	set_cmt	(0X1CED8,	"priMask",	0);
	set_cmt	(0X1CEE8,	"p_tcb",	0);
	create_insn	(0X1CEE8);
	set_cmt	(0X1CEEC,	"msg_size",	0);
	set_cmt	(0X1CEEE,	"p_void",	0);
	set_cmt	(0X1CEF0,	"p_obj",	0);
	set_cmt	(0X1CEF2,	"ts",	0);
	create_insn	(x=0X1CEF2);
	op_stkvar	(x,	1);
	set_cmt	(0X1CF08,	"priMask",	0);
	create_insn	(0X1CF20);
	set_name	(0X1CF20,	"OSSemPost");
	set_cmt	(0X1CF2C,	"ts",	0);
	set_cmt	(0X1CF2E,	"p_err",	0);
	set_cmt	(0X1CF30,	"opt",	0);
	set_cmt	(0X1CF32,	"p_sem",	0);
	create_insn	(x=0X1CF3A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X1CF3A,	"OS_SemInit");
	create_insn	(x=0X1CF40);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_strlit	(0X1CF48,	0X1CF4A);
	create_byte	(0X1CF4A);
	make_array	(0X1CF4A,	0X2);
	create_dword	(x=0X1CF4C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X1CF50,	0X1CF54);
	set_name	(0X1CF50,	"aSema");
	create_dword	(x=0X1CF54);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X1CF58,	0X1CF5C);
	set_name	(0X1CF58,	"aNoneSem");
	create_strlit	(0X1CF5C,	0X1CF61);
	set_name	(0X1CF5C,	"aSem");
	create_byte	(0X1CF61);
	make_array	(0X1CF61,	0X3);
	create_dword	(x=0X1CF64);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1CF68);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1CF6C);
	set_name	(0X1CF6C,	"OSTaskChangePrio");
	create_insn	(0X1CF84);
	set_cmt	(0X1CF96,	"switch 8 cases ",	0);
	set_cmt	(0X1CF9A,	"switch jump",	0);
	set_cmt	(0X1CF9E,	"jump table for switch statement",	0);
	create_byte	(0X1CF9E);
	set_name	(0X1CF9E,	"jpt_12F9A");
	create_byte	(0X1CF9F);
	create_byte	(0X1CFA0);
	create_byte	(0X1CFA1);
	create_byte	(0X1CFA2);
	create_byte	(0X1CFA3);
	create_byte	(0X1CFA4);
	create_byte	(0X1CFA5);
	create_insn	(0X1CFA6);
	create_insn	(x=0X1CFB0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1CFB8,	"priMask",	0);
	set_cmt	(0X1CFC2,	"jumptable 00012F9A case 0",	1);
	create_insn	(0X1CFC2);
	set_cmt	(0X1CFCC,	"prio",	0);
	set_cmt	(0X1CFD2,	"p_tcb",	0);
	create_insn	(0X1CFDC);
	set_cmt	(0X1CFE2,	"jumptable 00012F9A cases 2,3,6,7",	1);
	create_insn	(0X1CFE2);
	set_cmt	(0X1CFE6,	"switch 8 cases ",	0);
	set_cmt	(0X1CFEA,	"switch jump",	0);
	set_cmt	(0X1CFEE,	"jump table for switch statement",	0);
	create_byte	(0X1CFEE);
	set_name	(0X1CFEE,	"jpt_12FEA");
	create_byte	(0X1CFEF);
	create_byte	(0X1CFF0);
	create_byte	(0X1CFF1);
	create_byte	(0X1CFF2);
	create_byte	(0X1CFF3);
	create_byte	(0X1CFF4);
	create_byte	(0X1CFF5);
	set_cmt	(0X1CFF6,	"jumptable 00012F9A cases 1,4,5\njumptable 00012FEA cases 1,2,7",	1);
	create_insn	(0X1CFF6);
	set_cmt	(0X1CFFC,	"jumptable 00012FEA cases 3-6",	1);
	create_insn	(0X1CFFC);
	set_cmt	(0X1CFFE,	"p_tcb",	0);
	set_cmt	(0X1D004,	"jumptable 00012FEA default case",	1);
	set_name	(0X1D004,	"def_12FEA");
	set_cmt	(0X1D008,	"priMask",	0);
	set_cmt	(0X1D018,	"jumptable 00012F9A default case",	1);
	create_insn	(0X1D018);
	set_name	(0X1D018,	"def_12F9A");
	set_cmt	(0X1D01C,	"priMask",	0);
	create_insn	(x=0X1D028);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X1D028,	"OS_TaskDbgListAdd");
	create_insn	(0X1D040);
	create_insn	(0X1D046);
	set_name	(0X1D046,	"OS_TaskInitTCB");
	create_insn	(x=0X1D05A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1D06E,	"size",	0);
	set_cmt	(0X1D070,	"p_msg_q",	0);
	create_insn	(x=0X1D0C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1D0CA);
	set_name	(0X1D0CA,	"OSTaskCreate");
	create_insn	(x=0X1D0DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1D0E6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1D0FA,	"p_tcb",	0);
	create_insn	(0X1D0FA);
	create_insn	(0X1D114);
	create_insn	(x=0X1D11C);
	op_stkvar	(x,	1);
	set_cmt	(0X1D11E,	"stk_size",	0);
	set_cmt	(0X1D128,	"p_stk_limit",	0);
	set_cmt	(0X1D12A,	"p_stk_base",	0);
	set_cmt	(0X1D12C,	"p_arg",	0);
	set_cmt	(0X1D12E,	"p_task",	0);
	create_insn	(x=0X1D138);
	op_stkvar	(x,	1);
	create_insn	(x=0X1D146);
	op_stkvar	(x,	1);
	create_insn	(x=0X1D14A);
	op_stkvar	(x,	1);
	set_cmt	(0X1D154,	"p_msg_q",	0);
	set_cmt	(0X1D158,	"size",	0);
	create_insn	(x=0X1D158);
	op_stkvar	(x,	1);
	set_cmt	(0X1D15E,	"p_tcb",	0);
	set_cmt	(0X1D16E,	"prio",	0);
	set_cmt	(0X1D176,	"p_tcb",	0);
	set_cmt	(0X1D17C,	"p_tcb",	0);
	create_insn	(x=0X1D182);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1D18A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1D198,	"priMask",	0);
	create_insn	(0X1D1A2);
	set_cmt	(0X1D1A6,	"priMask",	0);
	create_insn	(0X1D1B6);
	set_name	(0X1D1B6,	"OSTaskQFlush");
	create_insn	(x=0X1D1C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1D1D0,	"priMask",	0);
	set_cmt	(0X1D1E0,	"p_msg_q",	0);
	create_insn	(x=0X1D1E0);
	op_stroff	(x,	1,	GetStrucIdByName("OS_TCB"),	0);
	set_cmt	(0X1D1EE,	"priMask",	0);
	create_insn	(0X1D1FC);
	set_name	(0X1D1FC,	"OSTaskQPend");
	create_insn	(x=0X1D202);
	op_stkvar	(x,	1);
	create_insn	(x=0X1D218);
	op_stkvar	(x,	1);
	create_insn	(x=0X1D21E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1D222,	"p_err",	0);
	set_cmt	(0X1D224,	"p_ts",	0);
	set_cmt	(0X1D22A,	"p_msg_size",	0);
	set_cmt	(0X1D22C,	"p_msg_q",	0);
	set_cmt	(0X1D246,	"priMask",	0);
	create_insn	(x=0X1D246);
	op_stkvar	(x,	1);
	create_insn	(0X1D24E);
	set_cmt	(0X1D26A,	"priMask",	0);
	create_insn	(x=0X1D26A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1D276);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1D280,	"priMask",	0);
	create_insn	(x=0X1D280);
	op_stkvar	(x,	1);
	set_cmt	(0X1D290,	"p_obj",	0);
	create_insn	(0X1D290);
	set_cmt	(0X1D292,	"timeout",	0);
	set_cmt	(0X1D294,	"pending_on",	0);
	create_insn	(x=0X1D294);
	op_enum		(x,	1,	GetEnum("OS_STATE_PEND"),0);
	set_cmt	(0X1D296,	"p_pend_data",	0);
	set_cmt	(0X1D2A0,	"priMask",	0);
	create_insn	(x=0X1D2A0);
	op_stkvar	(x,	1);
	set_cmt	(0X1D2DE,	"priMask",	0);
	create_insn	(0X1D2E8);
	create_insn	(0X1D318);
	create_insn	(0X1D328);
	set_name	(0X1D328,	"OS_TaskQPost");
	create_insn	(x=0X1D344);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1D350,	"switch 8 cases ",	0);
	set_cmt	(0X1D354,	"switch jump",	0);
	set_cmt	(0X1D358,	"jump table for switch statement",	0);
	create_byte	(0X1D358);
	set_name	(0X1D358,	"jpt_13354");
	create_byte	(0X1D359);
	create_byte	(0X1D35A);
	create_byte	(0X1D35B);
	create_byte	(0X1D35C);
	create_byte	(0X1D35D);
	create_byte	(0X1D35E);
	create_byte	(0X1D35F);
	set_cmt	(0X1D360,	"jumptable 00013354 cases 2,3,6,7",	1);
	create_insn	(0X1D360);
	set_cmt	(0X1D368,	"jumptable 00013354 cases 0,1,4,5",	1);
	set_cmt	(0X1D36C,	"opt",	0);
	set_cmt	(0X1D36E,	"msg_size",	0);
	set_cmt	(0X1D370,	"p_void",	0);
	set_cmt	(0X1D372,	"p_msg_q",	0);
	set_cmt	(0X1D37E,	"priMask",	0);
	set_cmt	(0X1D388,	"msg_size",	0);
	create_insn	(0X1D388);
	set_cmt	(0X1D38A,	"p_void",	0);
	set_cmt	(0X1D38C,	"p_tcb",	0);
	set_cmt	(0X1D38E,	"p_obj",	0);
	set_cmt	(0X1D390,	"ts",	0);
	create_insn	(x=0X1D390);
	op_stkvar	(x,	1);
	set_cmt	(0X1D39A,	"priMask",	0);
	create_byte	(0X1D3AA);
	make_array	(0X1D3AA,	0X2);
	create_dword	(x=0X1D3AC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1D3B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X1D3B4,	0X1D3BA);
	set_name	(0X1D3B4,	"aTask");
	create_byte	(0X1D3BA);
	make_array	(0X1D3BA,	0X2);
	create_strlit	(0X1D3BC,	0X1D3BE);
	create_byte	(0X1D3BE);
	make_array	(0X1D3BE,	0X2);
	create_dword	(x=0X1D3C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1D3C4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1D3C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1D3CC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1D3D0);
	set_name	(0X1D3D0,	"j_OSSched");
	set_cmt	(0X1D3D4,	"jumptable 00013354 default case",	1);
	create_insn	(0X1D3D4);
	set_name	(0X1D3D4,	"def_13354");
	set_cmt	(0X1D3D8,	"priMask",	0);
	create_insn	(0X1D3E8);
	set_name	(0X1D3E8,	"OSTaskQPost");
	create_insn	(x=0X1D3F4);
	op_stkvar	(x,	1);
	set_cmt	(0X1D3FA,	"ts",	0);
	set_cmt	(0X1D3FE,	"opt",	0);
	set_cmt	(0X1D400,	"msg_size",	0);
	set_cmt	(0X1D402,	"p_void",	0);
	set_cmt	(0X1D404,	"p_tcb",	0);
	create_insn	(0X1D40E);
	set_name	(0X1D40E,	"OS_TaskResume");
	set_cmt	(0X1D426,	"switch 8 cases ",	0);
	set_cmt	(0X1D42A,	"switch jump",	0);
	set_cmt	(0X1D42E,	"jump table for switch statement",	0);
	create_byte	(0X1D42E);
	set_name	(0X1D42E,	"jpt_1342A");
	create_byte	(0X1D42F);
	create_byte	(0X1D430);
	create_byte	(0X1D431);
	create_byte	(0X1D432);
	create_byte	(0X1D433);
	create_byte	(0X1D434);
	create_byte	(0X1D435);
	set_cmt	(0X1D436,	"jumptable 0001342A cases 0-3",	1);
	create_insn	(0X1D436);
	set_cmt	(0X1D43A,	"priMask",	0);
	set_cmt	(0X1D448,	"jumptable 0001342A case 4",	1);
	create_insn	(0X1D448);
	create_insn	(x=0X1D44E);
	op_hex		(x,	1);
	set_cmt	(0X1D45C,	"p_tcb",	0);
	set_cmt	(0X1D466,	"priMask",	0);
	set_cmt	(0X1D474,	"jumptable 0001342A case 5",	1);
	create_insn	(0X1D474);
	create_insn	(x=0X1D47A);
	op_hex		(x,	1);
	set_cmt	(0X1D488,	"jumptable 0001342A case 6",	1);
	create_insn	(0X1D488);
	create_insn	(x=0X1D48E);
	op_hex		(x,	1);
	set_cmt	(0X1D49C,	"jumptable 0001342A case 7",	1);
	create_insn	(0X1D49C);
	create_insn	(x=0X1D4A2);
	op_hex		(x,	1);
	set_cmt	(0X1D4B4,	"jumptable 0001342A default case",	1);
	create_insn	(0X1D4B4);
	set_name	(0X1D4B4,	"def_1342A");
	set_cmt	(0X1D4B8,	"priMask",	0);
	create_insn	(0X1D4C6);
	set_name	(0X1D4C6,	"OSTaskSemPend");
	create_insn	(x=0X1D4E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1D516,	"priMask",	0);
	create_insn	(0X1D524);
	set_cmt	(0X1D52E,	"priMask",	0);
	create_insn	(x=0X1D53A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1D544,	"priMask",	0);
	set_cmt	(0X1D554,	"p_obj",	0);
	create_insn	(0X1D554);
	set_cmt	(0X1D556,	"timeout",	0);
	set_cmt	(0X1D558,	"pending_on",	0);
	create_insn	(x=0X1D558);
	op_enum		(x,	1,	GetEnum("OS_STATE_PEND"),0);
	set_cmt	(0X1D55A,	"p_pend_data",	0);
	set_cmt	(0X1D564,	"priMask",	0);
	create_insn	(0X1D58E);
	create_insn	(0X1D5B2);
	create_insn	(0X1D5BE);
	set_cmt	(0X1D5D0,	"priMask",	0);
	create_insn	(0X1D5DA);
	set_name	(0X1D5DA,	"OS_TaskSemPost");
	create_insn	(x=0X1D5F2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1D600,	"switch 8 cases ",	0);
	set_cmt	(0X1D604,	"switch jump",	0);
	set_cmt	(0X1D608,	"jump table for switch statement",	0);
	create_byte	(0X1D608);
	set_name	(0X1D608,	"jpt_13604");
	create_byte	(0X1D609);
	create_byte	(0X1D60A);
	create_byte	(0X1D60B);
	create_byte	(0X1D60C);
	create_byte	(0X1D60D);
	create_byte	(0X1D60E);
	create_byte	(0X1D60F);
	set_cmt	(0X1D610,	"jumptable 00013604 cases 0,1,4,5",	1);
	create_insn	(0X1D610);
	set_cmt	(0X1D61A,	"priMask",	0);
	create_insn	(0X1D62C);
	set_cmt	(0X1D634,	"priMask",	0);
	set_cmt	(0X1D63C,	"jumptable 00013604 cases 2,3,6,7",	1);
	create_insn	(0X1D63C);
	set_cmt	(0X1D648,	"msg_size",	0);
	create_insn	(0X1D648);
	set_cmt	(0X1D64A,	"p_void",	0);
	set_cmt	(0X1D64C,	"p_tcb",	0);
	set_cmt	(0X1D64E,	"p_obj",	0);
	set_cmt	(0X1D650,	"ts",	0);
	create_insn	(x=0X1D650);
	op_stkvar	(x,	1);
	set_cmt	(0X1D65C,	"priMask",	0);
	set_cmt	(0X1D66C,	"jumptable 00013604 default case",	1);
	create_insn	(0X1D66C);
	set_name	(0X1D66C,	"def_13604");
	set_cmt	(0X1D670,	"priMask",	0);
	create_insn	(0X1D682);
	set_name	(0X1D682,	"OSTaskSemPost");
	set_cmt	(0X1D68E,	"ts",	0);
	set_cmt	(0X1D690,	"p_err",	0);
	set_cmt	(0X1D692,	"opt",	0);
	set_cmt	(0X1D694,	"p_tcb",	0);
	create_insn	(0X1D69C);
	set_name	(0X1D69C,	"OSTaskSemSet");
	create_insn	(x=0X1D6B2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1D6B6);
	op_stroff	(x,	1,	GetStrucIdByName("OS_TCB"),	0);
	create_insn	(x=0X1D6B8);
	op_stroff	(x,	1,	GetStrucIdByName("OS_TCB"),	0);
	set_cmt	(0X1D6BE,	"priMask",	0);
	create_insn	(0X1D6CC);
	set_name	(0X1D6CC,	"OS_TaskSuspend");
	create_insn	(x=0X1D6D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1D6E0);
	create_insn	(x=0X1D6EA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1D6F6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1D700,	"priMask",	0);
	create_insn	(0X1D70C);
	set_cmt	(0X1D716,	"switch 8 cases ",	0);
	set_cmt	(0X1D71A,	"switch jump",	0);
	set_cmt	(0X1D71E,	"jump table for switch statement",	0);
	create_byte	(0X1D71E);
	set_name	(0X1D71E,	"jpt_1371A");
	create_byte	(0X1D71F);
	create_byte	(0X1D720);
	create_byte	(0X1D721);
	create_byte	(0X1D722);
	create_byte	(0X1D723);
	create_byte	(0X1D724);
	create_byte	(0X1D725);
	set_cmt	(0X1D726,	"jumptable 0001371A case 0",	1);
	create_insn	(0X1D726);
	set_cmt	(0X1D730,	"p_tcb",	0);
	set_cmt	(0X1D738,	"jumptable 0001371A case 1",	1);
	create_insn	(0X1D738);
	create_insn	(0X1D73C);
	set_cmt	(0X1D740,	"priMask",	0);
	set_cmt	(0X1D74E,	"jumptable 0001371A case 2",	1);
	create_insn	(0X1D74E);
	set_cmt	(0X1D752,	"jumptable 0001371A case 3",	1);
	create_insn	(0X1D752);
	set_cmt	(0X1D75E,	"jumptable 0001371A cases 4-7",	1);
	create_insn	(0X1D75E);
	set_cmt	(0X1D768,	"jumptable 0001371A default case",	1);
	create_insn	(0X1D768);
	set_name	(0X1D768,	"def_1371A");
	set_cmt	(0X1D76C,	"priMask",	0);
	create_insn	(0X1D77A);
	set_name	(0X1D77A,	"OS_TaskDbgListRemove");
	create_insn	(x=0X1D796);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1D7A6);
	create_insn	(x=0X1D7AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X1D7AC,	"OS_TaskInit");
	create_insn	(x=0X1D7B2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1D7B6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1D7BE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X1D7BE,	"OS_TaskReturn");
	set_cmt	(0X1D7C2,	"p_tcb",	0);
	create_insn	(x=0X1D7C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1D7CA,	"p_err",	0);
	set_cmt	(0X1D7CC,	"opt",	0);
	set_cmt	(0X1D7CE,	"dly",	0);
	create_byte	(0X1D7D6);
	make_array	(0X1D7D6,	0X2);
	create_dword	(x=0X1D7D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1D7DC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1D7E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1D7E4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1D7E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1D7EC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1D7F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1D7F4);
	set_name	(0X1D7F4,	"OS_TickListRemove");
	create_insn	(0X1D810);
	create_insn	(0X1D82A);
	set_name	(0X1D82A,	"OS_TickListUpdate");
	create_insn	(x=0X1D832);
	op_stkvar	(x,	1);
	create_insn	(x=0X1D83C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1D840);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1D858);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1D870,	"switch 8 cases ",	0);
	set_cmt	(0X1D874,	"switch jump",	0);
	set_cmt	(0X1D878,	"jump table for switch statement",	0);
	create_byte	(0X1D878);
	set_name	(0X1D878,	"jpt_13874");
	create_byte	(0X1D879);
	create_byte	(0X1D87A);
	create_byte	(0X1D87B);
	create_byte	(0X1D87C);
	create_byte	(0X1D87D);
	create_byte	(0X1D87E);
	create_byte	(0X1D87F);
	set_cmt	(0X1D880,	"jumptable 00013874 case 1",	1);
	create_insn	(0X1D880);
	set_cmt	(0X1D890,	"p_tcb",	0);
	set_cmt	(0X1D898,	"jumptable 00013874 case 3",	1);
	create_insn	(0X1D898);
	set_cmt	(0X1D8B0,	"p_tcb",	0);
	set_cmt	(0X1D8B6,	"p_tcb",	0);
	set_cmt	(0X1D8C2,	"jumptable 00013874 case 5",	1);
	create_insn	(0X1D8C2);
	set_cmt	(0X1D8D2,	"p_tcb",	0);
	create_insn	(0X1D8DA);
	set_cmt	(0X1D8DC,	"jumptable 00013874 case 7",	1);
	create_insn	(0X1D8DC);
	set_cmt	(0X1D8F4,	"p_tcb",	0);
	set_cmt	(0X1D8FA,	"p_tcb",	0);
	create_insn	(0X1D90E);
	set_cmt	(0X1D910,	"jumptable 00013874 default case",	1);
	set_name	(0X1D910,	"def_13874");
	create_insn	(x=0X1D91A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1D92C,	"priMask",	0);
	create_insn	(x=0X1D92C);
	op_stkvar	(x,	1);
	create_insn	(0X1D936);
	set_name	(0X1D936,	"OS_TickTask");
	create_insn	(x=0X1D938);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1D93A,	"opt",	0);
	set_cmt	(0X1D93C,	"p_err",	0);
	set_cmt	(0X1D93E,	"p_ts",	0);
	create_insn	(x=0X1D93E);
	op_stkvar	(x,	1);
	set_cmt	(0X1D940,	"timeout",	0);
	create_insn	(x=0X1D946);
	op_stkvar	(x,	1);
	set_cmt	(0X1D950,	"OS_STATE_OS_RUNNING",	1);
	create_insn	(0X1D95A);
	set_name	(0X1D95A,	"OS_TickListInit");
	create_insn	(x=0X1D960);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1D962,	"OSCfg_TickWheelSize",	1);
	create_insn	(x=0X1D962);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1D966);
	create_insn	(0X1D97C);
	set_name	(0X1D97C,	"OS_TickTaskInit");
	create_insn	(x=0X1D980);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1D988);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1D990);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1D9A2);
	set_cmt	(0X1D9A4,	"p_ext",	0);
	create_insn	(x=0X1D9A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1D9AA,	"p_err",	0);
	create_insn	(x=0X1D9AA);
	op_stkvar	(x,	1);
	set_cmt	(0X1D9AC,	"time_quanta",	0);
	create_insn	(x=0X1D9AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1D9AE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1D9B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1D9B8,	"stk_limit",	0);
	set_cmt	(0X1D9BC,	"q_size",	0);
	create_insn	(x=0X1D9BC);
	op_stkvar	(x,	1);
	set_cmt	(0X1D9BE,	"p_stk_base",	0);
	create_insn	(x=0X1D9BE);
	op_stkvar	(x,	1);
	set_cmt	(0X1D9C2,	"p_arg",	0);
	set_cmt	(0X1D9C4,	"p_task",	0);
	create_insn	(x=0X1D9C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1D9C8,	"prio",	0);
	create_insn	(x=0X1D9C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1D9CA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1D9CC,	"p_tcb",	0);
	create_insn	(x=0X1D9CC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1D9D4);
	set_name	(0X1D9D4,	"OS_TickListInsert");
	create_insn	(x=0X1D9D6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1D9E6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1D9F6);
	create_insn	(0X1DA08);
	create_insn	(0X1DA18);
	create_insn	(x=0X1DA22);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1DA30);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1DA54);
	create_insn	(0X1DA56);
	create_insn	(0X1DA60);
	create_insn	(0X1DA6A);
	create_insn	(0X1DA72);
	create_insn	(0X1DA94);
	create_insn	(0X1DA9E);
	set_name	(0X1DA9E,	"OS_TickListResetPeak");
	create_insn	(x=0X1DAA4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1DAA6,	"OSCfg_TickWheelSize",	1);
	create_insn	(x=0X1DAA6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1DAAA);
	create_dword	(x=0X1DABC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1DAC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1DAC4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1DAC8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1DACC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1DAD0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1DAD4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1DAD8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1DADC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X1DAE0,	0X1DAF4);
	set_name	(0X1DAE0,	"aUcOsIiiTickTas");
	create_dword	(x=0X1DAF4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X1DAF4,	"p_tcb");
	create_insn	(0X1DAF8);
	set_name	(0X1DAF8,	"OSTimeDly");
	create_insn	(x=0X1DAFE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1DB0E);
	create_insn	(0X1DB22);
	create_insn	(x=0X1DB2E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1DB32,	"p_err",	0);
	set_cmt	(0X1DB34,	"p_tcb",	0);
	set_cmt	(0X1DB36,	"opt",	0);
	set_cmt	(0X1DB3C,	"time",	0);
	set_cmt	(0X1DB4A,	"priMask",	0);
	create_insn	(0X1DB54);
	set_cmt	(0X1DB5E,	"p_tcb",	0);
	create_insn	(0X1DB5E);
	set_cmt	(0X1DB68,	"priMask",	0);
	create_insn	(0X1DB78);
	set_name	(0X1DB78,	"OSTimeDlyHMSM");
	create_insn	(x=0X1DB7E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1DB90);
	op_hex		(x,	1);
	create_insn	(0X1DBAC);
	create_insn	(x=0X1DBB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1DBEE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1DBF2,	"p_err",	0);
	set_cmt	(0X1DBF4,	"p_tcb",	0);
	set_cmt	(0X1DBF6,	"opt",	0);
	set_cmt	(0X1DBFC,	"time",	0);
	set_cmt	(0X1DC0A,	"priMask",	0);
	set_cmt	(0X1DC14,	"p_tcb",	0);
	create_insn	(0X1DC14);
	set_cmt	(0X1DC1E,	"priMask",	0);
	create_insn	(0X1DC2E);
	create_insn	(0X1DC30);
	create_insn	(0X1DC34);
	set_name	(0X1DC34,	"OSTimeGet");
	create_insn	(x=0X1DC42);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1DC4A,	"priMask",	0);
	create_insn	(0X1DC58);
	set_name	(0X1DC58,	"OSTimeSet");
	create_insn	(x=0X1DC68);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1DC70,	"priMask",	0);
	create_insn	(0X1DC7C);
	set_name	(0X1DC7C,	"OSTimeTick");
	set_cmt	(0X1DC82,	"p_err",	0);
	set_cmt	(0X1DC84,	"opt",	0);
	set_cmt	(0X1DC86,	"p_tcb",	0);
	create_insn	(x=0X1DC86);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_byte	(0X1DC8E);
	make_array	(0X1DC8E,	0X2);
	create_dword	(x=0X1DC90);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1DC94);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1DC98);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1DC9C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1DCA0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1DCA4);
	set_name	(0X1DCA4,	"OS_CSP_TickInit");
	create_insn	(x=0X1DCAA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_byte	(0X1DCBA);
	make_array	(0X1DCBA,	0X2);
	set_cmt	(0X1DCBC,	"OSCfg_TickRate_Hz",	1);
	create_dword	(x=0X1DCBC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1DCC0);
	set_name	(0X1DCC0,	"__disable_irq");
	create_insn	(0X1DCC4);
	set_name	(0X1DCC4,	"__enable_irq");
	create_insn	(0X1DCC8);
	set_name	(0X1DCC8,	"_get_PRIMASK");
	create_insn	(0X1DCD0);
	set_name	(0X1DCD0,	"__set_PRIMASK");
	create_insn	(0X1DCD6);
	set_name	(0X1DCD6,	"CPU_CntLeadZeros");
	create_insn	(0X1DCDC);
	set_name	(0X1DCDC,	"__RBIT");
	create_insn	(0X1DCE2);
	set_name	(0X1DCE2,	"__WFI");
	create_insn	(0X1DCE6);
	set_name	(0X1DCE6,	"__WFE");
	create_byte	(0X1DCEA);
	make_array	(0X1DCEA,	0X2);
	create_insn	(0X1DCEC);
	set_name	(0X1DCEC,	"CPU_BitBandClr");
	create_insn	(0X1DD08);
	create_insn	(0X1DD18);
	set_name	(0X1DD18,	"CPU_BitBandSet");
	create_insn	(0X1DD34);
	create_insn	(0X1DD44);
	set_name	(0X1DD44,	"CPU_IntSrcDis");
	create_insn	(x=0X1DD46);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1DD4C,	"switch 16 cases ",	0);
	set_cmt	(0X1DD50,	"switch jump",	0);
	set_cmt	(0X1DD54,	"jump table for switch statement",	0);
	create_byte	(0X1DD54);
	set_name	(0X1DD54,	"jpt_13D50");
	create_byte	(0X1DD55);
	create_byte	(0X1DD56);
	create_byte	(0X1DD57);
	create_byte	(0X1DD58);
	create_byte	(0X1DD59);
	create_byte	(0X1DD5A);
	create_byte	(0X1DD5B);
	create_byte	(0X1DD5C);
	create_byte	(0X1DD5D);
	create_byte	(0X1DD5E);
	create_byte	(0X1DD5F);
	create_byte	(0X1DD60);
	create_byte	(0X1DD61);
	create_byte	(0X1DD62);
	create_byte	(0X1DD63);
	set_cmt	(0X1DD64,	"jumptable 00013D50 case 4",	1);
	create_insn	(0X1DD64);
	create_insn	(x=0X1DD70);
	op_hex		(x,	1);
	set_cmt	(0X1DD76,	"jumptable 00013D50 case 5",	1);
	create_insn	(0X1DD76);
	create_insn	(x=0X1DD82);
	op_hex		(x,	1);
	set_cmt	(0X1DD90,	"jumptable 00013D50 case 6",	1);
	create_insn	(0X1DD90);
	create_insn	(x=0X1DD9C);
	op_hex		(x,	1);
	set_cmt	(0X1DDA2,	"jumptable 00013D50 case 15",	1);
	create_insn	(0X1DDA2);
	create_insn	(x=0X1DDAC);
	op_plain_offset	(x,	1,	0XE000E000);
	op_plain_offset	(x,	129,	0XE000E000);
	create_insn	(x=0X1DDAE);
	op_hex		(x,	1);
	create_insn	(x=0X1DDB2);
	op_plain_offset	(x,	1,	0XE000E000);
	op_plain_offset	(x,	129,	0XE000E000);
	set_cmt	(0X1DDBC,	"jumptable 00013D50 default case",	1);
	create_insn	(x=0X1DDBC);
	op_plain_offset	(x,	1,	0XE000E000);
	op_plain_offset	(x,	129,	0XE000E000);
	set_name	(0X1DDBC,	"def_13D50");
	create_insn	(x=0X1DDD8);
	op_hex		(x,	1);
	set_cmt	(0X1DDFA,	"priMask",	0);
	set_cmt	(0X1DE04,	"jumptable 00013D50 cases 0-3,7-14",	1);
	create_insn	(0X1DE04);
	create_insn	(0X1DE06);
	set_name	(0X1DE06,	"CPU_IntSrcEn");
	create_insn	(x=0X1DE08);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1DE0E,	"switch 16 cases ",	0);
	set_cmt	(0X1DE12,	"switch jump",	0);
	set_cmt	(0X1DE16,	"jump table for switch statement",	0);
	create_byte	(0X1DE16);
	set_name	(0X1DE16,	"jpt_13E12");
	create_byte	(0X1DE17);
	create_byte	(0X1DE18);
	create_byte	(0X1DE19);
	create_byte	(0X1DE1A);
	create_byte	(0X1DE1B);
	create_byte	(0X1DE1C);
	create_byte	(0X1DE1D);
	create_byte	(0X1DE1E);
	create_byte	(0X1DE1F);
	create_byte	(0X1DE20);
	create_byte	(0X1DE21);
	create_byte	(0X1DE22);
	create_byte	(0X1DE23);
	create_byte	(0X1DE24);
	create_byte	(0X1DE25);
	set_cmt	(0X1DE26,	"jumptable 00013E12 case 4",	1);
	create_insn	(0X1DE26);
	create_insn	(x=0X1DE32);
	op_hex		(x,	1);
	set_cmt	(0X1DE38,	"jumptable 00013E12 case 5",	1);
	create_insn	(0X1DE38);
	create_insn	(x=0X1DE44);
	op_hex		(x,	1);
	set_cmt	(0X1DE52,	"jumptable 00013E12 case 6",	1);
	create_insn	(0X1DE52);
	create_insn	(x=0X1DE5E);
	op_hex		(x,	1);
	set_cmt	(0X1DE64,	"jumptable 00013E12 case 15",	1);
	create_insn	(0X1DE64);
	create_insn	(x=0X1DE6E);
	op_plain_offset	(x,	1,	0XE000E000);
	op_plain_offset	(x,	129,	0XE000E000);
	create_insn	(x=0X1DE70);
	op_hex		(x,	1);
	create_insn	(x=0X1DE74);
	op_plain_offset	(x,	1,	0XE000E000);
	op_plain_offset	(x,	129,	0XE000E000);
	set_cmt	(0X1DE7E,	"jumptable 00013E12 default case",	1);
	create_insn	(x=0X1DE7E);
	op_plain_offset	(x,	1,	0XE000E000);
	op_plain_offset	(x,	129,	0XE000E000);
	set_name	(0X1DE7E,	"def_13E12");
	create_insn	(x=0X1DE9A);
	op_hex		(x,	1);
	set_cmt	(0X1DEBC,	"priMask",	0);
	set_cmt	(0X1DEC6,	"jumptable 00013E12 cases 0-3,7-14",	1);
	create_insn	(0X1DEC6);
	create_insn	(0X1DEC8);
	set_name	(0X1DEC8,	"CPU_IntSrcPendClr");
	create_insn	(x=0X1DED2);
	op_plain_offset	(x,	1,	0XE000E000);
	op_plain_offset	(x,	129,	0XE000E000);
	create_insn	(x=0X1DEEE);
	op_hex		(x,	1);
	set_cmt	(0X1DF10,	"priMask",	0);
	create_insn	(0X1DF1A);
	create_insn	(0X1DF1C);
	set_name	(0X1DF1C,	"CPU_IntSrcPrioSet");
	set_cmt	(0X1DF22,	"value",	0);
	create_insn	(x=0X1DF28);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1DF2A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1DF32,	"switch 16 cases ",	0);
	set_cmt	(0X1DF36,	"switch jump",	0);
	set_cmt	(0X1DF3A,	"jump table for switch statement",	0);
	create_byte	(0X1DF3A);
	set_name	(0X1DF3A,	"jpt_13F36");
	create_byte	(0X1DF3B);
	create_byte	(0X1DF3C);
	create_byte	(0X1DF3D);
	create_byte	(0X1DF3E);
	create_byte	(0X1DF3F);
	create_byte	(0X1DF40);
	create_byte	(0X1DF41);
	create_byte	(0X1DF42);
	create_byte	(0X1DF43);
	create_byte	(0X1DF44);
	create_byte	(0X1DF45);
	create_byte	(0X1DF46);
	create_byte	(0X1DF47);
	create_byte	(0X1DF48);
	create_byte	(0X1DF49);
	set_cmt	(0X1DF4A,	"jumptable 00013F36 case 4",	1);
	create_insn	(0X1DF4A);
	create_insn	(x=0X1DF56);
	op_hex		(x,	1);
	set_cmt	(0X1DF5E,	"jumptable 00013F36 case 5",	1);
	create_insn	(0X1DF5E);
	create_insn	(x=0X1DF6A);
	op_hex		(x,	1);
	set_cmt	(0X1DF7C,	"jumptable 00013F36 case 6",	1);
	create_insn	(0X1DF7C);
	create_insn	(x=0X1DF88);
	op_hex		(x,	1);
	set_cmt	(0X1DF92,	"jumptable 00013F36 case 11",	1);
	create_insn	(0X1DF92);
	create_insn	(x=0X1DF9C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1DFA2);
	op_hex		(x,	1);
	set_cmt	(0X1DFAE,	"jumptable 00013F36 case 12",	1);
	create_insn	(0X1DFAE);
	create_insn	(x=0X1DFBA);
	op_hex		(x,	1);
	set_cmt	(0X1DFC2,	"jumptable 00013F36 case 14",	1);
	create_insn	(0X1DFC2);
	create_insn	(x=0X1DFCE);
	op_hex		(x,	1);
	set_cmt	(0X1DFD8,	"jumptable 00013F36 case 15",	1);
	create_insn	(0X1DFD8);
	create_insn	(x=0X1DFE4);
	op_hex		(x,	1);
	set_cmt	(0X1DFF0,	"jumptable 00013F36 default case",	1);
	create_insn	(0X1DFF0);
	set_name	(0X1DFF0,	"def_13F36");
	create_insn	(x=0X1DFF4);
	op_plain_offset	(x,	1,	0XE000E000);
	op_plain_offset	(x,	129,	0XE000E000);
	create_insn	(x=0X1E010);
	op_hex		(x,	1);
	set_cmt	(0X1E03E,	"priMask",	0);
	set_cmt	(0X1E048,	"jumptable 00013F36 cases 0-3,7-10,13",	1);
	create_insn	(0X1E048);
	create_insn	(0X1E04C);
	set_name	(0X1E04C,	"CPU_IntSrcPrioGet");
	create_insn	(x=0X1E04E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1E050);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1E058,	"switch 16 cases ",	0);
	set_cmt	(0X1E05C,	"switch jump",	0);
	set_cmt	(0X1E060,	"jump table for switch statement",	0);
	create_byte	(0X1E060);
	set_name	(0X1E060,	"jpt_1405C");
	create_byte	(0X1E061);
	create_byte	(0X1E062);
	create_byte	(0X1E063);
	create_byte	(0X1E064);
	create_byte	(0X1E065);
	create_byte	(0X1E066);
	create_byte	(0X1E067);
	create_byte	(0X1E068);
	create_byte	(0X1E069);
	create_byte	(0X1E06A);
	create_byte	(0X1E06B);
	create_byte	(0X1E06C);
	create_byte	(0X1E06D);
	create_byte	(0X1E06E);
	create_byte	(0X1E06F);
	set_cmt	(0X1E070,	"jumptable 0001405C case 1",	1);
	create_insn	(0X1E070);
	set_cmt	(0X1E076,	"jumptable 0001405C case 2",	1);
	create_insn	(0X1E076);
	set_cmt	(0X1E07C,	"jumptable 0001405C case 3",	1);
	create_insn	(0X1E07C);
	set_cmt	(0X1E082,	"jumptable 0001405C case 4",	1);
	create_insn	(0X1E082);
	set_cmt	(0X1E092,	"jumptable 0001405C case 5",	1);
	create_insn	(0X1E092);
	set_cmt	(0X1E0A6,	"priMask",	0);
	set_cmt	(0X1E0AE,	"jumptable 0001405C case 6",	1);
	create_insn	(0X1E0AE);
	set_cmt	(0X1E0BE,	"jumptable 0001405C case 11",	1);
	create_insn	(0X1E0BE);
	create_insn	(x=0X1E0C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1E0D0,	"jumptable 0001405C case 12",	1);
	create_insn	(0X1E0D0);
	set_cmt	(0X1E0E0,	"jumptable 0001405C case 14",	1);
	create_insn	(0X1E0E0);
	set_cmt	(0X1E0F2,	"jumptable 0001405C case 15",	1);
	create_insn	(0X1E0F2);
	set_cmt	(0X1E108,	"jumptable 0001405C default case",	1);
	create_insn	(0X1E108);
	set_name	(0X1E108,	"def_1405C");
	create_insn	(x=0X1E10C);
	op_plain_offset	(x,	1,	0XE000E000);
	op_plain_offset	(x,	129,	0XE000E000);
	create_insn	(x=0X1E128);
	op_hex		(x,	1);
	create_dword	(x=0X1E140);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X1E144);
	create_insn	(0X1E148);
	set_cmt	(0X1E150,	"priMask",	0);
	set_cmt	(0X1E160,	"value",	0);
	set_cmt	(0X1E168,	"jumptable 0001405C cases 0,7-10,13",	1);
	create_insn	(0X1E16C);
	set_name	(0X1E16C,	"CPU_IntDisMeasStop");
	create_insn	(x=0X1E16E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1E170);
	op_plain_offset	(x,	1,	0X100004E8);
	op_plain_offset	(x,	129,	0X100004E8);
	create_insn	(x=0X1E178);
	op_plain_offset	(x,	1,	0X100004E8);
	op_plain_offset	(x,	129,	0X100004E8);
	create_insn	(x=0X1E180);
	op_plain_offset	(x,	1,	0X100004E8);
	op_plain_offset	(x,	129,	0X100004E8);
	create_insn	(x=0X1E182);
	op_plain_offset	(x,	1,	0X100004E8);
	op_plain_offset	(x,	129,	0X100004E8);
	create_insn	(x=0X1E186);
	op_plain_offset	(x,	1,	0X100004E8);
	op_plain_offset	(x,	129,	0X100004E8);
	create_insn	(x=0X1E18C);
	op_plain_offset	(x,	1,	0X100004E8);
	op_plain_offset	(x,	129,	0X100004E8);
	create_insn	(x=0X1E18E);
	op_plain_offset	(x,	1,	0X100004E8);
	op_plain_offset	(x,	129,	0X100004E8);
	create_insn	(x=0X1E194);
	op_plain_offset	(x,	1,	0X100004E8);
	op_plain_offset	(x,	129,	0X100004E8);
	create_insn	(0X1E198);
	set_name	(0X1E198,	"CPU_IntDisMeasStart");
	create_insn	(x=0X1E19A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1E1A2);
	op_plain_offset	(x,	1,	0X100004E8);
	op_plain_offset	(x,	129,	0X100004E8);
	create_insn	(x=0X1E1AA);
	op_plain_offset	(x,	1,	0X100004E8);
	op_plain_offset	(x,	129,	0X100004E8);
	create_insn	(x=0X1E1AC);
	op_plain_offset	(x,	1,	0X100004E8);
	op_plain_offset	(x,	129,	0X100004E8);
	create_insn	(x=0X1E1B0);
	op_plain_offset	(x,	1,	0X100004E8);
	op_plain_offset	(x,	129,	0X100004E8);
	create_insn	(x=0X1E1B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X1E1B4,	"CPU_Init");
	set_cmt	(0X1E1B8,	"freq_hz",	0);
	create_insn	(x=0X1E1BA);
	op_plain_offset	(x,	1,	0X100004E8);
	op_plain_offset	(x,	129,	0X100004E8);
	create_insn	(0X1E1C8);
	set_name	(0X1E1C8,	"CPU_SW_Exception");
	create_insn	(0X1E1CA);
	set_name	(0X1E1CA,	"CPU_TS_Get32");
	create_insn	(0X1E1CE);
	create_insn	(0X1E1D0);
	set_name	(0X1E1D0,	"CPU_TS_TmrFreqGet");
	create_insn	(x=0X1E1D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1E1D6);
	op_plain_offset	(x,	1,	0X100004E8);
	op_plain_offset	(x,	129,	0X100004E8);
	create_insn	(0X1E1DE);
	create_insn	(x=0X1E1E0);
	op_enum		(x,	1,	GetEnum("CPU_ERR"),0);
	create_insn	(x=0X1E1E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X1E1E8,	"CPU_TS_TmrFreqSet");
	create_insn	(x=0X1E1EA);
	op_plain_offset	(x,	1,	0X100004E8);
	op_plain_offset	(x,	129,	0X100004E8);
	create_insn	(0X1E1EE);
	set_name	(0X1E1EE,	"CPU_IntDisMeasMaxCurGet");
	create_insn	(x=0X1E1F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1E1F6);
	op_plain_offset	(x,	1,	0X100004E8);
	op_plain_offset	(x,	129,	0X100004E8);
	set_cmt	(0X1E1FC,	"time_tot_cnts",	0);
	create_insn	(0X1E206);
	set_name	(0X1E206,	"CPU_IntDisMeasMaxCurReset");
	create_insn	(x=0X1E212);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1E216);
	op_plain_offset	(x,	1,	0X100004E8);
	op_plain_offset	(x,	129,	0X100004E8);
	create_insn	(0X1E220);
	set_name	(0X1E220,	"CPU_IntDisMeasMaxGet");
	create_insn	(x=0X1E226);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1E228);
	op_plain_offset	(x,	1,	0X100004E8);
	op_plain_offset	(x,	129,	0X100004E8);
	set_cmt	(0X1E22E,	"time_tot_cnts",	0);
	create_insn	(0X1E238);
	set_name	(0X1E238,	"CPU_IntDisMeasInit");
	create_insn	(x=0X1E23C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1E244);
	op_plain_offset	(x,	1,	0X100004E8);
	op_plain_offset	(x,	129,	0X100004E8);
	create_insn	(x=0X1E246);
	op_plain_offset	(x,	1,	0X100004E8);
	op_plain_offset	(x,	129,	0X100004E8);
	create_insn	(x=0X1E248);
	op_plain_offset	(x,	1,	0X100004E8);
	op_plain_offset	(x,	129,	0X100004E8);
	create_insn	(x=0X1E24A);
	op_plain_offset	(x,	1,	0X100004E8);
	op_plain_offset	(x,	129,	0X100004E8);
	create_insn	(x=0X1E24C);
	op_plain_offset	(x,	1,	0X100004E8);
	op_plain_offset	(x,	129,	0X100004E8);
	create_insn	(x=0X1E24E);
	op_plain_offset	(x,	1,	0X100004E8);
	op_plain_offset	(x,	129,	0X100004E8);
	create_insn	(x=0X1E258);
	op_plain_offset	(x,	1,	0X100004E8);
	op_plain_offset	(x,	129,	0X100004E8);
	create_insn	(x=0X1E262);
	op_plain_offset	(x,	1,	0X100004E8);
	op_plain_offset	(x,	129,	0X100004E8);
	set_cmt	(0X1E272,	"priMask",	0);
	create_insn	(x=0X1E274);
	op_plain_offset	(x,	1,	0X100004E8);
	op_plain_offset	(x,	129,	0X100004E8);
	create_insn	(x=0X1E27E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X1E27E,	"CPU_IntDisMeasMaxCalc");
	create_insn	(x=0X1E280);
	op_plain_offset	(x,	1,	0X100004E8);
	op_plain_offset	(x,	129,	0X100004E8);
	create_insn	(0X1E28A);
	create_byte	(0X1E28E);
	make_array	(0X1E28E,	0X2);
	create_dword	(x=0X1E290);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1E294);
	create_insn	(0X1E296);
	set_name	(0X1E296,	"Chip_Clock_GetPeripheralClockRate");
	create_insn	(x=0X1E298);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1E29E);
	op_hex		(x,	1);
	create_insn	(x=0X1E2B0);
	op_enum		(x,	1,	GetEnum("system_defines"),0);
	create_insn	(x=0X1E2B4);
	op_dec		(x,	1);
	create_insn	(0X1E2B8);
	create_insn	(0X1E2F2);
	set_cmt	(0X1E30A,	"switch 7 cases ",	0);
	set_cmt	(0X1E30E,	"switch jump",	0);
	set_cmt	(0X1E312,	"jump table for switch statement",	0);
	create_byte	(0X1E312);
	set_name	(0X1E312,	"jpt_1430E");
	create_byte	(0X1E313);
	create_byte	(0X1E314);
	create_byte	(0X1E315);
	create_byte	(0X1E316);
	create_byte	(0X1E317);
	create_byte	(0X1E318);
	set_cmt	(0X1E31A,	"jumptable 0001430E case 1",	1);
	create_insn	(0X1E31A);
	set_cmt	(0X1E31E,	"jumptable 0001430E case 2",	1);
	create_insn	(0X1E31E);
	set_cmt	(0X1E322,	"jumptable 0001430E case 4",	1);
	create_insn	(0X1E322);
	set_cmt	(0X1E326,	"jumptable 0001430E case 6",	1);
	create_insn	(0X1E326);
	set_cmt	(0X1E332,	"jumptable 0001430E default case",	1);
	set_name	(0X1E332,	"def_1430E");
	create_insn	(0X1E336);
	create_insn	(0X1E366);
	set_cmt	(0X1E384,	"priMask",	0);
	create_insn	(0X1E38E);
	set_name	(0X1E38E,	"UnkFlag1Set_1438E");
	create_insn	(0X1E3A6);
	set_cmt	(0X1E3CA,	"priMask",	0);
	create_insn	(0X1E3D4);
	set_name	(0X1E3D4,	"UnkFlag1Clear_143D4");
	create_insn	(0X1E3EC);
	set_cmt	(0X1E410,	"priMask",	0);
	create_insn	(0X1E41A);
	create_insn	(x=0X1E440);
	op_hex		(x,	1);
	create_insn	(0X1E456);
	create_insn	(0X1E45A);
	create_insn	(0X1E46A);
	create_insn	(0X1E476);
	set_name	(0X1E476,	"nullsub_14");
	create_insn	(0X1E478);
	set_name	(0X1E478,	"nullsub_15");
	create_insn	(0X1E47A);
	create_insn	(0X1E47E);
	create_byte	(0X1E482);
	make_array	(0X1E482,	0X2);
	create_dword	(x=0X1E484);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1E488);
	op_enum		(x,	0,	GetEnum("system_defines"),0);
	set_cmt	(0X1E48C,	"OSC_CLK",	1);
	create_dword	(x=0X1E48C);
	op_dec		(x,	0);
	create_insn	(0X1E490);
	create_insn	(x=0X1E494);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1E498);
	create_insn	(0X1E4B8);
	create_insn	(0X1E4C0);
	create_insn	(0X1E4C4);
	create_insn	(x=0X1E4C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1E4CC);
	create_insn	(0X1E4F6);
	create_insn	(0X1E4FE);
	create_insn	(0X1E502);
	create_insn	(x=0X1E506);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1E50A);
	create_insn	(0X1E52A);
	create_insn	(0X1E532);
	create_insn	(0X1E536);
	create_insn	(x=0X1E53A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1E53E);
	create_insn	(0X1E568);
	create_insn	(0X1E570);
	create_insn	(x=0X1E574);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1E578);
	op_plain_offset	(x,	1,	0X100059E8);
	op_plain_offset	(x,	129,	0X100059E8);
	create_insn	(x=0X1E586);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1E58A);
	op_plain_offset	(x,	1,	0X10000504);
	op_plain_offset	(x,	129,	0X10000504);
	create_insn	(x=0X1E58C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1E592);
	op_plain_offset	(x,	1,	0X100059E8);
	op_plain_offset	(x,	129,	0X100059E8);
	create_insn	(x=0X1E594);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1E598);
	op_plain_offset	(x,	1,	0X10005BF0);
	op_plain_offset	(x,	129,	0X10005BF0);
	create_insn	(0X1E59C);
	create_insn	(0X1E5A0);
	create_insn	(0X1E5A4);
	create_insn	(0X1E5A8);
	create_insn	(0X1E5AC);
	create_insn	(0X1E5B0);
	create_insn	(x=0X1E5B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1E5B6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1E5C0);
	op_plain_offset	(x,	1,	0X10005922);
	op_plain_offset	(x,	129,	0X10005922);
	create_insn	(x=0X1E5C4);
	op_plain_offset	(x,	1,	0X10005922);
	op_plain_offset	(x,	129,	0X10005922);
	create_insn	(x=0X1E5C8);
	op_plain_offset	(x,	1,	0X10005922);
	op_plain_offset	(x,	129,	0X10005922);
	create_insn	(x=0X1E5CA);
	op_plain_offset	(x,	1,	0X10000518);
	op_plain_offset	(x,	129,	0X10000518);
	create_insn	(x=0X1E5CC);
	op_plain_offset	(x,	1,	0X10005922);
	op_plain_offset	(x,	129,	0X10005922);
	create_insn	(x=0X1E5CE);
	op_plain_offset	(x,	1,	0X10000518);
	op_plain_offset	(x,	129,	0X10000518);
	create_insn	(x=0X1E5D0);
	op_plain_offset	(x,	1,	0X10005922);
	op_plain_offset	(x,	129,	0X10005922);
	create_insn	(x=0X1E5D2);
	op_plain_offset	(x,	1,	0X10000518);
	op_plain_offset	(x,	129,	0X10000518);
	create_insn	(x=0X1E5D4);
	op_plain_offset	(x,	1,	0X10005922);
	op_plain_offset	(x,	129,	0X10005922);
	create_insn	(0X1E5DA);
	create_insn	(0X1E5DE);
	create_insn	(0X1E5E2);
	create_insn	(x=0X1E5E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1E5E6);
	op_plain_offset	(x,	1,	0X10000504);
	op_plain_offset	(x,	129,	0X10000504);
	create_insn	(x=0X1E5EA);
	op_plain_offset	(x,	1,	0X10000504);
	op_plain_offset	(x,	129,	0X10000504);
	create_insn	(x=0X1E5EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1E5F0);
	op_plain_offset	(x,	1,	0X10005BF0);
	op_plain_offset	(x,	129,	0X10005BF0);
	create_insn	(x=0X1E5F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1E600);
	op_stkvar	(x,	1);
	create_insn	(x=0X1E604);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1E60A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1E610);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1E61A);
	create_insn	(x=0X1E61C);
	op_plain_offset	(x,	1,	0X10000504);
	op_plain_offset	(x,	129,	0X10000504);
	create_insn	(x=0X1E620);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1E624);
	op_plain_offset	(x,	1,	0X10000504);
	op_plain_offset	(x,	129,	0X10000504);
	create_insn	(x=0X1E626);
	op_plain_offset	(x,	1,	0X10000504);
	op_plain_offset	(x,	129,	0X10000504);
	create_insn	(x=0X1E62E);
	op_plain_offset	(x,	1,	0X10000504);
	op_plain_offset	(x,	129,	0X10000504);
	create_insn	(x=0X1E632);
	op_plain_offset	(x,	1,	0X10000504);
	op_plain_offset	(x,	129,	0X10000504);
	create_insn	(x=0X1E638);
	op_plain_offset	(x,	1,	0X10000504);
	op_plain_offset	(x,	129,	0X10000504);
	create_insn	(0X1E63C);
	create_insn	(x=0X1E63E);
	op_plain_offset	(x,	1,	0X10000504);
	op_plain_offset	(x,	129,	0X10000504);
	create_insn	(x=0X1E640);
	op_plain_offset	(x,	1,	0X10000504);
	op_plain_offset	(x,	129,	0X10000504);
	create_insn	(x=0X1E642);
	op_plain_offset	(x,	1,	0X10000504);
	op_plain_offset	(x,	129,	0X10000504);
	create_insn	(x=0X1E644);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1E648);
	op_plain_offset	(x,	1,	0X100059E8);
	op_plain_offset	(x,	129,	0X100059E8);
	create_insn	(x=0X1E658);
	op_plain_offset	(x,	1,	0X10000504);
	op_plain_offset	(x,	129,	0X10000504);
	create_insn	(x=0X1E65C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1E666);
	op_stkvar	(x,	1);
	create_insn	(x=0X1E668);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1E674);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1E676);
	op_plain_offset	(x,	1,	0X10000504);
	op_plain_offset	(x,	129,	0X10000504);
	create_insn	(x=0X1E67C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1E686);
	op_plain_offset	(x,	1,	0X10000504);
	op_plain_offset	(x,	129,	0X10000504);
	create_insn	(0X1E68A);
	create_insn	(x=0X1E68C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1E698);
	op_plain_offset	(x,	1,	0X100058AC);
	op_plain_offset	(x,	129,	0X100058AC);
	create_insn	(x=0X1E69C);
	op_plain_offset	(x,	1,	0X100058AC);
	op_plain_offset	(x,	129,	0X100058AC);
	create_insn	(x=0X1E69E);
	op_plain_offset	(x,	1,	0X100058AC);
	op_plain_offset	(x,	129,	0X100058AC);
	create_insn	(x=0X1E6A0);
	op_plain_offset	(x,	1,	0X100058AC);
	op_plain_offset	(x,	129,	0X100058AC);
	create_insn	(x=0X1E6A2);
	op_plain_offset	(x,	1,	0X100058AC);
	op_plain_offset	(x,	129,	0X100058AC);
	create_insn	(x=0X1E6A4);
	op_plain_offset	(x,	1,	0X100058AC);
	op_plain_offset	(x,	129,	0X100058AC);
	create_insn	(x=0X1E6A6);
	op_plain_offset	(x,	1,	0X100058AC);
	op_plain_offset	(x,	129,	0X100058AC);
	create_insn	(x=0X1E6A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1E6AE);
	op_plain_offset	(x,	1,	0X100058AC);
	op_plain_offset	(x,	129,	0X100058AC);
	create_insn	(x=0X1E6B2);
	op_plain_offset	(x,	1,	0X100058AC);
	op_plain_offset	(x,	129,	0X100058AC);
	create_dword	(x=0X1E6BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1E6C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1E6C4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1E6C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1E6CC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1E6D0);
	create_insn	(x=0X1E6DC);
	op_hex		(x,	1);
	create_insn	(0X1E6E8);
	create_insn	(x=0X1E6EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1E6F6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1E700);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1E708);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1E712);
	create_insn	(x=0X1E714);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1E71C);
	op_plain_offset	(x,	1,	0X10000520);
	op_plain_offset	(x,	129,	0X10000520);
	create_insn	(0X1E72A);
	create_insn	(0X1E732);
	create_insn	(x=0X1E734);
	op_plain_offset	(x,	1,	0X10000520);
	op_plain_offset	(x,	129,	0X10000520);
	create_insn	(x=0X1E74E);
	op_plain_offset	(x,	1,	0X10005915);
	op_plain_offset	(x,	129,	0X10005915);
	create_insn	(x=0X1E752);
	op_plain_offset	(x,	1,	0X10005915);
	op_plain_offset	(x,	129,	0X10005915);
	create_insn	(x=0X1E75C);
	op_plain_offset	(x,	1,	0X10005915);
	op_plain_offset	(x,	129,	0X10005915);
	create_insn	(0X1E760);
	create_insn	(0X1E766);
	create_insn	(x=0X1E776);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1E77E);
	create_insn	(x=0X1E780);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1E78C);
	op_plain_offset	(x,	1,	0X10000520);
	op_plain_offset	(x,	129,	0X10000520);
	create_insn	(x=0X1E798);
	op_plain_offset	(x,	1,	0X10000520);
	op_plain_offset	(x,	129,	0X10000520);
	create_insn	(0X1E79C);
	create_insn	(0X1E7B8);
	create_insn	(0X1E7CE);
	create_insn	(x=0X1E7D8);
	op_plain_offset	(x,	1,	0X10005915);
	op_plain_offset	(x,	129,	0X10005915);
	create_insn	(x=0X1E7DC);
	op_plain_offset	(x,	1,	0X10005915);
	op_plain_offset	(x,	129,	0X10005915);
	create_insn	(x=0X1E7E6);
	op_plain_offset	(x,	1,	0X10005915);
	op_plain_offset	(x,	129,	0X10005915);
	create_insn	(0X1E7EE);
	create_insn	(0X1E7F0);
	create_insn	(x=0X1E7F2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1E7FE);
	op_plain_offset	(x,	1,	0X10000520);
	op_plain_offset	(x,	129,	0X10000520);
	create_insn	(x=0X1E80A);
	op_plain_offset	(x,	1,	0X10000520);
	op_plain_offset	(x,	129,	0X10000520);
	create_insn	(x=0X1E80C);
	op_plain_offset	(x,	1,	0X10000520);
	op_plain_offset	(x,	129,	0X10000520);
	create_insn	(0X1E810);
	create_insn	(x=0X1E830);
	op_plain_offset	(x,	1,	0X10005915);
	op_plain_offset	(x,	129,	0X10005915);
	create_insn	(x=0X1E834);
	op_plain_offset	(x,	1,	0X10005915);
	op_plain_offset	(x,	129,	0X10005915);
	create_insn	(x=0X1E844);
	op_plain_offset	(x,	1,	0X10005915);
	op_plain_offset	(x,	129,	0X10005915);
	create_insn	(0X1E84C);
	create_insn	(0X1E850);
	create_insn	(0X1E852);
	create_insn	(x=0X1E856);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1E85A);
	op_plain_offset	(x,	1,	0X100058F6);
	op_plain_offset	(x,	129,	0X100058F6);
	create_insn	(x=0X1E860);
	op_hex		(x,	1);
	create_insn	(x=0X1E864);
	op_plain_offset	(x,	1,	0X100058F6);
	op_plain_offset	(x,	129,	0X100058F6);
	create_insn	(x=0X1E86E);
	op_plain_offset	(x,	1,	0X100058F6);
	op_plain_offset	(x,	129,	0X100058F6);
	create_insn	(0X1E880);
	create_insn	(0X1E88A);
	create_insn	(0X1E890);
	create_insn	(x=0X1E896);
	op_hex		(x,	1);
	create_insn	(0X1E8B8);
	create_insn	(x=0X1E8BE);
	op_plain_offset	(x,	1,	0X10005915);
	op_plain_offset	(x,	129,	0X10005915);
	create_insn	(0X1E8C8);
	create_insn	(0X1E8CC);
	create_insn	(x=0X1E8D6);
	op_plain_offset	(x,	1,	0X100058F6);
	op_plain_offset	(x,	129,	0X100058F6);
	create_insn	(x=0X1E8DA);
	op_plain_offset	(x,	1,	0X100058F6);
	op_plain_offset	(x,	129,	0X100058F6);
	create_insn	(x=0X1E8E6);
	op_plain_offset	(x,	1,	0X10005915);
	op_plain_offset	(x,	129,	0X10005915);
	create_insn	(0X1E8F0);
	create_insn	(0X1E8F4);
	create_insn	(x=0X1E8F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1E8FC);
	op_plain_offset	(x,	1,	0X100058F6);
	op_plain_offset	(x,	129,	0X100058F6);
	create_insn	(x=0X1E8FE);
	op_plain_offset	(x,	1,	0X10000520);
	op_plain_offset	(x,	129,	0X10000520);
	create_insn	(x=0X1E904);
	op_plain_offset	(x,	1,	0X10000520);
	op_plain_offset	(x,	129,	0X10000520);
	create_insn	(0X1E90A);
	create_insn	(x=0X1E910);
	op_plain_offset	(x,	1,	0X10000520);
	op_plain_offset	(x,	129,	0X10000520);
	create_insn	(x=0X1E91C);
	op_plain_offset	(x,	1,	0X10000520);
	op_plain_offset	(x,	129,	0X10000520);
	create_insn	(x=0X1E91E);
	op_plain_offset	(x,	1,	0X10005915);
	op_plain_offset	(x,	129,	0X10005915);
	create_insn	(x=0X1E922);
	op_plain_offset	(x,	1,	0X10005915);
	op_plain_offset	(x,	129,	0X10005915);
	create_insn	(x=0X1E926);
	op_plain_offset	(x,	1,	0X10005915);
	op_plain_offset	(x,	129,	0X10005915);
	create_insn	(0X1E92A);
	create_insn	(x=0X1E930);
	op_plain_offset	(x,	1,	0X100058F6);
	op_plain_offset	(x,	129,	0X100058F6);
	create_insn	(x=0X1E934);
	op_plain_offset	(x,	1,	0X100058F6);
	op_plain_offset	(x,	129,	0X100058F6);
	create_insn	(0X1E93E);
	create_insn	(x=0X1E948);
	op_plain_offset	(x,	1,	0X10005915);
	op_plain_offset	(x,	129,	0X10005915);
	create_insn	(0X1E950);
	create_insn	(x=0X1E966);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E968);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E96A);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E96C);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E96E);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E970);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E972);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E974);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E976);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E978);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E97A);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E97C);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E97E);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E980);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E982);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E984);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E986);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E988);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1E98C);
	op_plain_offset	(x,	1,	0X10000520);
	op_plain_offset	(x,	129,	0X10000520);
	create_insn	(0X1E994);
	create_insn	(0X1E996);
	create_insn	(x=0X1E9AA);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E9AC);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E9B0);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E9B4);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E9B6);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E9B8);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E9BA);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E9BE);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E9C2);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E9C6);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E9C8);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E9CA);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E9CC);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E9CE);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E9D0);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E9D2);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E9D6);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E9DA);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E9DC);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E9E0);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E9E2);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E9E6);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E9E8);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E9EA);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E9EC);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E9EE);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E9F0);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E9F2);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E9F4);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E9F6);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E9F8);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1E9FC);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1EA02);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1EA08);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1EA0C);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1EA10);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1EA14);
	op_plain_offset	(x,	1,	0X10000520);
	op_plain_offset	(x,	129,	0X10000520);
	create_insn	(0X1EA1C);
	create_insn	(0X1EA1E);
	create_insn	(x=0X1EA32);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1EA34);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1EA36);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1EA38);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1EA3C);
	op_plain_offset	(x,	1,	0X10000520);
	op_plain_offset	(x,	129,	0X10000520);
	create_insn	(0X1EA44);
	create_insn	(0X1EA46);
	create_insn	(x=0X1EA5A);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1EA5C);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1EA5E);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1EA60);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1EA62);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1EA64);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1EA66);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1EA68);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1EA6C);
	op_plain_offset	(x,	1,	0X10000520);
	op_plain_offset	(x,	129,	0X10000520);
	create_insn	(0X1EA74);
	create_insn	(0X1EA76);
	create_insn	(x=0X1EA80);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1EA84);
	op_plain_offset	(x,	1,	0X10000520);
	op_plain_offset	(x,	129,	0X10000520);
	create_insn	(x=0X1EA90);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1EA94);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1EA96);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1EA9A);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1EA9C);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1EAA0);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1EAA2);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1EAA6);
	op_plain_offset	(x,	1,	0X10000520);
	op_plain_offset	(x,	129,	0X10000520);
	create_insn	(0X1EAAE);
	create_insn	(0X1EAB0);
	create_insn	(x=0X1EAC0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1EAC4);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1EAC6);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1EACA);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1EACC);
	op_plain_offset	(x,	1,	0X10000520);
	op_plain_offset	(x,	129,	0X10000520);
	create_insn	(x=0X1EAD0);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1EAD4);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1EAD8);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1EADA);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1EADE);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1EAE0);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1EAE2);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_insn	(x=0X1EAE4);
	op_plain_offset	(x,	1,	0X100058B6);
	op_plain_offset	(x,	129,	0X100058B6);
	create_dword	(x=0X1EAE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1EAEC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1EAF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1EAF4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1EAF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X1EAFC);
	create_insn	(0X1EB00);
	create_insn	(x=0X1EB02);
	op_plain_offset	(x,	1,	0X10000520);
	op_plain_offset	(x,	129,	0X10000520);
	create_insn	(0X1EB0A);
	create_insn	(0X1EB0C);
	create_insn	(x=0X1EB10);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1EB16);
	op_plain_offset	(x,	1,	0X10000520);
	op_plain_offset	(x,	129,	0X10000520);
	create_insn	(0X1EB1E);
	create_insn	(x=0X1EB3E);
	op_plain_offset	(x,	1,	0X10005915);
	op_plain_offset	(x,	129,	0X10005915);
	create_insn	(x=0X1EB42);
	op_plain_offset	(x,	1,	0X10005915);
	op_plain_offset	(x,	129,	0X10005915);
	create_insn	(x=0X1EB50);
	op_plain_offset	(x,	1,	0X10005915);
	op_plain_offset	(x,	129,	0X10005915);
	create_insn	(0X1EB56);
	create_insn	(0X1EB78);
	create_insn	(0X1EB82);
	create_insn	(x=0X1EBA2);
	op_plain_offset	(x,	1,	0X10005915);
	op_plain_offset	(x,	129,	0X10005915);
	create_insn	(0X1EBA6);
	create_insn	(0X1EBC8);
	create_insn	(0X1EBCA);
	create_insn	(0X1EBD0);
	create_insn	(0X1EBD6);
	create_insn	(0X1EBDC);
	create_insn	(0X1EBE2);
	create_insn	(0X1EBE8);
	create_insn	(0X1EBFE);
	create_insn	(0X1EC0C);
	create_insn	(0X1EC0E);
	create_insn	(0X1EC26);
	create_insn	(0X1EC2A);
	create_insn	(x=0X1EC30);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1EC34);
	op_hex		(x,	1);
	create_insn	(x=0X1EC42);
	op_hex		(x,	1);
	create_insn	(x=0X1EC4E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1EC6A);
	create_insn	(x=0X1EC6C);
	op_plain_offset	(x,	1,	0X100058F6);
	op_plain_offset	(x,	129,	0X100058F6);
	create_insn	(0X1EC7C);
	create_insn	(0X1EC82);
	create_insn	(0X1EC8A);
	create_insn	(x=0X1EC96);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1EC98);
	op_plain_offset	(x,	1,	0X10000520);
	op_plain_offset	(x,	129,	0X10000520);
	create_insn	(x=0X1ECB2);
	op_plain_offset	(x,	1,	0X10005915);
	op_plain_offset	(x,	129,	0X10005915);
	create_insn	(0X1ECBA);
	create_insn	(0X1ECC0);
	create_insn	(x=0X1ECC2);
	op_plain_offset	(x,	1,	0X100058F6);
	op_plain_offset	(x,	129,	0X100058F6);
	create_insn	(0X1ECD6);
	create_insn	(0X1ECDC);
	create_insn	(0X1ECDE);
	create_insn	(0X1ECE8);
	create_insn	(x=0X1ED08);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1ED0E);
	create_insn	(0X1ED12);
	create_insn	(0X1ED16);
	create_insn	(0X1ED1A);
	create_insn	(x=0X1ED26);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1ED36);
	create_insn	(x=0X1ED42);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1ED52);
	create_insn	(x=0X1ED58);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1ED68);
	create_insn	(0X1ED76);
	create_insn	(0X1ED8A);
	create_byte	(0X1ED92);
	make_array	(0X1ED92,	0X2);
	create_dword	(x=0X1ED94);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1ED98);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X1ED9C);
	create_dword	(x=0X1EDA0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1EDA4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1EDA8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1EDAA);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X1EDAC);
	op_hex		(x,	1);
	create_insn	(x=0X1EDB0);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X1EDB6);
	op_hex		(x,	1);
	create_insn	(x=0X1EDBE);
	op_hex		(x,	1);
	create_insn	(x=0X1EDC6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1EDC8);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X1EDCA);
	op_hex		(x,	1);
	create_insn	(x=0X1EDCE);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X1EDD0);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X1EDD2);
	op_hex		(x,	1);
	create_insn	(x=0X1EDD6);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(0X1EDDA);
	create_insn	(x=0X1EDE0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1EDEE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1EDF6,	"a3",	0);
	set_cmt	(0X1EDF8,	"param_buf",	0);
	create_insn	(x=0X1EDF8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1EDFA,	"a1",	0);
	create_insn	(x=0X1EDFA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1EE00,	"a3",	0);
	set_cmt	(0X1EE02,	"param_buf",	0);
	create_insn	(x=0X1EE02);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1EE04,	"a1",	0);
	create_insn	(x=0X1EE04);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1EE12);
	create_insn	(0X1EE14);
	create_dword	(x=0X1EE18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X1EE1C);
	create_dword	(x=0X1EE20);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1EE24);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1EE28);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1EE2C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1EE30);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X1EE34);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1EE3C);
	op_plain_offset	(x,	1,	0X10000540);
	op_plain_offset	(x,	129,	0X10000540);
	create_insn	(x=0X1EE3E);
	op_plain_offset	(x,	1,	0X10000540);
	op_plain_offset	(x,	129,	0X10000540);
	create_insn	(x=0X1EE40);
	op_plain_offset	(x,	1,	0X10000540);
	op_plain_offset	(x,	129,	0X10000540);
	create_insn	(x=0X1EE46);
	op_plain_offset	(x,	1,	0X10000540);
	op_plain_offset	(x,	129,	0X10000540);
	create_insn	(x=0X1EE4A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1EE54);
	create_insn	(x=0X1EE56);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1EE5A);
	op_plain_offset	(x,	1,	0X10000558);
	op_plain_offset	(x,	129,	0X10000558);
	create_insn	(x=0X1EE70);
	op_plain_offset	(x,	1,	0X10000558);
	op_plain_offset	(x,	129,	0X10000558);
	create_insn	(x=0X1EE74);
	op_plain_offset	(x,	1,	0X10000558);
	op_plain_offset	(x,	129,	0X10000558);
	create_insn	(0X1EE78);
	create_insn	(x=0X1EE7A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1EE8C);
	op_plain_offset	(x,	1,	0X10000558);
	op_plain_offset	(x,	129,	0X10000558);
	create_insn	(x=0X1EE90);
	op_plain_offset	(x,	1,	0X10000558);
	op_plain_offset	(x,	129,	0X10000558);
	create_insn	(0X1EE94);
	create_insn	(x=0X1EE9E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1EEA6);
	create_insn	(x=0X1EEAA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1EEB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1EEB8,	"switch 8 cases ",	0);
	set_cmt	(0X1EEBC,	"switch jump",	0);
	set_cmt	(0X1EEC0,	"jump table for switch statement",	0);
	create_byte	(0X1EEC0);
	set_name	(0X1EEC0,	"jpt_14EBC");
	create_byte	(0X1EEC1);
	create_byte	(0X1EEC2);
	create_byte	(0X1EEC3);
	create_byte	(0X1EEC4);
	create_byte	(0X1EEC5);
	create_byte	(0X1EEC6);
	create_byte	(0X1EEC7);
	set_cmt	(0X1EEC8,	"jumptable 00014EBC case 1",	1);
	create_insn	(0X1EEC8);
	create_insn	(x=0X1EED4);
	op_plain_offset	(x,	1,	0X10000560);
	op_plain_offset	(x,	129,	0X10000560);
	create_insn	(x=0X1EED6);
	op_plain_offset	(x,	1,	0X10000558);
	op_plain_offset	(x,	129,	0X10000558);
	create_insn	(x=0X1EEE6);
	op_plain_offset	(x,	1,	0X10000560);
	op_plain_offset	(x,	129,	0X10000560);
	set_cmt	(0X1EEE8,	"switch 12 cases ",	0);
	set_cmt	(0X1EEEC,	"switch jump",	0);
	set_cmt	(0X1EEF0,	"jump table for switch statement",	0);
	create_byte	(0X1EEF0);
	set_name	(0X1EEF0,	"jpt_14EEC");
	create_byte	(0X1EEF1);
	create_byte	(0X1EEF2);
	create_byte	(0X1EEF3);
	create_byte	(0X1EEF4);
	create_byte	(0X1EEF5);
	create_byte	(0X1EEF6);
	create_byte	(0X1EEF7);
	create_byte	(0X1EEF8);
	create_byte	(0X1EEF9);
	create_byte	(0X1EEFA);
	create_byte	(0X1EEFB);
	set_cmt	(0X1EEFC,	"jumptable 00014EEC case 0",	1);
	create_insn	(0X1EEFC);
	set_cmt	(0X1EF02,	"jumptable 00014EEC case 1",	1);
	create_insn	(0X1EF02);
	set_cmt	(0X1EF06,	"jumptable 00014EEC case 3",	1);
	create_insn	(0X1EF06);
	set_cmt	(0X1EF0E,	"jumptable 00014EEC case 5",	1);
	create_insn	(x=0X1EF0E);
	op_hex		(x,	1);
	create_insn	(x=0X1EF14);
	op_plain_offset	(x,	1,	0X10000560);
	op_plain_offset	(x,	129,	0X10000560);
	create_insn	(x=0X1EF16);
	op_hex		(x,	1);
	create_insn	(x=0X1EF1A);
	op_plain_offset	(x,	1,	0X10000540);
	op_plain_offset	(x,	129,	0X10000540);
	set_cmt	(0X1EF1E,	"jumptable 00014EEC case 6",	1);
	create_insn	(0X1EF1E);
	set_cmt	(0X1EF28,	"jumptable 00014EEC case 7",	1);
	create_insn	(0X1EF28);
	set_cmt	(0X1EF2C,	"jumptable 00014EEC case 8",	1);
	create_insn	(x=0X1EF2C);
	op_hex		(x,	1);
	create_insn	(x=0X1EF32);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1EF38,	"jumptable 00014EEC case 9",	1);
	create_insn	(0X1EF38);
	set_cmt	(0X1EF4C,	"jumptable 00014EEC case 10",	1);
	create_insn	(x=0X1EF4C);
	op_hex		(x,	1);
	create_insn	(x=0X1EF54);
	op_plain_offset	(x,	1,	0X10000540);
	op_plain_offset	(x,	129,	0X10000540);
	create_insn	(x=0X1EF58);
	op_plain_offset	(x,	1,	0X10000560);
	op_plain_offset	(x,	129,	0X10000560);
	create_insn	(x=0X1EF5A);
	op_plain_offset	(x,	1,	0X10000540);
	op_plain_offset	(x,	129,	0X10000540);
	create_insn	(x=0X1EF60);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1EF6A,	"jumptable 00014EEC case 11",	1);
	create_insn	(0X1EF6A);
	create_insn	(x=0X1EF72);
	op_hex		(x,	1);
	create_insn	(x=0X1EF7C);
	op_plain_offset	(x,	1,	0X10000560);
	op_plain_offset	(x,	129,	0X10000560);
	create_insn	(x=0X1EF80);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1EF86);
	op_plain_offset	(x,	1,	0X10000560);
	op_plain_offset	(x,	129,	0X10000560);
	create_insn	(x=0X1EF90);
	op_plain_offset	(x,	1,	0X10000560);
	op_plain_offset	(x,	129,	0X10000560);
	set_cmt	(0X1EF9E,	"jumptable 00014EBC default case",	1);
	create_insn	(0X1EF9E);
	set_name	(0X1EF9E,	"def_14EBC");
	create_insn	(x=0X1EFA0);
	op_plain_offset	(x,	1,	0X10000560);
	op_plain_offset	(x,	129,	0X10000560);
	create_insn	(x=0X1EFAE);
	op_plain_offset	(x,	1,	0X10000560);
	op_plain_offset	(x,	129,	0X10000560);
	create_insn	(x=0X1EFB6);
	op_plain_offset	(x,	1,	0X10000560);
	op_plain_offset	(x,	129,	0X10000560);
	set_cmt	(0X1EFCE,	"jumptable 00014EEC default case",	1);
	create_insn	(0X1EFCE);
	set_name	(0X1EFCE,	"def_14EEC");
	create_insn	(0X1EFD0);
	create_insn	(0X1EFE2);
	create_insn	(x=0X1EFE8);
	op_plain_offset	(x,	1,	0X10000560);
	op_plain_offset	(x,	129,	0X10000560);
	create_insn	(x=0X1EFF8);
	op_plain_offset	(x,	1,	0X10000560);
	op_plain_offset	(x,	129,	0X10000560);
	create_insn	(0X1F000);
	create_insn	(0X1F002);
	create_insn	(0X1F006);
	create_insn	(x=0X1F00C);
	op_plain_offset	(x,	1,	0X10000560);
	op_plain_offset	(x,	129,	0X10000560);
	create_insn	(x=0X1F01E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1F022,	"jumptable 00014EBC cases 0,4,5",	1);
	create_insn	(x=0X1F026);
	op_plain_offset	(x,	1,	0X10000560);
	op_plain_offset	(x,	129,	0X10000560);
	set_cmt	(0X1F02E,	"jumptable 00014EEC cases 2,4",	1);
	create_insn	(0X1F02E);
	set_cmt	(0X1F038,	"jumptable 00014EBC case 2",	1);
	create_insn	(0X1F038);
	create_insn	(x=0X1F03C);
	op_plain_offset	(x,	1,	0X10000558);
	op_plain_offset	(x,	129,	0X10000558);
	create_insn	(x=0X1F046);
	op_plain_offset	(x,	1,	0X10000558);
	op_plain_offset	(x,	129,	0X10000558);
	create_insn	(x=0X1F05A);
	op_hex		(x,	1);
	create_insn	(x=0X1F064);
	op_plain_offset	(x,	1,	0X10000560);
	op_plain_offset	(x,	129,	0X10000560);
	create_insn	(x=0X1F06C);
	op_plain_offset	(x,	1,	0X10000560);
	op_plain_offset	(x,	129,	0X10000560);
	create_insn	(0X1F07E);
	create_insn	(x=0X1F084);
	op_plain_offset	(x,	1,	0X10000560);
	op_plain_offset	(x,	129,	0X10000560);
	create_insn	(0X1F094);
	set_cmt	(0X1F09A,	"jumptable 00014EBC case 7",	1);
	create_insn	(0X1F09A);
	create_insn	(0X1F09C);
	create_insn	(0X1F09E);
	set_cmt	(0X1F0A0,	"jumptable 00014EBC case 3",	1);
	create_insn	(0X1F0A0);
	create_insn	(x=0X1F0AA);
	op_plain_offset	(x,	1,	0X10000540);
	op_plain_offset	(x,	129,	0X10000540);
	create_insn	(x=0X1F0B0);
	op_hex		(x,	1);
	create_insn	(x=0X1F0B4);
	op_plain_offset	(x,	1,	0X10000540);
	op_plain_offset	(x,	129,	0X10000540);
	set_cmt	(0X1F0BE,	"jumptable 00014EBC case 6",	1);
	create_insn	(0X1F0BE);
	create_insn	(0X1F0C2);
	create_dword	(x=0X1F0CC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1F0D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1F0D4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1F0D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1F0DC);
	create_insn	(0X1F0EA);
	create_insn	(0X1F100);
	create_insn	(0X1F126);
	create_insn	(0X1F12C);
	create_insn	(0X1F162);
	create_insn	(0X1F17C);
	create_insn	(0X1F198);
	create_insn	(0X1F1D0);
	create_insn	(0X1F1E0);
	create_insn	(0X1F1E2);
	create_insn	(0X1F1E4);
	set_name	(0X1F1E4,	"unkn1_IRQHandler");
	create_insn	(0X1F22C);
	create_insn	(0X1F232);
	create_insn	(0X1F23A);
	create_insn	(x=0X1F254);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1F29C);
	create_insn	(0X1F2AC);
	create_insn	(x=0X1F2B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1F2BC);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X1F2BE);
	op_hex		(x,	1);
	create_insn	(x=0X1F2C2);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X1F2C4);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X1F2C6);
	op_hex		(x,	1);
	create_insn	(x=0X1F2CA);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X1F2D2);
	op_hex		(x,	1);
	set_cmt	(0X1F2E8,	"handler",	0);
	create_insn	(x=0X1F2E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1F2EC,	"num",	0);
	create_insn	(x=0X1F30C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1F31A);
	create_insn	(0X1F31C);
	set_name	(0X1F31C,	"nullsub_9");
	create_insn	(0X1F31E);
	create_insn	(0X1F348);
	create_insn	(0X1F37E);
	set_name	(0X1F37E,	"nullsub_6");
	create_insn	(0X1F380);
	create_insn	(x=0X1F388);
	op_stkvar	(x,	1);
	create_insn	(0X1F394);
	create_insn	(x=0X1F39C);
	op_stkvar	(x,	1);
	create_insn	(0X1F3A8);
	create_insn	(x=0X1F3B0);
	op_stkvar	(x,	1);
	create_insn	(0X1F3BC);
	create_insn	(x=0X1F3C4);
	op_stkvar	(x,	1);
	create_insn	(0X1F3D0);
	create_insn	(x=0X1F3D8);
	op_stkvar	(x,	1);
	create_insn	(0X1F3E4);
	create_insn	(0X1F3E8);
	create_insn	(x=0X1F3EC);
	op_hex		(x,	1);
	create_insn	(0X1F40E);
	create_insn	(0X1F43A);
	create_insn	(x=0X1F442);
	op_hex		(x,	1);
	create_insn	(0X1F45A);
	create_insn	(0X1F47C);
	create_byte	(0X1F49A);
	make_array	(0X1F49A,	0X2);
	create_dword	(0X1F49C);
	create_dword	(0X1F4A0);
	create_dword	(0X1F4A4);
	create_dword	(0X1F4A8);
	create_dword	(0X1F4AC);
	create_dword	(0X1F4B0);
	create_dword	(x=0X1F4B4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1F4B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1F4BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X1F4C0);
	create_dword	(0X1F4C4);
	create_dword	(x=0X1F4C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X1F4CC);
	create_dword	(0X1F4D0);
	create_dword	(0X1F4D4);
	create_dword	(0X1F4D8);
	create_dword	(0X1F4DC);
	create_dword	(0X1F4E0);
	create_dword	(0X1F4E4);
	create_dword	(0X1F4E8);
	create_insn	(0X1F4EC);
	create_insn	(x=0X1F4F0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X1F4F0,	"unkn_bit1_clear_154F0");
	create_insn	(x=0X1F4F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X1F4F8,	"unkn_bit1_set_154F8");
	create_insn	(0X1F500);
	create_insn	(0X1F504);
	set_name	(0X1F504,	"nullsub_7");
	create_insn	(0X1F506);
	set_name	(0X1F506,	"nullsub_12");
	create_insn	(0X1F508);
	create_insn	(0X1F514);
	create_insn	(0X1F518);
	create_insn	(0X1F51A);
	create_insn	(0X1F51C);
	create_insn	(0X1F51E);
	create_insn	(0X1F52A);
	create_insn	(0X1F52E);
	create_insn	(0X1F530);
	create_insn	(0X1F532);
	create_insn	(0X1F534);
	create_insn	(0X1F536);
	create_insn	(0X1F538);
	create_insn	(0X1F53A);
	create_insn	(0X1F53C);
	create_insn	(0X1F53E);
	create_insn	(0X1F540);
	create_insn	(0X1F542);
	create_dword	(x=0X1F544);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1F548);
	create_insn	(0X1F55C);
	create_insn	(x=0X1F55E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1F576);
	create_insn	(x=0X1F578);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1F57A);
	op_plain_offset	(x,	1,	0X10005BF0);
	op_plain_offset	(x,	129,	0X10005BF0);
	create_insn	(x=0X1F59C);
	op_plain_offset	(x,	1,	0X10005BF0);
	op_plain_offset	(x,	129,	0X10005BF0);
	create_insn	(x=0X1F5A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F5AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F5B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1F5C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1F5CA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1F5CE);
	op_stkvar	(x,	1);
	set_cmt	(0X1F5D8,	"priMask",	0);
	create_insn	(0X1F5E0);
	create_insn	(x=0X1F5EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F5F2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1F5F6);
	op_plain_offset	(x,	1,	0X10005BF0);
	op_plain_offset	(x,	129,	0X10005BF0);
	create_insn	(x=0X1F5FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F606);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F612);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1F61E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1F624);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1F628);
	op_stkvar	(x,	1);
	set_cmt	(0X1F632,	"priMask",	0);
	create_insn	(0X1F63A);
	set_cmt	(0X1F642,	"a2",	0);
	set_cmt	(0X1F644,	"pkt",	0);
	create_insn	(0X1F64C);
	create_insn	(x=0X1F658);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F65A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1F65C);
	op_stkvar	(x,	1);
	create_insn	(x=0X1F662);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1F66A);
	op_stkvar	(x,	1);
	create_insn	(0X1F66E);
	set_name	(0X1F66E,	"nullsub_10");
	create_insn	(x=0X1F670);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1F686);
	op_plain_offset	(x,	1,	0X100059E8);
	op_plain_offset	(x,	129,	0X100059E8);
	create_insn	(x=0X1F68A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1F68C);
	op_plain_offset	(x,	1,	0X100059E8);
	op_plain_offset	(x,	129,	0X100059E8);
	create_insn	(x=0X1F698);
	op_plain_offset	(x,	1,	0X100059E8);
	op_plain_offset	(x,	129,	0X100059E8);
	create_insn	(x=0X1F69C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1F6A0);
	op_plain_offset	(x,	1,	0X100059E8);
	op_plain_offset	(x,	129,	0X100059E8);
	create_insn	(x=0X1F6AA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1F6AE);
	op_plain_offset	(x,	1,	0X100059E8);
	op_plain_offset	(x,	129,	0X100059E8);
	create_dword	(x=0X1F6B4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1F6B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1F6BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1F6C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1F6C4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1F6C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1F6CC);
	set_name	(0X1F6CC,	"WDT_Feed");
	create_insn	(x=0X1F6D2);
	op_plain_offset	(x,	1,	0X40000000);
	op_plain_offset	(x,	129,	0X40000000);
	create_insn	(x=0X1F6D6);
	op_plain_offset	(x,	1,	0X40000000);
	op_plain_offset	(x,	129,	0X40000000);
	set_cmt	(0X1F6DC,	"cmd_param",	0);
	create_insn	(0X1F6DC);
	set_name	(0X1F6DC,	"Chip_IAP_EraseSector");
	create_insn	(x=0X1F6E0);
	op_enum		(x,	1,	GetEnum("IAP_CAMMAND"),0);
	create_insn	(x=0X1F6E2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1F6EA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1F6EC);
	op_plain_offset	(x,	1,	0X10005EF8);
	op_plain_offset	(x,	129,	0X10005EF8);
	set_cmt	(0X1F6EE,	"status_result",	0);
	set_cmt	(0X1F6F2,	"cmd_param",	0);
	set_cmt	(0X1F6FC,	"cmd_param",	0);
	create_insn	(0X1F6FC);
	set_name	(0X1F6FC,	"Chip_IAP_CopyRamToFlash");
	create_insn	(x=0X1F700);
	op_enum		(x,	1,	GetEnum("IAP_CAMMAND"),0);
	create_insn	(x=0X1F702);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1F708);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1F70C,	"status_result",	0);
	set_cmt	(0X1F70E,	"cmd_param",	0);
	create_insn	(x=0X1F70E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1F716);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1F722);
	create_insn	(x=0X1F726);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X1F726,	"Chip_IAP_BlankCheckSector");
	set_cmt	(0X1F728,	"cmd_param",	0);
	create_insn	(x=0X1F72A);
	op_enum		(x,	1,	GetEnum("IAP_CAMMAND"),0);
	set_cmt	(0X1F732,	"status_result",	0);
	set_cmt	(0X1F736,	"cmd_param",	0);
	create_insn	(x=0X1F73C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1F74A,	"cmd_param",	0);
	create_insn	(0X1F74A);
	set_name	(0X1F74A,	"Chip_IAP_Compare");
	create_insn	(x=0X1F74E);
	op_enum		(x,	1,	GetEnum("IAP_CAMMAND"),0);
	create_insn	(x=0X1F750);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1F758,	"status_result",	0);
	set_cmt	(0X1F75C,	"cmd_param",	0);
	create_insn	(x=0X1F764);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1F770);
	set_cmt	(0X1F774,	"cmd_param",	0);
	create_insn	(0X1F774);
	set_name	(0X1F774,	"Chip_IAP_ReadUID");
	create_insn	(x=0X1F77A);
	op_enum		(x,	1,	GetEnum("IAP_CAMMAND"),0);
	create_insn	(x=0X1F77C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1F77E,	"cmd_param",	0);
	set_cmt	(0X1F782,	"status_result",	0);
	create_insn	(x=0X1F78C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1F798);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1F7A6);
	create_insn	(0X1F7A8);
	create_insn	(0X1F7B6);
	create_insn	(x=0X1F7B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1F7CA);
	create_insn	(0X1F7D8);
	set_name	(0X1F7D8,	"IAP_Flash_157D8");
	create_insn	(x=0X1F7DA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1F7E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1F7E4,	"a3",	0);
	set_cmt	(0X1F7E6,	"a1",	0);
	set_cmt	(0X1F7E8,	"param_buf",	0);
	create_insn	(x=0X1F802);
	op_plain_offset	(x,	1,	0X100005CC);
	op_plain_offset	(x,	129,	0X100005CC);
	create_insn	(x=0X1F80A);
	op_plain_offset	(x,	1,	0X100005CC);
	op_plain_offset	(x,	129,	0X100005CC);
	create_insn	(0X1F80E);
	set_cmt	(0X1F810,	"endSector",	0);
	set_cmt	(0X1F812,	"strSector",	0);
	set_cmt	(0X1F818,	"endSector",	0);
	set_cmt	(0X1F81A,	"strSector",	0);
	set_cmt	(0X1F820,	"endSector",	0);
	set_cmt	(0X1F822,	"strSector",	0);
	set_cmt	(0X1F828,	"endSector",	0);
	set_cmt	(0X1F82A,	"strSector",	0);
	create_insn	(x=0X1F830);
	op_plain_offset	(x,	1,	0X100005CC);
	op_plain_offset	(x,	129,	0X100005CC);
	set_cmt	(0X1F836,	"dstAdd",	0);
	set_cmt	(0X1F83A,	"byteswrt",	0);
	set_cmt	(0X1F83E,	"srcAdd",	0);
	create_insn	(x=0X1F83E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1F844);
	op_plain_offset	(x,	1,	0X100005CC);
	op_plain_offset	(x,	129,	0X100005CC);
	create_insn	(x=0X1F848);
	op_plain_offset	(x,	1,	0X100005CC);
	op_plain_offset	(x,	129,	0X100005CC);
	create_insn	(0X1F84C);
	set_name	(0X1F84C,	"IAP_Flash_1584C");
	create_insn	(x=0X1F860);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1F862);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1F870);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1F872,	"a3",	0);
	set_cmt	(0X1F876,	"a1",	0);
	set_cmt	(0X1F878,	"param_buf",	0);
	set_cmt	(0X1F87E,	"endSector",	0);
	set_cmt	(0X1F880,	"strSector",	0);
	set_cmt	(0X1F886,	"endSector",	0);
	set_cmt	(0X1F888,	"strSector",	0);
	set_cmt	(0X1F88E,	"endSector",	0);
	set_cmt	(0X1F890,	"strSector",	0);
	create_insn	(x=0X1F896);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1F898,	"dstAdd",	0);
	set_cmt	(0X1F89C,	"byteswrt",	0);
	set_cmt	(0X1F8A0,	"srcAdd",	0);
	create_insn	(0X1F8B0);
	set_name	(0X1F8B0,	"IAP_Flash_158B0");
	create_insn	(x=0X1F8B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1F8C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1F8CA);
	op_plain_offset	(x,	1,	0X10005F20);
	op_plain_offset	(x,	129,	0X10005F20);
	set_cmt	(0X1F8CC,	"endSector",	0);
	set_cmt	(0X1F8CE,	"strSector",	0);
	set_cmt	(0X1F8D8,	"endSector",	0);
	set_cmt	(0X1F8DA,	"strSector",	0);
	set_cmt	(0X1F8E4,	"endSector",	0);
	set_cmt	(0X1F8E6,	"strSector",	0);
	create_insn	(x=0X1F8EE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1F8F0,	"dstAdd",	0);
	set_cmt	(0X1F8F6,	"srcAdd",	0);
	create_insn	(0X1F8FA);
	create_insn	(0X1F904);
	create_insn	(0X1F90E);
	create_insn	(0X1F918);
	create_insn	(0X1F922);
	create_insn	(0X1F92C);
	create_insn	(0X1F936);
	create_insn	(0X1F942);
	set_name	(0X1F942,	"packet_flash_1F942");
	create_insn	(0X1F94E);
	create_insn	(0X1F958);
	create_insn	(0X1F962);
	create_insn	(0X1F96C);
	create_insn	(0X1F976);
	create_insn	(0X1F980);
	create_insn	(0X1F98A);
	create_insn	(0X1F994);
	create_insn	(0X1F99E);
	create_insn	(0X1F9A8);
	create_insn	(0X1F9B2);
	create_insn	(0X1F9C2);
	create_insn	(x=0X1F9D0);
	op_stkvar	(x,	1);
	create_insn	(0X1F9D6);
	create_insn	(0X1F9E0);
	create_insn	(0X1F9F0);
	create_insn	(0X1F9FA);
	create_insn	(0X1FA04);
	set_name	(0X1FA04,	"iap_entry");
	set_cmt	(0X1FA08,	"cmd_param",	0);
	create_insn	(0X1FA08);
	set_name	(0X1FA08,	"Chip_IAP_PreSectorForReadWrite");
	create_insn	(x=0X1FA0C);
	op_enum		(x,	1,	GetEnum("IAP_CAMMAND"),0);
	create_insn	(x=0X1FA0E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1FA16);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1FA18);
	op_plain_offset	(x,	1,	0X10005EF8);
	op_plain_offset	(x,	129,	0X10005EF8);
	set_cmt	(0X1FA1A,	"status_result",	0);
	set_cmt	(0X1FA1E,	"cmd_param",	0);
	create_insn	(0X1FA28);
	create_insn	(0X1FA2A);
	create_byte	(0X1FA36);
	make_array	(0X1FA36,	0X2);
	create_dword	(x=0X1FA38);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X1FA38,	"cmd_param");
	create_dword	(x=0X1FA3C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1FA40);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1FA44);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X1FA44,	"srcAdd");
	create_dword	(x=0X1FA48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X1FA4C);
	create_dword	(x=0X1FA50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1FA54);
	set_name	(0X1FA54,	"compute_buf_crc16");
	create_insn	(x=0X1FA58);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1FA70);
	create_insn	(0X1FA76);
	create_insn	(0X1FA7A);
	set_name	(0X1FA7A,	"packet_unkn_1FA7A");
	set_cmt	(0X1FA86,	"seed",	0);
	set_cmt	(0X1FA8A,	"len",	0);
	create_insn	(0X1FAAA);
	create_insn	(0X1FAAE);
	set_name	(0X1FAAE,	"packet_make_checksum");
	set_cmt	(0X1FABA,	"seed",	0);
	set_cmt	(0X1FABE,	"len",	0);
	create_dword	(x=0X1FAD0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1FAD4);
	create_insn	(x=0X1FAD6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1FADA);
	create_insn	(0X1FAEA);
	create_insn	(0X1FB0C);
	create_insn	(0X1FB10);
	create_dword	(x=0X1FB2C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1FB30);
	set_name	(0X1FB30,	"ADC_Init");
	create_insn	(x=0X1FB34);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1FB3C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1FB42);
	op_hex		(x,	1);
	set_cmt	(0X1FB48,	"ClkType",	0);
	create_insn	(x=0X1FB48);
	op_enum		(x,	1,	GetEnum("CLKPWR_PCLKSEL"),0);
	create_insn	(x=0X1FB4E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1FB50);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X1FB52);
	op_hex		(x,	1);
	create_insn	(x=0X1FB56);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X1FB58);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X1FB5A);
	op_hex		(x,	1);
	create_insn	(x=0X1FB5E);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X1FB60);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X1FB62);
	op_hex		(x,	1);
	create_insn	(x=0X1FB66);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X1FB68);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X1FB6A);
	op_hex		(x,	1);
	create_insn	(x=0X1FB6E);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X1FB70);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X1FB72);
	op_hex		(x,	1);
	create_insn	(x=0X1FB76);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X1FB78);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X1FB7A);
	op_hex		(x,	1);
	create_insn	(x=0X1FB7E);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X1FBB2);
	op_hex		(x,	1);
	create_insn	(x=0X1FBBC);
	op_hex		(x,	1);
	create_insn	(x=0X1FBD4);
	op_hex		(x,	1);
	create_insn	(0X1FBDA);
	create_insn	(x=0X1FBDE);
	op_stkvar	(x,	1);
	create_insn	(x=0X1FBE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1FBE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1FBEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1FBEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X1FBF2);
	op_stkvar	(x,	1);
	set_cmt	(0X1FBF6,	"rate",	0);
	set_cmt	(0X1FBF8,	"ADCx",	0);
	create_insn	(x=0X1FBF8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1FC00);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X1FC00,	"ADC_GetData");
	create_insn	(x=0X1FC08);
	op_hex		(x,	1);
	create_insn	(0X1FC0E);
	create_insn	(x=0X1FC10);
	op_hex		(x,	1);
	create_insn	(x=0X1FC16);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1FC22);
	op_hex		(x,	1);
	create_insn	(0X1FC2A);
	set_name	(0X1FC2A,	"ADC_StartCmd");
	create_insn	(x=0X1FC2C);
	op_hex		(x,	1);
	create_insn	(0X1FC3C);
	set_name	(0X1FC3C,	"ADC_BurstCmd");
	create_insn	(x=0X1FC3E);
	op_hex		(x,	1);
	create_insn	(x=0X1FC4A);
	op_hex		(x,	1);
	create_insn	(0X1FC52);
	set_name	(0X1FC52,	"ADC_PowerdownCmd");
	create_insn	(x=0X1FC54);
	op_hex		(x,	1);
	create_insn	(x=0X1FC60);
	op_hex		(x,	1);
	create_insn	(0X1FC68);
	set_name	(0X1FC68,	"ADC_EdgeStartConfig");
	create_insn	(x=0X1FC6A);
	op_hex		(x,	1);
	create_insn	(x=0X1FC76);
	op_hex		(x,	1);
	create_insn	(0X1FC7E);
	set_name	(0X1FC7E,	"ADC_IntConfig");
	create_insn	(0X1FC96);
	set_name	(0X1FC96,	"ADC_ChannelCmd");
	create_insn	(0X1FCA6);
	create_insn	(0X1FCAA);
	set_name	(0X1FCAA,	"ADC_ChannelGetData");
	create_insn	(0X1FCB6);
	set_name	(0X1FCB6,	"ADC_ChannelGetStatus");
	create_insn	(x=0X1FCBE);
	op_hex		(x,	1);
	create_insn	(x=0X1FCC4);
	op_hex		(x,	1);
	create_insn	(x=0X1FCD0);
	op_stroff	(x,	1,	GetStrucIdByName("LPC_ADC_TypeDef"),	0);
	set_name	(0X1FCD0,	"ADC_GlobalGetData");
	create_insn	(0X1FCD4);
	set_name	(0X1FCD4,	"ADC_GlobalGetStatus");
	create_insn	(x=0X1FCD8);
	op_hex		(x,	1);
	create_insn	(x=0X1FCDE);
	op_hex		(x,	1);
	create_byte	(0X1FCEA);
	make_array	(0X1FCEA,	0X2);
	create_dword	(x=0X1FCEC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X1FCEC,	"ADCx");
	create_dword	(x=0X1FCF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X1FCF4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X1FCF8);
	create_insn	(0X1FCFC);
	set_name	(0X1FCFC,	"CLKPWR_SetPCLKDiv");
	create_insn	(0X1FD2E);
	create_insn	(0X1FD50);
	set_name	(0X1FD50,	"CLKPWR_GetPCLKSEL");
	create_insn	(0X1FD5C);
	create_insn	(x=0X1FD64);
	op_hex		(x,	1);
	create_insn	(x=0X1FD6A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X1FD6A,	"CLKPWR_GetPCLK");
	create_insn	(0X1FD84);
	create_insn	(0X1FD88);
	set_cmt	(0X1FD90,	"Configure power supply for each peripheral according to NewState",	1);
	create_insn	(0X1FD90);
	set_name	(0X1FD90,	"CLKPWR_ConfigPPWR");
	create_insn	(0X1FDA8);
	create_insn	(0X1FDB2);
	set_name	(0X1FDB2,	"CLKPWR_Sleep");
	create_insn	(x=0X1FDBE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X1FDBE,	"CLKPWR_DeepSleep");
	create_insn	(x=0X1FDD0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X1FDD0,	"CLKPWR_PowerDown");
	create_insn	(x=0X1FDE2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X1FDE2,	"CLKPWR_DeepPowerDown");
	create_dword	(0X1FDF4);
	create_dword	(x=0X1FDF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X1FDFC);
	create_dword	(x=0X1FE00);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X1FE04);
	set_name	(0X1FE04,	"check_failed");
	create_insn	(x=0X1FE08);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1FE0A,	"lev",	0);
	create_insn	(x=0X1FE0A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_strlit	(0X1FE10,	0X1FE3D);
	set_name	(0X1FE10,	"aWrongParameter");
	create_byte	(0X1FE3D);
	make_array	(0X1FE3D,	0X3);
	create_insn	(0X1FE40);
	set_name	(0X1FE40,	"RTC_Init");
	create_insn	(x=0X1FE44);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1FE4A,	"line",	0);
	create_insn	(x=0X1FE4C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1FE5A);
	create_insn	(x=0X1FE5E);
	op_stroff	(x,	1,	GetStrucIdByName("LPC_RTC_TypeDef"),	0);
	create_insn	(x=0X1FE60);
	op_stroff	(x,	1,	GetStrucIdByName("LPC_RTC_TypeDef"),	0);
	create_insn	(x=0X1FE64);
	op_stroff	(x,	1,	GetStrucIdByName("LPC_RTC_TypeDef"),	0);
	create_insn	(0X1FE6A);
	set_name	(0X1FE6A,	"RTC_DeInit");
	create_insn	(x=0X1FE6E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1FE74,	"line",	0);
	create_insn	(x=0X1FE74);
	op_dec		(x,	1);
	create_insn	(x=0X1FE76);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1FE7E);
	op_stroff	(x,	1,	GetStrucIdByName("LPC_RTC_TypeDef"),	0);
	set_cmt	(0X1FE80,	"NewState",	0);
	set_cmt	(0X1FE86,	"PPType",	0);
	create_insn	(0X1FE8E);
	set_name	(0X1FE8E,	"RTC_ResetClockTickCounter");
	create_insn	(x=0X1FE92);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1FE98,	"line",	0);
	create_insn	(x=0X1FE98);
	op_dec		(x,	1);
	create_insn	(x=0X1FE9A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1FEA2);
	op_hex		(x,	1);
	create_insn	(x=0X1FEAA);
	op_hex		(x,	1);
	create_insn	(0X1FEB2);
	set_name	(0X1FEB2,	"RTC_Cmd");
	create_insn	(x=0X1FEB6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1FEBE,	"line",	0);
	create_insn	(x=0X1FEBE);
	op_dec		(x,	1);
	create_insn	(x=0X1FEC0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1FECC,	"line",	0);
	create_insn	(x=0X1FECC);
	op_dec		(x,	1);
	create_insn	(x=0X1FECE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1FED4);
	op_stroff	(x,	1,	GetStrucIdByName("LPC_RTC_TypeDef"),	0);
	create_insn	(x=0X1FED6);
	op_hex		(x,	1);
	create_insn	(x=0X1FEDA);
	op_stroff	(x,	1,	GetStrucIdByName("LPC_RTC_TypeDef"),	0);
	create_insn	(x=0X1FEDE);
	op_stroff	(x,	1,	GetStrucIdByName("LPC_RTC_TypeDef"),	0);
	create_insn	(x=0X1FEE0);
	op_enum		(x,	1,	GetEnum("RTC_CCR"),0);
	create_insn	(0X1FEE6);
	set_name	(0X1FEE6,	"RTC_CntIncrIntConfig");
	create_insn	(x=0X1FEEA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1FEF4,	"line",	0);
	create_insn	(x=0X1FEF6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1FF02,	"line",	0);
	create_insn	(x=0X1FF04);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1FF28,	"line",	0);
	create_insn	(x=0X1FF2A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1FF34,	"switch 8 cases ",	0);
	set_cmt	(0X1FF38,	"switch jump",	0);
	set_cmt	(0X1FF3C,	"jump table for switch statement",	0);
	create_byte	(0X1FF3C);
	set_name	(0X1FF3C,	"jpt_15F38");
	create_byte	(0X1FF3D);
	create_byte	(0X1FF3E);
	create_byte	(0X1FF3F);
	create_byte	(0X1FF40);
	create_byte	(0X1FF41);
	create_byte	(0X1FF42);
	create_byte	(0X1FF43);
	set_cmt	(0X1FF44,	"switch 8 cases ",	0);
	create_insn	(0X1FF44);
	set_cmt	(0X1FF48,	"switch jump",	0);
	set_cmt	(0X1FF4C,	"jump table for switch statement",	0);
	create_byte	(0X1FF4C);
	set_name	(0X1FF4C,	"jpt_15F48");
	create_byte	(0X1FF4D);
	create_byte	(0X1FF4E);
	create_byte	(0X1FF4F);
	create_byte	(0X1FF50);
	create_byte	(0X1FF51);
	create_byte	(0X1FF52);
	create_byte	(0X1FF53);
	set_cmt	(0X1FF54,	"jumptable 00015F48 case 0",	1);
	create_insn	(0X1FF54);
	create_insn	(x=0X1FF56);
	op_hex		(x,	1);
	set_cmt	(0X1FF5C,	"jumptable 00015F48 case 1",	1);
	create_insn	(0X1FF5C);
	create_insn	(x=0X1FF5E);
	op_hex		(x,	1);
	set_cmt	(0X1FF64,	"jumptable 00015F38 default case",	1);
	set_name	(0X1FF64,	"def_15F48");
	set_cmt	(0X1FF66,	"jumptable 00015F48 case 2",	1);
	create_insn	(0X1FF66);
	create_insn	(x=0X1FF68);
	op_hex		(x,	1);
	set_cmt	(0X1FF6E,	"jumptable 00015F48 case 3",	1);
	create_insn	(0X1FF6E);
	create_insn	(x=0X1FF70);
	op_hex		(x,	1);
	set_cmt	(0X1FF76,	"jumptable 00015F48 case 4",	1);
	create_insn	(0X1FF76);
	create_insn	(x=0X1FF78);
	op_hex		(x,	1);
	set_cmt	(0X1FF7E,	"jumptable 00015F48 case 5",	1);
	create_insn	(0X1FF7E);
	create_insn	(x=0X1FF80);
	op_hex		(x,	1);
	set_cmt	(0X1FF86,	"jumptable 00015F48 case 6",	1);
	create_insn	(0X1FF86);
	create_insn	(x=0X1FF88);
	op_hex		(x,	1);
	set_cmt	(0X1FF8E,	"jumptable 00015F48 case 7",	1);
	create_insn	(0X1FF8E);
	create_insn	(x=0X1FF90);
	op_hex		(x,	1);
	set_cmt	(0X1FF96,	"jumptable 00015F38 case 0",	1);
	create_insn	(0X1FF96);
	create_insn	(x=0X1FF98);
	op_hex		(x,	1);
	set_cmt	(0X1FF9E,	"jumptable 00015F38 case 1",	1);
	create_insn	(0X1FF9E);
	create_insn	(x=0X1FFA0);
	op_hex		(x,	1);
	set_cmt	(0X1FFA6,	"jumptable 00015F38 case 2",	1);
	create_insn	(0X1FFA6);
	create_insn	(x=0X1FFA8);
	op_hex		(x,	1);
	set_cmt	(0X1FFAE,	"jumptable 00015F38 case 3",	1);
	create_insn	(0X1FFAE);
	create_insn	(x=0X1FFB0);
	op_hex		(x,	1);
	set_cmt	(0X1FFB6,	"jumptable 00015F38 case 4",	1);
	create_insn	(0X1FFB6);
	create_insn	(x=0X1FFB8);
	op_hex		(x,	1);
	set_cmt	(0X1FFBE,	"jumptable 00015F38 case 5",	1);
	create_insn	(0X1FFBE);
	create_insn	(x=0X1FFC0);
	op_hex		(x,	1);
	set_cmt	(0X1FFC6,	"jumptable 00015F38 case 6",	1);
	create_insn	(0X1FFC6);
	create_insn	(x=0X1FFC8);
	op_hex		(x,	1);
	set_cmt	(0X1FFCE,	"jumptable 00015F38 case 7",	1);
	create_insn	(0X1FFCE);
	create_insn	(x=0X1FFD0);
	op_hex		(x,	1);
	create_insn	(0X1FFD6);
	set_name	(0X1FFD6,	"RTC_AlarmIntConfig");
	create_insn	(x=0X1FFDA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1FFE4,	"line",	0);
	create_insn	(x=0X1FFE6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1FFF2,	"line",	0);
	create_insn	(x=0X1FFF4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X20018,	"line",	0);
	create_insn	(x=0X2001A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X20024,	"switch 8 cases ",	0);
	set_cmt	(0X20028,	"switch jump",	0);
	set_cmt	(0X2002C,	"jump table for switch statement",	0);
	create_byte	(0X2002C);
	set_name	(0X2002C,	"jpt_16028");
	create_byte	(0X2002D);
	create_byte	(0X2002E);
	create_byte	(0X2002F);
	create_byte	(0X20030);
	create_byte	(0X20031);
	create_byte	(0X20032);
	create_byte	(0X20033);
	set_cmt	(0X20034,	"switch 8 cases ",	0);
	create_insn	(0X20034);
	set_cmt	(0X20038,	"switch jump",	0);
	set_cmt	(0X2003C,	"jump table for switch statement",	0);
	create_byte	(0X2003C);
	set_name	(0X2003C,	"jpt_16038");
	create_byte	(0X2003D);
	create_byte	(0X2003E);
	create_byte	(0X2003F);
	create_byte	(0X20040);
	create_byte	(0X20041);
	create_byte	(0X20042);
	create_byte	(0X20043);
	set_cmt	(0X20044,	"jumptable 00016038 case 0",	1);
	create_insn	(0X20044);
	create_insn	(x=0X20046);
	op_hex		(x,	1);
	set_cmt	(0X2004C,	"jumptable 00016038 case 1",	1);
	create_insn	(0X2004C);
	create_insn	(x=0X2004E);
	op_hex		(x,	1);
	set_cmt	(0X20054,	"jumptable 00016028 default case",	1);
	set_name	(0X20054,	"def_16038");
	set_cmt	(0X20056,	"jumptable 00016038 case 2",	1);
	create_insn	(0X20056);
	create_insn	(x=0X20058);
	op_hex		(x,	1);
	set_cmt	(0X2005E,	"jumptable 00016038 case 3",	1);
	create_insn	(0X2005E);
	create_insn	(x=0X20060);
	op_hex		(x,	1);
	set_cmt	(0X20066,	"jumptable 00016038 case 4",	1);
	create_insn	(0X20066);
	create_insn	(x=0X20068);
	op_hex		(x,	1);
	set_cmt	(0X2006E,	"jumptable 00016038 case 5",	1);
	create_insn	(0X2006E);
	create_insn	(x=0X20070);
	op_hex		(x,	1);
	set_cmt	(0X20076,	"jumptable 00016038 case 6",	1);
	create_insn	(0X20076);
	create_insn	(x=0X20078);
	op_hex		(x,	1);
	set_cmt	(0X2007E,	"jumptable 00016038 case 7",	1);
	create_insn	(0X2007E);
	create_insn	(x=0X20080);
	op_hex		(x,	1);
	set_cmt	(0X20086,	"jumptable 00016028 case 0",	1);
	create_insn	(0X20086);
	create_insn	(x=0X20088);
	op_hex		(x,	1);
	set_cmt	(0X2008E,	"jumptable 00016028 case 1",	1);
	create_insn	(0X2008E);
	create_insn	(x=0X20090);
	op_hex		(x,	1);
	set_cmt	(0X20096,	"jumptable 00016028 case 2",	1);
	create_insn	(0X20096);
	create_insn	(x=0X20098);
	op_hex		(x,	1);
	set_cmt	(0X2009E,	"jumptable 00016028 case 3",	1);
	create_insn	(0X2009E);
	create_insn	(x=0X200A0);
	op_hex		(x,	1);
	set_cmt	(0X200A6,	"jumptable 00016028 case 4",	1);
	create_insn	(0X200A6);
	create_insn	(x=0X200A8);
	op_hex		(x,	1);
	set_cmt	(0X200AE,	"jumptable 00016028 case 5",	1);
	create_insn	(0X200AE);
	create_insn	(x=0X200B0);
	op_hex		(x,	1);
	set_cmt	(0X200B6,	"jumptable 00016028 case 6",	1);
	create_insn	(0X200B6);
	create_insn	(x=0X200B8);
	op_hex		(x,	1);
	set_cmt	(0X200BE,	"jumptable 00016028 case 7",	1);
	create_insn	(0X200BE);
	create_insn	(x=0X200C0);
	op_hex		(x,	1);
	create_insn	(0X200C6);
	set_name	(0X200C6,	"RTC_SetTime");
	create_insn	(x=0X200CC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X200D6,	"line",	0);
	create_insn	(x=0X200D6);
	op_dec		(x,	1);
	create_insn	(x=0X200DA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X200FE,	"line",	0);
	create_insn	(x=0X200FE);
	op_dec		(x,	1);
	create_insn	(x=0X20102);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X2010C);
	op_hex		(x,	1);
	create_insn	(x=0X20110);
	op_hex		(x,	1);
	set_cmt	(0X20114,	"switch 8 cases ",	0);
	set_cmt	(0X20118,	"switch jump",	0);
	set_cmt	(0X2011C,	"jump table for switch statement",	0);
	create_byte	(0X2011C);
	set_name	(0X2011C,	"jpt_16118");
	create_byte	(0X2011D);
	create_byte	(0X2011E);
	create_byte	(0X2011F);
	create_byte	(0X20120);
	create_byte	(0X20121);
	create_byte	(0X20122);
	create_byte	(0X20123);
	set_cmt	(0X20124,	"jumptable 00016118 case 0",	1);
	create_insn	(0X20124);
	set_cmt	(0X20128,	"line",	0);
	create_insn	(x=0X2012C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X20136,	"jumptable 00016118 default case",	1);
	set_name	(0X20136,	"def_16118");
	set_cmt	(0X2013A,	"jumptable 00016118 case 1",	1);
	create_insn	(0X2013A);
	set_cmt	(0X2013E,	"line",	0);
	create_insn	(x=0X20142);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X2014E,	"jumptable 00016118 case 2",	1);
	create_insn	(0X2014E);
	set_cmt	(0X20152,	"line",	0);
	create_insn	(x=0X20156);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X20162,	"jumptable 00016118 case 3",	1);
	create_insn	(0X20162);
	set_cmt	(0X20166,	"line",	0);
	create_insn	(x=0X2016A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X20170);
	op_hex		(x,	1);
	set_cmt	(0X2017A,	"jumptable 00016118 case 4",	1);
	create_insn	(0X2017A);
	set_cmt	(0X2017E,	"line",	0);
	create_insn	(x=0X20182);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X2018E,	"jumptable 00016118 case 5",	1);
	create_insn	(0X2018E);
	set_cmt	(0X20194,	"line",	0);
	create_insn	(x=0X20198);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X201A6,	"jumptable 00016118 case 6",	1);
	create_insn	(0X201A6);
	set_cmt	(0X201AA,	"line",	0);
	create_insn	(x=0X201AE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X201B4);
	op_hex		(x,	1);
	set_cmt	(0X201BE,	"jumptable 00016118 case 7",	1);
	create_insn	(0X201BE);
	set_cmt	(0X201C6,	"line",	0);
	create_insn	(x=0X201CA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X201D8);
	set_name	(0X201D8,	"RTC_GetTime");
	create_insn	(x=0X201DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X201E4,	"line",	0);
	create_insn	(x=0X201E8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X2020C,	"line",	0);
	create_insn	(x=0X20210);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X20216,	"switch 8 cases ",	0);
	set_cmt	(0X2021A,	"switch jump",	0);
	set_cmt	(0X2021E,	"jump table for switch statement",	0);
	create_byte	(0X2021E);
	set_name	(0X2021E,	"jpt_1621A");
	create_byte	(0X2021F);
	create_byte	(0X20220);
	create_byte	(0X20221);
	create_byte	(0X20222);
	create_byte	(0X20223);
	create_byte	(0X20224);
	create_byte	(0X20225);
	set_cmt	(0X20226,	"jumptable 0001621A case 0",	1);
	create_insn	(0X20226);
	create_dword	(x=0X2022C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X20230,	0X2024A);
	set_name	(0X20230,	"aLpc17xx_libLpc");
	create_byte	(0X2024A);
	make_array	(0X2024A,	0X2);
	set_cmt	(0X2024C,	"jumptable 0001621A case 1",	1);
	create_insn	(0X2024C);
	create_insn	(x=0X20250);
	op_hex		(x,	1);
	set_cmt	(0X20256,	"jumptable 0001621A case 2",	1);
	create_insn	(0X20256);
	set_cmt	(0X2025C,	"jumptable 0001621A case 3",	1);
	create_insn	(0X2025C);
	create_insn	(x=0X20260);
	op_hex		(x,	1);
	set_cmt	(0X20266,	"jumptable 0001621A case 4",	1);
	create_insn	(0X20266);
	create_insn	(x=0X2026A);
	op_hex		(x,	1);
	set_cmt	(0X20270,	"jumptable 0001621A case 5",	1);
	create_insn	(0X20270);
	set_cmt	(0X20278,	"jumptable 0001621A case 6",	1);
	create_insn	(0X20278);
	create_insn	(x=0X2027C);
	op_hex		(x,	1);
	set_cmt	(0X20282,	"jumptable 0001621A case 7",	1);
	create_insn	(0X20282);
	set_cmt	(0X2028A,	"jumptable 0001621A default case",	1);
	create_insn	(0X2028A);
	set_name	(0X2028A,	"def_1621A");
	create_insn	(0X2028E);
	set_name	(0X2028E,	"RTC_SetFullTime");
	create_insn	(x=0X20292);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X2029A,	"line",	0);
	create_insn	(x=0X2029E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X202A8);
	op_hex		(x,	1);
	create_insn	(x=0X202B2);
	op_hex		(x,	1);
	create_insn	(x=0X202C4);
	op_hex		(x,	1);
	create_insn	(x=0X202CE);
	op_hex		(x,	1);
	create_insn	(x=0X202D8);
	op_hex		(x,	1);
	create_insn	(x=0X202E2);
	op_hex		(x,	1);
	create_insn	(0X202F2);
	set_name	(0X202F2,	"RTC_GetFullTime");
	create_insn	(x=0X202F6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X202FE,	"line",	0);
	create_insn	(x=0X20302);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X2030E);
	op_hex		(x,	1);
	create_insn	(x=0X20318);
	op_hex		(x,	1);
	create_insn	(x=0X2032A);
	op_hex		(x,	1);
	create_insn	(x=0X20334);
	op_hex		(x,	1);
	create_insn	(x=0X2033E);
	op_hex		(x,	1);
	create_insn	(x=0X20346);
	op_hex		(x,	1);
	create_insn	(0X20356);
	set_name	(0X20356,	"RTC_SetAlarmTime");
	create_insn	(x=0X2035C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X20366,	"line",	0);
	create_insn	(x=0X2036A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X20376);
	op_hex		(x,	1);
	create_insn	(x=0X2037A);
	op_hex		(x,	1);
	set_cmt	(0X2037E,	"switch 8 cases ",	0);
	set_cmt	(0X20382,	"switch jump",	0);
	set_cmt	(0X20386,	"jump table for switch statement",	0);
	create_byte	(0X20386);
	set_name	(0X20386,	"jpt_16382");
	create_byte	(0X20387);
	create_byte	(0X20388);
	create_byte	(0X20389);
	create_byte	(0X2038A);
	create_byte	(0X2038B);
	create_byte	(0X2038C);
	create_byte	(0X2038D);
	set_cmt	(0X2038E,	"jumptable 00016382 case 0",	1);
	create_insn	(0X2038E);
	set_cmt	(0X20392,	"line",	0);
	create_insn	(x=0X20396);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X203A2,	"jumptable 00016382 default case",	1);
	set_name	(0X203A2,	"def_16382");
	set_cmt	(0X203A4,	"jumptable 00016382 case 1",	1);
	create_insn	(0X203A4);
	set_cmt	(0X203A8,	"line",	0);
	create_insn	(x=0X203AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X203BA,	"jumptable 00016382 case 2",	1);
	create_insn	(0X203BA);
	set_cmt	(0X203BE,	"line",	0);
	create_insn	(x=0X203C2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X203D0,	"jumptable 00016382 case 3",	1);
	create_insn	(0X203D0);
	set_cmt	(0X203D4,	"line",	0);
	create_insn	(x=0X203D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X203E0);
	op_hex		(x,	1);
	set_cmt	(0X203EA,	"jumptable 00016382 case 4",	1);
	create_insn	(0X203EA);
	set_cmt	(0X203EE,	"line",	0);
	create_insn	(x=0X203F2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X20400,	"jumptable 00016382 case 5",	1);
	create_insn	(0X20400);
	set_cmt	(0X20406,	"line",	0);
	create_insn	(x=0X2040A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X2041C,	"jumptable 00016382 case 6",	1);
	create_insn	(0X2041C);
	set_cmt	(0X20420,	"line",	0);
	create_insn	(x=0X20424);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X2042C);
	op_hex		(x,	1);
	set_cmt	(0X20436,	"jumptable 00016382 case 7",	1);
	create_insn	(0X20436);
	set_cmt	(0X2043E,	"line",	0);
	create_insn	(x=0X20442);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X20454,	"switch 8 cases ",	0);
	create_insn	(0X20454);
	set_name	(0X20454,	"RTC_GetAlarmTime");
	set_cmt	(0X20458,	"switch jump",	0);
	set_cmt	(0X2045C,	"jump table for switch statement",	0);
	create_byte	(0X2045C);
	set_name	(0X2045C,	"jpt_16458");
	create_byte	(0X2045D);
	create_byte	(0X2045E);
	create_byte	(0X2045F);
	create_byte	(0X20460);
	create_byte	(0X20461);
	create_byte	(0X20462);
	create_byte	(0X20463);
	set_cmt	(0X20464,	"jumptable 00016458 case 0",	1);
	create_insn	(0X20464);
	set_cmt	(0X2046A,	"jumptable 00016458 case 1",	1);
	create_insn	(0X2046A);
	create_insn	(x=0X2046E);
	op_hex		(x,	1);
	set_cmt	(0X20474,	"jumptable 00016458 case 2",	1);
	create_insn	(0X20474);
	set_cmt	(0X2047A,	"jumptable 00016458 case 3",	1);
	create_insn	(0X2047A);
	create_insn	(x=0X2047E);
	op_hex		(x,	1);
	set_cmt	(0X20484,	"jumptable 00016458 case 4",	1);
	create_insn	(0X20484);
	create_insn	(x=0X20488);
	op_hex		(x,	1);
	set_cmt	(0X2048E,	"jumptable 00016458 case 5",	1);
	create_insn	(0X2048E);
	set_cmt	(0X20498,	"jumptable 00016458 case 6",	1);
	create_insn	(0X20498);
	create_insn	(x=0X2049C);
	op_hex		(x,	1);
	set_cmt	(0X204A2,	"jumptable 00016458 case 7",	1);
	create_insn	(0X204A2);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_5(void) {
        auto x;
#define id x

	set_cmt	(0X204AC,	"jumptable 00016458 default case",	1);
	create_insn	(0X204AC);
	set_name	(0X204AC,	"def_16458");
	create_insn	(0X204B0);
	set_name	(0X204B0,	"RTC_SetFullAlarmTime");
	create_insn	(x=0X204B4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X204BC,	"line",	0);
	create_insn	(x=0X204C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X204CA);
	op_hex		(x,	1);
	create_insn	(x=0X204D4);
	op_hex		(x,	1);
	create_insn	(x=0X204E8);
	op_hex		(x,	1);
	create_insn	(x=0X204F2);
	op_hex		(x,	1);
	create_insn	(x=0X204FC);
	op_hex		(x,	1);
	create_insn	(x=0X20506);
	op_hex		(x,	1);
	create_insn	(0X20516);
	set_name	(0X20516,	"RTC_GetFullAlarmTime");
	create_insn	(x=0X2051A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X20522,	"line",	0);
	create_insn	(x=0X20526);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X20532);
	op_hex		(x,	1);
	create_insn	(x=0X2053C);
	op_hex		(x,	1);
	create_insn	(x=0X20550);
	op_hex		(x,	1);
	create_insn	(x=0X2055A);
	op_hex		(x,	1);
	create_insn	(x=0X20564);
	op_hex		(x,	1);
	create_insn	(x=0X2056C);
	op_hex		(x,	1);
	create_insn	(0X2057C);
	set_name	(0X2057C,	"RTC_GetIntPending");
	create_insn	(x=0X20580);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X20588,	"line",	0);
	create_insn	(x=0X2058C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X2059C,	"line",	0);
	create_insn	(x=0X205A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X205B2);
	set_name	(0X205B2,	"RTC_ClearIntPending");
	create_insn	(x=0X205B6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X205BE,	"line",	0);
	create_insn	(x=0X205C2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X205D2,	"line",	0);
	create_insn	(x=0X205D6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X205E6);
	set_name	(0X205E6,	"RTC_CalibCounterCmd");
	create_insn	(x=0X205EA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X205F2,	"line",	0);
	create_insn	(x=0X205F6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X20604,	"line",	0);
	create_insn	(x=0X20608);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X20612);
	op_hex		(x,	1);
	create_insn	(0X2061A);
	create_insn	(x=0X2061C);
	op_hex		(x,	1);
	create_insn	(0X20622);
	set_name	(0X20622,	"RTC_CalibConfig");
	create_insn	(x=0X20628);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X20632,	"line",	0);
	create_insn	(x=0X20636);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X20644,	"line",	0);
	create_insn	(x=0X20648);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X20658,	"line",	0);
	create_insn	(x=0X2065C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_byte	(0X20676);
	make_array	(0X20676,	0X2);
	create_dword	(x=0X20678);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X2067C);
	set_name	(0X2067C,	"RTC_WriteGPREG");
	create_insn	(x=0X20680);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X2068A,	"line",	0);
	create_insn	(x=0X2068E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X2069A,	"line",	0);
	create_insn	(x=0X2069E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X206AE);
	set_name	(0X206AE,	"RTC_ReadGPREG");
	create_insn	(x=0X206B2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X206BA,	"line",	0);
	create_insn	(x=0X206BE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X206CA,	"line",	0);
	create_insn	(x=0X206CE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_byte	(0X206DE);
	make_array	(0X206DE,	0X2);
	create_dword	(x=0X206E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X206E4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X206EA);
	op_plain_offset	(x,	1,	0X10006740);
	op_plain_offset	(x,	129,	0X10006740);
	create_insn	(x=0X206F0);
	op_plain_offset	(x,	1,	0X10006740);
	op_plain_offset	(x,	129,	0X10006740);
	create_insn	(x=0X206F6);
	op_plain_offset	(x,	1,	0X10006740);
	op_plain_offset	(x,	129,	0X10006740);
	create_insn	(x=0X206FA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X20700);
	op_plain_offset	(x,	1,	0X10006120);
	op_plain_offset	(x,	129,	0X10006120);
	create_insn	(x=0X20712);
	op_plain_offset	(x,	1,	0X10006130);
	op_plain_offset	(x,	129,	0X10006130);
	create_insn	(0X2071E);
	set_name	(0X2071E,	"UART0_IRQHandler");
	create_insn	(x=0X20720);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X20722);
	op_plain_offset	(x,	1,	0X4000C000);
	op_plain_offset	(x,	129,	0X4000C000);
	create_insn	(x=0X20724);
	op_hex		(x,	1);
	create_insn	(x=0X2073E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X20740);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X20744);
	op_plain_offset	(x,	1,	0X4000C000);
	op_plain_offset	(x,	129,	0X4000C000);
	create_insn	(x=0X2076A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X20774);
	create_insn	(x=0X20778);
	op_hex		(x,	1);
	create_insn	(x=0X2078E);
	op_plain_offset	(x,	1,	0X10006120);
	op_plain_offset	(x,	129,	0X10006120);
	create_insn	(0X20798);
	set_name	(0X20798,	"UART0_Init");
	set_cmt	(0X2079C,	"LPC_SC",	1);
	create_insn	(x=0X2079C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X207A8);
	op_hex		(x,	1);
	set_cmt	(0X207B0,	"ClkType",	0);
	create_insn	(x=0X207B0);
	op_enum		(x,	1,	GetEnum("CLKPWR_PCLKSEL"),0);
	create_insn	(x=0X207B8);
	op_dec		(x,	1);
	create_insn	(x=0X207D0);
	op_dec		(x,	1);
	create_insn	(0X207DE);
	create_insn	(0X207E8);
	create_insn	(x=0X207FA);
	op_dec		(x,	1);
	create_insn	(x=0X20808);
	op_dec		(x,	1);
	create_insn	(x=0X2080E);
	op_dec		(x,	1);
	create_insn	(x=0X20828);
	op_hex		(x,	1);
	create_insn	(x=0X20846);
	op_hex		(x,	1);
	create_insn	(x=0X20852);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X20856);
	op_hex		(x,	1);
	create_insn	(x=0X2085A);
	op_hex		(x,	1);
	create_insn	(x=0X20860);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X20864);
	op_plain_offset	(x,	1,	0X4000C000);
	op_plain_offset	(x,	129,	0X4000C000);
	create_insn	(x=0X2086A);
	op_plain_offset	(x,	1,	0X4000C000);
	op_plain_offset	(x,	129,	0X4000C000);
	create_insn	(x=0X20870);
	op_plain_offset	(x,	1,	0X4000C000);
	op_plain_offset	(x,	129,	0X4000C000);
	create_insn	(x=0X20876);
	op_plain_offset	(x,	1,	0X4000C000);
	op_plain_offset	(x,	129,	0X4000C000);
	create_insn	(x=0X2087A);
	op_plain_offset	(x,	1,	0X4000C000);
	op_plain_offset	(x,	129,	0X4000C000);
	create_insn	(x=0X2087E);
	op_plain_offset	(x,	1,	0X4000C000);
	op_plain_offset	(x,	129,	0X4000C000);
	create_insn	(x=0X20882);
	op_plain_offset	(x,	1,	0X4000C000);
	op_plain_offset	(x,	129,	0X4000C000);
	create_insn	(x=0X20884);
	op_plain_offset	(x,	1,	0X4000C000);
	op_plain_offset	(x,	129,	0X4000C000);
	create_insn	(x=0X20886);
	op_hex		(x,	1);
	create_insn	(x=0X2088A);
	op_plain_offset	(x,	1,	0X4000C000);
	op_plain_offset	(x,	129,	0X4000C000);
	set_cmt	(0X2088C,	"handler",	0);
	create_insn	(x=0X2088C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X20890,	"num",	0);
	create_insn	(x=0X208AE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X208B2);
	op_plain_offset	(x,	1,	0X4000C000);
	op_plain_offset	(x,	129,	0X4000C000);
	create_insn	(x=0X208BA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X208BC);
	op_plain_offset	(x,	1,	0X4000C000);
	op_plain_offset	(x,	129,	0X4000C000);
	create_insn	(0X208C6);
	create_insn	(x=0X208C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X208D0);
	op_plain_offset	(x,	1,	0X10006120);
	op_plain_offset	(x,	129,	0X10006120);
	create_insn	(x=0X208D4);
	op_plain_offset	(x,	1,	0X10006120);
	op_plain_offset	(x,	129,	0X10006120);
	create_insn	(x=0X208F6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X208F8);
	op_plain_offset	(x,	1,	0X4000C000);
	op_plain_offset	(x,	129,	0X4000C000);
	create_insn	(x=0X208FE);
	op_plain_offset	(x,	1,	0X10006120);
	op_plain_offset	(x,	129,	0X10006120);
	create_insn	(x=0X20908);
	op_plain_offset	(x,	1,	0X10006120);
	op_plain_offset	(x,	129,	0X10006120);
	set_cmt	(0X20912,	"priMask",	0);
	create_insn	(0X2091C);
	create_insn	(x=0X20920);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X20922);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X20932);
	create_insn	(0X20968);
	set_cmt	(0X2099E,	"priMask",	0);
	create_insn	(x=0X209AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X209B4);
	op_plain_offset	(x,	1,	0X10006750);
	op_plain_offset	(x,	129,	0X10006750);
	create_insn	(x=0X209C4);
	op_plain_offset	(x,	1,	0X10006760);
	op_plain_offset	(x,	129,	0X10006760);
	create_insn	(x=0X209D0);
	op_plain_offset	(x,	1,	0X100067F0);
	op_plain_offset	(x,	129,	0X100067F0);
	create_insn	(0X209DC);
	set_name	(0X209DC,	"UART1_IRQHandler");
	create_insn	(x=0X209DE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X209E0);
	op_plain_offset	(x,	1,	0X40010000);
	op_plain_offset	(x,	129,	0X40010000);
	create_insn	(x=0X209E2);
	op_hex		(x,	1);
	create_insn	(x=0X209FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X20A04);
	op_plain_offset	(x,	1,	0X40010000);
	op_plain_offset	(x,	129,	0X40010000);
	create_insn	(x=0X20A2A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X20A36);
	create_insn	(x=0X20A3A);
	op_hex		(x,	1);
	create_insn	(x=0X20A50);
	op_plain_offset	(x,	1,	0X10006750);
	op_plain_offset	(x,	129,	0X10006750);
	create_insn	(0X20A5A);
	set_name	(0X20A5A,	"UART1_Init");
	create_insn	(x=0X20A6A);
	op_hex		(x,	1);
	set_cmt	(0X20A72,	"ClkType",	0);
	create_insn	(x=0X20A72);
	op_enum		(x,	1,	GetEnum("CLKPWR_PCLKSEL"),0);
	create_insn	(0X20AA0);
	create_insn	(0X20AAA);
	create_dword	(x=0X20AD0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X20AD4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X20AD8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X20ADC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X20AE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X20AE4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X20AE8);
	create_insn	(x=0X20B02);
	op_hex		(x,	1);
	create_insn	(x=0X20B20);
	op_hex		(x,	1);
	create_insn	(x=0X20B2C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X20B2E);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X20B30);
	op_hex		(x,	1);
	create_insn	(x=0X20B34);
	op_hex		(x,	1);
	create_insn	(x=0X20B38);
	op_plain_offset	(x,	1,	0X4002C000);
	op_plain_offset	(x,	129,	0X4002C000);
	create_insn	(x=0X20B3A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X20B3E);
	op_plain_offset	(x,	1,	0X40010000);
	op_plain_offset	(x,	129,	0X40010000);
	create_insn	(x=0X20B44);
	op_plain_offset	(x,	1,	0X40010000);
	op_plain_offset	(x,	129,	0X40010000);
	create_insn	(x=0X20B4A);
	op_plain_offset	(x,	1,	0X40010000);
	op_plain_offset	(x,	129,	0X40010000);
	create_insn	(x=0X20B4E);
	op_plain_offset	(x,	1,	0X40010000);
	op_plain_offset	(x,	129,	0X40010000);
	create_insn	(x=0X20B52);
	op_plain_offset	(x,	1,	0X40010000);
	op_plain_offset	(x,	129,	0X40010000);
	create_insn	(x=0X20B56);
	op_plain_offset	(x,	1,	0X40010000);
	op_plain_offset	(x,	129,	0X40010000);
	create_insn	(x=0X20B5A);
	op_plain_offset	(x,	1,	0X40010000);
	op_plain_offset	(x,	129,	0X40010000);
	create_insn	(x=0X20B5C);
	op_plain_offset	(x,	1,	0X40010000);
	op_plain_offset	(x,	129,	0X40010000);
	create_insn	(x=0X20B5E);
	op_hex		(x,	1);
	create_insn	(x=0X20B62);
	op_plain_offset	(x,	1,	0X40010000);
	op_plain_offset	(x,	129,	0X40010000);
	set_cmt	(0X20B64,	"handler",	0);
	create_insn	(x=0X20B64);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X20B68,	"num",	0);
	create_insn	(x=0X20B82);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X20B86);
	op_plain_offset	(x,	1,	0X40010000);
	op_plain_offset	(x,	129,	0X40010000);
	create_insn	(x=0X20B8E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X20B90);
	op_plain_offset	(x,	1,	0X40010000);
	op_plain_offset	(x,	129,	0X40010000);
	create_insn	(0X20B9A);
	create_insn	(x=0X20B9C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X20BA0);
	op_plain_offset	(x,	1,	0X10006750);
	op_plain_offset	(x,	129,	0X10006750);
	create_insn	(x=0X20BA4);
	op_plain_offset	(x,	1,	0X10006750);
	op_plain_offset	(x,	129,	0X10006750);
	create_insn	(x=0X20BC6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X20BC8);
	op_plain_offset	(x,	1,	0X40010000);
	op_plain_offset	(x,	129,	0X40010000);
	create_insn	(x=0X20BCE);
	op_plain_offset	(x,	1,	0X10006750);
	op_plain_offset	(x,	129,	0X10006750);
	create_insn	(x=0X20BD8);
	op_plain_offset	(x,	1,	0X10006750);
	op_plain_offset	(x,	129,	0X10006750);
	set_cmt	(0X20BE2,	"priMask",	0);
	create_insn	(0X20BEC);
	create_insn	(x=0X20BF0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X20BF2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X20C00);
	create_insn	(0X20C32);
	set_cmt	(0X20C68,	"priMask",	0);
	create_insn	(x=0X20C74);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X20C7C);
	op_plain_offset	(x,	1,	0X10006840);
	op_plain_offset	(x,	129,	0X10006840);
	create_insn	(x=0X20C8C);
	op_plain_offset	(x,	1,	0X10006850);
	op_plain_offset	(x,	129,	0X10006850);
	create_insn	(0X20C98);
	set_name	(0X20C98,	"UART2_IRQHandler");
	create_insn	(x=0X20C9A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X20C9E);
	op_hex		(x,	1);
	create_insn	(x=0X20CB8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X20CD2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X20CDE);
	create_insn	(x=0X20CE2);
	op_hex		(x,	1);
	create_insn	(x=0X20CF8);
	op_plain_offset	(x,	1,	0X10006840);
	op_plain_offset	(x,	129,	0X10006840);
	create_insn	(0X20D02);
	set_name	(0X20D02,	"UART2_Init");
	set_cmt	(0X20D0C,	"ClkType",	0);
	create_insn	(x=0X20D0C);
	op_enum		(x,	1,	GetEnum("CLKPWR_PCLKSEL"),0);
	create_insn	(0X20D3A);
	create_insn	(0X20D44);
	create_insn	(0X20D6A);
	create_insn	(x=0X20D84);
	op_hex		(x,	1);
	create_insn	(x=0X20DA2);
	op_hex		(x,	1);
	create_insn	(x=0X20DAE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X20DB2);
	op_hex		(x,	1);
	create_insn	(x=0X20DB6);
	op_hex		(x,	1);
	create_insn	(x=0X20DE2);
	op_hex		(x,	1);
	set_cmt	(0X20DE8,	"handler",	0);
	create_insn	(x=0X20DE8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X20DEC,	"num",	0);
	create_insn	(0X20E06);
	create_insn	(0X20E12);
	create_insn	(0X20E1E);
	create_insn	(x=0X20E20);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X20E26);
	op_plain_offset	(x,	1,	0X10006840);
	op_plain_offset	(x,	129,	0X10006840);
	create_insn	(x=0X20E2A);
	op_plain_offset	(x,	1,	0X10006840);
	op_plain_offset	(x,	129,	0X10006840);
	create_insn	(x=0X20E54);
	op_plain_offset	(x,	1,	0X10006840);
	op_plain_offset	(x,	129,	0X10006840);
	create_insn	(x=0X20E5E);
	op_plain_offset	(x,	1,	0X10006840);
	op_plain_offset	(x,	129,	0X10006840);
	set_cmt	(0X20E68,	"priMask",	0);
	create_insn	(0X20E72);
	create_insn	(x=0X20E76);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X20E8A);
	create_insn	(0X20EBC);
	set_cmt	(0X20EF2,	"priMask",	0);
	create_byte	(0X20EFE);
	make_array	(0X20EFE,	0X2);
	create_dword	(0X20F00);
	create_dword	(x=0X20F04);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X20F08);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X20F0C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X20F10);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X20F14);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X20F18);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X20F1E);
	op_plain_offset	(x,	1,	0X10006A60);
	op_plain_offset	(x,	129,	0X10006A60);
	create_insn	(x=0X20F30);
	op_plain_offset	(x,	1,	0X10006A70);
	op_plain_offset	(x,	129,	0X10006A70);
	create_insn	(0X20F3C);
	set_name	(0X20F3C,	"UART3_IRQHandler");
	create_insn	(x=0X20F42);
	op_hex		(x,	1);
	create_insn	(x=0X20F5C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X20F78);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X20F82);
	create_insn	(x=0X20F86);
	op_hex		(x,	1);
	create_insn	(x=0X20F9C);
	op_plain_offset	(x,	1,	0X10006A60);
	op_plain_offset	(x,	129,	0X10006A60);
	create_insn	(0X20FA6);
	set_name	(0X20FA6,	"UART3_Init");
	create_insn	(x=0X20FB6);
	op_hex		(x,	1);
	set_cmt	(0X20FBE,	"ClkType",	0);
	create_insn	(x=0X20FBE);
	op_enum		(x,	1,	GetEnum("CLKPWR_PCLKSEL"),0);
	create_insn	(0X20FEC);
	create_insn	(0X20FF6);
	create_insn	(0X2101C);
	create_insn	(x=0X21036);
	op_hex		(x,	1);
	create_insn	(x=0X21054);
	op_hex		(x,	1);
	create_insn	(x=0X21060);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X21064);
	op_hex		(x,	1);
	create_insn	(x=0X21068);
	op_hex		(x,	1);
	create_insn	(x=0X21094);
	op_hex		(x,	1);
	set_cmt	(0X2109A,	"handler",	0);
	create_insn	(x=0X2109A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X2109E,	"num",	0);
	create_insn	(0X210B8);
	create_insn	(0X210C4);
	create_insn	(0X210D0);
	create_insn	(x=0X210D2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X210DA);
	op_plain_offset	(x,	1,	0X10006A60);
	op_plain_offset	(x,	129,	0X10006A60);
	create_insn	(x=0X210DE);
	op_plain_offset	(x,	1,	0X10006A60);
	op_plain_offset	(x,	129,	0X10006A60);
	create_insn	(x=0X21108);
	op_plain_offset	(x,	1,	0X10006A60);
	op_plain_offset	(x,	129,	0X10006A60);
	create_insn	(x=0X21112);
	op_plain_offset	(x,	1,	0X10006A60);
	op_plain_offset	(x,	129,	0X10006A60);
	set_cmt	(0X2111C,	"priMask",	0);
	create_insn	(0X21126);
	create_insn	(x=0X2112A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X2113C);
	create_insn	(0X21172);
	set_cmt	(0X211A8,	"priMask",	0);
	create_insn	(0X211B4);
	create_insn	(x=0X211B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X211C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X211C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X211CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X211D2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X211D6);
	create_insn	(x=0X211E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X211EA);
	op_hex		(x,	1);
	create_dword	(x=0X21200);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X21204);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X21208);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X2120C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X21210);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X21214);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X21218);
	set_name	(0X21218,	"WDT_SetTimeOut");
	create_insn	(x=0X2121A);
	op_dec		(x,	1);
	create_insn	(x=0X2121C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X21232);
	op_enum		(x,	1,	GetEnum("system_defines"),0);
	create_insn	(0X21236);
	create_insn	(x=0X2123A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X21252);
	set_cmt	(0X21262,	"DivVal",	0);
	create_insn	(x=0X21262);
	op_enum		(x,	1,	GetEnum("CLKPWR_PCLKSEL_CCLK"),0);
	set_cmt	(0X21264,	"ClkType",	0);
	create_insn	(x=0X21264);
	op_enum		(x,	1,	GetEnum("CLKPWR_PCLKSEL"),0);
	create_insn	(x=0X2126A);
	op_plain_offset	(x,	1,	0X40000000);
	op_plain_offset	(x,	129,	0X40000000);
	create_insn	(0X21270);
	create_insn	(0X21282);
	create_insn	(0X21298);
	set_name	(0X21298,	"WDT_Init");
	set_cmt	(0X2129E,	"DivVal",	0);
	set_cmt	(0X212A0,	"ClkType",	0);
	create_insn	(x=0X212A6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X212AA);
	op_plain_offset	(x,	1,	0X40000000);
	op_plain_offset	(x,	129,	0X40000000);
	create_insn	(x=0X212AC);
	op_hex		(x,	1);
	create_insn	(x=0X212B0);
	op_plain_offset	(x,	1,	0X40000000);
	op_plain_offset	(x,	129,	0X40000000);
	create_insn	(x=0X212B2);
	op_plain_offset	(x,	1,	0X40000000);
	op_plain_offset	(x,	129,	0X40000000);
	create_insn	(x=0X212B6);
	op_plain_offset	(x,	1,	0X40000000);
	op_plain_offset	(x,	129,	0X40000000);
	create_insn	(x=0X212B8);
	op_enum		(x,	1,	GetEnum("WDT_MODE_OPT"),0);
	create_insn	(x=0X212BE);
	op_hex		(x,	1);
	create_insn	(x=0X212C6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X212C6,	"WDT_Feed_cond");
	create_insn	(x=0X212D4);
	op_plain_offset	(x,	1,	0X40000000);
	op_plain_offset	(x,	129,	0X40000000);
	create_insn	(x=0X212D8);
	op_plain_offset	(x,	1,	0X40000000);
	op_plain_offset	(x,	129,	0X40000000);
	create_insn	(0X212DE);
	set_name	(0X212DE,	"WDT_Start");
	create_insn	(x=0X212E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X212E4,	"timeout",	0);
	create_insn	(x=0X212E6);
	op_plain_offset	(x,	1,	0X40000000);
	op_plain_offset	(x,	129,	0X40000000);
	create_insn	(x=0X212E8);
	op_hex		(x,	1);
	create_insn	(x=0X212F2);
	op_hex		(x,	1);
	create_insn	(x=0X212FE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X212FE,	"WDT_ReadTimeOutFlag");
	create_insn	(x=0X2130A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X2130A,	"WDT_ClrTimeOutFlag");
	create_insn	(x=0X21310);
	op_hex		(x,	1);
	create_insn	(0X21318);
	set_name	(0X21318,	"WDT_UpdateTimeOut");
	create_insn	(x=0X2131A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X2131E);
	op_plain_offset	(x,	1,	0X40000000);
	op_plain_offset	(x,	129,	0X40000000);
	create_insn	(x=0X21324);
	op_hex		(x,	1);
	set_cmt	(0X2132A,	"clk_source",	0);
	create_insn	(x=0X21336);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X21336,	"WDT_GetCurrentCount");
	create_insn	(x=0X2133A);
	op_plain_offset	(x,	1,	0X40000000);
	op_plain_offset	(x,	129,	0X40000000);
	create_insn	(x=0X2133E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X2133E,	"WDT_IsTimedOut");
	create_insn	(x=0X21344);
	op_hex		(x,	1);
	create_insn	(x=0X2134A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X21352);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_byte	(0X2135A);
	make_array	(0X2135A,	0X2);
	create_dword	(x=0X2135C);
	op_dec		(x,	0);
	create_dword	(x=0X21360);
	op_enum		(x,	0,	GetEnum("system_defines"),0);
	create_dword	(x=0X21364);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X21368);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X2136C);
	create_insn	(x=0X21376);
	op_stkvar	(x,	1);
	create_dword	(x=0X2138C);
	op_plain_offset	(x,	0,	0X21376);
	op_plain_offset	(x,	128,	0X21376);
	create_insn	(0X21390);
	create_insn	(x=0X21398);
	op_stkvar	(x,	1);
	create_insn	(x=0X213A8);
	op_stkvar	(x,	1);
	create_dword	(x=0X213C0);
	op_plain_offset	(x,	0,	0X213A6);
	op_plain_offset	(x,	128,	0X213A6);
	create_insn	(0X213C4);
	create_insn	(x=0X213CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X213D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X213D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X213E6);
	op_stkvar	(x,	1);
	create_byte	(0X213EA);
	make_array	(0X213EA,	0X2);
	create_dword	(x=0X213EC);
	op_plain_offset	(x,	0,	0X213D0);
	op_plain_offset	(x,	128,	0X213D0);
	create_insn	(0X213F0);
	create_insn	(0X21400);
	create_insn	(x=0X2140E);
	op_hex		(x,	1);
	create_insn	(0X21440);
	create_insn	(0X21446);
	create_insn	(0X21462);
	create_insn	(x=0X21464);
	op_hex		(x,	1);
	create_insn	(0X2146E);
	create_insn	(x=0X21472);
	op_hex		(x,	1);
	create_dword	(x=0X21480);
	op_plain_offset	(x,	0,	0X21406);
	op_plain_offset	(x,	128,	0X21406);
	create_insn	(0X21484);
	create_insn	(0X214B6);
	create_insn	(0X214D6);
	create_insn	(x=0X214DA);
	op_hex		(x,	1);
	create_insn	(0X21500);
	create_insn	(x=0X2151C);
	op_hex		(x,	1);
	create_insn	(0X21522);
	create_insn	(x=0X21558);
	op_hex		(x,	1);
	create_insn	(x=0X21566);
	op_hex		(x,	1);
	create_insn	(x=0X21570);
	op_hex		(x,	1);
	create_insn	(0X2158E);
	create_insn	(0X21590);
	create_insn	(0X215B2);
	create_insn	(x=0X215C8);
	op_hex		(x,	1);
	create_insn	(x=0X215E2);
	op_hex		(x,	1);
	create_insn	(0X215EC);
	create_insn	(0X215F0);
	create_insn	(0X215F4);
	create_insn	(0X215F8);
	create_insn	(0X215FE);
	create_insn	(0X21602);
	create_dword	(x=0X21608);
	op_plain_offset	(x,	0,	0X21498);
	op_plain_offset	(x,	128,	0X21498);
	create_insn	(0X2160C);
	create_insn	(x=0X21612);
	op_stkvar	(x,	1);
	create_insn	(x=0X21614);
	op_stkvar	(x,	1);
	create_insn	(x=0X21616);
	op_stkvar	(x,	1);
	create_insn	(x=0X21618);
	op_stkvar	(x,	1);
	create_insn	(x=0X2161E);
	op_stkvar	(x,	1);
	create_insn	(x=0X21622);
	op_stkvar	(x,	1);
	create_insn	(x=0X21628);
	op_stkvar	(x,	1);
	create_insn	(x=0X21630);
	op_stkvar	(x,	1);
	create_insn	(x=0X21632);
	op_stkvar	(x,	1);
	create_insn	(x=0X21634);
	op_stkvar	(x,	1);
	create_insn	(x=0X2163C);
	op_stkvar	(x,	1);
	create_dword	(x=0X21640);
	op_plain_offset	(x,	0,	0X2162A);
	op_plain_offset	(x,	128,	0X2162A);
	create_dword	(x=0X21644);
	op_plain_offset	(x,	0,	0X21630);
	op_plain_offset	(x,	128,	0X21630);
	create_insn	(0X21648);
	create_insn	(x=0X21660);
	op_stkvar	(x,	1);
	create_insn	(x=0X21678);
	op_hex		(x,	1);
	create_insn	(0X21690);
	create_insn	(x=0X21698);
	op_hex		(x,	1);
	create_insn	(x=0X2169E);
	op_stkvar	(x,	1);
	create_insn	(0X216BA);
	create_insn	(x=0X216BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X216C2);
	op_hex		(x,	1);
	create_insn	(0X216E2);
	create_insn	(x=0X216F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X216F6);
	op_hex		(x,	1);
	create_insn	(0X21702);
	create_insn	(0X21706);
	create_insn	(0X2170C);
	create_insn	(x=0X21714);
	op_stkvar	(x,	1);
	create_insn	(x=0X21718);
	op_hex		(x,	1);
	create_insn	(x=0X21732);
	op_stkvar	(x,	1);
	create_insn	(0X21740);
	create_insn	(0X21752);
	create_insn	(0X21764);
	create_insn	(0X2176C);
	create_insn	(0X21770);
	create_insn	(0X21782);
	create_insn	(0X2178C);
	create_insn	(0X21794);
	create_insn	(0X217A8);
	create_insn	(0X217CC);
	create_insn	(0X217D2);
	create_insn	(0X217DC);
	create_insn	(0X217E0);
	create_insn	(0X21800);
	create_insn	(0X21806);
	create_insn	(0X2182A);
	create_insn	(0X2182E);
	create_insn	(0X21836);
	create_insn	(0X2183E);
	create_insn	(x=0X21878);
	op_hex		(x,	1);
	create_insn	(x=0X2187C);
	op_hex		(x,	1);
	create_insn	(0X21890);
	create_insn	(0X218A0);
	create_insn	(0X218A6);
	create_insn	(0X218AC);
	create_insn	(0X218D4);
	set_name	(0X218D4,	"memcpy");
	create_insn	(x=0X218DA);
	op_hex		(x,	1);
	create_insn	(x=0X2190C);
	op_hex		(x,	1);
	create_insn	(0X2192A);
	create_insn	(0X2195E);
	create_insn	(x=0X219C2);
	op_hex		(x,	1);
	create_insn	(0X219D2);
	create_insn	(x=0X219DC);
	op_hex		(x,	1);
	create_insn	(0X21A00);
	create_insn	(0X21A16);
	create_insn	(x=0X21A42);
	op_stkvar	(x,	1);
	create_insn	(x=0X21A58);
	op_hex		(x,	1);
	create_insn	(0X21A64);
	create_insn	(0X21A6E);
	create_insn	(0X21A7A);
	create_insn	(0X21A8A);
	create_insn	(0X21A92);
	create_insn	(0X21AA6);
	create_insn	(0X21AB4);
	create_insn	(0X21AC8);
	create_insn	(0X21AD2);
	create_insn	(0X21ADA);
	create_insn	(0X21AE4);
	create_insn	(0X21AEC);
	create_insn	(0X21B02);
	create_insn	(0X21B06);
	create_insn	(0X21B28);
	create_insn	(0X21B3E);
	create_insn	(x=0X21B56);
	op_hex		(x,	1);
	create_insn	(0X21B5E);
	create_insn	(0X21B68);
	create_insn	(0X21B86);
	create_insn	(0X21BAA);
	create_insn	(0X21BC2);
	create_insn	(0X21BEC);
	create_insn	(0X21BF0);
	create_insn	(x=0X21BFE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X21C0C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X21C10);
	create_insn	(x=0X21C16);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X21C1A);
	create_insn	(x=0X21C1E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X21C24);
	create_insn	(0X21C32);
	create_dword	(0X21C58);
	create_byte	(0X21C5C);
	create_byte	(0X21C5D);
	make_array	(0X21C5D,	0X3);
	create_byte	(0X21C60);
	create_byte	(0X21C61);
	make_array	(0X21C61,	0X3);
	create_byte	(0X21C64);
	create_byte	(0X21C65);
	make_array	(0X21C65,	0X3);
	create_insn	(0X21C68);
	create_insn	(0X21C76);
	create_insn	(0X21C7E);
	create_insn	(0X21C8A);
	create_insn	(0X21C90);
	create_insn	(0X21C9A);
	create_insn	(x=0X21CA4);
	op_stkvar	(x,	1);
	create_byte	(0X21CBA);
	make_array	(0X21CBA,	0X2);
	create_dword	(x=0X21CBC);
	op_plain_offset	(x,	0,	0X21CAC);
	op_plain_offset	(x,	128,	0X21CAC);
	create_insn	(0X21CC0);
	create_insn	(0X21CCA);
	create_byte	(0X21CDA);
	make_array	(0X21CDA,	0X2);
	create_insn	(0X21CDC);
	create_insn	(0X21CFA);
	create_insn	(x=0X21D00);
	op_stkvar	(x,	1);
	create_insn	(0X21D4C);
	create_insn	(x=0X21D52);
	op_stkvar	(x,	1);
	create_insn	(x=0X21D62);
	op_stkvar	(x,	1);
	create_insn	(0X21D68);
	create_byte	(0X21D92);
	make_array	(0X21D92,	0X2);
	create_dword	(x=0X21D94);
	op_plain_offset	(x,	0,	0X21CEE);
	op_plain_offset	(x,	128,	0X21CEE);
	create_insn	(0X21D98);
	create_insn	(x=0X21DA0);
	op_hex		(x,	1);
	create_insn	(x=0X21DAC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X21DC2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X21DC6);
	create_insn	(x=0X21DCE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X21DD2);
	create_insn	(x=0X21DD6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X21DE4);
	create_dword	(0X21E04);
	create_byte	(0X21E08);
	create_byte	(0X21E09);
	make_array	(0X21E09,	0X3);
	create_byte	(0X21E0C);
	create_byte	(0X21E0D);
	make_array	(0X21E0D,	0X3);
	create_byte	(0X21E10);
	create_byte	(0X21E11);
	make_array	(0X21E11,	0X3);
	create_insn	(0X21E14);
	create_insn	(x=0X21E1E);
	op_hex		(x,	1);
	create_insn	(x=0X21E3A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X21E40);
	op_hex		(x,	1);
	create_insn	(x=0X21E4C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X21E58);
	create_insn	(0X21E70);
	create_insn	(x=0X21E72);
	op_hex		(x,	1);
	create_dword	(0X21E7C);
	create_byte	(0X21E80);
	create_byte	(0X21E81);
	make_array	(0X21E81,	0X3);
	create_insn	(0X21E84);
	create_insn	(x=0X21E8A);
	op_hex		(x,	1);
	create_insn	(0X21EA0);
	create_insn	(0X21EBC);
	create_insn	(0X21EC0);
	create_insn	(0X21EC4);
	create_insn	(0X21F1C);
	create_insn	(0X21F20);
	create_insn	(x=0X21F42);
	op_stkvar	(x,	1);
	create_insn	(0X21F62);
	create_insn	(0X21F70);
	create_insn	(0X21F92);
	create_insn	(0X21F9C);
	create_insn	(x=0X21FA2);
	op_stkvar	(x,	1);
	create_insn	(x=0X21FA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X21FAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X21FBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X21FCA);
	op_stkvar	(x,	1);
	create_insn	(x=0X21FD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X21FE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X21FE2);
	op_hex		(x,	1);
	create_insn	(x=0X21FEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X21FF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X21FF8);
	op_hex		(x,	1);
	create_insn	(x=0X22000);
	op_stkvar	(x,	1);
	create_insn	(x=0X2200C);
	op_stkvar	(x,	1);
	create_insn	(x=0X2200E);
	op_hex		(x,	1);
	create_insn	(x=0X22016);
	op_stkvar	(x,	1);
	create_insn	(x=0X22022);
	op_stkvar	(x,	1);
	create_insn	(x=0X22024);
	op_hex		(x,	1);
	create_insn	(x=0X2202C);
	op_stkvar	(x,	1);
	create_insn	(x=0X22034);
	op_stkvar	(x,	1);
	create_insn	(x=0X22040);
	op_stkvar	(x,	1);
	create_insn	(0X2204A);
	create_insn	(x=0X22058);
	op_hex		(x,	1);
	create_insn	(x=0X22060);
	op_hex		(x,	1);
	create_insn	(x=0X2208C);
	op_hex		(x,	1);
	create_insn	(0X22096);
	create_insn	(0X2209C);
	create_insn	(x=0X220B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X220C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X220C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X220DC);
	op_hex		(x,	1);
	create_insn	(0X220F0);
	create_insn	(x=0X220F6);
	op_hex		(x,	1);
	create_insn	(x=0X220FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X22108);
	op_stkvar	(x,	1);
	create_insn	(0X22110);
	create_insn	(x=0X22118);
	op_stkvar	(x,	1);
	create_insn	(x=0X2211C);
	op_stkvar	(x,	1);
	create_insn	(x=0X2213C);
	op_stkvar	(x,	1);
	create_insn	(x=0X2213E);
	op_stkvar	(x,	1);
	create_insn	(0X22156);
	create_insn	(x=0X22158);
	op_stkvar	(x,	1);
	create_insn	(x=0X22160);
	op_stkvar	(x,	1);
	create_insn	(x=0X22164);
	op_hex		(x,	1);
	create_insn	(x=0X2216A);
	op_stkvar	(x,	1);
	create_insn	(x=0X22170);
	op_stkvar	(x,	1);
	create_insn	(x=0X22186);
	op_stkvar	(x,	1);
	create_insn	(x=0X22198);
	op_stkvar	(x,	1);
	create_insn	(x=0X221A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X221A8);
	op_hex		(x,	1);
	create_insn	(x=0X221AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X221B6);
	op_hex		(x,	1);
	create_insn	(x=0X221C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X221CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X221DA);
	op_hex		(x,	1);
	create_insn	(0X221E0);
	create_insn	(x=0X221EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X221F0);
	op_hex		(x,	1);
	create_insn	(0X22208);
	create_insn	(x=0X22216);
	op_stkvar	(x,	1);
	create_insn	(x=0X2221E);
	op_stkvar	(x,	1);
	create_insn	(0X2222C);
	create_insn	(x=0X22244);
	op_stkvar	(x,	1);
	create_insn	(x=0X22248);
	op_hex		(x,	1);
	create_insn	(x=0X2225E);
	op_hex		(x,	1);
	create_insn	(x=0X22264);
	op_stkvar	(x,	1);
	create_insn	(0X22276);
	create_insn	(x=0X2227C);
	op_stkvar	(x,	1);
	create_insn	(0X22282);
	create_insn	(x=0X22284);
	op_stkvar	(x,	1);
	create_insn	(x=0X2228A);
	op_hex		(x,	1);
	create_insn	(x=0X22294);
	op_hex		(x,	1);
	create_insn	(x=0X2229E);
	op_stkvar	(x,	1);
	create_insn	(0X222AA);
	create_insn	(0X222B2);
	create_insn	(x=0X222BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X222C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X222D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X222E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X222EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X222EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X222EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X222F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X22300);
	op_hex		(x,	1);
	create_insn	(x=0X2231C);
	op_stkvar	(x,	1);
	create_insn	(x=0X2232A);
	op_stkvar	(x,	1);
	create_dword	(x=0X22338);
	op_plain_offset	(x,	0,	0X21F7C);
	op_plain_offset	(x,	128,	0X21F7C);
	create_dword	(x=0X2233C);
	op_plain_offset	(x,	0,	0X22086);
	op_plain_offset	(x,	128,	0X22086);
	create_dword	(0X22340);
	create_insn	(0X22344);
	create_insn	(0X22350);
	create_dword	(x=0X22368);
	op_plain_offset	(x,	0,	0X22358);
	op_plain_offset	(x,	128,	0X22358);
	create_dword	(x=0X2236C);
	op_plain_offset	(x,	0,	0X2235E);
	op_plain_offset	(x,	128,	0X2235E);
	create_insn	(0X22370);
	create_insn	(0X22386);
	create_insn	(0X2238E);
	create_insn	(0X223AA);
	create_insn	(x=0X223B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X223B4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X223B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X223BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X223C0);
	create_insn	(0X22442);
	create_insn	(0X2244A);
	create_insn	(x=0X22456);
	op_hex		(x,	1);
	create_insn	(0X2245C);
	create_insn	(0X2245E);
	create_insn	(x=0X22470);
	op_stkvar	(x,	1);
	create_insn	(x=0X22474);
	op_stkvar	(x,	1);
	create_insn	(x=0X2248C);
	op_hex		(x,	1);
	create_insn	(x=0X224AA);
	op_stkvar	(x,	1);
	create_insn	(0X224D0);
	create_insn	(0X224DE);
	create_insn	(0X224E2);
	create_insn	(x=0X224F2);
	op_stkvar	(x,	1);
	create_insn	(0X22502);
	create_insn	(0X22508);
	create_insn	(x=0X2250E);
	op_stkvar	(x,	1);
	create_insn	(x=0X22514);
	op_stkvar	(x,	1);
	create_insn	(x=0X2251A);
	op_stkvar	(x,	1);
	create_insn	(x=0X22522);
	op_stkvar	(x,	1);
	create_insn	(x=0X22532);
	op_stkvar	(x,	1);
	create_insn	(x=0X22534);
	op_stkvar	(x,	1);
	create_insn	(x=0X22542);
	op_stkvar	(x,	1);
	create_insn	(x=0X22544);
	op_stkvar	(x,	1);
	create_insn	(0X2254E);
	create_insn	(x=0X22556);
	op_stkvar	(x,	1);
	create_insn	(x=0X22558);
	op_stkvar	(x,	1);
	create_insn	(0X22572);
	create_insn	(x=0X2257C);
	op_stkvar	(x,	1);
	create_insn	(0X22582);
	create_insn	(0X225A0);
	create_insn	(x=0X225AC);
	op_stkvar	(x,	1);
	create_insn	(0X225B2);
	create_insn	(x=0X225CA);
	op_stkvar	(x,	1);
	create_insn	(0X225D0);
	create_insn	(0X225D6);
	create_insn	(x=0X225EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X225F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X225F6);
	op_stkvar	(x,	1);
	create_insn	(0X22602);
	create_insn	(0X2260A);
	create_insn	(x=0X22614);
	op_hex		(x,	1);
	create_insn	(x=0X22628);
	op_stkvar	(x,	1);
	create_insn	(0X22632);
	create_insn	(0X2263C);
	create_insn	(x=0X22644);
	op_stkvar	(x,	1);
	create_insn	(0X22658);
	create_insn	(0X22662);
	create_insn	(0X2267A);
	create_insn	(x=0X22680);
	op_stkvar	(x,	1);
	create_insn	(0X22688);
	create_insn	(x=0X2268C);
	op_stkvar	(x,	1);
	create_insn	(x=0X2268E);
	op_stkvar	(x,	1);
	create_insn	(x=0X22690);
	op_stkvar	(x,	1);
	create_insn	(0X226A4);
	create_insn	(x=0X226A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X226AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X226B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X226B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X226BC);
	op_stkvar	(x,	1);
	create_insn	(0X226DE);
	create_insn	(x=0X226EE);
	op_stkvar	(x,	1);
	create_insn	(0X226F8);
	create_insn	(x=0X226FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X226FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X226FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X2271A);
	op_stkvar	(x,	1);
	create_insn	(0X2273A);
	create_insn	(0X2273E);
	create_insn	(0X22748);
	create_insn	(x=0X2276E);
	op_stkvar	(x,	1);
	create_insn	(x=0X22772);
	op_stkvar	(x,	1);
	create_insn	(0X227A8);
	create_insn	(0X227B8);
	create_insn	(x=0X227C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X227C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X227EC);
	op_stkvar	(x,	1);
	create_insn	(0X2280A);
	create_insn	(x=0X22812);
	op_stkvar	(x,	1);
	create_insn	(0X22818);
	create_insn	(0X22852);
	create_insn	(0X22876);
	create_insn	(0X22882);
	create_insn	(0X2288A);
	create_insn	(0X2289A);
	create_insn	(0X228A2);
	create_insn	(0X228AE);
	create_insn	(0X228B6);
	create_insn	(0X228C6);
	create_byte	(0X228CE);
	make_array	(0X228CE,	0X2);
	create_insn	(0X228D0);
	create_insn	(x=0X228E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X228E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X228EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X22900);
	op_stkvar	(x,	1);
	create_insn	(x=0X22912);
	op_stkvar	(x,	1);
	create_insn	(0X22918);
	create_insn	(x=0X2291C);
	op_stkvar	(x,	1);
	create_insn	(x=0X2292A);
	op_stkvar	(x,	1);
	create_insn	(0X22930);
	create_insn	(x=0X22932);
	op_stkvar	(x,	1);
	create_insn	(0X22940);
	create_insn	(x=0X22942);
	op_stkvar	(x,	1);
	create_insn	(0X22952);
	create_insn	(x=0X22954);
	op_stkvar	(x,	1);
	create_insn	(x=0X22964);
	op_stkvar	(x,	1);
	create_insn	(x=0X22972);
	op_stkvar	(x,	1);
	create_insn	(x=0X22990);
	op_hex		(x,	1);
	create_insn	(0X22996);
	create_insn	(0X229B8);
	create_insn	(x=0X229BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X229C4);
	op_hex		(x,	1);
	create_insn	(x=0X229CA);
	op_hex		(x,	1);
	create_insn	(x=0X229D0);
	op_hex		(x,	1);
	create_insn	(0X229D6);
	create_insn	(x=0X229D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X229E2);
	op_hex		(x,	1);
	create_insn	(x=0X229E8);
	op_hex		(x,	1);
	create_insn	(x=0X229EE);
	op_stkvar	(x,	1);
	create_insn	(0X22A14);
	create_insn	(0X22A1E);
	create_insn	(0X22A30);
	create_insn	(0X22A32);
	create_insn	(0X22A4A);
	create_insn	(0X22A5C);
	create_insn	(x=0X22A5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X22A6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X22A78);
	op_stkvar	(x,	1);
	create_insn	(x=0X22A88);
	op_hex		(x,	1);
	create_insn	(0X22A9A);
	create_insn	(0X22AB0);
	create_insn	(0X22AB8);
	create_insn	(0X22AC4);
	create_insn	(x=0X22AC8);
	op_hex		(x,	1);
	create_insn	(0X22ADA);
	create_insn	(x=0X22AE6);
	op_hex		(x,	1);
	create_insn	(x=0X22AF8);
	op_hex		(x,	1);
	create_insn	(x=0X22B06);
	op_stkvar	(x,	1);
	create_insn	(0X22B12);
	create_insn	(0X22B14);
	create_insn	(x=0X22B18);
	op_stkvar	(x,	1);
	create_insn	(0X22B24);
	create_insn	(0X22B3A);
	create_insn	(0X22B46);
	create_insn	(x=0X22B4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X22B62);
	op_stkvar	(x,	1);
	create_insn	(x=0X22B6E);
	op_stkvar	(x,	1);
	create_insn	(x=0X22B86);
	op_stkvar	(x,	1);
	create_insn	(x=0X22B98);
	op_stkvar	(x,	1);
	create_insn	(x=0X22BAA);
	op_stkvar	(x,	1);
	create_insn	(x=0X22BBC);
	op_stkvar	(x,	1);
	create_insn	(x=0X22BC4);
	op_stkvar	(x,	1);
	create_insn	(0X22BD4);
	create_insn	(x=0X22BD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X22BDE);
	op_hex		(x,	1);
	create_insn	(0X22BF4);
	create_insn	(x=0X22BF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X22C00);
	op_stkvar	(x,	1);
	create_insn	(0X22C0A);
	create_insn	(0X22C10);
	create_insn	(x=0X22C1C);
	op_stkvar	(x,	1);
	create_insn	(0X22C2A);
	create_insn	(0X22C2E);
	create_insn	(x=0X22C3A);
	op_stkvar	(x,	1);
	create_byte	(0X22C3E);
	make_array	(0X22C3E,	0X2);
	create_dword	(0X22C40);
	create_insn	(0X22C44);
	create_insn	(x=0X22C5E);
	op_stkvar	(x,	1);
	create_insn	(0X22C88);
	create_insn	(0X22C9A);
	create_insn	(0X22CC2);
	create_insn	(x=0X22CCA);
	op_stkvar	(x,	1);
	create_insn	(x=0X22CDE);
	op_stkvar	(x,	1);
	create_insn	(x=0X22CE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X22CE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X22CEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X22D00);
	op_stkvar	(x,	1);
	create_insn	(0X22D0A);
	create_dword	(x=0X22D1C);
	op_plain_offset	(x,	0,	0X22CC0);
	op_plain_offset	(x,	128,	0X22CC0);
	create_insn	(0X22D20);
	create_insn	(0X22D44);
	create_insn	(0X22D5A);
	create_insn	(0X22D60);
	create_byte	(0X22D6A);
	make_array	(0X22D6A,	0X2);
	create_byte	(0X22D6C);
	create_byte	(0X22D6D);
	make_array	(0X22D6D,	0X3);
	create_insn	(0X22D70);
	create_insn	(x=0X22D7E);
	op_hex		(x,	1);
	create_insn	(x=0X22D86);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X22D8A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X22D8E);
	create_insn	(x=0X22D90);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X22D94);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X22D96);
	op_hex		(x,	1);
	create_insn	(0X22DC4);
	create_insn	(0X22DC8);
	create_strlit	(0X22DE0,	0X22DE4);
	set_name	(0X22DE0,	"aNan_0");
	create_insn	(0X22DE4);
	set_name	(0X22DE4,	"aNan");
	set_name	(0X22DE8,	"aInf");
	set_name	(0X22DEC,	"aInf_0");
	create_insn	(0X22DF0);
	create_insn	(x=0X22E08);
	op_stkvar	(x,	1);
	create_insn	(x=0X22E10);
	op_stkvar	(x,	1);
	create_insn	(x=0X22E14);
	op_stkvar	(x,	1);
	create_insn	(x=0X22E1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X22E22);
	op_stkvar	(x,	1);
	create_insn	(x=0X22E2A);
	op_stkvar	(x,	1);
	create_insn	(x=0X22E32);
	op_stkvar	(x,	1);
	create_insn	(x=0X22E46);
	op_stkvar	(x,	1);
	create_insn	(0X22E64);
	create_insn	(x=0X22E66);
	op_stkvar	(x,	1);
	create_insn	(0X22E6A);
	create_insn	(x=0X22E6C);
	op_hex		(x,	1);
	create_insn	(x=0X22E72);
	op_stkvar	(x,	1);
	create_insn	(x=0X22E74);
	op_stkvar	(x,	1);
	create_insn	(x=0X22E7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X22E8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X22E90);
	op_stkvar	(x,	1);
	create_insn	(x=0X22E98);
	op_stkvar	(x,	1);
	create_insn	(x=0X22EA4);
	op_stkvar	(x,	1);
	create_insn	(0X22EB0);
	create_insn	(x=0X22EB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X22EBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X22EC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X22ED4);
	op_stkvar	(x,	1);
	create_insn	(0X22EE2);
	create_insn	(x=0X22EEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X22EF2);
	op_stkvar	(x,	1);
	create_dword	(0X22F10);
	create_dword	(0X22F14);
	make_array	(0X22F14,	0XF);
	create_insn	(0X22F50);
	create_insn	(x=0X22F56);
	op_hex		(x,	1);
	create_insn	(x=0X22F60);
	op_stkvar	(x,	1);
	create_insn	(0X22F64);
	create_insn	(x=0X22F6E);
	op_hex		(x,	1);
	create_insn	(x=0X22F7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X22F7E);
	op_hex		(x,	1);
	create_insn	(0X22F8C);
	create_insn	(0X22FC6);
	create_insn	(x=0X22FCA);
	op_stkvar	(x,	1);
	create_insn	(0X22FDC);
	create_insn	(x=0X22FDE);
	op_stkvar	(x,	1);
	create_insn	(x=0X22FF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X22FF2);
	op_hex		(x,	1);
	create_insn	(0X23014);
	create_insn	(x=0X2301A);
	op_stkvar	(x,	1);
	create_insn	(0X2303A);
	create_insn	(x=0X2305C);
	op_stkvar	(x,	1);
	create_insn	(x=0X2305E);
	op_hex		(x,	1);
	create_insn	(0X2306A);
	create_insn	(0X23070);
	create_insn	(0X2307A);
	create_insn	(x=0X23092);
	op_stkvar	(x,	1);
	create_insn	(x=0X23096);
	op_stkvar	(x,	1);
	create_insn	(x=0X2309A);
	op_stkvar	(x,	1);
	create_insn	(x=0X2309E);
	op_stkvar	(x,	1);
	create_insn	(x=0X230BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X230BE);
	op_hex		(x,	1);
	create_insn	(x=0X230C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X230DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X230E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X230EC);
	op_stkvar	(x,	1);
	create_byte	(0X230FA);
	make_array	(0X230FA,	0X2);
	create_dword	(0X230FC);
	create_dword	(0X23100);
	create_dword	(0X23104);
	create_insn	(0X23108);
	create_insn	(x=0X23126);
	op_hex		(x,	1);
	create_insn	(x=0X23130);
	op_hex		(x,	1);
	create_insn	(x=0X23136);
	op_stkvar	(x,	1);
	create_insn	(x=0X23140);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X2314C);
	op_stkvar	(x,	1);
	create_insn	(x=0X2315E);
	op_hex		(x,	1);
	create_insn	(x=0X23168);
	op_stkvar	(x,	1);
	create_insn	(0X2317E);
	create_insn	(0X23190);
	create_insn	(x=0X23192);
	op_stkvar	(x,	1);
	create_insn	(x=0X2319C);
	op_hex		(x,	1);
	create_insn	(x=0X231A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X231B0);
	op_hex		(x,	1);
	create_insn	(x=0X231BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X231C2);
	op_hex		(x,	1);
	create_insn	(x=0X231C6);
	op_hex		(x,	1);
	create_insn	(x=0X231D6);
	op_stkvar	(x,	1);
	create_insn	(0X231E2);
	create_insn	(x=0X231E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X231F4);
	op_stkvar	(x,	1);
	create_insn	(0X231FA);
	create_insn	(x=0X23206);
	op_hex		(x,	1);
	create_insn	(x=0X2320E);
	op_stkvar	(x,	1);
	create_insn	(0X2321C);
	create_dword	(0X2322C);
	create_strlit	(0X23230,	0X23239);
	set_name	(0X23230,	"aInfinity");
	create_byte	(0X23239);
	make_array	(0X23239,	0X3);
	create_insn	(0X2323C);
	create_byte	(0X2324E);
	make_array	(0X2324E,	0X2);
	create_insn	(0X23250);
	create_byte	(0X232A2);
	make_array	(0X232A2,	0X2);
	create_insn	(0X232A4);
	create_insn	(x=0X232AC);
	op_hex		(x,	1);
	create_insn	(0X232D0);
	create_insn	(0X232EC);
	create_byte	(0X232F6);
	make_array	(0X232F6,	0X2);
	create_insn	(x=0X232F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X23300);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X23304);
	create_insn	(0X23306);
	create_insn	(x=0X2330C);
	op_hex		(x,	1);
	create_insn	(x=0X2332C);
	op_hex		(x,	1);
	create_insn	(x=0X2333E);
	op_hex		(x,	1);
	create_insn	(0X23344);
	create_insn	(x=0X2338A);
	op_hex		(x,	1);
	create_insn	(x=0X23392);
	op_hex		(x,	1);
	create_insn	(x=0X233EA);
	op_hex		(x,	1);
	create_insn	(x=0X233F2);
	op_hex		(x,	1);
	create_insn	(x=0X233FE);
	op_hex		(x,	1);
	create_insn	(x=0X2341C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X234F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X23672);
	op_hex		(x,	1);
	create_insn	(0X2368C);
	create_insn	(0X236A2);
	create_insn	(0X2370A);
	create_strlit	(0X2370C,	0X23723);
	set_name	(0X2370C,	"aGfffeeeddddccc");
	create_byte	(0X23723);
	create_insn	(0X23724);
	create_insn	(x=0X2374A);
	op_hex		(x,	1);
	create_insn	(x=0X23752);
	op_hex		(x,	1);
	create_insn	(0X23768);
	create_dword	(0X23774);
	create_insn	(0X23778);
	create_insn	(x=0X237BA);
	op_hex		(x,	1);
	create_insn	(0X237C4);
	create_insn	(0X237CA);
	create_insn	(0X23818);
	create_insn	(0X2383E);
	create_insn	(0X23866);
	create_insn	(0X2388E);
	create_insn	(x=0X2389C);
	op_hex		(x,	1);
	create_insn	(x=0X238A2);
	op_hex		(x,	1);
	create_insn	(0X238B6);
	create_insn	(x=0X238C4);
	op_hex		(x,	1);
	create_insn	(x=0X238CA);
	op_hex		(x,	1);
	create_insn	(x=0X238DE);
	op_hex		(x,	1);
	create_insn	(x=0X238E6);
	op_hex		(x,	1);
	create_insn	(x=0X238F2);
	op_hex		(x,	1);
	create_insn	(x=0X238FA);
	op_hex		(x,	1);
	create_insn	(x=0X23902);
	op_hex		(x,	1);
	create_insn	(0X239E8);
	create_insn	(0X239F8);
	create_insn	(x=0X23A68);
	op_hex		(x,	1);
	create_insn	(0X23ADE);
	create_byte	(0X23B22);
	make_array	(0X23B22,	0X2);
	create_insn	(0X23B24);
	set_name	(0X23B24,	"OSStartHighRdy");
	create_insn	(x=0X23B32);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X23B3A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X23B46);
	set_name	(0X23B46,	"OS_CPU_PendSVHandler");
	create_insn	(x=0X23B54);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X23B5C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X23B60);
	op_stkvar	(x,	1);
	create_insn	(x=0X23B64);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X23B66);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X23B6C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X23B6E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X23B80);
	op_hex		(x,	1);
	create_dword	(x=0X23B88);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X23B8C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X23B90);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X23B94);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X23B98);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X23B9C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X23BA0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X23BA4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X23BA8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X23BA8,	"Reset_Handler");
	create_insn	(x=0X23BAC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X23BB0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X23BB4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X23BB8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X23BBE);
	op_hex		(x,	1);
	create_insn	(x=0X23BC2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X23BC4);
	op_plain_offset	(x,	1,	0X10000560);
	op_plain_offset	(x,	129,	0X10000560);
	create_insn	(x=0X23BC8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X23BD0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X23BD4);
	op_plain_offset	(x,	1,	0X10000560);
	op_plain_offset	(x,	129,	0X10000560);
	create_insn	(x=0X23BDE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X23BE6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X23BEC);
	create_insn	(x=0X23C04);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X23C0A);
	create_insn	(0X23C2A);
	create_byte	(0X23C2E);
	make_array	(0X23C2E,	0X2);
	create_dword	(x=0X23C30);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X23C34);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X23C38);
	create_dword	(x=0X23C3C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X23C40);
	create_insn	(x=0X23C42);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X23C44);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X23C4C);
	op_hex		(x,	1);
	create_insn	(x=0X23C52);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X23C58);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X23C5A);
	op_plain_offset	(x,	1,	0X10000540);
	op_plain_offset	(x,	129,	0X10000540);
	create_insn	(x=0X23C5C);
	op_plain_offset	(x,	1,	0X10000560);
	op_plain_offset	(x,	129,	0X10000560);
	create_insn	(x=0X23C68);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X23C70);
	create_insn	(x=0X23C72);
	op_plain_offset	(x,	1,	0X10000540);
	op_plain_offset	(x,	129,	0X10000540);
	create_insn	(x=0X23C7C);
	op_hex		(x,	1);
	create_insn	(x=0X23C84);
	op_hex		(x,	1);
	create_insn	(0X23C90);
	create_insn	(x=0X23C9A);
	op_plain_offset	(x,	1,	0X10000540);
	op_plain_offset	(x,	129,	0X10000540);
	create_insn	(x=0X23CA0);
	op_plain_offset	(x,	1,	0X10000540);
	op_plain_offset	(x,	129,	0X10000540);
	create_insn	(0X23CB0);
	create_dword	(x=0X23CB4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X23CB8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X23CBC);
	create_insn	(x=0X23CBE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X23CC6);
	op_plain_offset	(x,	1,	0X10000560);
	op_plain_offset	(x,	129,	0X10000560);
	create_insn	(x=0X23CC8);
	op_hex		(x,	1);
	create_insn	(0X23CDC);
	create_insn	(x=0X23CE8);
	op_plain_offset	(x,	1,	0X10000540);
	op_plain_offset	(x,	129,	0X10000540);
	create_insn	(x=0X23CEA);
	op_hex		(x,	1);
	create_insn	(0X23CF0);
	create_insn	(x=0X23CF6);
	op_plain_offset	(x,	1,	0X10000540);
	op_plain_offset	(x,	129,	0X10000540);
	create_insn	(x=0X23CF8);
	op_hex		(x,	1);
	create_insn	(x=0X23CFC);
	op_plain_offset	(x,	1,	0X10000540);
	op_plain_offset	(x,	129,	0X10000540);
	create_insn	(x=0X23D00);
	op_plain_offset	(x,	1,	0X10000560);
	op_plain_offset	(x,	129,	0X10000560);
	create_insn	(x=0X23D02);
	op_hex		(x,	1);
	create_insn	(x=0X23D0A);
	op_hex		(x,	1);
	create_insn	(0X23D16);
	create_insn	(x=0X23D1A);
	op_plain_offset	(x,	1,	0X10000540);
	op_plain_offset	(x,	129,	0X10000540);
	create_insn	(x=0X23D22);
	op_plain_offset	(x,	1,	0X10000540);
	op_plain_offset	(x,	129,	0X10000540);
	create_insn	(0X23D2E);
	create_insn	(x=0X23D36);
	op_plain_offset	(x,	1,	0X10000540);
	op_plain_offset	(x,	129,	0X10000540);
	create_insn	(x=0X23D3C);
	op_plain_offset	(x,	1,	0X10000540);
	op_plain_offset	(x,	129,	0X10000540);
	create_insn	(x=0X23D4C);
	op_plain_offset	(x,	1,	0X10000540);
	op_plain_offset	(x,	129,	0X10000540);
	create_insn	(x=0X23D66);
	op_plain_offset	(x,	1,	0X10000540);
	op_plain_offset	(x,	129,	0X10000540);
	create_insn	(x=0X23D6A);
	op_plain_offset	(x,	1,	0X10000540);
	op_plain_offset	(x,	129,	0X10000540);
	create_dword	(x=0X23D70);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X23D74);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X23D78);
	create_insn	(0X23D7C);
	create_insn	(x=0X23D80);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X23D86);
	op_hex		(x,	1);
	create_insn	(x=0X23D8C);
	op_plain_offset	(x,	1,	0X10000560);
	op_plain_offset	(x,	129,	0X10000560);
	create_insn	(x=0X23D8E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X23DA4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X23DA8);
	create_insn	(x=0X23DB8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X23DBC);
	op_plain_offset	(x,	1,	0X10000560);
	op_plain_offset	(x,	129,	0X10000560);
	create_insn	(x=0X23DCC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X23DFA);
	op_hex		(x,	1);
	create_insn	(x=0X23E22);
	op_hex		(x,	1);
	create_insn	(x=0X23E28);
	op_hex		(x,	1);
	create_insn	(0X23E30);
	create_insn	(0X23E34);
	create_insn	(0X23E38);
	create_insn	(x=0X23E3C);
	op_hex		(x,	1);
	create_insn	(x=0X23E44);
	op_hex		(x,	1);
	create_insn	(0X23E4E);
	create_insn	(0X23E7A);
	create_insn	(0X23E7C);
	create_insn	(0X23E7E);
	create_insn	(x=0X23E80);
	op_plain_offset	(x,	1,	0X10000540);
	op_plain_offset	(x,	129,	0X10000540);
	create_insn	(x=0X23E88);
	op_plain_offset	(x,	1,	0X10000540);
	op_plain_offset	(x,	129,	0X10000540);
	create_insn	(x=0X23E9A);
	op_plain_offset	(x,	1,	0X10000540);
	op_plain_offset	(x,	129,	0X10000540);
	create_insn	(x=0X23EA6);
	op_hex		(x,	1);
	create_insn	(x=0X23EBE);
	op_plain_offset	(x,	1,	0X10000540);
	op_plain_offset	(x,	129,	0X10000540);
	create_insn	(x=0X23EC6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X23EC8);
	op_plain_offset	(x,	1,	0X10000540);
	op_plain_offset	(x,	129,	0X10000540);
	create_insn	(x=0X23ECC);
	op_plain_offset	(x,	1,	0X10000560);
	op_plain_offset	(x,	129,	0X10000560);
	create_insn	(0X23ED8);
	create_dword	(x=0X23EDC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X23EE0);
	create_insn	(0X23EE4);
	create_insn	(x=0X23EE8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X23EF2);
	op_hex		(x,	1);
	create_insn	(x=0X23F02);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X23F0A);
	op_plain_offset	(x,	1,	0X10000540);
	op_plain_offset	(x,	129,	0X10000540);
	create_insn	(x=0X23F14);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X23F16);
	op_stkvar	(x,	1);
	create_insn	(0X23F1A);
	create_insn	(0X23F2A);
	create_insn	(x=0X23F38);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X23F3E);
	op_plain_offset	(x,	1,	0X10000560);
	op_plain_offset	(x,	129,	0X10000560);
	create_insn	(x=0X23F48);
	op_plain_offset	(x,	1,	0X10000560);
	op_plain_offset	(x,	129,	0X10000560);
	create_insn	(x=0X23F50);
	op_stkvar	(x,	1);
	create_insn	(x=0X23F52);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X23F5E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X23F60);
	op_plain_offset	(x,	1,	0X10000560);
	op_plain_offset	(x,	129,	0X10000560);
	create_insn	(x=0X23F68);
	op_hex		(x,	1);
	create_insn	(x=0X23F72);
	op_hex		(x,	1);
	create_insn	(0X23F7E);
	create_insn	(x=0X23F84);
	op_plain_offset	(x,	1,	0X10000560);
	op_plain_offset	(x,	129,	0X10000560);
	create_insn	(0X23FB6);
	create_insn	(x=0X23FE4);
	op_stkvar	(x,	1);
	create_dword	(x=0X23FE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X23FEC);
	create_insn	(0X23FF0);
	create_insn	(x=0X23FFE);
	op_hex		(x,	1);
	create_insn	(x=0X2400C);
	op_hex		(x,	1);
	create_insn	(0X24018);
	create_insn	(x=0X24026);
	op_stkvar	(x,	1);
	create_insn	(x=0X24028);
	op_stkvar	(x,	1);
	create_insn	(x=0X2402A);
	op_hex		(x,	1);
	create_insn	(x=0X24034);
	op_stkvar	(x,	1);
	create_insn	(x=0X24042);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X2404C);
	op_stkvar	(x,	1);
	create_insn	(x=0X24056);
	op_stkvar	(x,	1);
	create_insn	(0X24072);
	create_insn	(0X24090);
	create_insn	(0X240A6);
	create_insn	(0X240C6);
	create_insn	(x=0X240CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X240CE);
	op_hex		(x,	1);
	create_insn	(x=0X240EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X24118);
	op_stkvar	(x,	1);
	create_insn	(x=0X2412A);
	op_stkvar	(x,	1);
	create_insn	(x=0X24146);
	op_stkvar	(x,	1);
	create_insn	(x=0X2414A);
	op_stkvar	(x,	1);
	create_insn	(x=0X2415C);
	op_stkvar	(x,	1);
	create_insn	(x=0X2415E);
	op_stkvar	(x,	1);
	create_insn	(x=0X24162);
	op_stkvar	(x,	1);
	create_insn	(x=0X24172);
	op_stkvar	(x,	1);
	create_insn	(x=0X24178);
	op_stkvar	(x,	1);
	create_insn	(x=0X2417A);
	op_stkvar	(x,	1);
	create_insn	(x=0X24182);
	op_stkvar	(x,	1);
	create_insn	(x=0X24184);
	op_stkvar	(x,	1);
	create_insn	(x=0X24194);
	op_stkvar	(x,	1);
	create_insn	(x=0X2419E);
	op_stkvar	(x,	1);
	create_insn	(x=0X241A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X241AE);
	op_hex		(x,	1);
	create_insn	(x=0X241B4);
	op_stkvar	(x,	1);
	create_insn	(0X241BE);
	create_insn	(0X241C0);
	create_insn	(x=0X241C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X241D4);
	op_hex		(x,	1);
	create_insn	(x=0X241DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X241E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X241E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X241E4);
	op_hex		(x,	1);
	create_insn	(x=0X24202);
	op_stkvar	(x,	1);
	create_insn	(0X2420C);
	create_insn	(0X2424C);
	create_insn	(0X24254);
	create_insn	(x=0X24268);
	op_stkvar	(x,	1);
	create_insn	(x=0X2426A);
	op_stkvar	(x,	1);
	create_insn	(x=0X24272);
	op_stkvar	(x,	1);
	create_insn	(x=0X24274);
	op_stkvar	(x,	1);
	create_insn	(x=0X24284);
	op_stkvar	(x,	1);
	create_insn	(x=0X242BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X242CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X242DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X242F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X24336);
	op_stkvar	(x,	1);
	create_insn	(x=0X24338);
	op_hex		(x,	1);
	create_insn	(x=0X2433E);
	op_stkvar	(x,	1);
	create_insn	(x=0X24340);
	op_hex		(x,	1);
	create_insn	(x=0X24346);
	op_stkvar	(x,	1);
	create_insn	(x=0X2434C);
	op_stkvar	(x,	1);
	create_dword	(0X24354);
	create_dword	(x=0X24358);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X2435C);
	create_dword	(0X24360);
	create_dword	(0X24364);
	create_dword	(0X24368);
	create_dword	(0X2436C);
	create_dword	(0X24370);
	create_dword	(0X24374);
	create_dword	(0X24378);
	create_dword	(0X2437C);
	create_dword	(0X24380);
	create_dword	(x=0X24384);
	op_plain_offset	(x,	0,	0X24144);
	op_plain_offset	(x,	128,	0X24144);
	create_dword	(x=0X24388);
	op_plain_offset	(x,	0,	0X241F8);
	op_plain_offset	(x,	128,	0X241F8);
	create_dword	(x=0X2438C);
	op_plain_offset	(x,	0,	0X24216);
	op_plain_offset	(x,	128,	0X24216);
	create_dword	(0X24390);
	create_dword	(0X24394);
	create_dword	(0X24398);
	create_dword	(0X2439C);
	create_insn	(0X243A0);
	create_insn	(x=0X243A4);
	op_hex		(x,	1);
	create_insn	(0X2443E);
	create_byte	(0X24486);
	make_array	(0X24486,	0X2);
	create_dword	(0X24488);
	create_dword	(x=0X2448C);
	op_plain_offset	(x,	0,	0X243E0);
	op_plain_offset	(x,	128,	0X243E0);
	create_dword	(0X24490);
	create_dword	(0X24494);
	create_dword	(0X24498);
	create_insn	(0X2449C);
	create_insn	(x=0X244B0);
	op_hex		(x,	1);
	create_insn	(x=0X244CC);
	op_hex		(x,	1);
	create_byte	(0X24546);
	make_array	(0X24546,	0X2);
	create_insn	(0X24548);
	create_insn	(x=0X2454E);
	op_hex		(x,	1);
	create_insn	(0X24574);
	create_insn	(x=0X2459E);
	op_stkvar	(x,	1);
	create_insn	(x=0X245A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X245BA);
	op_stkvar	(x,	1);
	create_insn	(0X245FE);
	create_dword	(x=0X24628);
	op_plain_offset	(x,	0,	0X2459A);
	op_plain_offset	(x,	128,	0X2459A);
	create_dword	(0X2462C);
	create_dword	(0X24630);
	create_insn	(0X24634);
	create_dword	(0X24640);
	create_insn	(0X24644);
	create_insn	(0X2464A);
	create_insn	(0X2464E);
	create_insn	(0X2465A);
	create_insn	(0X24668);
	create_byte	(0X24672);
	make_array	(0X24672,	0X2);
	create_dword	(0X24674);
	create_insn	(0X24678);
	create_insn	(0X24682);
	create_insn	(0X24688);
	create_insn	(0X24690);
	create_insn	(0X246A0);
	create_insn	(x=0X246AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X246B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X246E6);
	op_hex		(x,	1);
	create_insn	(x=0X246F6);
	op_stkvar	(x,	1);
	create_insn	(0X24718);
	create_dword	(0X24724);
	create_insn	(0X24728);
	create_insn	(0X2473E);
	create_insn	(0X24748);
	create_insn	(0X2474C);
	create_insn	(x=0X24750);
	op_hex		(x,	1);
	create_insn	(0X24778);
	create_insn	(x=0X24782);
	op_stkvar	(x,	1);
	create_insn	(x=0X24788);
	op_hex		(x,	1);
	create_insn	(x=0X2478E);
	op_stkvar	(x,	1);
	create_insn	(x=0X247A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X247A6);
	op_stkvar	(x,	1);
	create_insn	(0X247B4);
	create_insn	(x=0X247BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X247C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X247CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X247DA);
	op_hex		(x,	1);
	create_dword	(0X247E0);
	create_dword	(0X247E4);
	create_insn	(0X247E8);
	create_insn	(x=0X247F2);
	op_hex		(x,	1);
	create_insn	(x=0X24818);
	op_hex		(x,	1);
	create_insn	(x=0X2482C);
	op_hex		(x,	1);
	create_insn	(x=0X24830);
	op_hex		(x,	1);
	create_dword	(0X24838);
	create_dword	(0X2483C);
	create_insn	(0X24840);
	create_insn	(0X24896);
	create_insn	(0X248AC);
	create_insn	(0X248B4);
	create_insn	(x=0X248C2);
	op_hex		(x,	1);
	create_insn	(0X248D8);
	create_insn	(0X248F8);
	create_insn	(x=0X24904);
	op_hex		(x,	1);
	create_insn	(0X2490C);
	create_insn	(x=0X24926);
	op_hex		(x,	1);
	create_insn	(x=0X2492A);
	op_hex		(x,	1);
	create_insn	(x=0X24932);
	op_hex		(x,	1);
	create_insn	(x=0X24936);
	op_stkvar	(x,	1);
	create_insn	(x=0X24964);
	op_stkvar	(x,	1);
	create_insn	(0X249A2);
	create_insn	(x=0X249D2);
	op_stkvar	(x,	1);
	create_insn	(0X24A16);
	create_insn	(0X24A28);
	create_insn	(x=0X24A44);
	op_stkvar	(x,	1);
	create_insn	(x=0X24A5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X24A5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X24A62);
	op_stkvar	(x,	1);
	create_insn	(x=0X24A64);
	op_stkvar	(x,	1);
	create_insn	(x=0X24A90);
	op_stkvar	(x,	1);
	create_insn	(x=0X24A94);
	op_stkvar	(x,	1);
	create_insn	(x=0X24AA2);
	op_stkvar	(x,	1);
	create_insn	(x=0X24AA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X24AAC);
	op_stkvar	(x,	1);
	create_insn	(x=0X24AAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X24AB6);
	op_stkvar	(x,	1);
	create_insn	(x=0X24ABE);
	op_stkvar	(x,	1);
	create_insn	(x=0X24ADC);
	op_stkvar	(x,	1);
	create_insn	(x=0X24AEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X24AF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X24AF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X24B06);
	op_stkvar	(x,	1);
	create_insn	(x=0X24B08);
	op_stkvar	(x,	1);
	create_insn	(0X24B3C);
	create_insn	(x=0X24B40);
	op_stkvar	(x,	1);
	create_insn	(x=0X24B64);
	op_stkvar	(x,	1);
	create_insn	(x=0X24B7E);
	op_stkvar	(x,	1);
	create_insn	(0X24BBA);
	create_dword	(0X24BDC);
	create_dword	(0X24BE0);
	create_dword	(0X24BE4);
	create_dword	(x=0X24BE8);
	op_plain_offset	(x,	0,	0X24956);
	op_plain_offset	(x,	128,	0X24956);
	create_dword	(0X24BEC);
	create_dword	(0X24BF0);
	create_dword	(0X24BF4);
	create_dword	(0X24BF8);
	create_dword	(0X24BFC);
	create_dword	(0X24C00);
	create_dword	(0X24C04);
	create_dword	(x=0X24C08);
	op_plain_offset	(x,	0,	0X24A86);
	op_plain_offset	(x,	128,	0X24A86);
	create_dword	(x=0X24C0C);
	op_plain_offset	(x,	0,	0X24AA0);
	op_plain_offset	(x,	128,	0X24AA0);
	create_insn	(0X24C10);
	create_insn	(x=0X24C1E);
	op_hex		(x,	1);
	create_insn	(0X24C34);
	create_insn	(0X24C52);
	create_insn	(x=0X24C5C);
	op_hex		(x,	1);
	create_insn	(0X24C64);
	create_byte	(0X24CD6);
	make_array	(0X24CD6,	0X2);
	create_dword	(0X24CD8);
	create_dword	(0X24CDC);
	create_dword	(0X24CE0);
	create_dword	(0X24CE4);
	create_dword	(0X24CE8);
	create_dword	(0X24CEC);
	create_dword	(0X24CF0);
	create_insn	(0X24CF4);
	create_insn	(0X24DB8);
	create_insn	(0X24E00);
	create_insn	(0X24E02);
	create_insn	(0X24E20);
	create_insn	(0X24E32);
	create_insn	(x=0X24E50);
	op_hex		(x,	1);
	create_insn	(0X24E62);
	create_insn	(x=0X24E6C);
	op_hex		(x,	1);
	create_dword	(0X24E74);
	create_dword	(0X24E78);
	create_dword	(0X24E7C);
	create_dword	(x=0X24E80);
	op_plain_offset	(x,	0,	0X24D7C);
	op_plain_offset	(x,	128,	0X24D7C);
	create_dword	(0X24E84);
	create_dword	(0X24E88);
	create_dword	(x=0X24E8C);
	op_plain_offset	(x,	0,	0X24DA8);
	op_plain_offset	(x,	128,	0X24DA8);
	create_dword	(0X24E90);
	create_dword	(0X24E94);
	create_dword	(0X24E98);
	create_dword	(0X24E9C);
	create_dword	(0X24EA0);
	create_dword	(0X24EA4);
	create_insn	(0X24EA8);
	create_insn	(x=0X24EB4);
	op_hex		(x,	1);
	create_insn	(x=0X24EB8);
	op_hex		(x,	1);
	create_insn	(0X24F04);
	create_insn	(0X24F42);
	create_insn	(0X24F84);
	create_insn	(x=0X24F96);
	op_hex		(x,	1);
	create_insn	(0X24FC4);
	create_insn	(x=0X24FD0);
	op_hex		(x,	1);
	create_insn	(0X24FD8);
	create_insn	(0X25010);
	create_insn	(x=0X25014);
	op_hex		(x,	1);
	create_insn	(0X25020);
	create_insn	(0X2502E);
	create_insn	(0X25044);
	create_insn	(0X25058);
	create_insn	(0X25066);
	create_insn	(0X2507A);
	create_insn	(0X25082);
	create_insn	(0X250A8);
	create_insn	(0X250B8);
	create_insn	(x=0X250BA);
	op_hex		(x,	1);
	create_insn	(0X250FA);
	create_insn	(0X2510C);
	create_insn	(0X25122);
	create_insn	(0X2512E);
	create_insn	(0X2516E);
	create_insn	(0X25188);
	create_insn	(0X25198);
	create_insn	(0X251A4);
	create_insn	(0X251AE);
	create_insn	(0X251DE);
	create_insn	(0X251F6);
	create_insn	(x=0X2522C);
	op_stkvar	(x,	1);
	create_insn	(x=0X25238);
	op_stkvar	(x,	1);
	create_insn	(x=0X25240);
	op_stkvar	(x,	1);
	create_insn	(0X25256);
	create_insn	(0X25258);
	create_insn	(x=0X2525E);
	op_stkvar	(x,	1);
	create_insn	(x=0X25266);
	op_stkvar	(x,	1);
	create_insn	(x=0X25276);
	op_stkvar	(x,	1);
	create_insn	(x=0X25282);
	op_stkvar	(x,	1);
	create_insn	(x=0X2529C);
	op_stkvar	(x,	1);
	create_insn	(0X252A8);
	create_byte	(0X252C6);
	make_array	(0X252C6,	0X2);
	create_dword	(0X252C8);
	create_dword	(0X252CC);
	create_dword	(0X252D0);
	create_dword	(0X252D4);
	create_dword	(0X252D8);
	create_dword	(0X252DC);
	create_dword	(x=0X252E0);
	op_plain_offset	(x,	0,	0X25026);
	op_plain_offset	(x,	128,	0X25026);
	create_dword	(0X252E4);
	create_dword	(0X252E8);
	create_dword	(0X252EC);
	create_dword	(0X252F0);
	create_dword	(0X252F4);
	create_dword	(0X252F8);
	create_dword	(0X252FC);
	create_dword	(0X25300);
	create_dword	(0X25304);
	create_dword	(0X25308);
	create_dword	(0X2530C);
	create_insn	(0X25310);
	create_insn	(x=0X25314);
	op_stkvar	(x,	1);
	create_insn	(x=0X2531A);
	op_hex		(x,	1);
	create_insn	(x=0X2531E);
	op_hex		(x,	1);
	create_insn	(x=0X25322);
	op_stkvar	(x,	1);
	create_insn	(x=0X25338);
	op_stkvar	(x,	1);
	create_insn	(0X2533C);
	create_insn	(x=0X2533E);
	op_stkvar	(x,	1);
	create_insn	(x=0X25340);
	op_stkvar	(x,	1);
	create_insn	(x=0X25344);
	op_stkvar	(x,	1);
	create_insn	(x=0X25346);
	op_stkvar	(x,	1);
	create_insn	(x=0X2534C);
	op_stkvar	(x,	1);
	create_insn	(x=0X2534E);
	op_stkvar	(x,	1);
	create_insn	(x=0X25354);
	op_stkvar	(x,	1);
	create_insn	(x=0X25356);
	op_stkvar	(x,	1);
	create_insn	(x=0X25360);
	op_stkvar	(x,	1);
	create_insn	(x=0X25364);
	op_stkvar	(x,	1);
	create_insn	(x=0X25366);
	op_stkvar	(x,	1);
	create_insn	(x=0X25376);
	op_stkvar	(x,	1);
	create_insn	(x=0X25388);
	op_stkvar	(x,	1);
	create_insn	(x=0X2538E);
	op_stkvar	(x,	1);
	create_insn	(x=0X25398);
	op_stkvar	(x,	1);
	create_insn	(x=0X253A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X253A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X253B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X253B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X253BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X253C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X253C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X253CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X253DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X253E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X253E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X253F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X253F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X253FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X25400);
	op_stkvar	(x,	1);
	create_insn	(x=0X25402);
	op_stkvar	(x,	1);
	create_insn	(x=0X25404);
	op_stkvar	(x,	1);
	create_insn	(x=0X25418);
	op_stkvar	(x,	1);
	create_insn	(x=0X25426);
	op_stkvar	(x,	1);
	create_insn	(x=0X2543A);
	op_stkvar	(x,	1);
	create_insn	(x=0X25444);
	op_stkvar	(x,	1);
	create_insn	(x=0X2544A);
	op_stkvar	(x,	1);
	create_insn	(x=0X2544C);
	op_stkvar	(x,	1);
	create_insn	(x=0X25454);
	op_stkvar	(x,	1);
	create_insn	(x=0X2546E);
	op_stkvar	(x,	1);
	create_insn	(x=0X25470);
	op_stkvar	(x,	1);
	create_insn	(x=0X2548A);
	op_stkvar	(x,	1);
	create_insn	(x=0X2548C);
	op_stkvar	(x,	1);
	create_insn	(x=0X2549C);
	op_stkvar	(x,	1);
	create_insn	(x=0X2549E);
	op_stkvar	(x,	1);
	create_insn	(x=0X254B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X254B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X254B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X254BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X254C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X254C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X254CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X254D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X254F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X254FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X2550A);
	op_stkvar	(x,	1);
	create_insn	(x=0X2550C);
	op_stkvar	(x,	1);
	create_insn	(x=0X25514);
	op_stkvar	(x,	1);
	create_insn	(x=0X2551C);
	op_stkvar	(x,	1);
	create_insn	(x=0X2552C);
	op_stkvar	(x,	1);
	create_insn	(x=0X25536);
	op_stkvar	(x,	1);
	create_insn	(x=0X25544);
	op_stkvar	(x,	1);
	create_insn	(x=0X25546);
	op_stkvar	(x,	1);
	create_insn	(x=0X25548);
	op_stkvar	(x,	1);
	create_insn	(x=0X2554E);
	op_stkvar	(x,	1);
	create_insn	(x=0X25556);
	op_stkvar	(x,	1);
	create_insn	(x=0X25558);
	op_stkvar	(x,	1);
	create_insn	(x=0X25562);
	op_stkvar	(x,	1);
	create_insn	(x=0X2556C);
	op_stkvar	(x,	1);
	create_insn	(x=0X2556E);
	op_stkvar	(x,	1);
	create_insn	(x=0X25576);
	op_stkvar	(x,	1);
	create_insn	(x=0X25584);
	op_stkvar	(x,	1);
	create_insn	(x=0X2558A);
	op_stkvar	(x,	1);
	create_insn	(x=0X2558C);
	op_stkvar	(x,	1);
	create_insn	(x=0X25592);
	op_stkvar	(x,	1);
	create_insn	(x=0X25594);
	op_stkvar	(x,	1);
	create_insn	(x=0X2559A);
	op_stkvar	(x,	1);
	create_insn	(x=0X2559C);
	op_stkvar	(x,	1);
	create_insn	(x=0X255A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X255B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X255BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X255CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X255DC);
	op_stkvar	(x,	1);
	create_insn	(0X2563A);
	create_insn	(x=0X2563C);
	op_hex		(x,	1);
	create_insn	(x=0X25668);
	op_stkvar	(x,	1);
	create_insn	(x=0X2566A);
	op_hex		(x,	1);
	create_insn	(x=0X2569E);
	op_hex		(x,	1);
	create_insn	(x=0X256AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X256B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X256D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X256E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X256EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X256F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X256F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X2570E);
	op_stkvar	(x,	1);
	create_insn	(x=0X25710);
	op_stkvar	(x,	1);
	create_dword	(0X25720);
	create_dword	(0X25724);
	create_dword	(x=0X25728);
	op_plain_offset	(x,	0,	0X25356);
	op_plain_offset	(x,	128,	0X25356);
	create_dword	(0X2572C);
	create_dword	(x=0X25730);
	op_plain_offset	(x,	0,	0X253A6);
	op_plain_offset	(x,	128,	0X253A6);
	create_dword	(x=0X25734);
	op_plain_offset	(x,	0,	0X25420);
	op_plain_offset	(x,	128,	0X25420);
	set_cmt	(0X25738,	"LPC_ADC1_BASE",	1);
	create_dword	(0X25738);
	create_dword	(0X2573C);
	create_dword	(0X25740);
	create_dword	(0X25744);
	create_dword	(0X25748);
	create_dword	(x=0X2574C);
	op_plain_offset	(x,	0,	0X25538);
	op_plain_offset	(x,	128,	0X25538);
	create_dword	(x=0X25750);
	op_plain_offset	(x,	0,	0X25564);
	op_plain_offset	(x,	128,	0X25564);
	create_dword	(0X25754);
	create_dword	(0X25758);
	create_dword	(0X2575C);
	create_dword	(0X25760);
	create_dword	(0X25764);
	create_dword	(0X25768);
	create_dword	(0X2576C);
	create_dword	(x=0X25770);
	op_plain_offset	(x,	0,	0X25690);
	op_plain_offset	(x,	128,	0X25690);
	create_dword	(0X25774);
	create_dword	(0X25778);
	create_dword	(0X2577C);
	create_dword	(0X25780);
	create_dword	(0X25784);
	create_dword	(0X25788);
	create_insn	(0X2578C);
	create_insn	(x=0X257AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X257E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X257EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X257F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X257F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X25806);
	op_stkvar	(x,	1);
	create_insn	(x=0X25816);
	op_stkvar	(x,	1);
	create_insn	(x=0X2581C);
	op_stkvar	(x,	1);
	create_insn	(x=0X2581E);
	op_stkvar	(x,	1);
	create_insn	(x=0X25836);
	op_stkvar	(x,	1);
	create_insn	(x=0X25848);
	op_stkvar	(x,	1);
	create_insn	(x=0X2585E);
	op_stkvar	(x,	1);
	create_dword	(x=0X25878);
	op_plain_offset	(x,	0,	0X257C8);
	op_plain_offset	(x,	128,	0X257C8);
	create_dword	(0X2587C);
	create_insn	(0X25880);
	create_insn	(x=0X25884);
	op_hex		(x,	1);
	create_insn	(x=0X25892);
	op_stkvar	(x,	1);
	create_insn	(0X25896);
	create_insn	(0X258AE);
	create_insn	(x=0X258B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X258BE);
	op_hex		(x,	1);
	create_insn	(x=0X258D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X258DE);
	op_hex		(x,	1);
	create_insn	(x=0X258E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X258E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X258F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X25906);
	op_stkvar	(x,	1);
	create_insn	(x=0X2590A);
	op_stkvar	(x,	1);
	create_byte	(0X25916);
	make_array	(0X25916,	0X2);
	create_dword	(0X25918);
	create_dword	(0X2591C);
	create_insn	(0X25920);
	create_insn	(x=0X25936);
	op_hex		(x,	1);
	create_insn	(x=0X2594E);
	op_hex		(x,	1);
	create_insn	(0X2596C);
	create_insn	(0X25988);
	create_byte	(0X2598E);
	make_array	(0X2598E,	0X2);
	create_dword	(x=0X25990);
	op_plain_offset	(x,	0,	0X2597E);
	op_plain_offset	(x,	128,	0X2597E);
	create_dword	(x=0X25994);
	op_plain_offset	(x,	0,	0X2598E);
	op_plain_offset	(x,	128,	0X2598E);
	create_insn	(0X25998);
	create_insn	(0X259B4);
	create_byte	(0X259BA);
	make_array	(0X259BA,	0X2);
	create_dword	(x=0X259BC);
	op_plain_offset	(x,	0,	0X259AA);
	op_plain_offset	(x,	128,	0X259AA);
	create_dword	(x=0X259C0);
	op_plain_offset	(x,	0,	0X259BA);
	op_plain_offset	(x,	128,	0X259BA);
	create_insn	(x=0X259C4);
	op_hex		(x,	1);
	create_insn	(x=0X259D0);
	op_hex		(x,	1);
	create_insn	(x=0X259EE);
	op_hex		(x,	1);
	create_insn	(0X259F4);
	create_insn	(0X25A0E);
	create_insn	(0X25A1C);
	create_byte	(0X25A26);
	make_array	(0X25A26,	0X2);
	create_insn	(0X25A28);
	create_insn	(x=0X25A30);
	op_hex		(x,	1);
	create_insn	(x=0X25A70);
	op_hex		(x,	1);
	create_insn	(0X25ABC);
	create_insn	(x=0X25AC0);
	op_hex		(x,	1);
	create_insn	(0X25ADC);
	create_insn	(0X25B28);
	create_insn	(0X25B34);
	create_insn	(0X25B4C);
	create_insn	(x=0X25B5C);
	op_hex		(x,	1);
	create_insn	(0X25B64);
	create_dword	(0X25B70);
	create_dword	(0X25B74);
	create_insn	(0X25B78);
	create_byte	(0X25B82);
	make_array	(0X25B82,	0X2);
	create_dword	(0X25B84);
	create_insn	(0X25B88);
	create_insn	(0X25BA0);
	create_insn	(x=0X25C04);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X25CA8);
	op_hex		(x,	1);
	create_insn	(0X25CC0);
	create_insn	(0X25CD4);
	create_insn	(0X25CE6);
	create_insn	(0X25D38);
	create_insn	(0X25D4A);
	create_insn	(x=0X25D54);
	op_hex		(x,	1);
	create_insn	(0X25D5C);
	create_insn	(0X25D68);
	create_insn	(x=0X25D7A);
	op_hex		(x,	1);
	create_insn	(0X25D82);
	create_insn	(0X25D90);
	create_insn	(0X25DA4);
	create_insn	(x=0X25DAC);
	op_hex		(x,	1);
	create_insn	(0X25DB2);
	create_insn	(0X25DBA);
	create_dword	(0X25DC8);
	make_array	(0X25DC8,	0X20);
	create_dword	(0X25E48);
	create_dword	(0X25E4C);
	create_insn	(0X25E50);
	create_insn	(0X25E70);
	create_insn	(0X25E82);
	create_insn	(0X25E86);
	create_insn	(0X25E9E);
	create_insn	(0X25EB2);
	create_insn	(0X25EC8);
	create_insn	(0X25EFA);
	create_insn	(0X25F16);
	create_insn	(x=0X25F1C);
	op_stkvar	(x,	1);
	create_insn	(0X25F24);
	create_byte	(0X25F26);
	make_array	(0X25F26,	0X2);
	create_insn	(0X25F28);
	create_insn	(0X25F4E);
	create_insn	(0X25F6A);
	create_insn	(0X25F70);
	create_insn	(x=0X25F78);
	op_stkvar	(x,	1);
	create_insn	(0X25F80);
	create_insn	(x=0X25F82);
	op_hex		(x,	1);
	create_insn	(0X25FAA);
	create_insn	(0X25FB0);
	create_insn	(0X25FD0);
	create_byte	(0X25FD6);
	make_array	(0X25FD6,	0X2);
	create_insn	(0X25FD8);
	create_insn	(0X25FF8);
	create_insn	(0X2600A);
	create_insn	(0X2600E);
	create_insn	(0X26026);
	create_insn	(0X2603A);
	create_insn	(0X26050);
	create_insn	(x=0X2607C);
	op_hex		(x,	1);
	create_insn	(x=0X26080);
	op_hex		(x,	1);
	create_insn	(x=0X260B2);
	op_hex		(x,	1);
	create_insn	(x=0X260B6);
	op_hex		(x,	1);
	create_insn	(0X260D4);
	create_insn	(x=0X260FE);
	op_hex		(x,	1);
	create_insn	(0X26118);
	create_insn	(x=0X26144);
	op_hex		(x,	1);
	create_insn	(0X2614A);
	create_insn	(x=0X26162);
	op_hex		(x,	1);
	create_insn	(0X26168);
	create_insn	(0X26174);
	create_insn	(0X26178);
	create_insn	(0X2618A);
	create_dword	(0X2619C);
	create_dword	(0X261A0);
	create_insn	(0X261A4);
	create_insn	(x=0X261A8);
	op_hex		(x,	1);
	create_insn	(0X261E6);
	create_insn	(0X261EC);
	create_insn	(x=0X261F8);
	op_hex		(x,	1);
	create_insn	(x=0X2620A);
	op_hex		(x,	1);
	set_cmt	(0X26210,	"switch 4 cases ",	0);
	create_insn	(0X26210);
	set_cmt	(0X26214,	"jump table for switch statement",	0);
	create_byte	(0X26214);
	set_name	(0X26214,	"jpt_1C210");
	create_byte	(0X26215);
	create_byte	(0X26216);
	create_byte	(0X26217);
	set_cmt	(0X26218,	"jumptable 0001C210 cases 6,7",	1);
	create_insn	(0X26218);
	set_cmt	(0X26226,	"jumptable 0001C210 case 4",	1);
	create_insn	(0X26226);
	set_cmt	(0X2622A,	"jumptable 0001C210 case 5",	1);
	create_insn	(x=0X2623A);
	op_hex		(x,	1);
	create_insn	(0X26240);
	create_insn	(0X2624C);
	create_insn	(0X2626C);
	create_insn	(0X2627E);
	create_insn	(0X26282);
	create_insn	(0X2629A);
	create_insn	(0X262AE);
	create_insn	(0X262B8);
	create_insn	(x=0X262BE);
	op_hex		(x,	1);
	create_insn	(x=0X262C6);
	op_hex		(x,	1);
	create_byte	(0X262CE);
	make_array	(0X262CE,	0X2);
	create_insn	(0X262D0);
	create_insn	(x=0X262EC);
	op_hex		(x,	1);
	create_insn	(x=0X262FE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X263EC);
	op_hex		(x,	1);
	create_byte	(0X26402);
	make_array	(0X26402,	0X2);
	create_dword	(0X26404);
	make_array	(0X26404,	0XC);
	create_insn	(0X26434);
	create_insn	(0X26456);
	create_insn	(0X26466);
	create_insn	(x=0X26476);
	op_hex		(x,	1);
	create_insn	(0X2647E);
	create_dword	(0X26498);
	create_insn	(0X2649C);
	create_insn	(x=0X264A4);
	op_hex		(x,	1);
	create_insn	(x=0X264B6);
	op_hex		(x,	1);
	create_insn	(x=0X2653C);
	op_hex		(x,	1);
	create_insn	(0X26542);
	create_insn	(x=0X265A4);
	op_hex		(x,	1);
	create_insn	(0X265AA);
	create_insn	(x=0X265B4);
	op_hex		(x,	1);
	create_insn	(x=0X265EC);
	op_hex		(x,	1);
	create_insn	(0X265F2);
	create_insn	(0X265FE);
	create_insn	(0X26608);
	create_insn	(0X2660E);
	create_insn	(0X2661E);
	create_insn	(0X26624);
	create_insn	(x=0X26634);
	op_hex		(x,	1);
	create_insn	(0X2663E);
	create_insn	(0X26654);
	create_insn	(x=0X26664);
	op_hex		(x,	1);
	create_dword	(0X2666C);
	create_insn	(0X26670);
	create_insn	(x=0X26684);
	op_hex		(x,	1);
	create_insn	(x=0X2668A);
	op_hex		(x,	1);
	create_insn	(x=0X26692);
	op_hex		(x,	1);
	create_insn	(x=0X26698);
	op_hex		(x,	1);
	create_insn	(x=0X266AE);
	op_stkvar	(x,	1);
	create_insn	(0X266B8);
	create_byte	(0X266C6);
	make_array	(0X266C6,	0X2);
	create_insn	(0X266C8);
	create_insn	(x=0X266CE);
	op_hex		(x,	1);
	create_insn	(x=0X2671E);
	op_hex		(x,	1);
	create_insn	(x=0X26738);
	op_hex		(x,	1);
	create_insn	(0X2674C);
	create_insn	(x=0X26758);
	op_hex		(x,	1);
	create_insn	(0X2676E);
	create_insn	(x=0X2677A);
	op_hex		(x,	1);
	create_insn	(0X26780);
	create_dword	(0X26788);
	create_insn	(0X2678C);
	create_byte	(0X26792);
	make_array	(0X26792,	0X2);
	create_dword	(0X26794);
	create_insn	(0X26798);
	create_insn	(0X267B0);
	create_insn	(x=0X267D0);
	op_hex		(x,	1);
	create_insn	(x=0X267D4);
	op_hex		(x,	1);
	create_insn	(x=0X267D8);
	op_hex		(x,	1);
	create_insn	(x=0X267DC);
	op_hex		(x,	1);
	create_insn	(x=0X267E0);
	op_hex		(x,	1);
	create_insn	(x=0X267EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X26852);
	op_stkvar	(x,	1);
	create_insn	(x=0X26868);
	op_hex		(x,	1);
	create_insn	(x=0X26872);
	op_hex		(x,	1);
	create_insn	(0X26878);
	create_insn	(x=0X26886);
	op_stkvar	(x,	1);
	create_insn	(x=0X26888);
	op_stkvar	(x,	1);
	create_insn	(x=0X2688A);
	op_stkvar	(x,	1);
	create_insn	(x=0X2688C);
	op_stkvar	(x,	1);
	create_insn	(x=0X2688E);
	op_stkvar	(x,	1);
	create_insn	(x=0X26890);
	op_stkvar	(x,	1);
	create_insn	(x=0X26892);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X26894);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X26896);
	op_stkvar	(x,	1);
	create_insn	(x=0X26898);
	op_stkvar	(x,	1);
	create_word	(0X2689E);
	create_insn	(0X268A0);
	create_word	(0X268B2);
	create_dword	(0X268B4);
	make_array	(0X268B4,	0X2);
	create_insn	(0X268BC);
	create_insn	(0X268D4);
	create_insn	(x=0X268DE);
	op_hex		(x,	1);
	create_insn	(x=0X268EA);
	op_hex		(x,	1);
	create_insn	(x=0X268F4);
	op_hex		(x,	1);
	create_insn	(0X268FA);
	create_insn	(0X26908);
	create_insn	(x=0X2690C);
	op_hex		(x,	1);
	create_insn	(0X26912);
	create_insn	(x=0X26916);
	op_hex		(x,	1);
	create_insn	(x=0X2691E);
	op_hex		(x,	1);
	create_dword	(0X26930);
	create_insn	(0X26934);
	create_insn	(x=0X2693E);
	op_hex		(x,	1);
	create_insn	(0X26950);
	create_insn	(x=0X26958);
	op_stkvar	(x,	1);
	create_insn	(0X26960);
	create_byte	(0X2696A);
	make_array	(0X2696A,	0X2);
	create_insn	(0X2696C);
	create_insn	(x=0X26978);
	op_hex		(x,	1);
	create_insn	(0X26982);
	create_insn	(0X26996);
	create_insn	(x=0X2699C);
	op_stkvar	(x,	1);
	create_insn	(0X269A4);
	create_byte	(0X269AA);
	make_array	(0X269AA,	0X2);
	create_insn	(x=0X269AC);
	op_hex		(x,	1);
	create_insn	(x=0X269D6);
	op_hex		(x,	1);
	create_insn	(0X269DC);
	create_insn	(x=0X269FC);
	op_hex		(x,	1);
	create_byte	(0X26A02);
	make_array	(0X26A02,	0X2);
	create_insn	(0X26A04);
	create_insn	(0X26A1C);
	create_insn	(0X26A2E);
	create_insn	(0X26A32);
	create_insn	(0X26A42);
	create_insn	(0X26A56);
	create_insn	(0X26A6C);
	create_insn	(x=0X26A8C);
	op_hex		(x,	1);
	create_insn	(x=0X26AAC);
	op_hex		(x,	1);
	create_insn	(x=0X26ADA);
	op_hex		(x,	1);
	create_insn	(x=0X26AE8);
	op_hex		(x,	1);
	create_insn	(x=0X26AFA);
	op_hex		(x,	1);
	create_insn	(0X26B00);
	create_insn	(0X26B14);
	create_insn	(x=0X26B1E);
	op_hex		(x,	1);
	create_insn	(x=0X26B2E);
	op_hex		(x,	1);
	create_insn	(0X26B34);
	create_insn	(0X26B44);
	create_insn	(0X26B48);
	create_insn	(0X26B5A);
	create_insn	(0X26B6E);
	create_insn	(x=0X26B72);
	op_hex		(x,	1);
	create_insn	(0X26BAC);
	create_insn	(0X26BB2);
	create_insn	(x=0X26BBE);
	op_hex		(x,	1);
	create_insn	(x=0X26BD0);
	op_hex		(x,	1);
	set_cmt	(0X26BD6,	"switch 4 cases ",	0);
	create_insn	(0X26BD6);
	set_cmt	(0X26BDA,	"jump table for switch statement",	0);
	create_byte	(0X26BDA);
	set_name	(0X26BDA,	"jpt_1CBD6");
	create_byte	(0X26BDB);
	create_byte	(0X26BDC);
	create_byte	(0X26BDD);
	set_cmt	(0X26BDE,	"jumptable 0001CBD6 cases 6,7",	1);
	create_insn	(0X26BDE);
	set_cmt	(0X26BE8,	"jumptable 0001CBD6 case 4",	1);
	create_insn	(0X26BE8);
	set_cmt	(0X26BEA,	"jumptable 0001CBD6 case 5",	1);
	create_insn	(x=0X26BF4);
	op_hex		(x,	1);
	create_insn	(0X26BFA);
	create_insn	(x=0X26C04);
	op_hex		(x,	1);
	create_insn	(x=0X26C10);
	op_hex		(x,	1);
	create_insn	(0X26C18);
	create_insn	(x=0X26C1E);
	op_hex		(x,	1);
	create_insn	(x=0X26C2A);
	op_hex		(x,	1);
	create_insn	(x=0X26C62);
	op_hex		(x,	1);
	create_insn	(x=0X26C78);
	op_hex		(x,	1);
	create_insn	(0X26C82);
	create_insn	(x=0X26C92);
	op_hex		(x,	1);
	create_insn	(x=0X26CA4);
	op_hex		(x,	1);
	create_insn	(0X26CAA);
	create_insn	(0X26CD6);
	create_insn	(0X26CE2);
	create_insn	(0X26CF2);
	create_insn	(x=0X26CFC);
	op_hex		(x,	1);
	create_insn	(0X26D02);
	create_insn	(x=0X26D06);
	op_hex		(x,	1);
	create_insn	(x=0X26D20);
	op_hex		(x,	1);
	create_insn	(x=0X26D30);
	op_hex		(x,	1);
	create_insn	(x=0X26D3C);
	op_hex		(x,	1);
	create_insn	(x=0X26D42);
	op_hex		(x,	1);
	create_insn	(x=0X26D46);
	op_hex		(x,	1);
	create_insn	(x=0X26D54);
	op_hex		(x,	1);
	create_insn	(x=0X26D58);
	op_hex		(x,	1);
	create_insn	(x=0X26D60);
	op_hex		(x,	1);
	create_insn	(0X26D6A);
	create_insn	(x=0X26D94);
	op_hex		(x,	1);
	create_insn	(x=0X26D9A);
	op_hex		(x,	1);
	create_insn	(x=0X26D9E);
	op_hex		(x,	1);
	create_insn	(x=0X26DA8);
	op_hex		(x,	1);
	create_insn	(0X26DB2);
	create_insn	(x=0X26DBC);
	op_hex		(x,	1);
	create_insn	(0X26DC6);
	create_insn	(x=0X26DD0);
	op_hex		(x,	1);
	create_insn	(x=0X26DEA);
	op_hex		(x,	1);
	create_insn	(x=0X26DF0);
	op_hex		(x,	1);
	create_insn	(x=0X26DF4);
	op_hex		(x,	1);
	create_insn	(x=0X26DFA);
	op_hex		(x,	1);
	create_insn	(0X26E00);
	create_insn	(x=0X26E08);
	op_hex		(x,	1);
	create_insn	(0X26E12);
	create_insn	(0X26E16);
	create_insn	(0X26E1A);
	create_insn	(x=0X26E1E);
	op_hex		(x,	1);
	create_insn	(x=0X26E24);
	op_hex		(x,	1);
	create_insn	(0X26E32);
	create_insn	(x=0X26E3A);
	op_hex		(x,	1);
	create_insn	(0X26E48);
	create_byte	(0X26E4E);
	make_array	(0X26E4E,	0X2);
	create_byte	(0X26E51);
	make_array	(0X26E51,	0X3);
	create_dword	(0X26E54);
	make_array	(0X26E54,	0X31);
	create_byte	(0X26F19);
	make_array	(0X26F19,	0X3);
	create_dword	(0X26F1C);
	make_array	(0X26F1C,	0XAE);
	create_dword	(0X271D4);
	make_array	(0X271D4,	0X152);
	set_name	(0X271D4,	"ofdm_init_list_1");
	create_dword	(0X2771C);
	make_array	(0X2771C,	0X200);
	create_dword	(0X27F1C);
	make_array	(0X27F1C,	0X200);
	create_dword	(0X2871C);
	make_array	(0X2871C,	0X200);
	create_dword	(0X28F1C);
	make_array	(0X28F1C,	0X200);
	create_dword	(0X2971C);
	make_array	(0X2971C,	0X200);
	create_dword	(0X29F1C);
	make_array	(0X29F1C,	0XFD);
	create_dword	(0X2A310);
	make_array	(0X2A310,	0X103);
	set_name	(0X2A310,	"ofdm_init_list_2");
	create_dword	(0X2A71C);
	make_array	(0X2A71C,	0X144);
	create_dword	(0X2AC2C);
	make_array	(0X2AC2C,	0XBC);
	set_name	(0X2AC2C,	"ofdm_init_list_3");
	create_dword	(0X2AF1C);
	make_array	(0X2AF1C,	0X200);
	create_dword	(0X2B71C);
	make_array	(0X2B71C,	0X200);
	create_dword	(0X2BF1C);
	make_array	(0X2BF1C,	0X200);
	create_dword	(0X2C71C);
	make_array	(0X2C71C,	0X200);
	create_dword	(0X2CF1C);
	make_array	(0X2CF1C,	0X200);
	create_dword	(0X2D71C);
	make_array	(0X2D71C,	0X1D6);
	create_byte	(0X2DE75);
	make_array	(0X2DE75,	0X3);
	create_dword	(0X2DE78);
	make_array	(0X2DE78,	0X2C);
	create_byte	(0X2DF29);
	make_array	(0X2DF29,	0X3);
	create_dword	(0X2DF2C);
	make_array	(0X2DF2C,	0XB9);
	create_byte	(0X2E210);
	make_array	(0X2E210,	0X27);
	create_byte	(0X2E237);
	make_array	(0X2E237,	0X51);
	create_dword	(0X2E288);
	make_array	(0X2E288,	0X15);
	create_dword	(0X2E2DC);
	make_array	(0X2E2DC,	0X15);
	create_dword	(0X2E330);
	make_array	(0X2E330,	0X15);
	create_dword	(0X2E384);
	make_array	(0X2E384,	0X15);
	create_dword	(0X2E3D8);
	make_array	(0X2E3D8,	0X10F);
	create_byte	(0X2E815);
	make_array	(0X2E815,	0X3);
	create_dword	(0X2E818);
	create_byte	(0X2E9A3);
	make_array	(0X2E9A3,	0XE);
	create_byte	(0X2E9D2);
	make_array	(0X2E9D2,	0X100);
	set_name	(0X2E9D2,	"crc8_table");
	create_byte	(0X2ED35);
	make_array	(0X2ED35,	0X3);
	create_byte	(0X2ED39);
	make_array	(0X2ED39,	0X3);
	create_byte	(0X2ED3D);
	make_array	(0X2ED3D,	0X3);
	create_byte	(0X2ED41);
	make_array	(0X2ED41,	0X3);
	create_byte	(0X2ED45);
	make_array	(0X2ED45,	0X3);
	create_byte	(0X2ED49);
	make_array	(0X2ED49,	0X3);
	create_byte	(0X2ED4D);
	make_array	(0X2ED4D,	0X3);
	create_byte	(0X2ED51);
	make_array	(0X2ED51,	0X3);
	create_byte	(0X2ED55);
	make_array	(0X2ED55,	0X3);
	create_byte	(0X2ED59);
	make_array	(0X2ED59,	0X3);
	create_byte	(0X2ED5D);
	make_array	(0X2ED5D,	0X3);
	create_byte	(0X2ED61);
	make_array	(0X2ED61,	0X3);
	create_byte	(0X2ED65);
	make_array	(0X2ED65,	0X3);
	create_byte	(0X2ED69);
	make_array	(0X2ED69,	0X3);
	create_byte	(0X2ED6D);
	make_array	(0X2ED6D,	0X3);
	create_byte	(0X2ED71);
	make_array	(0X2ED71,	0X3);
	create_byte	(0X2ED75);
	make_array	(0X2ED75,	0X3);
	create_byte	(0X2ED79);
	make_array	(0X2ED79,	0X3);
	create_byte	(0X2ED7D);
	make_array	(0X2ED7D,	0X3);
	create_byte	(0X2ED81);
	make_array	(0X2ED81,	0X3);
	create_byte	(0X2ED85);
	make_array	(0X2ED85,	0X3);
	create_byte	(0X2ED89);
	make_array	(0X2ED89,	0X3);
	create_byte	(0X2ED8D);
	make_array	(0X2ED8D,	0X3);
	create_byte	(0X2ED91);
	make_array	(0X2ED91,	0X3);
	create_byte	(0X2ED95);
	make_array	(0X2ED95,	0X3);
	create_byte	(0X2ED99);
	make_array	(0X2ED99,	0X3);
	create_byte	(0X2ED9D);
	make_array	(0X2ED9D,	0X3);
	create_byte	(0X2EDA1);
	make_array	(0X2EDA1,	0X3);
	create_byte	(0X2EDA5);
	make_array	(0X2EDA5,	0X3);
	create_byte	(0X2EDA9);
	make_array	(0X2EDA9,	0X3);
	create_byte	(0X2EDAD);
	make_array	(0X2EDAD,	0X3);
	create_byte	(0X2EDB1);
	make_array	(0X2EDB1,	0X3);
	create_byte	(0X2EDB5);
	make_array	(0X2EDB5,	0X3);
	create_byte	(0X2EDB9);
	make_array	(0X2EDB9,	0X3);
	create_byte	(0X2EDBD);
	make_array	(0X2EDBD,	0X3);
	create_byte	(0X2EDC1);
	make_array	(0X2EDC1,	0X3);
	create_byte	(0X2EDC5);
	make_array	(0X2EDC5,	0X3);
	create_byte	(0X2EDC9);
	make_array	(0X2EDC9,	0X3);
	create_byte	(0X2EDCD);
	make_array	(0X2EDCD,	0X3);
	create_byte	(0X2EDD1);
	make_array	(0X2EDD1,	0X3);
	create_byte	(0X2EDD5);
	make_array	(0X2EDD5,	0X3);
	create_byte	(0X2EDD9);
	make_array	(0X2EDD9,	0X3);
	create_byte	(0X2EDDD);
	make_array	(0X2EDDD,	0X3);
	create_byte	(0X2EDE1);
	make_array	(0X2EDE1,	0X3);
	create_byte	(0X2EDE5);
	make_array	(0X2EDE5,	0X3);
	create_byte	(0X2EDE9);
	make_array	(0X2EDE9,	0X3);
	create_byte	(0X2EDED);
	make_array	(0X2EDED,	0X3);
	create_byte	(0X2EDF1);
	make_array	(0X2EDF1,	0X3);
	create_byte	(0X2EDF5);
	make_array	(0X2EDF5,	0X3);
	create_byte	(0X2EDF9);
	make_array	(0X2EDF9,	0X3);
	create_byte	(0X2EDFD);
	make_array	(0X2EDFD,	0X3);
	create_byte	(0X2EE01);
	make_array	(0X2EE01,	0X3);
	create_byte	(0X2EE04);
	create_byte	(0X2EE05);
	make_array	(0X2EE05,	0X3);
	create_byte	(0X2EE09);
	make_array	(0X2EE09,	0X3);
	create_byte	(0X2EE0D);
	make_array	(0X2EE0D,	0X3);
	create_byte	(0X2EE11);
	make_array	(0X2EE11,	0X3);
	create_byte	(0X2EE15);
	make_array	(0X2EE15,	0X3);
	create_byte	(0X2EE19);
	make_array	(0X2EE19,	0X3);
	create_byte	(0X2EE1D);
	make_array	(0X2EE1D,	0X3);
	create_byte	(0X2EE21);
	make_array	(0X2EE21,	0X3);
	create_byte	(0X2EE25);
	make_array	(0X2EE25,	0X3);
	create_byte	(0X2EE29);
	make_array	(0X2EE29,	0X3);
	create_byte	(0X2EE2D);
	make_array	(0X2EE2D,	0X3);
	create_byte	(0X2EE31);
	make_array	(0X2EE31,	0X3);
	create_byte	(0X2EE35);
	make_array	(0X2EE35,	0X3);
	create_byte	(0X2EE39);
	make_array	(0X2EE39,	0X3);
	create_byte	(0X2EE3D);
	make_array	(0X2EE3D,	0X3);
	create_byte	(0X2EE41);
	make_array	(0X2EE41,	0X3);
	create_byte	(0X2EE45);
	make_array	(0X2EE45,	0X3);
	create_byte	(0X2EE49);
	make_array	(0X2EE49,	0X3);
	create_byte	(0X2EE4D);
	make_array	(0X2EE4D,	0X3);
	create_byte	(0X2EE51);
	make_array	(0X2EE51,	0X3);
	create_byte	(0X2EE55);
	make_array	(0X2EE55,	0X3);
	create_byte	(0X2EE59);
	make_array	(0X2EE59,	0X3);
	create_byte	(0X2EE5D);
	make_array	(0X2EE5D,	0X3);
	create_byte	(0X2EE61);
	make_array	(0X2EE61,	0X3);
	create_byte	(0X2EE65);
	make_array	(0X2EE65,	0X3);
	create_byte	(0X2EE69);
	make_array	(0X2EE69,	0X3);
	create_byte	(0X2EE6D);
	make_array	(0X2EE6D,	0X3);
	create_byte	(0X2EE71);
	make_array	(0X2EE71,	0X3);
	create_byte	(0X2EE75);
	make_array	(0X2EE75,	0X3);
	create_byte	(0X2EE79);
	make_array	(0X2EE79,	0X3);
	create_byte	(0X2EE7D);
	make_array	(0X2EE7D,	0X3);
	create_byte	(0X2EE81);
	make_array	(0X2EE81,	0X3);
	create_byte	(0X2EE85);
	make_array	(0X2EE85,	0X3);
	create_byte	(0X2EE89);
	make_array	(0X2EE89,	0X3);
	create_byte	(0X2EE8D);
	make_array	(0X2EE8D,	0X3);
	create_byte	(0X2EE91);
	make_array	(0X2EE91,	0X3);
	create_byte	(0X2EE95);
	make_array	(0X2EE95,	0X3);
	create_byte	(0X2EE99);
	make_array	(0X2EE99,	0X3);
	create_byte	(0X2EE9D);
	make_array	(0X2EE9D,	0X3);
	create_byte	(0X2EEA1);
	make_array	(0X2EEA1,	0X3);
	create_byte	(0X2EEA5);
	make_array	(0X2EEA5,	0X3);
	create_byte	(0X2EEA9);
	make_array	(0X2EEA9,	0X3);
	create_byte	(0X2EEAD);
	make_array	(0X2EEAD,	0X3);
	create_byte	(0X2EEB1);
	make_array	(0X2EEB1,	0X3);
	create_byte	(0X2EEB4);
	create_byte	(0X2EEB5);
	create_word	(0X2EEB6);
	create_word	(0X2EEB8);
	make_array	(0X2EEBA,	0X2);
	create_dword	(0X2EEBC);
	create_dword	(0X2EEC0);
	create_dword	(0X2EEC4);
	create_dword	(0X2EECC);
	create_dword	(0X2EED0);
	create_dword	(0X2EEDC);
	create_dword	(0X2EEE4);
	create_dword	(0X2EEE8);
	create_dword	(0X2EEEC);
	create_dword	(0X2EEF0);
	create_strlit	(0X2EF00,	0X2EF0C);
	set_name	(0X2EF00,	"aIRmsdos5_0");
	create_strlit	(0X2EF1E,	0X2EF3E);
	set_name	(0X2EF1E,	"aDjiIosdlog");
	create_strlit	(0X2EF3E,	0X2EF4A);
	set_name	(0X2EF3E,	"aReadmeTxt");
	create_strlit	(0X2EF5E,	0X2EF7D);
	set_name	(0X2EF5E,	"aWarning1NoSdCa");
	create_byte	(0X2EF7D);
	make_array	(0X2EF7D,	0X3E1);
	create_strlit	(0X2F397,	0X2F3B1);
	set_name	(0X2F397,	"aDjiConfif");
	create_word	(0X2F3B1);
	create_strlit	(0X2F3B3,	0X2F3D5);
	set_name	(0X2F3B3,	"aDjiController");
	create_word	(0X2F3D5);
	create_strlit	(0X2F3D7,	0X2F3EF);
	set_name	(0X2F3D7,	"a0001a0000000");
	create_word	(0X2F3EF);
	create_strlit	(0X2F3F1,	0X2F3F9);
	set_name	(0X2F3F1,	"aVcom");
	create_word	(0X2F3F9);
	create_strlit	(0X2F3FB,	0X2F403);
	set_name	(0X2F3FB,	"aMscm");
	create_word	(0X2F403);
	create_strlit	(0X2F405,	0X2F41F);
	set_name	(0X2F405,	"a0001aa000000");
	create_dword	(0X2F420);
	create_dword	(x=0X2F424);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X2F428);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	make_array	(0X2F42C,	0X4);
	create_byte	(0X2F435);
	make_array	(0X2F435,	0X3);
	create_dword	(0X2F438);
	make_array	(0X2F438,	0XB);
	create_dword	(0X2F464);
	make_array	(0X2F464,	0X9);
	create_byte	(0X2F489);
	make_array	(0X2F489,	0X3);
	create_byte	(0X2F48D);
	make_array	(0X2F48D,	0X3);
	create_dword	(0X2F490);
	make_array	(0X2F490,	0XA);
	create_word	(0X2F4B8);
	make_array	(0X2F4B8,	0X100);
	set_name	(0X2F4B8,	"crc16_tab");
	create_byte	(0X2F6B8);
	make_array	(0X2F6B8,	0X100);
	create_strlit	(0X2F7B8,	0X2F7CC);
	set_name	(0X2F7B8,	"a0123456789abcd");
	create_strlit	(0X2F7CC,	0X2F7E0);
	set_name	(0X2F7CC,	"a0123456789ab_0");
	create_dword	(0X2F7E0);
	make_array	(0X2F7E0,	0X2);
	create_dword	(0X2F7E8);
	make_array	(0X2F7E8,	0X3);
	create_dword	(0X2F7F4);
	create_byte	(0X2F7F9);
	make_array	(0X2F7F9,	0X3);
	create_byte	(0X2F7FD);
	make_array	(0X2F7FD,	0X3);
	create_byte	(0X2F801);
	make_array	(0X2F801,	0X3);
	create_byte	(0X2F805);
	make_array	(0X2F805,	0X3);
	create_byte	(0X2F809);
	make_array	(0X2F809,	0X3);
	create_dword	(0X2F80C);
	make_array	(0X2F80C,	0X2);
	create_dword	(0X2F814);
	create_byte	(0X2F819);
	make_array	(0X2F819,	0X3);
	create_dword	(0X2F81C);
	make_array	(0X2F81C,	0X7);
	create_dword	(0X2F838);
	create_dword	(0X2F83C);
	make_array	(0X2F83C,	0X2);
	create_dword	(0X2F844);
	create_dword	(0X2F848);
	make_array	(0X2F848,	0X2);
	create_dword	(0X2F850);
	make_array	(0X2F850,	0X2);
	create_dword	(0X2F858);
	make_array	(0X2F858,	0X2);
	create_byte	(0X2F861);
	make_array	(0X2F861,	0X3);
	create_dword	(0X2F864);
	create_byte	(0X2F869);
	make_array	(0X2F869,	0X3);
	create_byte	(0X2F86D);
	make_array	(0X2F86D,	0X3);
	create_byte	(0X2F871);
	make_array	(0X2F871,	0X3);
	create_byte	(0X2F875);
	make_array	(0X2F875,	0X3);
	create_byte	(0X2F879);
	make_array	(0X2F879,	0X3);
	create_byte	(0X2F87D);
	make_array	(0X2F87D,	0X3);
	create_byte	(0X2F881);
	make_array	(0X2F881,	0X3);
	create_byte	(0X2F885);
	make_array	(0X2F885,	0X3);
	create_byte	(0X2F889);
	make_array	(0X2F889,	0X3);
	create_byte	(0X2F8A3);
	create_dword	(0X2F8A4);
	make_array	(0X2F8A4,	0X7);
	create_dword	(0X2F8C0);
	make_array	(0X2F8C0,	0X2);
	create_byte	(0X2F8C9);
	make_array	(0X2F8C9,	0X3);
	create_byte	(0X2F8CD);
	make_array	(0X2F8CD,	0X3);
	create_byte	(0X2F8D1);
	make_array	(0X2F8D1,	0X3);
	create_byte	(0X2F8D5);
	make_array	(0X2F8D5,	0X3);
	create_byte	(0X2F8D9);
	make_array	(0X2F8D9,	0X3);
	create_byte	(0X2F8DD);
	make_array	(0X2F8DD,	0X3);
	create_byte	(0X2F8E1);
	make_array	(0X2F8E1,	0X3);
	create_byte	(0X2F8E5);
	make_array	(0X2F8E5,	0X3);
	create_byte	(0X2F8E9);
	make_array	(0X2F8E9,	0X3);
	create_dword	(0X2F8EC);
	make_array	(0X2F8EC,	0X3);
	create_dword	(0X2F8F8);
	make_array	(0X2F8F8,	0X6);
	create_byte	(0X2F911);
	make_array	(0X2F911,	0X3);
	create_dword	(0X2F914);
	make_array	(0X2F914,	0X7);
	create_dword	(0X2F930);
	create_byte	(0X2F934);
	make_array	(0X2F934,	0X4);
	create_dword	(0X2F938);
	make_array	(0X2F938,	0XC);
	create_dword	(0X2F968);
	make_array	(0X2F968,	0X2);
	create_byte	(0X2F971);
	make_array	(0X2F971,	0X3);
	create_dword	(0X2F974);
	make_array	(0X2F974,	0XD);
	create_dword	(0X2F9A8);
	create_byte	(0X2F9AD);
	make_array	(0X2F9AD,	0X3);
	create_dword	(0X2F9B0);
	create_byte	(0X2F9B5);
	make_array	(0X2F9B5,	0X3);
	create_byte	(0X2F9B9);
	make_array	(0X2F9B9,	0X3);
	create_byte	(0X2F9C9);
	make_array	(0X2F9C9,	0X3);
	create_dword	(0X2F9CC);
	make_array	(0X2F9CC,	0XD);
	create_byte	(0X2FA01);
	make_array	(0X2FA01,	0X3);
	create_dword	(0X2FA04);
	make_array	(0X2FA04,	0XC);
	create_byte	(0X2FA35);
	make_array	(0X2FA35,	0X3);
	create_dword	(0X2FA38);
	make_array	(0X2FA38,	0X2);
	create_dword	(x=0X2FA40);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X2FA44);
	make_array	(0X2FA44,	0X2);
	create_byte	(0X2FA4D);
	make_array	(0X2FA4D,	0X3);
	create_byte	(0X2FA51);
	make_array	(0X2FA51,	0X3);
	create_byte	(0X2FA54);
	make_array	(0X2FA54,	0X4);
	create_dword	(x=0X2FA58);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_byte	(0X2FA5D);
	make_array	(0X2FA5D,	0X3);
	create_dword	(0X2FA60);
	make_array	(0X2FA60,	0XA);
	create_dword	(0X2FA88);
	create_byte	(0X2FA8D);
	make_array	(0X2FA8D,	0X3);
	create_dword	(0X2FA90);
	make_array	(0X2FA90,	0X5);
	create_byte	(0X2FAA5);
	make_array	(0X2FAA5,	0X3);
	create_dword	(0X2FAA8);
	create_byte	(0X2FAAC);
	make_array	(0X2FAAC,	0X4);
	create_byte	(0X2FAB1);
	make_array	(0X2FAB1,	0X3);
	create_dword	(0X2FAB4);
	make_array	(0X2FAB4,	0X2);
	create_strlit	(0X2FABC,	0X2FAFF);
	set_name	(0X2FABC,	"aChDMcsDModeDBw");
	create_byte	(0X2FAFF);
	create_dword	(0X2FB00);
	make_array	(0X2FB00,	0X4);
	create_dword	(0X2FB10);
	make_array	(0X2FB10,	0X8);
	create_dword	(0X2FB30);
	create_dword	(0X2FB34);
	make_array	(0X2FB34,	0X2);
	create_byte	(0X2FB3D);
	make_array	(0X2FB3D,	0X3);
	create_dword	(0X2FB40);
	create_byte	(0X2FB45);
	make_array	(0X2FB45,	0X3);
	create_byte	(0X2FB49);
	make_array	(0X2FB49,	0X3);
	create_byte	(0X2FB4D);
	make_array	(0X2FB4D,	0X3);
	create_byte	(0X2FB51);
	make_array	(0X2FB51,	0X3);
	create_dword	(x=0X2FB54);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_byte	(0X2FB59);
	make_array	(0X2FB59,	0X3);
	create_dword	(0X2FB5C);
	create_byte	(0X2FB61);
	make_array	(0X2FB61,	0X3);
	create_dword	(0X2FB64);
	make_array	(0X2FB64,	0X3B);
	create_dword	(0X2FC50);
	create_dword	(0X2FC54);
	make_array	(0X2FC54,	0X4);
	create_dword	(0X2FC64);
	make_array	(0X2FC64,	0X13);
	create_byte	(0X2FCB0);
	make_array	(0X2FCB0,	0X3);
	create_strlit	(0X2FCB3,	0X2FCBC);
	set_name	(0X2FCB3,	"aTestdjiw");
	create_dword	(0X2FCBC);
	make_array	(0X2FCBC,	0X7B);
	create_byte	(0X10000000);
	create_byte	(0X10000001);
	create_byte	(0X10000002);
	create_byte	(0X10000003);
	create_byte	(0X10000004);
	create_byte	(0X10000005);
	create_byte	(0X10000006);
	create_byte	(0X10000007);
	create_byte	(0X10000008);
	create_byte	(0X10000009);
	create_byte	(0X1000000A);
	create_word	(0X1000000C);
	create_byte	(0X1000000E);
	create_byte	(0X1000000F);
	create_dword	(0X10000010);
	create_dword	(0X10000014);
	create_dword	(0X10000018);
	create_byte	(0X1000001C);
	create_byte	(0X1000001D);
	create_byte	(0X1000001F);
	create_byte	(0X10000020);
	create_dword	(0X10000021);
	create_dword	(0X10000025);
	create_byte	(0X10000029);
	create_byte	(0X1000002A);
	create_word	(0X1000002C);
	make_array	(0X1000002E,	0X2);
	create_dword	(0X10000030);
	create_byte	(0X10000034);
	make_array	(0X10000035,	0X3);
	create_dword	(0X10000038);
	create_byte	(0X1000003C);
	create_byte	(0X1000003D);
	create_byte	(0X1000003E);
	create_byte	(0X1000003F);
	create_byte	(0X10000040);
	make_array	(0X10000041,	0X7);
	create_dword	(0X10000048);
	create_byte	(0X10000055);
	create_byte	(0X10000056);
	create_byte	(0X10000057);
	create_byte	(0X10000058);
	create_byte	(0X10000059);
	create_byte	(0X1000005A);
	create_byte	(0X1000005B);
	create_byte	(0X1000005C);
	create_byte	(0X1000005D);
	create_byte	(0X1000005E);
	create_byte	(0X1000005F);
	create_byte	(0X10000060);
	create_byte	(0X10000061);
	create_byte	(0X10000062);
	create_byte	(0X10000063);
	create_byte	(0X10000064);
	create_byte	(0X10000065);
	create_byte	(0X10000066);
	create_byte	(0X10000067);
	create_byte	(0X10000068);
	create_byte	(0X10000069);
	create_byte	(0X1000006A);
	create_byte	(0X1000006B);
	create_byte	(0X1000006C);
	create_byte	(0X1000006D);
	create_byte	(0X1000006E);
	create_byte	(0X1000006F);
	create_byte	(0X10000070);
	create_byte	(0X10000071);
	create_byte	(0X10000072);
	create_byte	(0X10000073);
	create_byte	(0X10000074);
	create_byte	(0X10000075);
	create_byte	(0X10000076);
	create_byte	(0X10000077);
	create_byte	(0X10000078);
	create_byte	(0X10000079);
	create_byte	(0X1000007A);
	create_word	(0X1000007C);
	create_byte	(0X1000007F);
	create_byte	(0X10000080);
	make_array	(0X10000081,	0X3);
	create_dword	(0X10000084);
	create_dword	(0X1000008C);
	create_dword	(0X10000090);
	create_dword	(0X10000094);
	create_dword	(0X10000098);
	create_dword	(0X1000009C);
	create_dword	(0X100000A0);
	create_dword	(0X100000A4);
	create_dword	(0X100000A8);
	create_dword	(0X100000AC);
	create_dword	(0X100000B0);
	create_dword	(0X100000B4);
	create_dword	(0X100000B8);
	create_byte	(0X100000BC);
	create_byte	(0X100000BD);
	create_byte	(0X100000BE);
	create_byte	(0X100000BF);
	create_byte	(0X100000C0);
	create_byte	(0X100000C1);
	create_byte	(0X100000C2);
	make_array	(0X100000C3,	0X5);
	create_byte	(0X100000C8);
	create_byte	(0X100000C9);
	create_byte	(0X100000CA);
	create_byte	(0X100000CB);
	create_byte	(0X100000CC);
	create_byte	(0X100000CD);
	create_byte	(0X100000CE);
	create_byte	(0X100000CF);
	create_byte	(0X100000D0);
	create_byte	(0X100000D1);
	create_byte	(0X100000D2);
	create_byte	(0X100000D3);
	create_byte	(0X100000D4);
	create_byte	(0X100000D5);
	create_byte	(0X100000D6);
	set_name	(0X100000D6,	"max_mcs");
	create_byte	(0X100000D7);
	create_byte	(0X100000D8);
	create_byte	(0X100000D9);
	create_byte	(0X100000DA);
	create_byte	(0X100000DB);
	create_byte	(0X100000DC);
	create_byte	(0X100000DD);
	create_byte	(0X100000DE);
	create_byte	(0X100000DF);
	create_byte	(0X100000E0);
	create_byte	(0X100000E1);
	create_byte	(0X100000E2);
	create_byte	(0X100000E3);
	create_byte	(0X100000E4);
	create_byte	(0X100000E5);
	create_byte	(0X100000E6);
	create_byte	(0X100000E7);
	create_byte	(0X100000E8);
	create_byte	(0X100000E9);
	create_byte	(0X100000EE);
	create_byte	(0X100000EF);
	create_byte	(0X100000F0);
	create_byte	(0X100000F1);
	create_byte	(0X100000F2);
	create_word	(0X100000F4);
	create_word	(0X100000F6);
	create_word	(0X100000F8);
	create_word	(0X100000FA);
	create_word	(0X100000FC);
	create_word	(0X100000FE);
	create_word	(0X10000100);
	create_word	(0X10000102);
	create_word	(0X10000104);
	create_word	(0X10000106);
	create_word	(0X10000108);
	create_word	(0X1000010A);
	create_word	(0X1000010C);
	create_word	(0X1000010E);
	create_dword	(0X10000110);
	create_dword	(0X10000114);
	create_dword	(0X10000118);
	create_dword	(0X1000011C);
	create_dword	(0X10000120);
	create_dword	(0X10000124);
	create_dword	(0X10000128);
	create_dword	(0X10000160);
	create_byte	(0X10000164);
	create_word	(0X10000166);
	MakeStruct	(0X10000168,	"RadioStatus");
	set_name	(0X10000168,	"radio_status");
	create_byte	(0X10000170);
	create_byte	(0X10000171);
	create_byte	(0X10000172);
	create_byte	(0X10000173);
	create_byte	(0X10000174);
	create_byte	(0X10000175);
	create_byte	(0X10000176);
	create_byte	(0X10000177);
	create_byte	(0X10000178);
	create_byte	(0X10000179);
	create_byte	(0X1000017A);
	create_byte	(0X1000017B);
	create_byte	(0X1000017C);
	create_byte	(0X1000017D);
	create_byte	(0X1000017E);
	create_word	(0X10000180);
	create_word	(0X10000182);
	create_word	(0X10000184);
	create_word	(0X10000186);
	create_word	(0X10000188);
	create_word	(0X1000018A);
	create_word	(0X1000018C);
	create_word	(0X1000018E);
	create_word	(0X10000190);
	create_word	(0X10000192);
	create_word	(0X10000194);
	create_word	(0X10000196);
	create_dword	(0X10000198);
	create_dword	(0X1000019C);
	create_byte	(0X100001AA);
	create_dword	(0X100001AE);
	create_word	(0X100001B2);
	create_dword	(0X100001B4);
	create_word	(0X100001B8);
	create_dword	(0X100001BA);
	create_word	(0X100001BE);
	create_dword	(0X100001C0);
	create_word	(0X100001C4);
	create_dword	(0X100001C6);
	create_word	(0X100001CA);
	create_word	(0X100001D2);
	create_word	(0X100001D4);
	create_word	(0X100001D6);
	create_word	(0X100001D8);
	create_word	(0X100001DA);
	create_word	(0X100001DC);
	create_word	(0X100001DE);
	create_word	(0X100001E0);
	create_word	(0X100001E2);
	create_word	(0X100001E4);
	create_word	(0X100001E6);
	create_word	(0X100001E8);
	create_word	(0X100001EA);
	create_word	(0X100001EC);
	create_word	(0X100001EE);
	create_byte	(0X100001F8);
	make_array	(0X100001F8,	0X6);
	create_dword	(x=0X100001FE);
	op_enum		(x,	0,	GetEnum("OS_ERR"),0);
	create_byte	(0X1000020C);
	make_array	(0X1000020C,	0X8);
	create_byte	(0X10000214);
	create_byte	(0X10000215);
	create_byte	(0X10000216);
	create_byte	(0X10000217);
	create_byte	(0X10000218);
	create_byte	(0X1000021A);
	create_byte	(0X1000021B);
	create_byte	(0X1000021C);
	create_byte	(0X1000021D);
	create_byte	(0X1000021E);
	create_byte	(0X1000021F);
	create_byte	(0X10000220);
	create_byte	(0X10000221);
	create_byte	(0X10000223);
	create_byte	(0X10000224);
	create_byte	(0X10000226);
	create_byte	(0X10000227);
	create_byte	(0X1000022A);
	create_byte	(0X1000022B);
	create_byte	(0X1000022C);
	create_byte	(0X1000022D);
	create_byte	(0X1000022E);
	create_dword	(0X1000022F);
	create_byte	(0X10000237);
	create_dword	(0X10000238);
	create_byte	(0X1000023C);
	create_byte	(0X10000244);
	create_byte	(0X10000246);
	create_byte	(0X10000247);
	create_word	(0X10000248);
	create_byte	(0X1000024A);
	create_byte	(0X10000264);
	create_byte	(0X10000265);
	create_byte	(0X10000266);
	create_byte	(0X10000267);
	create_byte	(0X10000268);
	create_byte	(0X10000269);
	create_byte	(0X1000026A);
	create_byte	(0X1000026B);
	create_byte	(0X1000026C);
	create_byte	(0X1000026D);
	create_byte	(0X1000026E);
	create_byte	(0X10000270);
	create_byte	(0X10000271);
	create_byte	(0X10000272);
	create_byte	(0X10000273);
	create_byte	(0X10000274);
	create_byte	(0X10000275);
	create_byte	(0X10000276);
	create_byte	(0X10000277);
	create_byte	(0X10000278);
	create_byte	(0X10000279);
	create_byte	(0X1000027A);
	create_word	(0X1000027C);
	create_word	(0X1000027E);
	create_word	(0X10000280);
	create_word	(0X10000282);
	create_word	(0X10000284);
	create_word	(0X10000286);
	create_word	(0X10000288);
	create_word	(0X1000028A);
	create_word	(0X1000028C);
	create_word	(0X1000028E);
	make_array	(0X10000290,	0X10);
	create_byte	(0X10000311);
	create_byte	(0X10000312);
	create_byte	(0X10000313);
	set_name	(0X10000313,	"ofdm_board_version_flags");
	create_byte	(0X10000314);
	create_byte	(0X10000315);
	create_byte	(0X10000316);
	create_byte	(0X10000317);
	create_byte	(0X10000318);
	create_byte	(0X10000319);
	create_byte	(0X1000031A);
	create_byte	(0X1000031B);
	create_byte	(0X1000031C);
	create_byte	(0X1000031D);
	create_byte	(0X1000031E);
	create_byte	(0X1000031F);
	create_byte	(0X10000320);
	create_byte	(0X10000321);
	create_byte	(0X10000322);
	set_name	(0X10000322,	"active_transciever_attenuation");
	create_byte	(0X10000323);
	create_byte	(0X10000324);
	set_name	(0X10000324,	"fpga_reg_unkn15_value");
	create_byte	(0X10000325);
	create_byte	(0X10000326);
	create_byte	(0X10000327);
	create_word	(0X1000032A);
	create_word	(0X1000032C);
	create_word	(0X1000032E);
	create_word	(0X10000330);
	make_array	(0X10000332,	0X2);
	create_dword	(0X10000334);
	create_dword	(0X10000338);
	create_dword	(0X1000033C);
	create_dword	(0X10000340);
	create_dword	(0X10000344);
	create_dword	(0X10000348);
	create_dword	(0X1000034C);
	create_byte	(0X10000350);
	create_byte	(0X10000351);
	create_byte	(0X10000352);
	create_dword	(0X10000354);
	create_dword	(0X10000358);
	create_word	(0X1000047C);
	set_name	(0X1000047C,	"CANAF_FullCAN_cnt");
	create_word	(0X1000047E);
	set_name	(0X1000047E,	"CANAF_std_cnt");
	create_word	(0X10000480);
	set_name	(0X10000480,	"CANAF_unkn2_cnt");
	create_word	(0X10000482);
	set_name	(0X10000482,	"CANAF_unkn1_cnt");
	create_word	(0X10000484);
	set_name	(0X10000484,	"CANAF_gext_cnt");
	create_byte	(0X10000488);
	create_dword	(0X10000489);
	create_dword	(0X1000048D);
	make_array	(0X10000491,	0X3);
	create_dword	(0X10000494);
	set_name	(0X10000494,	"SystemCoreClock");
	create_dword	(0X10000498);
	set_name	(0X10000498,	"OS_CPU_ExceptStkBase");
	create_byte	(0X1000049C);
	make_array	(0X1000049C,	0X4);
	set_name	(0X1000049C,	"OSPrioTbl");
	create_dword	(0X100004A0);
	set_name	(0X100004A0,	"OSStatTaskCtr");
	create_byte	(0X100004A4);
	set_name	(0X100004A4,	"OSIntNestingCtr");
	create_byte	(0X100004A5);
	set_name	(0X100004A5,	"OSRunning");
	make_array	(0X100004A6,	0X2);
	create_dword	(0X100004A8);
	set_name	(0X100004A8,	"OSMsgPool");
	create_word	(0X100004AC);
	create_word	(0X100004AE);
	create_byte	(0X100004B0);
	create_byte	(0X100004B1);
	set_name	(0X100004B1,	"OSPrioHighRdy");
	make_array	(0X100004B2,	0X2);
	create_dword	(0X100004B4);
	set_name	(0X100004B4,	"OSSchedLockTimeBegin");
	create_dword	(0X100004B8);
	set_name	(0X100004B8,	"OSSchedLockTimeMax");
	create_dword	(0X100004BC);
	set_name	(0X100004BC,	"OSSchedLockTimeMaxCur");
	create_byte	(0X100004C0);
	set_name	(0X100004C0,	"OSSchedLockNestingCtr");
	make_array	(0X100004C1,	0X3);
	create_dword	(0X100004C4);
	set_name	(0X100004C4,	"OSSemDbgListPtr");
	create_word	(0X100004C8);
	set_name	(0X100004C8,	"OSSemQty");
	make_array	(0X100004CA,	0X2);
	create_dword	(0X100004CC);
	set_name	(0X100004CC,	"OSTaskCtxSwCtr");
	create_dword	(0X100004D0);
	set_name	(0X100004D0,	"OSTaskDbgListPtr");
	create_word	(0X100004D4);
	set_name	(0X100004D4,	"OSTaskQty");
	make_array	(0X100004D6,	0X2);
	create_dword	(0X100004D8);
	set_name	(0X100004D8,	"OSTickCtr");
	create_dword	(0X100004DC);
	set_name	(0X100004DC,	"OSTickTaskTimeMax");
	create_dword	(0X100004E0);
	set_name	(0X100004E0,	"OSTCBCurPtr");
	create_dword	(0X100004E4);
	set_name	(0X100004E4,	"OSTCBHighRdyPtr");
	create_word	(0X100004E8);
	set_name	(0X100004E8,	"CPU_IntDisMeasCtr");
	create_word	(0X100004EA);
	set_name	(0X100004EA,	"CPU_IntDisNestCtr");
	create_dword	(0X100004EC);
	set_name	(0X100004EC,	"CPU_TS_TmrFreq_Hz");
	create_dword	(0X100004F0);
	set_name	(0X100004F0,	"CPU_IntDisMeasStart_cnts");
	create_dword	(0X100004F4);
	set_name	(0X100004F4,	"CPU_IntDisMeasStop_cnts");
	create_dword	(0X100004F8);
	set_name	(0X100004F8,	"CPU_IntDisMeasOvrhd_cnts");
	create_dword	(0X100004FC);
	set_name	(0X100004FC,	"CPU_IntDisMeasMaxCur_cnts");
	create_dword	(0X10000500);
	set_name	(0X10000500,	"CPU_IntDisMeasMax_cnts");
	create_word	(0X10000504);
	create_word	(0X10000506);
	create_word	(0X10000508);
	make_array	(0X1000050A,	0X2);
	create_dword	(0X1000050C);
	create_dword	(0X10000510);
	create_dword	(0X10000514);
	create_dword	(0X10000518);
	create_byte	(0X1000051C);
	create_byte	(0X1000051D);
	create_byte	(0X1000051E);
	create_byte	(0X10000520);
	create_byte	(0X10000521);
	make_array	(0X10000522,	0X6);
	create_dword	(0X10000528);
	make_array	(0X1000052C,	0X4);
	create_dword	(0X10000530);
	create_dword	(0X10000534);
	create_byte	(0X1000053D);
	make_array	(0X1000053E,	0X2);
	create_byte	(0X10000540);
	create_byte	(0X10000541);
	create_byte	(0X10000542);
	create_byte	(0X10000543);
	create_word	(0X10000544);
	create_dword	(0X1000054C);
	create_dword	(0X10000550);
	create_dword	(0X10000554);
	create_dword	(0X10000558);
	create_word	(0X1000055C);
	make_array	(0X1000055E,	0X2);
	create_byte	(0X10000560);
	create_byte	(0X10000561);
	create_word	(0X10000562);
	create_byte	(0X10000564);
	create_word	(0X10000566);
	create_byte	(0X1000057A);
	create_dword	(0X100005C8);
	create_dword	(0X100005CC);
	create_dword	(0X100005D0);
	create_byte	(0X100005D4);
	create_byte	(0X100005D5);
	make_array	(0X100005D6,	0X2);
	create_dword	(0X100005D8);
	make_array	(0X100005D8,	0X4);
	set_name	(0X100005D8,	"status_uid");
	create_byte	(0X100005E8);
	set_name	(0X100005E8,	"status_DEFVER");
	create_byte	(0X100005E9);
	make_array	(0X100005E9,	0X5);
	set_name	(0X100005E9,	"status_RC");
	create_byte	(0X100005EE);
	set_name	(0X100005EE,	"zone_is_fcc");
	create_byte	(0X100005EF);
	set_name	(0X100005EF,	"status_MYNAME");
	create_byte	(0X100005F1);
	create_byte	(0X100005F2);
	create_word	(0X100005F3);
	create_word	(0X100005F5);
	set_name	(0X100005F5,	"status_MYPASSWORD");
	create_byte	(0X100005F7);
	set_name	(0X100005F7,	"status_function");
	create_byte	(0X100005F8);
	set_name	(0X100005F8,	"status_GROUP_ID");
	create_byte	(0X100005FA);
	create_byte	(0X100005FB);
	create_byte	(0X100005FC);
	set_name	(0X100005FC,	"status_GROUP_NAME");
	create_byte	(0X100005FE);
	create_byte	(0X100005FF);
	create_word	(0X10000600);
	create_word	(0X10000602);
	set_name	(0X10000602,	"status_GROUP_PASSWORD");
	create_byte	(0X10000604);
	set_name	(0X10000604,	"status_MYIP");
	create_byte	(0X10000605);
	set_name	(0X10000605,	"status_STATUE");
	create_byte	(0X10000606);
	set_name	(0X10000606,	"status_GIMBAL_CTLIP");
	create_byte	(0X10000607);
	set_name	(0X10000607,	"zone_is_on");
	create_byte	(0X1000064A);
	create_byte	(0X1000064B);
	create_byte	(0X1000064C);
	create_dword	(0X1000064D);
	create_byte	(0X10000651);
	create_byte	(0X10000652);
	create_byte	(0X10000653);
	create_byte	(0X10000654);
	create_byte	(0X10000655);
	create_byte	(0X10000657);
	create_byte	(0X10000658);
	create_byte	(0X10000659);
	create_dword	(0X1000065A);
	create_word	(0X1000065E);
	create_byte	(0X10000660);
	create_byte	(0X10000661);
	create_dword	(0X10000662);
	create_byte	(0X1000066E);
	create_byte	(0X100006F1);
	create_byte	(0X100006F2);
	create_byte	(0X100006F3);
	create_dword	(0X100006F4);
	create_byte	(0X100006F8);
	create_byte	(0X100006F9);
	make_array	(0X100006FA,	0X2);
	MakeStruct	(0X100006FC,	"OS_TCB");
	MakeStruct	(0X10000BAC,	"OS_TCB");
	set_name	(0X10000BAC,	"strct_10000BAC");
	MakeStruct	(0X1000190C,	"OS_TCB");
	set_name	(0X1000190C,	"strct_1000190C");
	MakeStruct	(0X10001DBC,	"OS_TCB");
	set_name	(0X10001DBC,	"strct_10001DBC");
	MakeStruct	(0X1000226C,	"OS_TCB");
	set_name	(0X1000226C,	"strct_1000226C");
	create_dword	(0X1000271C);
	create_dword	(0X10002720);
	create_dword	(0X10002724);
	create_byte	(0X10002728);
	create_byte	(0X10002734);
	create_byte	(0X10002735);
	create_byte	(0X10002736);
	create_dword	(0X10002739);
	create_dword	(0X1000273D);
	create_word	(0X10002741);
	create_byte	(0X10002743);
	create_byte	(0X1000275F);
	create_byte	(0X10002760);
	create_byte	(0X10002761);
	create_byte	(0X10002762);
	create_byte	(0X10002763);
	create_dword	(0X10002764);
	create_dword	(0X10002768);
	create_word	(0X1000276C);
	create_dword	(0X1000279E);
	create_byte	(0X100027A7);
	create_byte	(0X100027A8);
	create_byte	(0X100027A9);
	create_byte	(0X100027AA);
	create_byte	(0X100027AB);
	create_byte	(0X100027AC);
	create_byte	(0X100027AD);
	create_byte	(0X100027AE);
	create_byte	(0X100027AF);
	create_byte	(0X100027B0);
	create_byte	(0X100027B1);
	create_byte	(0X100027B2);
	create_byte	(0X100027B3);
	create_byte	(0X100027B4);
	create_byte	(0X1000280E);
	make_array	(0X1000280F,	0X11);
	MakeStruct	(0X10002850,	"DjiPacket");
	set_name	(0X10002850,	"packet_1");
	create_byte	(0X1000285C);
	make_array	(0X1000285C,	0X1F4);
	set_name	(0X1000285C,	"packet_1_payload_p1");
	create_dword	(0X10002A50);
	set_name	(0X10002A50,	"packet_ptr1");
	create_dword	(0X10002A54);
	make_array	(0X10002A58,	0X8);
	create_dword	(0X10002A60);
	create_dword	(0X10002A64);
	MakeStruct	(0X10002A74,	"DjiPacket");
	set_name	(0X10002A74,	"packet_2");
	create_byte	(0X10002A80);
	make_array	(0X10002A80,	0XF4);
	set_name	(0X10002A80,	"packet_2_payload_p1");
	create_dword	(0X10002B74);
	set_name	(0X10002B74,	"packet_ptr2");
	create_dword	(0X10002B78);
	create_dword	(0X10002B84);
	create_dword	(0X10002B88);
	MakeStruct	(0X10002B98,	"DjiPacket");
	set_name	(0X10002B98,	"packet_3");
	create_byte	(0X10002BA4);
	make_array	(0X10002BA4,	0X1F4);
	set_name	(0X10002BA4,	"packet_3_payload_p1");
	create_dword	(0X10002D98);
	set_name	(0X10002D98,	"packet_ptr3");
	create_dword	(0X10002D9C);
	create_dword	(0X10002DA8);
	create_dword	(0X10002DAC);
	MakeStruct	(0X10002DBC,	"DjiPacket");
	set_name	(0X10002DBC,	"packet_4");
	create_byte	(0X10002DC8);
	make_array	(0X10002DC8,	0XF4);
	set_name	(0X10002DC8,	"packet_4_payload_p1");
	create_dword	(0X10002EBC);
	set_name	(0X10002EBC,	"packet_ptr4");
	create_dword	(0X10002EC0);
	create_dword	(0X10002ECC);
	create_dword	(0X10002ED0);
	MakeStruct	(0X10002EE0,	"DjiPacket");
	set_name	(0X10002EE0,	"packet_5");
	create_byte	(0X10002EEC);
	make_array	(0X10002EEC,	0X34);
	set_name	(0X10002EEC,	"packet_5_payload_p1");
	create_dword	(0X10002F20);
	set_name	(0X10002F20,	"packet_ptr5");
	create_dword	(0X10002F24);
	make_array	(0X10002F28,	0X8);
	create_dword	(0X10002F30);
	create_dword	(0X10002F34);
	MakeStruct	(0X10003058,	"DjiPacket");
	set_name	(0X10003058,	"packet_6");
	create_byte	(0X10003064);
	make_array	(0X10003064,	0X1F4);
	set_name	(0X10003064,	"packet_6_payload_p1");
	create_dword	(0X10003258);
	set_name	(0X10003258,	"packet_ptr6");
	create_dword	(0X1000325C);
	create_dword	(0X10003268);
	create_dword	(0X1000326C);
	MakeStruct	(0X1000327C,	"DjiPacket");
	set_name	(0X1000327C,	"packet_7");
	create_byte	(0X10003288);
	make_array	(0X10003288,	0XB0);
	set_name	(0X10003288,	"packet_7_payload_p1");
	create_dword	(0X1000337C);
	set_name	(0X1000337C,	"packet_ptr7");
	create_dword	(0X10003380);
	create_dword	(0X1000338C);
	create_dword	(0X10003398);
	make_array	(0X1000339C,	0X4);
	create_byte	(0X100033A0);
	create_dword	(0X100033A1);
	create_dword	(0X100033A5);
	create_word	(0X100033A9);
	create_byte	(0X100033AB);
	create_dword	(0X100033AC);
	create_byte	(0X100033D0);
	create_byte	(0X100033D1);
	create_byte	(0X10003708);
	create_byte	(0X1000377A);
	create_byte	(0X10003788);
	make_array	(0X10003788,	0X80);
	set_name	(0X10003788,	"pkt_buf1");
	create_byte	(0X10003808);
	create_byte	(0X10003908);
	create_byte	(0X1000397B);
	create_byte	(0X10003988);
	make_array	(0X10003988,	0X30);
	set_name	(0X10003988,	"pkt_buf2");
	create_byte	(0X100039B8);
	make_array	(0X100039B8,	0X50);
	create_dword	(0X10003A08);
	create_dword	(0X10003A0C);
	create_word	(0X10003A10);
	create_dword	(0X10003A12);
	create_word	(0X10003A16);
	create_word	(0X10003A18);
	create_byte	(0X10003A1A);
	create_byte	(0X10003A1B);
	create_word	(0X10003AD0);
	create_word	(0X10003AD2);
	create_word	(0X10003AD4);
	create_word	(0X10003AD6);
	create_word	(0X10003AD8);
	create_word	(0X10003ADA);
	create_word	(0X10003ADC);
	create_word	(0X10003ADE);
	create_word	(0X10003AE0);
	create_byte	(0X10003AE2);
	create_byte	(0X10003AE3);
	create_word	(0X10003AE4);
	create_word	(0X10003AE6);
	create_word	(0X10003AE8);
	create_word	(0X10003AEA);
	create_word	(0X10003AEC);
	make_array	(0X10003AEE,	0X2);
	MakeStruct	(0X10003B2C,	"OS_SEM");
	set_name	(0X10003B2C,	"amc_sem");
	create_byte	(0X10003B5B);
	create_byte	(0X10003B94);
	create_byte	(0X10003B95);
	create_byte	(0X10003B96);
	create_byte	(0X10003BAD);
	create_byte	(0X10003BAE);
	create_byte	(0X10003BAF);
	create_dword	(0X10003D02);
	create_word	(0X10003D06);
	create_word	(0X10003D08);
	create_byte	(0X10003D0A);
	create_byte	(0X10003D0B);
	create_byte	(0X10003D0C);
	create_byte	(0X10003D0D);
	create_byte	(0X10003D0E);
	create_byte	(0X10003D0F);
	create_dword	(0X10003D10);
	create_dword	(0X10003D14);
	create_word	(0X10003D18);
	create_word	(0X10003D1A);
	create_word	(0X10003D1C);
	create_word	(0X10003D1E);
	create_byte	(0X10003D20);
	create_word	(0X10003D21);
	create_dword	(0X10003D95);
	create_word	(0X10003D99);
	create_word	(0X10003D9B);
	create_word	(0X10003D9D);
	create_word	(0X10003D9F);
	create_word	(0X10003DA1);
	create_byte	(0X10003DA3);
	create_byte	(0X10003DA4);
	create_word	(0X10003DA5);
	create_byte	(0X10003E21);
	create_byte	(0X10003E22);
	create_byte	(0X10003F23);
	create_byte	(0X10003F24);
	create_word	(0X100040C8);
	create_byte	(0X100040DA);
	create_byte	(0X100041D8);
	make_array	(0X100041D8,	0X5);
	set_name	(0X100041D8,	"ofdm_receiver_id");
	create_byte	(0X100041DD);
	create_byte	(0X100041DF);
	create_byte	(0X100041E0);
	make_array	(0X100041E1,	0X3);
	create_dword	(0X100041E4);
	set_name	(0X100041E4,	"transceiver_flags_1A28");
	create_dword	(0X100041E8);
	make_array	(0X100041E8,	0X15);
	create_dword	(0X1000423C);
	create_dword	(0X10004240);
	create_byte	(0X10004244);
	make_array	(0X10004245,	0X3);
	create_dword	(0X10004248);
	create_byte	(0X1000424C);
	make_array	(0X1000424D,	0X3);
	create_dword	(0X10004250);
	create_byte	(0X10004254);
	create_byte	(0X10004255);
	make_array	(0X10004256,	0X2);
	create_dword	(0X10004258);
	create_byte	(0X1000425C);
	create_byte	(0X1000425D);
	create_byte	(0X1000425E);
	create_byte	(0X1000425F);
	create_dword	(0X10004260);
	create_byte	(0X10004264);
	create_byte	(0X10004265);
	create_byte	(0X10004266);
	create_byte	(0X10004267);
	create_dword	(0X10004268);
	create_byte	(0X1000426C);
	set_name	(0X1000426C,	"transciever_attenuation");
	create_byte	(0X1000426D);
	set_name	(0X1000426D,	"tcx_control_attenuation_by_packet");
	create_byte	(0X1000426E);
	set_name	(0X1000426E,	"tcx_control_attenuation_by_unkn1");
	create_byte	(0X1000426F);
	create_dword	(0X10004270);
	create_dword	(0X10004274);
	create_byte	(0X10004278);
	create_word	(0X1000427A);
	create_word	(0X1000427C);
	make_array	(0X1000427E,	0X2);
	create_dword	(0X10004280);
	set_name	(0X10004280,	"tcx_dword_33C0");
	create_dword	(0X10004284);
	create_byte	(0X10004288);
	create_byte	(0X10004289);
	create_byte	(0X1000428A);
	create_byte	(0X1000428B);
	create_byte	(0X1000428C);
	create_byte	(0X1000428D);
	create_byte	(0X1000428E);
	create_byte	(0X1000428F);
	create_byte	(0X10004290);
	create_byte	(0X10004291);
	create_byte	(0X10004292);
	create_byte	(0X10004293);
	create_byte	(0X10004294);
	create_byte	(0X10004295);
	create_byte	(0X10004296);
	create_byte	(0X10004297);
	create_byte	(0X10004298);
	create_byte	(0X10004299);
	create_byte	(0X1000429A);
	create_byte	(0X1000429B);
	create_byte	(0X1000429C);
	create_byte	(0X1000429D);
	create_byte	(0X1000429E);
	create_byte	(0X1000429F);
	create_byte	(0X100042A0);
	create_byte	(0X100042AD);
	make_array	(0X100042AD,	0X23);
	create_byte	(0X100042D0);
	make_array	(0X100042D0,	0X51);
	create_byte	(0X10004321);
	create_dword	(0X1000432D);
	create_byte	(0X10004341);
	make_array	(0X10004341,	0X20);
	set_name	(0X10004341,	"sweep_frequency");
	create_byte	(0X10004361);
	make_array	(0X10004361,	0XA0);
	create_byte	(0X10004401);
	create_byte	(0X1000440D);
	create_byte	(0X10004421);
	create_byte	(0X10004441);
	create_byte	(0X10004462);
	create_byte	(0X10004463);
	create_dword	(0X10004464);
	create_byte	(0X10004468);
	create_byte	(0X1000446F);
	create_byte	(0X10004471);
	create_byte	(0X10004475);
	create_byte	(0X1000447D);
	make_array	(0X1000447E,	0X2);
	create_byte	(0X10004480);
	create_byte	(0X10004481);
	create_byte	(0X10004482);
	create_byte	(0X10004483);
	create_byte	(0X10004484);
	create_byte	(0X10004566);
	set_name	(0X10004566,	"timec_HOUR");
	create_byte	(0X1000457C);
	create_byte	(0X1000457D);
	set_name	(0X1000457D,	"timec_MIN");
	create_byte	(0X1000457E);
	set_name	(0X1000457E,	"timec_SEC");
	create_word	(0X10004580);
	set_name	(0X10004580,	"timec_YEAR");
	create_byte	(0X10004582);
	set_name	(0X10004582,	"timec_MONTH");
	create_byte	(0X10004583);
	set_name	(0X10004583,	"timec_DOM");
	create_dword	(0X10004584);
	create_dword	(0X10004588);
	create_dword	(0X1000458C);
	create_dword	(0X10004590);
	create_byte	(0X10004594);
	make_array	(0X10004595,	0X3);
	create_dword	(0X10004598);
	create_dword	(0X1000459C);
	create_dword	(0X100045A0);
	set_name	(0X100045A0,	"AFTable");
	create_byte	(0X100045A4);
	make_array	(0X100045A5,	0X3);
	create_dword	(0X100045A8);
	create_byte	(0X100045AC);
	make_array	(0X100045AD,	0X3);
	create_dword	(0X100045B0);
	create_byte	(0X100045B4);
	make_array	(0X100045B5,	0X3);
	create_dword	(0X100045B8);
	create_byte	(0X100045BC);
	make_array	(0X100045BD,	0X3);
	create_dword	(0X100045C0);
	create_byte	(0X100045C4);
	make_array	(0X100045C5,	0X3);
	create_byte	(0X100045C8);
	set_name	(0X100045C8,	"SFF_Table");
	create_byte	(0X100045C9);
	create_word	(0X100045CA);
	create_byte	(0X100045CC);
	create_byte	(0X100045CD);
	create_word	(0X100045CE);
	create_byte	(0X100045D0);
	create_byte	(0X100045D1);
	create_word	(0X100045D2);
	create_byte	(0X100045D4);
	make_array	(0X100045D4,	0X34);
	create_dword	(0X10004608);
	create_dword	(0X1000460C);
	create_dword	(0X10004610);
	create_dword	(0X10004614);
	create_dword	(0X10004618);
	make_array	(0X10004618,	0X3B1);
	set_name	(0X10004618,	"IRQ_Handler_Table");
	MakeStruct	(0X100054DC,	"OS_TICK_SPOKE");
	make_array	(0X100054DC,	0X11);
	set_name	(0X100054DC,	"OSCfg_TickWheel");
	MakeStruct	(0X10005614,	"OS_RDY_LIST");
	make_array	(0X10005614,	0X1E);
	set_name	(0X10005614,	"OSRdyList");
	MakeStruct	(0X1000577C,	"OS_TCB");
	set_name	(0X1000577C,	"OSTickTaskTCB");
	create_byte	(0X100058AC);
	create_byte	(0X100058AD);
	create_byte	(0X100058AE);
	create_byte	(0X100058AF);
	create_byte	(0X100058B0);
	create_byte	(0X100058B1);
	create_byte	(0X100058B2);
	create_byte	(0X100058B3);
	create_byte	(0X100058B4);
	create_byte	(0X100058B5);
	create_byte	(0X100058B6);
	create_byte	(0X100058B7);
	create_byte	(0X100058B8);
	create_byte	(0X100058B9);
	create_byte	(0X100058BA);
	create_byte	(0X100058BB);
	create_byte	(0X100058BC);
	create_byte	(0X100058BD);
	create_byte	(0X100058BE);
	create_byte	(0X100058BF);
	create_byte	(0X100058C0);
	create_byte	(0X100058C1);
	create_byte	(0X100058C2);
	create_byte	(0X100058C3);
	create_byte	(0X100058C4);
	create_byte	(0X100058C5);
	create_byte	(0X100058C6);
	create_byte	(0X100058C7);
	create_byte	(0X100058C8);
	create_byte	(0X100058C9);
	create_byte	(0X100058CA);
	create_byte	(0X100058CB);
	create_byte	(0X100058CC);
	create_byte	(0X100058CD);
	create_byte	(0X100058CE);
	create_byte	(0X100058CF);
	create_byte	(0X100058D0);
	create_byte	(0X100058D1);
	create_byte	(0X100058D2);
	create_byte	(0X100058D3);
	create_byte	(0X100058D4);
	create_byte	(0X100058D5);
	create_byte	(0X100058D6);
	create_byte	(0X100058D7);
	create_byte	(0X100058D8);
	create_byte	(0X100058D9);
	create_dword	(0X100058FE);
	create_byte	(0X10005902);
	create_byte	(0X10005905);
	create_dword	(0X10005907);
	create_dword	(0X10005915);
	create_dword	(0X10005919);
	create_dword	(0X1000591D);
	create_byte	(0X10005921);
	create_word	(0X10005922);
	create_byte	(0X10005924);
	create_byte	(0X10005925);
	create_byte	(0X10005926);
	create_byte	(0X10005927);
	create_byte	(0X10005928);
	create_dword	(0X100059E8);
	create_dword	(0X100059EC);
	create_dword	(0X10005BF0);
	create_dword	(0X10005BF4);
	create_dword	(0X10005EF8);
	create_dword	(0X10005F04);
	create_dword	(0X10005F0C);
	create_dword	(0X10005F20);
	make_array	(0X10005F24,	0XC);
	create_dword	(0X10005F30);
	create_dword	(0X10006120);
	create_dword	(0X10006124);
	create_dword	(0X10006128);
	create_dword	(0X1000612C);
	create_dword	(0X10006130);
	create_dword	(0X10006134);
	create_dword	(0X10006138);
	create_dword	(0X10006740);
	create_dword	(0X10006744);
	create_dword	(0X10006748);
	create_dword	(0X1000674C);
	create_dword	(0X10006750);
	create_dword	(0X10006754);
	create_dword	(0X10006758);
	make_array	(0X1000675C,	0X4);
	create_dword	(0X10006760);
	create_dword	(0X10006764);
	create_dword	(0X10006768);
	create_dword	(0X100067F0);
	create_dword	(0X100067F4);
	create_dword	(0X100067F8);
	create_dword	(0X100067FC);
	create_dword	(0X10006840);
	create_dword	(0X10006844);
	create_dword	(0X10006848);
	make_array	(0X1000684C,	0X4);
	create_dword	(0X10006850);
	create_dword	(0X10006854);
	create_dword	(0X10006858);
	create_dword	(0X1000685C);
	create_dword	(0X10006A60);
	create_dword	(0X10006A64);
	create_dword	(0X10006A68);
	make_array	(0X10006A6C,	0X4);
	create_dword	(0X10006A70);
	create_dword	(0X10006A74);
	create_dword	(0X10006A78);
	create_dword	(0X10006A7C);
	create_byte	(0X10006E80);
	make_array	(0X10006E81,	0X7F);
	set_name	(0X10007F60,	"__initial_sp");
	create_dword	(0X10007F70);
	create_dword	(0X10007F74);
	make_array	(0X10007F78,	0X88);
	set_cmt	(0X40000000,	"LPC_WDT_BASE",	1);
	create_byte	(0X40000000);
	set_name	(0X40000000,	"LPC_WDT");
	make_array	(0X40000001,	0X3);
	create_dword	(0X40000004);
	create_byte	(0X40000008);
	make_array	(0X40000009,	0X3);
	create_dword	(0X4000000C);
	create_dword	(0X40000010);
	create_byte	(0X40000014);
	make_array	(0X40000014,	0X3FEC);
	set_cmt	(0X40004000,	"LPC_TIM0_BASE",	1);
	create_dword	(0X40004000);
	set_name	(0X40004000,	"LPC_TIM0");
	create_dword	(0X40004004);
	create_dword	(0X40004008);
	create_dword	(0X4000400C);
	create_dword	(0X40004014);
	create_dword	(0X40004018);
	create_dword	(0X4000401C);
	create_dword	(0X40004020);
	create_dword	(0X40004070);
	create_byte	(0X40004074);
	make_array	(0X40004074,	0X3F8C);
	set_cmt	(0X40008000,	"LPC_TIM1_BASE",	1);
	create_dword	(0X40008000);
	set_name	(0X40008000,	"LPC_TIM1");
	create_dword	(0X40008004);
	create_dword	(0X40008008);
	create_dword	(0X4000800C);
	create_dword	(0X40008014);
	create_dword	(0X40008018);
	create_dword	(0X4000801C);
	create_dword	(0X40008020);
	create_dword	(0X40008024);
	create_dword	(0X40008070);
	create_byte	(0X40008074);
	make_array	(0X40008074,	0X3F8C);
	set_cmt	(0X4000C000,	"LPC_UART0_BASE",	1);
	create_byte	(0X4000C000);
	set_name	(0X4000C000,	"LPC_UART0");
	make_array	(0X4000C001,	0X3);
	create_dword	(0X4000C004);
	create_dword	(0X4000C008);
	create_byte	(0X4000C00C);
	create_byte	(0X4000C014);
	create_byte	(0X4000C028);
	create_byte	(0X4000C059);
	make_array	(0X4000C059,	0X3FA7);
	set_cmt	(0X40010000,	"LPC_UART1_BASE",	1);
	create_byte	(0X40010000);
	set_name	(0X40010000,	"LPC_UART1");
	make_array	(0X40010001,	0X3);
	create_dword	(0X40010004);
	create_dword	(0X40010008);
	create_byte	(0X4001000C);
	create_byte	(0X40010014);
	create_dword	(0X40010028);
	create_byte	(0X40010059);
	make_array	(0X40010059,	0X7FA7);
	set_cmt	(0X40018000,	"LPC_PWM1_BASE",	1);
	MakeStruct	(0X40018000,	"LPC_PWM_TypeDef");
	set_name	(0X40018000,	"LPC_PWM1");
	create_byte	(0X40018074);
	make_array	(0X40018074,	0X3F8C);
	set_cmt	(0X4001C000,	"LPC_I2C0_BASE",	1);
	MakeStruct	(0X4001C000,	"LPC_I2C_TypeDef");
	set_name	(0X4001C000,	"LPC_I2C0");
	create_byte	(0X4001C040);
	make_array	(0X4001C040,	0X3FC0);
	set_cmt	(0X40020000,	"LPC_SPI_BASE",	1);
	MakeStruct	(0X40020000,	"LPC_SPI_TypeDef");
	set_name	(0X40020000,	"LPC_SPI");
	create_byte	(0X40020020);
	make_array	(0X40020020,	0X3FE0);
	set_cmt	(0X40024000,	"LPC_RTC_BASE",	1);
	MakeStruct	(0X40024000,	"LPC_RTC_TypeDef");
	set_name	(0X40024000,	"LPC_RTC");
	create_byte	(0X400240AC);
	make_array	(0X400240AC,	0X3F54);
	create_byte	(0X40028000);
	make_array	(0X40028000,	0X80);
	set_cmt	(0X40028080,	"LPC_GPIOINT_BASE",	1);
	set_name	(0X40028080,	"LPC_GPIOINT");
	create_dword	(0X400280AC);
	create_dword	(0X400280B4);
	create_byte	(0X400280B8);
	make_array	(0X400280B8,	0X3F48);
	set_cmt	(0X4002C000,	"LPC_PINCON_BASE",	1);
	create_dword	(0X4002C000);
	set_name	(0X4002C000,	"LPC_PINCON");
	create_dword	(0X4002C004);
	create_dword	(0X4002C00C);
	create_dword	(0X4002C010);
	make_array	(0X4002C014,	0X2C);
	create_dword	(0X4002C040);
	create_byte	(0X4002C080);
	make_array	(0X4002C080,	0X18FC);
	create_byte	(0X4002D97C);
	make_array	(0X4002D97C,	0X2684);
	set_cmt	(0X40030000,	"LPC_SSP1_BASE",	1);
	MakeStruct	(0X40030000,	"LPC_SSP_TypeDef");
	set_name	(0X40030000,	"LPC_SSP1");
	create_byte	(0X40030028);
	make_array	(0X40030028,	0X3FD8);
	set_cmt	(0X40034000,	"LPC_ADC_BASE",	1);
	MakeStruct	(0X40034000,	"LPC_ADC_TypeDef");
	set_name	(0X40034000,	"LPC_ADC");
	create_byte	(0X40034038);
	make_array	(0X40034038,	0X2FC8);
	create_byte	(0X40037000);
	make_array	(0X40037000,	0X1000);
	set_cmt	(0X40038000,	"LPC_CANAF_RAM_BASE",	1);
	MakeStruct	(0X40038000,	"LPC_CANAF_RAM_TypeDef");
	set_name	(0X40038000,	"LPC_CANAF_RAM");
	create_byte	(0X40038800);
	make_array	(0X40038800,	0X3800);
	set_cmt	(0X4003C000,	"LPC_CANAF_BASE",	1);
	create_dword	(0X4003C000);
	set_name	(0X4003C000,	"LPC_CANAF");
	create_dword	(0X4003C004);
	create_dword	(0X4003C008);
	create_dword	(0X4003C00C);
	create_dword	(0X4003C010);
	create_dword	(0X4003C014);
	create_byte	(0X4003C02C);
	make_array	(0X4003C02C,	0X3FD4);
	set_cmt	(0X40040000,	"LPC_CANCR_BASE",	1);
	MakeStruct	(0X40040000,	"LPC_CANCR_TypeDef");
	set_name	(0X40040000,	"LPC_CANCR");
	create_byte	(0X4004000C);
	make_array	(0X4004000C,	0X3FF4);
	set_cmt	(0X40044000,	"LPC_CAN1_BASE",	1);
	create_dword	(0X40044000);
	set_name	(0X40044000,	"LPC_CAN1");
	create_dword	(0X40044004);
	create_dword	(0X40044008);
	create_dword	(0X4004400C);
	create_dword	(0X40044010);
	create_byte	(0X40044060);
	make_array	(0X40044060,	0X3FA0);
	set_cmt	(0X40048000,	"LPC_CAN2_BASE",	1);
	MakeStruct	(0X40048000,	"LPC_CAN_TypeDef");
	set_name	(0X40048000,	"LPC_CAN2");
	create_byte	(0X40048060);
	make_array	(0X40048060,	0X7FA0);
	set_cmt	(0XE0000000,	"ITM_BASE - ITM Base Address",	1);
	MakeStruct	(0XE0000000,	"ITM_Type");
	set_name	(0XE0000000,	"ITM");
	create_byte	(0XE0000E84);
	make_array	(0XE0000E84,	0X17C);
	set_cmt	(0XE0001000,	"DWT_BASE - DWT Base Address",	1);
	create_dword	(0XE0001000);
	set_name	(0XE0001000,	"pTMR__field0or1");
	create_dword	(0XE0001004);
	set_name	(0XE0001004,	"pTMR__TC");
	create_byte	(0XE0001008);
	make_array	(0XE0001008,	0XCFF8);
	set_cmt	(0XE000E000,	"SCS_BASE - System Control Space Base Address",	1);
	set_name	(0XE000E000,	"SCnSCB");
	create_dword	(0XE000E004);
	make_array	(0XE000E008,	0X8);
	create_dword	(0XE000E010);
	set_name	(0XE000E010,	"SysTick");
	create_dword	(0XE000E014);
	create_byte	(0XE000E020);
	make_array	(0XE000E020,	0XE0);
	MakeStruct	(0XE000E100,	"NVIC_Type");
	set_name	(0XE000E100,	"NVIC");
	set_name	(0XE000ED00,	"SCB");
	create_dword	(0XE000ED04);
	make_array	(0XE000ED08,	0X8);
	create_dword	(0XE000ED10);
	make_array	(0XE000ED14,	0X4);
	create_dword	(0XE000ED18);
	create_dword	(0XE000ED1C);
	create_dword	(0XE000ED20);
	create_dword	(0XE000ED24);
	create_byte	(0XE000ED8C);
	make_array	(0XE000ED8C,	0X64);
	set_name	(0XE000EDF0,	"CoreDebug");
	create_dword	(0XE000EDFC);
	create_byte	(0XE000EE00);
	make_array	(0XE000EE00,	0X1200);
}

static Functions_0(void) {

	add_func    (0XA180,0XA210);
	set_func_flags(0XA180,0x400);
	add_func    (0XA210,0XA230);
	set_func_flags(0XA210,0x400);
	set_frame_size(0XA210, 0X18, 0, 0);
	add_func    (0XA230,0XA234);
	set_func_flags(0XA230,0x400);
	set_frame_size(0XA230, 0X8, 0, 0);
	add_func    (0XA248,0XA254);
	set_func_flags(0XA248,0x401);
	set_frame_size(0XA248, 0X8, 0, 0);
	add_func    (0XA254,0XA28A);
	set_func_flags(0XA254,0x400);
	set_frame_size(0XA254, 0X90, 0, 0);
	add_func    (0XA28A,0XA396);
	set_func_flags(0XA28A,0x400);
	set_frame_size(0XA28A, 0X18, 0, 0);
	add_func    (0XA396,0XA5AE);
	set_func_flags(0XA396,0x400);
	set_frame_size(0XA396, 0X38, 0, 0);
	add_func    (0XA5B0,0XA634);
	set_func_flags(0XA5B0,0x400);
	set_frame_size(0XA5B0, 0X10, 0, 0);
	add_func    (0XA634,0XA63C);
	set_func_flags(0XA634,0x400);
	add_func    (0XA674,0XA750);
	set_func_flags(0XA674,0x400);
	set_frame_size(0XA674, 0X8, 0, 0);
	add_func    (0XA750,0XA798);
	set_func_flags(0XA750,0x400);
	set_frame_size(0XA750, 0X8, 0, 0);
	add_func    (0XA798,0XACFA);
	set_func_flags(0XA798,0x401);
	set_frame_size(0XA798, 0X40, 0, 0);
	define_local_var(0XA798, 0XACFA, "[bp-0X38]", "stk_limit");
	define_local_var(0XA798, 0XACFA, "[bp-0X30]", "q_size");
	define_local_var(0XA798, 0XACFA, "[bp-0X2C]", "time_quanta");
	define_local_var(0XA798, 0XACFA, "[bp-0X28]", "p_ext");
	define_local_var(0XA798, 0XACFA, "[bp-0X10]", "p_err");
	add_func    (0XACFA,0XAE18);
	set_func_flags(0XACFA,0x400);
	set_frame_size(0XACFA, 0X40, 0, 0);
	define_local_var(0XACFA, 0XAE18, "[bp-0X30]", "q_size");
	define_local_var(0XACFA, 0XAE18, "[bp-0X2C]", "time_quanta");
	define_local_var(0XACFA, 0XAE18, "[bp-0X28]", "p_ext");
	define_local_var(0XACFA, 0XAE18, "[bp-0X1C]", "p_err");
	add_func    (0XAE50,0XAE84);
	set_func_flags(0XAE50,0x400);
	add_func    (0XAE84,0XAEB8);
	set_func_flags(0XAE84,0x400);
	add_func    (0XAEB8,0XAEEC);
	set_func_flags(0XAEB8,0x400);
	add_func    (0XAEEC,0XAF00);
	set_func_flags(0XAEEC,0x400);
	add_func    (0XAF00,0XAF14);
	set_func_flags(0XAF00,0x400);
	add_func    (0XAF14,0XAF28);
	set_func_flags(0XAF14,0x400);
	add_func    (0XAF28,0XAF68);
	set_func_flags(0XAF28,0x400);
	add_func    (0XAF68,0XAFDE);
	set_func_flags(0XAF68,0x400);
	set_frame_size(0XAF68, 0XC, 0, 0);
	add_func    (0XAFDE,0XB0F0);
	set_func_flags(0XAFDE,0x400);
	set_frame_size(0XAFDE, 0X10, 0, 0);
	add_func    (0XB0F0,0XB162);
	set_func_flags(0XB0F0,0x400);
	set_frame_size(0XB0F0, 0X8, 0, 0);
	add_func    (0XB162,0XB19C);
	set_func_flags(0XB162,0x400);
	set_frame_size(0XB162, 0X4, 0, 0);
	add_func    (0XB19C,0XB20A);
	set_func_flags(0XB19C,0x400);
	set_frame_size(0XB19C, 0X10, 0, 0);
	add_func    (0XB20A,0XB226);
	set_func_flags(0XB20A,0x400);
	add_func    (0XB226,0XB352);
	set_func_flags(0XB226,0x400);
	set_frame_size(0XB226, 0X20, 0, 0);
	define_local_var(0XB226, 0XB352, "[bp-0X18]", "payload_buf");
	add_func    (0XB352,0XB3E6);
	set_func_flags(0XB352,0x400);
	set_frame_size(0XB352, 0X14, 0, 0);
	add_func    (0XB3E6,0XB414);
	set_func_flags(0XB3E6,0x400);
	add_func    (0XB414,0XB49C);
	set_func_flags(0XB414,0x400);
	set_frame_size(0XB414, 0X10, 0, 0);
	add_func    (0XB49C,0XB7DA);
	set_func_flags(0XB49C,0x400);
	set_frame_size(0XB49C, 0X28, 0, 0);
	add_func    (0XB7DA,0XB7E6);
	set_func_flags(0XB7DA,0x400);
	add_func    (0XB7E6,0XBBA6);
	set_func_flags(0XB7E6,0x400);
	set_frame_size(0XB7E6, 0X20, 0, 0);
	add_func    (0XBBA6,0XBC44);
	set_func_flags(0XBBA6,0x400);
	set_frame_size(0XBBA6, 0X10, 0, 0);
	add_func    (0XBC44,0XBD7E);
	set_func_flags(0XBC44,0x400);
	set_frame_size(0XBC44, 0X1C, 0, 0);
	add_func    (0XBD7E,0XBDD8);
	set_func_flags(0XBD7E,0x400);
	set_frame_size(0XBD7E, 0X4, 0, 0);
	add_func    (0XBDD8,0XBF6C);
	set_func_flags(0XBDD8,0x400);
	set_frame_size(0XBDD8, 0X18, 0, 0);
	add_func    (0XBF6C,0XC078);
	set_func_flags(0XBF6C,0x400);
	set_frame_size(0XBF6C, 0X8, 0, 0);
	add_func    (0XC078,0XC110);
	set_func_flags(0XC078,0x400);
	set_frame_size(0XC078, 0X10, 0, 0);
	add_func    (0XC110,0XC1F8);
	set_func_flags(0XC110,0x400);
	set_frame_size(0XC110, 0X20, 0, 0);
	define_local_var(0XC110, 0XC1F8, "[bp-0X18]", "payload_buf");
	add_func    (0XC1F8,0XC266);
	set_func_flags(0XC1F8,0x400);
	set_frame_size(0XC1F8, 0X8, 0, 0);
	add_func    (0XC266,0XC316);
	set_func_flags(0XC266,0x400);
	set_frame_size(0XC266, 0X18, 0, 0);
	add_func    (0XC316,0XC442);
	set_func_flags(0XC316,0x400);
	set_frame_size(0XC316, 0X24, 0, 0);
	add_func    (0XC442,0XC5A6);
	set_func_flags(0XC442,0x401);
	SetType(0XC442, "void __cdecl task_LEDBELL_worker(void *dtptr);");
	set_frame_size(0XC442, 0X10, 0, 0);
	define_local_var(0XC442, 0XC5A6, "[bp-0X8]", "p_err");
	add_func    (0XC5D8,0XC76A);
	set_func_flags(0XC5D8,0x400);
	set_frame_size(0XC5D8, 0X38, 0, 0);
	add_func    (0XC76A,0XC788);
	set_func_flags(0XC76A,0x400);
	SetType(0XC76A, "void __fastcall cmd_exec_set08_cmd02(struct DjiPacket *pkt);");
	add_func    (0XC788,0XC7C2);
	set_func_flags(0XC788,0x400);
	SetType(0XC788, "void __fastcall cmd_exec_set08_cmd0E(struct DjiPacket *pkt);");
	set_frame_size(0XC788, 0X10, 0, 0);
	add_func    (0XC7C2,0XC7DE);
	set_func_flags(0XC7C2,0x400);
	SetType(0XC7C2, "void __fastcall cmd_exec_set09_cmd15(struct DjiPacket *pkt);");
	add_func    (0XC7DE,0XC832);
	set_func_flags(0XC7DE,0x400);
	SetType(0XC7DE, "int __fastcall packet_send(struct DjiPacket *pkt);");
	add_func    (0XC832,0XC8C2);
	set_func_flags(0XC832,0x400);
	SetType(0XC832, "int __fastcall packet_prepare_response(struct DjiPacket *inpkt, void *payload_buf, int payload_len, struct DjiPacket *outpkt);");
	set_frame_size(0XC832, 0X18, 0, 0);
	add_func    (0XC8C2,0XC9B4);
	set_func_flags(0XC8C2,0x400);
	SetType(0XC8C2, "void __fastcall cmd_exec_set09_cmd14(struct DjiPacket *pkt);");
	set_frame_size(0XC8C2, 0X30, 0, 0);
	define_local_var(0XC8C2, 0XC9B4, "[bp-0X20]", "pkt");
	add_func    (0XC9B4,0XCA6C);
	set_func_flags(0XC9B4,0x400);
	SetType(0XC9B4, "void __fastcall cmd_exec_set09_cmd13(struct DjiPacket *pkt);");
	set_frame_size(0XC9B4, 0X28, 0, 0);
	define_local_var(0XC9B4, 0XCA6C, "[bp-0X28]", "res_payload");
	define_local_var(0XC9B4, 0XCA6C, "[bp-0X20]", "res_pkt");
	add_func    (0XCA6C,0XCADC);
	set_func_flags(0XCA6C,0x400);
	SetType(0XCA6C, "void __fastcall cmd_exec_set09_cmd12(struct DjiPacketS09C12 *pkt);");
	set_frame_size(0XCA6C, 0X20, 0, 0);
	define_local_var(0XCA6C, 0XCADC, "[bp-0X10]", "pkt");
	add_func    (0XCADC,0XCB10);
	set_func_flags(0XCADC,0x400);
	SetType(0XCADC, "void __fastcall cmd_exec_set09_cmd10(struct DjiPacket *pkt);");
	set_frame_size(0XCADC, 0X18, 0, 0);
	define_local_var(0XCADC, 0XCB10, "[bp-0X8]", "pkt");
	add_func    (0XCB10,0XCBCA);
	set_func_flags(0XCB10,0x400);
	SetType(0XCB10, "void __fastcall cmd_exec_set09_cmd0D(struct DjiPacket *pkt);");
	set_frame_size(0XCB10, 0X28, 0, 0);
	define_local_var(0XCB10, 0XCBCA, "[bp-0X24]", "a4");
	add_func    (0XCBCA,0XCC22);
	set_func_flags(0XCBCA,0x400);
	SetType(0XCBCA, "void __fastcall cmd_exec_set09_cmd0C(struct DjiPacket *pkt);");
	set_frame_size(0XCBCA, 0X30, 0, 0);
	define_local_var(0XCBCA, 0XCC22, "[bp-0X20]", "a4");
	add_func    (0XCC22,0XCC54);
	set_func_flags(0XCC22,0x400);
	SetType(0XCC22, "void __fastcall cmd_exec_set09_cmd09(struct DjiPacket *pkt);");
	set_frame_size(0XCC22, 0X18, 0, 0);
	define_local_var(0XCC22, 0XCC54, "[bp-0X8]", "param_buf");
	add_func    (0XCC54,0XCC94);
	set_func_flags(0XCC54,0x400);
	SetType(0XCC54, "void __fastcall cmd_exec_set09_cmd07(struct DjiPacket *pkt);");
	set_frame_size(0XCC54, 0X20, 0, 0);
	define_local_var(0XCC54, 0XCC94, "[bp-0X10]", "param_buf");
	add_func    (0XCC94,0XCCD0);
	set_func_flags(0XCC94,0x400);
	SetType(0XCC94, "void __fastcall cmd_exec_set09_cmd06(struct DjiPacket *pkt);");
	set_frame_size(0XCC94, 0X20, 0, 0);
	define_local_var(0XCC94, 0XCCD0, "[bp-0X20]", "respkt");
	define_local_var(0XCC94, 0XCCD0, "[bp-0X10]", "payload_buf");
	add_func    (0XCCD0,0XCD0A);
	set_func_flags(0XCCD0,0x400);
	SetType(0XCCD0, "void __fastcall cmd_exec_set09_cmd05(struct DjiPacket *pkt);");
	set_frame_size(0XCCD0, 0X20, 0, 0);
	add_func    (0XCD0A,0XCD44);
	set_func_flags(0XCD0A,0x400);
	SetType(0XCD0A, "void __fastcall cmd_exec_set09_cmd04(struct DjiPacket *pkt);");
	set_frame_size(0XCD0A, 0X20, 0, 0);
	define_local_var(0XCD0A, 0XCD44, "[bp-0X10]", "param_buf");
	add_func    (0XCD44,0XCD46);
	set_func_flags(0XCD44,0x400);
	SetType(0XCD44, "void dbg_printf(int lev, const char *fmt, ...);");
	add_func    (0XCD46,0XCDFA);
	set_func_flags(0XCD46,0x400);
	SetType(0XCD46, "int __fastcall packet_prepare_from(uint8_t sender, uint8_t receiver, uint8_t ack, uint8_t smdset, uint8_t cmd, int *payload_buf, unsigned int payload_len, struct DjiPacket *opkt);");
	set_frame_size(0XCD46, 0X28, 0, 0);
	define_local_var(0XCD46, 0XCDFA, "[bp+0]", "a5");
	define_local_var(0XCD46, 0XCDFA, "[bp+0X4]", "param_buf");
	define_local_var(0XCD46, 0XCDFA, "[bp+0X8]", "a7");
	define_local_var(0XCD46, 0XCDFA, "[bp+0XC]", "a8");
	add_func    (0XCDFA,0XCE94);
	set_func_flags(0XCDFA,0x400);
	set_frame_size(0XCDFA, 0X28, 0, 0);
	add_func    (0XCE94,0XCF8A);
	set_func_flags(0XCE94,0x400);
	SetType(0XCE94, "void __fastcall cmd_exec_set09_cmd00(struct DjiPacket *pkt);");
	set_frame_size(0XCE94, 0X140, 0, 0);
	add_func    (0XCF8A,0XCFA4);
	set_func_flags(0XCF8A,0x400);
	SetType(0XCF8A, "void __fastcall cmd_exec_set06_cmd41(struct DjiPacket *pkt);");
	add_func    (0XCFA4,0XCFE0);
	set_func_flags(0XCFA4,0x400);
	SetType(0XCFA4, "void __fastcall cmd_exec_set06_cmdFD(struct DjiPacket *pkt);");
	set_frame_size(0XCFA4, 0X18, 0, 0);
	define_local_var(0XCFA4, 0XCFE0, "[bp-0X8]", "param_buf");
	add_func    (0XCFE0,0XD2F2);
	set_func_flags(0XCFE0,0x400);
	SetType(0XCFE0, "void __fastcall cmd_exec_set06_cmdF0(struct DjiPacket *pkt);");
	set_frame_size(0XCFE0, 0X40, 0, 0);
	define_local_var(0XCFE0, 0XD2F2, "[bp-0X40]", "respayld");
	define_local_var(0XCFE0, 0XD2F2, "[bp-0X38]", "respkt");
	add_func    (0XD2F2,0XD34A);
	set_func_flags(0XD2F2,0x400);
	SetType(0XD2F2, "void __fastcall cmd_exec_set06_cmd3C(struct DjiPacket *pkt);");
	set_frame_size(0XD2F2, 0X20, 0, 0);
	define_local_var(0XD2F2, 0XD34A, "[bp-0X1C]", "a4");
	add_func    (0XD34A,0XD388);
	set_func_flags(0XD34A,0x400);
	SetType(0XD34A, "void __fastcall cmd_exec_set06_cmd3B(struct DjiPacket *pkt);");
	set_frame_size(0XD34A, 0X18, 0, 0);
	define_local_var(0XD34A, 0XD388, "[bp-0X8]", "param_buf");
	add_func    (0XD388,0XD3F8);
	set_func_flags(0XD388,0x400);
	SetType(0XD388, "void __fastcall cmd_exec_set06_cmd38(struct DjiPacket *pkt);");
	set_frame_size(0XD388, 0X50, 0, 0);
	define_local_var(0XD388, 0XD3F8, "[bp-0X30]", "a4");
	add_func    (0XD3F8,0XD42E);
	set_func_flags(0XD3F8,0x400);
	SetType(0XD3F8, "void __fastcall cmd_exec_set06_cmd36(struct DjiPacket *pkt);");
	set_frame_size(0XD3F8, 0X18, 0, 0);
	define_local_var(0XD3F8, 0XD42E, "[bp-0X8]", "param_buf");
	add_func    (0XD42E,0XD46C);
	set_func_flags(0XD42E,0x400);
	SetType(0XD42E, "void __fastcall cmd_exec_set06_cmd35(struct DjiPacket *pkt);");
	set_frame_size(0XD42E, 0X18, 0, 0);
	define_local_var(0XD42E, 0XD46C, "[bp-0X8]", "param_buf");
	add_func    (0XD46C,0XD4A4);
	set_func_flags(0XD46C,0x400);
	SetType(0XD46C, "void __fastcall cmd_exec_set06_cmd34(struct DjiPacket *pkt);");
	set_frame_size(0XD46C, 0X18, 0, 0);
	define_local_var(0XD46C, 0XD4A4, "[bp-0X8]", "param_buf");
	add_func    (0XD4A4,0XD4E4);
	set_func_flags(0XD4A4,0x400);
	SetType(0XD4A4, "void __fastcall cmd_exec_set06_cmd33(struct DjiPacket *pkt);");
	set_frame_size(0XD4A4, 0X18, 0, 0);
	define_local_var(0XD4A4, 0XD4E4, "[bp-0X8]", "param_buf");
	add_func    (0XD4E4,0XD542);
	set_func_flags(0XD4E4,0x400);
	SetType(0XD4E4, "void __fastcall cmd_exec_set06_cmd32(struct DjiPacket *pkt);");
	set_frame_size(0XD4E4, 0X28, 0, 0);
	define_local_var(0XD4E4, 0XD542, "[bp-0X20]", "a4");
	add_func    (0XD542,0XD614);
	set_func_flags(0XD542,0x400);
	SetType(0XD542, "void __fastcall cmd_exec_set06_cmd31(struct DjiPacket *pkt);");
	set_frame_size(0XD542, 0X30, 0, 0);
	define_local_var(0XD542, 0XD614, "[bp-0X20]", "param_buf");
	add_func    (0XD614,0XD654);
	set_func_flags(0XD614,0x400);
	SetType(0XD614, "void __fastcall cmd_exec_set06_cmd30(struct DjiPacket *pkt);");
	set_frame_size(0XD614, 0X60, 0, 0);
	define_local_var(0XD614, 0XD654, "[bp-0X30]", "param_buf");
	add_func    (0XD654,0XD6AC);
	set_func_flags(0XD654,0x400);
	SetType(0XD654, "void __fastcall cmd_exec_set06_cmd2F(struct DjiPacket *pkt);");
	set_frame_size(0XD654, 0X20, 0, 0);
	define_local_var(0XD654, 0XD6AC, "[bp-0X1C]", "a4");
	add_func    (0XD6AC,0XD6EA);
	set_func_flags(0XD6AC,0x400);
	SetType(0XD6AC, "void __fastcall cmd_exec_set06_cmd2E(struct DjiPacket *pkt);");
	set_frame_size(0XD6AC, 0X18, 0, 0);
	define_local_var(0XD6AC, 0XD6EA, "[bp-0X8]", "param_buf");
	add_func    (0XD70C,0XD744);
	set_func_flags(0XD70C,0x400);
	SetType(0XD70C, "void __fastcall cmd_exec_set06_cmd2D(struct DjiPacket *pkt);");
	set_frame_size(0XD70C, 0X18, 0, 0);
	define_local_var(0XD70C, 0XD744, "[bp-0X8]", "param_buf");
	add_func    (0XD744,0XD78A);
	set_func_flags(0XD744,0x400);
	SetType(0XD744, "void __fastcall cmd_exec_set06_cmd2C(struct DjiPacket *pkt);");
	set_frame_size(0XD744, 0X20, 0, 0);
	define_local_var(0XD744, 0XD78A, "[bp-0XC]", "param_buf");
	add_func    (0XD78A,0XD7DC);
	set_func_flags(0XD78A,0x400);
	SetType(0XD78A, "void __fastcall cmd_exec_set06_cmd2B(struct DjiPacket *pkt);");
	set_frame_size(0XD78A, 0X20, 0, 0);
	define_local_var(0XD78A, 0XD7DC, "[bp-0X10]", "param_buf");
	add_func    (0XD7DC,0XD81A);
	set_func_flags(0XD7DC,0x400);
	SetType(0XD7DC, "void __fastcall cmd_exec_set06_cmd2A(struct DjiPacket *pkt);");
	set_frame_size(0XD7DC, 0X20, 0, 0);
	define_local_var(0XD7DC, 0XD81A, "[bp-0XC]", "param_buf");
	add_func    (0XD81A,0XD854);
	set_func_flags(0XD81A,0x400);
	SetType(0XD81A, "void __fastcall cmd_exec_set06_cmd29(struct DjiPacket *pkt);");
	set_frame_size(0XD81A, 0X18, 0, 0);
	define_local_var(0XD81A, 0XD854, "[bp-0X8]", "param_buf");
	add_func    (0XD854,0XD894);
	set_func_flags(0XD854,0x400);
	SetType(0XD854, "void __fastcall cmd_exec_set06_cmd28(struct DjiPacket *pkt);");
	set_frame_size(0XD854, 0X18, 0, 0);
	define_local_var(0XD854, 0XD894, "[bp-0X8]", "param_buf");
	add_func    (0XD894,0XD8DA);
	set_func_flags(0XD894,0x400);
	add_func    (0XD8DA,0XD906);
	set_func_flags(0XD8DA,0x400);
	add_func    (0XD906,0XD92C);
	set_func_flags(0XD906,0x400);
	add_func    (0XD92C,0XD952);
	set_func_flags(0XD92C,0x400);
	add_func    (0XD952,0XD978);
	set_func_flags(0XD952,0x400);
	add_func    (0XD978,0XD99E);
	set_func_flags(0XD978,0x400);
	add_func    (0XD99E,0XD9B8);
	set_func_flags(0XD99E,0x400);
	add_func    (0XD9B8,0XD9D4);
	set_func_flags(0XD9B8,0x400);
	add_func    (0XD9D4,0XD9FC);
	set_func_flags(0XD9D4,0x400);
	add_func    (0XD9FC,0XDBF6);
	set_func_flags(0XD9FC,0x400);
	set_frame_size(0XD9FC, 0X14, 0, 0);
	add_func    (0XDBF6,0XDD32);
	set_func_flags(0XDBF6,0x400);
	SetType(0XDBF6, "void __fastcall cmd_exec_set06_cmd27(struct DjiPacket *pkt);");
	set_frame_size(0XDBF6, 0X78, 0, 0);
	define_local_var(0XDBF6, 0XDD32, "[bp-0X48]", "a4");
	define_local_var(0XDBF6, 0XDD32, "[bp-0XC]", "p_err");
	add_func    (0XDD32,0XDD60);
	set_func_flags(0XDD32,0x400);
	SetType(0XDD32, "void __fastcall cmd_exec_set06_cmd25(struct DjiPacket *pkt);");
	set_frame_size(0XDD32, 0X18, 0, 0);
	define_local_var(0XDD32, 0XDD60, "[bp-0X8]", "param_buf");
	add_func    (0XDD60,0XDDB8);
	set_func_flags(0XDD60,0x400);
	SetType(0XDD60, "void __fastcall cmd_exec_set06_cmd24(struct DjiPacket *pkt);");
	set_frame_size(0XDD60, 0X20, 0, 0);
	define_local_var(0XDD60, 0XDDB8, "[bp-0X10]", "param_buf");
	add_func    (0XDDB8,0XDE00);
	set_func_flags(0XDDB8,0x400);
	SetType(0XDDB8, "void __fastcall cmd_exec_set06_cmd23(struct DjiPacket *pkt);");
	set_frame_size(0XDDB8, 0X28, 0, 0);
	define_local_var(0XDDB8, 0XDE00, "[bp-0X25]", "data_buf");
	define_local_var(0XDDB8, 0XDE00, "[bp-0XC]", "param_buf");
	add_func    (0XDE00,0XDE2A);
	set_func_flags(0XDE00,0x400);
	set_frame_size(0XDE00, 0X28, 0, 0);
	define_local_var(0XDE00, 0XDE2A, "[bp-0X18]", "param_buf");
	define_local_var(0XDE00, 0XDE2A, "[bp-0X14]", "pkt");
	add_func    (0XDE2A,0XDEBA);
	set_func_flags(0XDE2A,0x400);
	SetType(0XDE2A, "void __fastcall cmd_exec_set06_cmd22(struct DjiPacket *pkt);");
	set_frame_size(0XDE2A, 0X40, 0, 0);
	define_local_var(0XDE2A, 0XDEBA, "[bp-0X3D]", "data_buf");
	define_local_var(0XDE2A, 0XDEBA, "[bp-0X24]", "param_buf");
	add_func    (0XDEBA,0XDEE8);
	set_func_flags(0XDEBA,0x400);
	SetType(0XDEBA, "void __cdecl cmd_exec_get_BK5811_fcc_zone(struct DjiPacket *pkt);");
	set_frame_size(0XDEBA, 0X18, 0, 0);
	define_local_var(0XDEBA, 0XDEE8, "[bp-0X18]", "response_pkt");
	define_local_var(0XDEBA, 0XDEE8, "[bp-0X8]", "payload_buf");
	add_func    (0XDEE8,0XDF1A);
	set_func_flags(0XDEE8,0x400);
	SetType(0XDEE8, "void __cdecl cmd_exec_set_BK5811_fcc_zone(struct DjiPacket *pkt);");
	set_func_cmt(0XDEE8,	"set zone command, but only for one chip", 1);
	set_frame_size(0XDEE8, 0X18, 0, 0);
	define_local_var(0XDEE8, 0XDF1A, "[bp-0X18]", "response_pkt");
	define_local_var(0XDEE8, 0XDF1A, "[bp-0X8]", "payload_buf");
	add_func    (0XDF50,0XDF8C);
	set_func_flags(0XDF50,0x400);
	SetType(0XDF50, "void __fastcall cmd_exec_set06_cmd1A(struct DjiPacket *pkt);");
	set_frame_size(0XDF50, 0X20, 0, 0);
	define_local_var(0XDF50, 0XDF8C, "[bp-0XC]", "param_buf");
	add_func    (0XDF8C,0XDFF6);
	set_func_flags(0XDF8C,0x400);
	SetType(0XDF8C, "void __fastcall cmd_exec_set06_cmd19(struct DjiPacket *pkt);");
	set_frame_size(0XDF8C, 0X20, 0, 0);
	define_local_var(0XDF8C, 0XDFF6, "[bp-0X10]", "param_buf");
	add_func    (0XDFF6,0XE01C);
	set_func_flags(0XDFF6,0x400);
	SetType(0XDFF6, "void __fastcall cmd_exec_set06_cmd18(struct DjiPacket *pkt);");
	set_frame_size(0XDFF6, 0X20, 0, 0);
	define_local_var(0XDFF6, 0XE01C, "[bp-0XC]", "param_buf");
	add_func    (0XE01C,0XE086);
	set_func_flags(0XE01C,0x400);
	SetType(0XE01C, "void __fastcall cmd_exec_set06_cmd17(struct DjiPacket *pkt);");
	set_frame_size(0XE01C, 0X28, 0, 0);
	define_local_var(0XE01C, 0XE086, "[bp-0X18]", "param_buf");
	add_func    (0XE086,0XE0D0);
	set_func_flags(0XE086,0x400);
	SetType(0XE086, "void __fastcall cmd_exec_set06_cmd16(struct DjiPacket *pkt);");
	set_frame_size(0XE086, 0X20, 0, 0);
	define_local_var(0XE086, 0XE0D0, "[bp-0X10]", "param_buf");
	add_func    (0XE0D0,0XE14C);
	set_func_flags(0XE0D0,0x400);
	SetType(0XE0D0, "void __fastcall cmd_exec_set06_cmd15(struct DjiPacket *pkt);");
	set_frame_size(0XE0D0, 0X38, 0, 0);
	define_local_var(0XE0D0, 0XE14C, "[bp-0X28]", "param_buf");
	add_func    (0XE14C,0XE1D6);
	set_func_flags(0XE14C,0x400);
	SetType(0XE14C, "void __fastcall cmd_exec_set06_cmd14(struct DjiPacket *pkt);");
	set_frame_size(0XE14C, 0XC0, 0, 0);
	define_local_var(0XE14C, 0XE1D6, "[bp-0X68]", "param_buf");
	add_func    (0XE1D6,0XE1DE);
	set_func_flags(0XE1D6,0x400);
	SetType(0XE1D6, "void __fastcall cmd_exec_set06_cmd13(struct DjiPacket *pkt);");
	add_func    (0XE1DE,0XE20C);
	set_func_flags(0XE1DE,0x400);
	SetType(0XE1DE, "void __fastcall cmd_exec_set06_cmd12(struct DjiPacket *pkt);");
	set_frame_size(0XE1DE, 0X18, 0, 0);
	define_local_var(0XE1DE, 0XE20C, "[bp-0X8]", "param_buf");
	add_func    (0XE20C,0XE23E);
	set_func_flags(0XE20C,0x400);
	SetType(0XE20C, "void __fastcall cmd_exec_set06_cmd11(struct DjiPacket *pkt);");
	set_frame_size(0XE20C, 0X18, 0, 0);
	define_local_var(0XE20C, 0XE23E, "[bp-0X8]", "param_buf");
	add_func    (0XE23E,0XE26C);
	set_func_flags(0XE23E,0x400);
	SetType(0XE23E, "void __fastcall cmd_exec_set06_cmd10(struct DjiPacket *pkt);");
	set_frame_size(0XE23E, 0X18, 0, 0);
	define_local_var(0XE23E, 0XE26C, "[bp-0X8]", "param_buf");
	add_func    (0XE26C,0XE2AC);
	set_func_flags(0XE26C,0x400);
	SetType(0XE26C, "void __fastcall cmd_exec_set06_cmd0F(struct DjiPacket *pkt);");
	set_frame_size(0XE26C, 0X28, 0, 0);
	define_local_var(0XE26C, 0XE2AC, "[bp-0X18]", "param_buf");
	define_local_var(0XE26C, 0XE2AC, "[bp-0X14]", "p_err");
	add_func    (0XE2AC,0XE31C);
	set_func_flags(0XE2AC,0x400);
	SetType(0XE2AC, "void __fastcall cmd_exec_set06_cmd0E(struct DjiPacket *pkt);");
	set_frame_size(0XE2AC, 0X100, 0, 0);
	define_local_var(0XE2AC, 0XE31C, "[bp-0X84]", "param_buf");
	add_func    (0XE31C,0XE362);
	set_func_flags(0XE31C,0x400);
	SetType(0XE31C, "void __fastcall cmd_exec_set06_cmd0D(struct DjiPacket *pkt);");
	set_frame_size(0XE31C, 0X30, 0, 0);
	define_local_var(0XE31C, 0XE362, "[bp-0X14]", "param_buf");
	add_func    (0XE378,0XE45E);
	set_func_flags(0XE378,0x400);
	SetType(0XE378, "void __fastcall cmd_exec_set06_cmd0C(struct DjiPacket *pkt);");
	set_frame_size(0XE378, 0X38, 0, 0);
	define_local_var(0XE378, 0XE45E, "[bp-0X34]", "a4");
	add_func    (0XE45E,0XE48C);
	set_func_flags(0XE45E,0x400);
	SetType(0XE45E, "void __fastcall cmd_exec_set06_cmd0B(struct DjiPacket *pkt);");
	set_frame_size(0XE45E, 0X18, 0, 0);
	define_local_var(0XE45E, 0XE48C, "[bp-0X8]", "param_buf");
	add_func    (0XE48C,0XE4C2);
	set_func_flags(0XE48C,0x400);
	SetType(0XE48C, "void __fastcall cmd_exec_set06_cmd0A(struct DjiPacket *pkt);");
	set_frame_size(0XE48C, 0X18, 0, 0);
	define_local_var(0XE48C, 0XE4C2, "[bp-0X8]", "param_buf");
	add_func    (0XE4C2,0XE4F6);
	set_func_flags(0XE4C2,0x400);
	SetType(0XE4C2, "void __fastcall cmd_exec_set06_cmd09(struct DjiPacket *pkt);");
	set_frame_size(0XE4C2, 0X20, 0, 0);
	define_local_var(0XE4C2, 0XE4F6, "[bp-0XC]", "param_buf");
	add_func    (0XE4F6,0XE532);
	set_func_flags(0XE4F6,0x400);
	SetType(0XE4F6, "void __fastcall cmd_exec_set06_cmd08(struct DjiPacket *pkt);");
	set_frame_size(0XE4F6, 0X18, 0, 0);
	define_local_var(0XE4F6, 0XE532, "[bp-0X8]", "param_buf");
	add_func    (0XE532,0XE584);
	set_func_flags(0XE532,0x400);
	SetType(0XE532, "void __fastcall cmd_exec_set06_cmd07(struct DjiPacket *pkt);");
	set_frame_size(0XE532, 0X18, 0, 0);
	define_local_var(0XE532, 0XE584, "[bp-0X14]", "a4");
	add_func    (0XE584,0XE5B8);
	set_func_flags(0XE584,0x400);
	SetType(0XE584, "void __fastcall cmd_exec_set06_cmd06(struct DjiPacket *pkt);");
	set_frame_size(0XE584, 0X18, 0, 0);
	define_local_var(0XE584, 0XE5B8, "[bp-0X8]", "param_buf");
	add_func    (0XE5B8,0XE616);
	set_func_flags(0XE5B8,0x400);
	SetType(0XE5B8, "void __fastcall cmd_exec_set06_cmd04(struct DjiPacket *pkt);");
	set_frame_size(0XE5B8, 0X38, 0, 0);
	define_local_var(0XE5B8, 0XE616, "[bp-0X24]", "a4");
	add_func    (0XE616,0XE64E);
	set_func_flags(0XE616,0x400);
	SetType(0XE616, "void __fastcall cmd_exec_set06_cmd03(struct DjiPacket *pkt);");
	set_frame_size(0XE616, 0X18, 0, 0);
	define_local_var(0XE616, 0XE64E, "[bp-0X8]", "param_buf");
	add_func    (0XE64E,0XE67A);
	set_func_flags(0XE64E,0x400);
	SetType(0XE64E, "void __fastcall cmd_exec_set06_cmd02(struct DjiPacket *pkt);");
	set_frame_size(0XE64E, 0X18, 0, 0);
	define_local_var(0XE64E, 0XE67A, "[bp-0X8]", "param_buf");
	add_func    (0XE67A,0XE708);
	set_func_flags(0XE67A,0x400);
	SetType(0XE67A, "void __fastcall cmd_exec_set06_cmd01(struct DjiPacket *pkt);");
	set_frame_size(0XE67A, 0X48, 0, 0);
	define_local_var(0XE67A, 0XE708, "[bp-0X2C]", "a4");
	add_func    (0XE708,0XE7B4);
	set_func_flags(0XE708,0x400);
	SetType(0XE708, "void __fastcall cmd_exec_set01_cmd01(struct DjiPacket *pkt);");
	set_frame_size(0XE708, 0X40, 0, 0);
	define_local_var(0XE708, 0XE7B4, "[bp-0X3D]", "data_buf");
	define_local_var(0XE708, 0XE7B4, "[bp-0X24]", "a4");
	define_local_var(0XE708, 0XE7B4, "[bp-0X14]", "param_buf");
	define_local_var(0XE708, 0XE7B4, "[bp-0X10]", "p_err");
	add_func    (0XE7B4,0XE7EA);
	set_func_flags(0XE7B4,0x400);
	SetType(0XE7B4, "void __fastcall cmd_exec_set00_cmdFF(struct DjiPacket *pkt);");
	set_frame_size(0XE7B4, 0X50, 0, 0);
	define_local_var(0XE7B4, 0XE7EA, "[bp-0X28]", "param_buf");
	add_func    (0XE7EA,0XE8A8);
	set_func_flags(0XE7EA,0x400);
	SetType(0XE7EA, "void __fastcall cmd_exec_set00_cmd32(struct DjiPacket *pkt);");
	set_frame_size(0XE7EA, 0X48, 0, 0);
	define_local_var(0XE7EA, 0XE8A8, "[bp-0X28]", "param_buf");
	add_func    (0XE8A8,0XE924);
	set_func_flags(0XE8A8,0x400);
	set_frame_size(0XE8A8, 0XD0, 0, 0);
	define_local_var(0XE8A8, 0XE924, "[bp-0XCF]", "data_buf");
	define_local_var(0XE8A8, 0XE924, "[bp-0XA5]", "dst");
	define_local_var(0XE8A8, 0XE924, "[bp-0X94]", "a4");
	define_local_var(0XE8A8, 0XE924, "[bp-0X4C]", "param_buf");
	define_local_var(0XE8A8, 0XE924, "[bp-0X22]", "src");
	add_func    (0XE924,0XEAB0);
	set_func_flags(0XE924,0x400);
	set_frame_size(0XE924, 0X88, 0, 0);
	define_local_var(0XE924, 0XEAB0, "[bp-0X7E]", "data_buf");
	define_local_var(0XE924, 0XEAB0, "[bp-0X68]", "param_buf");
	define_local_var(0XE924, 0XEAB0, "[bp-0X48]", "a4");
	define_local_var(0XE924, 0XEAB0, "[bp-0X38]", "payload_buf");
	define_local_var(0XE924, 0XEAB0, "[bp-0X2C]", "src");
	add_func    (0XEAB0,0XEB7C);
	set_func_flags(0XEAB0,0x400);
	set_frame_size(0XEAB0, 0XB8, 0, 0);
	define_local_var(0XEAB0, 0XEB7C, "[bp-0X93]", "data_buf");
	define_local_var(0XEAB0, 0XEB7C, "[bp-0X60]", "pkt");
	add_func    (0XEB7C,0XEDC2);
	set_func_flags(0XEB7C,0x400);
	set_frame_size(0XEB7C, 0XB0, 0, 0);
	define_local_var(0XEB7C, 0XEDC2, "[bp-0X4]", "src");
	define_local_var(0XEB7C, 0XEDC2, "[bp+0X26]", "dst");
	define_local_var(0XEB7C, 0XEDC2, "[bp+0X3C]", "a4");
	define_local_var(0XEB7C, 0XEDC2, "[bp+0X50]", "payload_buf");
	define_local_var(0XEB7C, 0XEDC2, "[bp+0X54]", "data_buf");
	define_local_var(0XEB7C, 0XEDC2, "[bp+0X58]", "a1");
	define_local_var(0XEB7C, 0XEDC2, "[bp+0X64]", "param_buf");
	add_func    (0XEDC2,0XEE3E);
	set_func_flags(0XEDC2,0x400);
	set_frame_size(0XEDC2, 0X20, 0, 0);
	define_local_var(0XEDC2, 0XEE3E, "[bp-0X1C]", "a4");
	add_func    (0XEE3E,0XEF02);
	set_func_flags(0XEE3E,0x400);
	set_frame_size(0XEE3E, 0X30, 0, 0);
	define_local_var(0XEE3E, 0XEF02, "[bp-0X24]", "a4");
	add_func    (0XEF02,0XEFD2);
	set_func_flags(0XEF02,0x400);
	set_frame_size(0XEF02, 0X48, 0, 0);
	define_local_var(0XEF02, 0XEFD2, "[bp-0X30]", "a4");
	add_func    (0XEFD2,0XF062);
	set_func_flags(0XEFD2,0x400);
	SetType(0XEFD2, "void __fastcall cmd_exec_set00_cmd30(struct DjiPacket *pkt);");
	set_frame_size(0XEFD2, 0X20, 0, 0);
	add_func    (0XF062,0XF0C0);
	set_func_flags(0XF062,0x400);
	SetType(0XF062, "void __fastcall cmd_exec_set00_cmd0D(struct DjiPacket *pkt);");
	set_frame_size(0XF062, 0X40, 0, 0);
	define_local_var(0XF062, 0XF0C0, "[bp-0X2C]", "a4");
	add_func    (0XF0C0,0XF124);
	set_func_flags(0XF0C0,0x400);
	SetType(0XF0C0, "void __fastcall cmd_exec_set00_cmd0C(struct DjiPacket *pkt);");
	set_frame_size(0XF0C0, 0X20, 0, 0);
	define_local_var(0XF0C0, 0XF124, "[bp-0X18]", "a4");
	add_func    (0XF124,0XF18A);
	set_func_flags(0XF124,0x400);
	SetType(0XF124, "void __fastcall cmd_exec_set00_cmd0B(struct DjiPacket *pkt);");
	set_frame_size(0XF124, 0X20, 0, 0);
	define_local_var(0XF124, 0XF18A, "[bp-0X10]", "param_buf");
	add_func    (0XF18A,0XF216);
	set_func_flags(0XF18A,0x400);
	SetType(0XF18A, "void __fastcall cmd_exec_set00_cmd0A(struct DjiPacket *pkt);");
	set_frame_size(0XF18A, 0X28, 0, 0);
	define_local_var(0XF18A, 0XF216, "[bp-0X24]", "a4");
	add_func    (0XF216,0XF218);
	set_func_flags(0XF216,0x400);
	add_func    (0XF218,0XF266);
	set_func_flags(0XF218,0x400);
	SetType(0XF218, "void __fastcall cmd_exec_set00_cmd08(struct DjiPacket *pkt);");
	set_frame_size(0XF218, 0X20, 0, 0);
	define_local_var(0XF218, 0XF266, "[bp-0X10]", "param_buf");
	add_func    (0XF266,0XF2EA);
	set_func_flags(0XF266,0x400);
	SetType(0XF266, "void __fastcall cmd_exec_set00_cmd07(struct DjiPacket *pkt);");
	set_frame_size(0XF266, 0X20, 0, 0);
	define_local_var(0XF266, 0XF2EA, "[bp-0X10]", "param_buf");
	add_func    (0XF2EA,0XF3C8);
	set_func_flags(0XF2EA,0x400);
	SetType(0XF2EA, "void __fastcall cmd_exec_set00_cmd01(struct DjiPacket *pkt);");
	set_frame_size(0XF2EA, 0X60, 0, 0);
	define_local_var(0XF2EA, 0XF3C8, "[bp-0X40]", "a4");
	add_func    (0XF3C8,0XF79A);
	set_func_flags(0XF3C8,0x400);
	SetType(0XF3C8, "void __fastcall parse_subcommand_53C8(struct DjiPacket *pkt);");
	set_frame_size(0XF3C8, 0X10, 0, 0);
	set_name(0XF470, "def_54B4", SN_LOCAL);
	add_func    (0XF79A,0XF7C0);
	set_func_flags(0XF79A,0x400);
	SetType(0XF79A, "void __fastcall cmd_exec_set06_cmd40(struct DjiPacket *pkt);");
	set_frame_size(0XF79A, 0X10, 0, 0);
	add_func    (0XF7C0,0XF7D0);
	set_func_flags(0XF7C0,0x400);
	add_func    (0XF7D0,0XF836);
	set_func_flags(0XF7D0,0x400);
	set_frame_size(0XF7D0, 0X20, 0, 0);
	add_func    (0XF836,0XF84E);
	set_func_flags(0XF836,0x400);
	add_func    (0XF84E,0XF8C0);
	set_func_flags(0XF84E,0x400);
	set_frame_size(0XF84E, 0X58, 0, 0);
	define_local_var(0XF84E, 0XF8C0, "[bp-0X56]", "a1");
	define_local_var(0XF84E, 0XF8C0, "[bp-0X38]", "a4");
	add_func    (0XF8C0,0XF93C);
	set_func_flags(0XF8C0,0x400);
	set_frame_size(0XF8C0, 0X28, 0, 0);
	add_func    (0XF93C,0XFA96);
	set_func_flags(0XF93C,0x400);
	set_frame_size(0XF93C, 0X38, 0, 0);
	add_func    (0XFA96,0XFABC);
	set_func_flags(0XFA96,0x400);
	SetType(0XFA96, "void __fastcall cmd_exec_set09_cmd02(struct DjiPacket *pkt);");
	add_func    (0XFABC,0XFBB0);
	set_func_flags(0XFABC,0x400);
	SetType(0XFABC, "void __fastcall cmd_exec_set09_cmd01(struct DjiPacket *pkt);");
	set_frame_size(0XFABC, 0X38, 0, 0);
	define_local_var(0XFABC, 0XFBB0, "[bp-0X28]", "p_err");
	add_func    (0XFBB0,0XFD2A);
	set_func_flags(0XFBB0,0x400);
	SetType(0XFBB0, "void __fastcall parse_command_5BB0(struct DjiPacket *pkt);");
	set_frame_size(0XFBB0, 0X10, 0, 0);
	set_name(0XFD28, "def_5C8C", SN_LOCAL);
	add_func    (0XFD2A,0XFD6C);
	set_func_flags(0XFD2A,0x400);
	SetType(0XFD2A, "void __fastcall packet_prepare(uint8_t receiver, uint8_t ack, uint8_t smdset, uint8_t cmd, int *payload_buf, unsigned int payload_len);");
	set_frame_size(0XFD2A, 0XA8, 0, 0);
	define_local_var(0XFD2A, 0XFD6C, "[bp-0X98]", "pkt");
	define_local_var(0XFD2A, 0XFD6C, "[bp+0]", "payload_buf");
	define_local_var(0XFD2A, 0XFD6C, "[bp+0X4]", "payload_len");
	add_func    (0XFD6C,0XFDC8);
	set_func_flags(0XFD6C,0x400);
	set_frame_size(0XFD6C, 0X30, 0, 0);
	define_local_var(0XFD6C, 0XFDC8, "[bp-0X10]", "varg_r0");
	define_local_var(0XFD6C, 0XFDC8, "[bp-0XC]", "varg_r1");
	define_local_var(0XFD6C, 0XFDC8, "[bp-0X8]", "varg_r2");
	define_local_var(0XFD6C, 0XFDC8, "[bp-0X4]", "varg_r3");
	add_func    (0XFDC8,0XFE20);
	set_func_flags(0XFDC8,0x400);
	set_frame_size(0XFDC8, 0X30, 0, 0);
	define_local_var(0XFDC8, 0XFE20, "[bp-0X10]", "varg_r0");
	define_local_var(0XFDC8, 0XFE20, "[bp-0XC]", "varg_r1");
	define_local_var(0XFDC8, 0XFE20, "[bp-0X8]", "varg_r2");
	define_local_var(0XFDC8, 0XFE20, "[bp-0X4]", "varg_r3");
	add_func    (0XFE60,0XFE96);
	set_func_flags(0XFE60,0x400);
	set_frame_size(0XFE60, 0X18, 0, 0);
	define_local_var(0XFE60, 0XFE96, "[bp-0X10]", "payload_buf");
	add_func    (0XFE96,0XFF0C);
	set_func_flags(0XFE96,0x400);
	set_frame_size(0XFE96, 0X10, 0, 0);
	define_local_var(0XFE96, 0XFF0C, "[bp-0X8]", "payload_buf");
	add_func    (0XFF0C,0XFFA2);
	set_func_flags(0XFF0C,0x400);
	set_frame_size(0XFF0C, 0X20, 0, 0);
	define_local_var(0XFF0C, 0XFFA2, "[bp-0X18]", "payload_buf");
	add_func    (0XFFA2,0XFFCA);
	set_func_flags(0XFFA2,0x400);
	set_frame_size(0XFFA2, 0X30, 0, 0);
	define_local_var(0XFFA2, 0XFFCA, "[bp-0X20]", "pkt");
	add_func    (0XFFCA,0X1004C);
	set_func_flags(0XFFCA,0x400);
	set_frame_size(0XFFCA, 0X38, 0, 0);
	define_local_var(0XFFCA, 0X1004C, "[bp-0X30]", "payload_buf");
	add_func    (0X1004C,0X100B6);
	set_func_flags(0X1004C,0x400);
	set_frame_size(0X1004C, 0X28, 0, 0);
	define_local_var(0X1004C, 0X100B6, "[bp-0X20]", "payload_buf");
	add_func    (0X100B6,0X100D6);
	set_func_flags(0X100B6,0x400);
	set_frame_size(0X100B6, 0X10, 0, 0);
	define_local_var(0X100B6, 0X100D6, "[bp-0X8]", "payload_buf");
	add_func    (0X100D6,0X10104);
	set_func_flags(0X100D6,0x400);
	set_frame_size(0X100D6, 0X18, 0, 0);
	define_local_var(0X100D6, 0X10104, "[bp-0X10]", "payload_buf");
	add_func    (0X10104,0X10138);
	set_func_flags(0X10104,0x400);
	set_frame_size(0X10104, 0X18, 0, 0);
	define_local_var(0X10104, 0X10138, "[bp-0X10]", "payload_buf");
	add_func    (0X10138,0X101BC);
	set_func_flags(0X10138,0x400);
	set_frame_size(0X10138, 0X10, 0, 0);
	define_local_var(0X10138, 0X101BC, "[bp-0X8]", "payload_buf");
	add_func    (0X101BC,0X101FE);
	set_func_flags(0X101BC,0x400);
	set_frame_size(0X101BC, 0X28, 0, 0);
	define_local_var(0X101BC, 0X101FE, "[bp-0X25]", "data_buf");
	define_local_var(0X101BC, 0X101FE, "[bp-0XC]", "param_buf");
	add_func    (0X101FE,0X10226);
	set_func_flags(0X101FE,0x400);
	set_frame_size(0X101FE, 0X18, 0, 0);
	define_local_var(0X101FE, 0X10226, "[bp-0X10]", "payload_buf");
	add_func    (0X10226,0X10258);
	set_func_flags(0X10226,0x400);
	set_frame_size(0X10226, 0X18, 0, 0);
	define_local_var(0X10226, 0X10258, "[bp-0X10]", "payload_buf");
	add_func    (0X1028C,0X102AE);
	set_func_flags(0X1028C,0x400);
	set_frame_size(0X1028C, 0X18, 0, 0);
	define_local_var(0X1028C, 0X102AE, "[bp-0X10]", "payload_buf");
	add_func    (0X102AE,0X102C4);
	set_func_flags(0X102AE,0x400);
	set_frame_size(0X102AE, 0X10, 0, 0);
	define_local_var(0X102AE, 0X102C4, "[bp-0X10]", "payload_buf");
	define_local_var(0X102AE, 0X102C4, "[bp-0XC]", "payload_len");
	add_func    (0X102C4,0X102EC);
	set_func_flags(0X102C4,0x400);
	set_frame_size(0X102C4, 0X10, 0, 0);
	define_local_var(0X102C4, 0X102EC, "[bp-0X8]", "payload_buf");
	add_func    (0X102EC,0X10304);
	set_func_flags(0X102EC,0x400);
	set_frame_size(0X102EC, 0X10, 0, 0);
	add_func    (0X10304,0X1031E);
	set_func_flags(0X10304,0x400);
	set_frame_size(0X10304, 0X10, 0, 0);
	define_local_var(0X10304, 0X1031E, "[bp-0X8]", "payload_buf");
	add_func    (0X1031E,0X10368);
	set_func_flags(0X1031E,0x400);
	set_frame_size(0X1031E, 0X20, 0, 0);
	define_local_var(0X1031E, 0X10368, "[bp-0X18]", "payload_buf");
	add_func    (0X10368,0X103AC);
	set_func_flags(0X10368,0x400);
	set_frame_size(0X10368, 0X10, 0, 0);
	define_local_var(0X10368, 0X103AC, "[bp-0X8]", "payload_buf");
	add_func    (0X103AC,0X1043C);
	set_func_flags(0X103AC,0x400);
	set_frame_size(0X103AC, 0XA0, 0, 0);
	define_local_var(0X103AC, 0X1043C, "[bp-0X90]", "pkt");
	define_local_var(0X103AC, 0X1043C, "[bp-0X10]", "p_err");
	add_func    (0X1043C,0X10452);
	set_func_flags(0X1043C,0x400);
	set_frame_size(0X1043C, 0X10, 0, 0);
	define_local_var(0X1043C, 0X10452, "[bp-0X10]", "payload_buf");
	define_local_var(0X1043C, 0X10452, "[bp-0XC]", "payload_len");
	add_func    (0X10452,0X104CA);
	set_func_flags(0X10452,0x400);
	set_frame_size(0X10452, 0X220, 0, 0);
	add_func    (0X104CA,0X10552);
	set_func_flags(0X104CA,0x400);
	set_frame_size(0X104CA, 0X118, 0, 0);
	add_func    (0X10552,0X105E2);
	set_func_flags(0X10552,0x400);
	set_frame_size(0X10552, 0X218, 0, 0);
	add_func    (0X105E2,0X1065C);
	set_func_flags(0X105E2,0x400);
	set_frame_size(0X105E2, 0X118, 0, 0);
	add_func    (0X1065C,0X10672);
	set_func_flags(0X1065C,0x400);
	set_frame_size(0X1065C, 0X10, 0, 0);
	add_func    (0X10672,0X1068C);
	set_func_flags(0X10672,0x400);
	set_frame_size(0X10672, 0X10, 0, 0);
	add_func    (0X1068C,0X10754);
	set_func_flags(0X1068C,0x400);
	set_frame_size(0X1068C, 0X58, 0, 0);
	add_func    (0X10754,0X108CA);
	set_func_flags(0X10754,0x400);
	set_frame_size(0X10754, 0X28, 0, 0);
	add_func    (0X108CA,0X109A8);
	set_func_flags(0X108CA,0x400);
	set_frame_size(0X108CA, 0X28, 0, 0);
	add_func    (0X109A8,0X10A38);
	set_func_flags(0X109A8,0x400);
	set_frame_size(0X109A8, 0X218, 0, 0);
	add_func    (0X10A38,0X10AA8);
	set_func_flags(0X10A38,0x400);
	set_frame_size(0X10A38, 0X110, 0, 0);
	add_func    (0X10AA8,0X10BF0);
	set_func_flags(0X10AA8,0x401);
	SetType(0X10AA8, "void __cdecl task_UNPACK_worker(void *dtptr);");
	set_frame_size(0X10AA8, 0X18, 0, 0);
	define_local_var(0X10AA8, 0X10BF0, "[bp-0X10]", "payload_buf");
	add_func    (0X10BF4,0X10C08);
	set_func_flags(0X10BF4,0x400);
	add_func    (0X10C08,0X10C1C);
	set_func_flags(0X10C08,0x400);
	add_func    (0X10C1C,0X10C30);
	set_func_flags(0X10C1C,0x400);
	add_func    (0X10C30,0X10C44);
	set_func_flags(0X10C30,0x400);
	add_func    (0X10C44,0X10C58);
	set_func_flags(0X10C44,0x400);
	add_func    (0X10C58,0X10C6C);
	set_func_flags(0X10C58,0x400);
	add_func    (0X10C6C,0X10C88);
	set_func_flags(0X10C6C,0x400);
	add_func    (0X10C88,0X10CA0);
	set_func_flags(0X10C88,0x400);
	add_func    (0X10CA0,0X10D82);
	set_func_flags(0X10CA0,0x400);
	set_frame_size(0X10CA0, 0X20, 0, 0);
	add_func    (0X10D82,0X10E12);
	set_func_flags(0X10D82,0x410);
	set_frame_size(0X10D82, 0X24, 0, 0);
	add_func    (0X10E12,0X10E8C);
	set_func_flags(0X10E12,0x400);
	add_func    (0X10E8C,0X10F92);
	set_func_flags(0X10E8C,0x400);
	set_frame_size(0X10E8C, 0X24, 0, 0);
	add_func    (0X10F92,0X10FC4);
	set_func_flags(0X10F92,0x400);
	set_frame_size(0X10F92, 0X14, 0, 0);
	add_func    (0X10FC4,0X11014);
	set_func_flags(0X10FC4,0x400);
	set_frame_size(0X10FC4, 0X14, 0, 0);
	add_func    (0X11014,0X11082);
	set_func_flags(0X11014,0x400);
	set_frame_size(0X11014, 0X10, 0, 0);
	add_func    (0X11082,0X110DC);
	set_func_flags(0X11082,0x400);
	set_frame_size(0X11082, 0X8, 0, 0);
	add_func    (0X110DC,0X11146);
	set_func_flags(0X110DC,0x400);
	set_frame_size(0X110DC, 0X8, 0, 0);
	add_func    (0X11146,0X111BA);
	set_func_flags(0X11146,0x400);
	set_frame_size(0X11146, 0X8, 0, 0);
	add_func    (0X111BA,0X11212);
	set_func_flags(0X111BA,0x400);
	add_func    (0X11212,0X12158);
	set_func_flags(0X11212,0x401);
	SetType(0X11212, "void __cdecl task_ADCKEY_worker(void *dtptr);");
	set_frame_size(0X11212, 0X80, 0, 0);
	define_local_var(0X11212, 0X12158, "[bp-0X38]", "param_buf");
	define_local_var(0X11212, 0X12158, "[bp-0X10]", "data_buf");
	define_local_var(0X11212, 0X12158, "[bp-0XC]", "a1");
	define_local_var(0X11212, 0X12158, "[bp-0X4]", "p_err");
	add_func    (0X1215C,0X12172);
	set_func_flags(0X1215C,0x400);
	set_frame_size(0X1215C, 0X10, 0, 0);
	add_func    (0X12172,0X12478);
	set_func_flags(0X12172,0x401);
	SetType(0X12172, "void __cdecl task_Radio_worker(void *dtptr);");
	set_frame_size(0X12172, 0X28, 0, 0);
	define_local_var(0X12172, 0X12478, "[bp-0X28]", "p_err");
	add_func    (0X124E2,0X12560);
	set_func_flags(0X124E2,0x400);
	set_frame_size(0X124E2, 0X8, 0, 0);
	add_func    (0X12560,0X125BC);
	set_func_flags(0X12560,0x400);
	set_frame_size(0X12560, 0X8, 0, 0);
	add_func    (0X125BC,0X12612);
	set_func_flags(0X125BC,0x400);
	set_frame_size(0X125BC, 0X10, 0, 0);
	add_func    (0X12612,0X12640);
	set_func_flags(0X12612,0x400);
	set_frame_size(0X12612, 0X10, 0, 0);
	add_func    (0X12640,0X12660);
	set_func_flags(0X12640,0x400);
	set_frame_size(0X12640, 0X8, 0, 0);
	add_func    (0X12660,0X1269A);
	set_func_flags(0X12660,0x400);
	set_frame_size(0X12660, 0X18, 0, 0);
	add_func    (0X1269A,0X126D8);
	set_func_flags(0X1269A,0x400);
	set_frame_size(0X1269A, 0X8, 0, 0);
	add_func    (0X126D8,0X12716);
	set_func_flags(0X126D8,0x400);
	set_frame_size(0X126D8, 0X8, 0, 0);
	add_func    (0X12716,0X1271C);
	set_func_flags(0X12716,0x400);
	add_func    (0X1271C,0X1273E);
	set_func_flags(0X1271C,0x400);
	set_frame_size(0X1271C, 0X8, 0, 0);
	add_func    (0X1273E,0X127FA);
	set_func_flags(0X1273E,0x400);
	set_frame_size(0X1273E, 0X18, 0, 0);
	add_func    (0X127FA,0X12820);
	set_func_flags(0X127FA,0x400);
	set_func_cmt(0X127FA,	"The power is set to either 5 (CE) or 7 (FCC)", 1);
	set_frame_size(0X127FA, 0X8, 0, 0);
	add_func    (0X12820,0X1284A);
	set_func_flags(0X12820,0x400);
	set_frame_size(0X12820, 0X10, 0, 0);
	add_func    (0X1284A,0X129A0);
	set_func_flags(0X1284A,0x400);
	set_frame_size(0X1284A, 0X28, 0, 0);
	add_func    (0X129B8,0X129C8);
	set_func_flags(0X129B8,0x400);
	add_func    (0X129C8,0X129F2);
	set_func_flags(0X129C8,0x400);
	set_frame_size(0X129C8, 0XC, 0, 0);
	add_func    (0X129F2,0X12A58);
	set_func_flags(0X129F2,0x400);
	set_frame_size(0X129F2, 0X18, 0, 0);
	add_func    (0X12A58,0X12C7C);
	set_func_flags(0X12A58,0x400);
	set_frame_size(0X12A58, 0X28, 0, 0);
	add_func    (0X12C7C,0X1313C);
	set_func_flags(0X12C7C,0x400);
	set_frame_size(0X12C7C, 0X30, 0, 0);
	add_func    (0X1313C,0X1334C);
	set_func_flags(0X1313C,0x400);
	set_frame_size(0X1313C, 0X28, 0, 0);
	add_func    (0X1334C,0X133D8);
	set_func_flags(0X1334C,0x400);
	SetType(0X1334C, "void sub_1334C(void);");
	set_frame_size(0X1334C, 0X10, 0, 0);
	add_func    (0X133D8,0X1344E);
	set_func_flags(0X133D8,0x400);
	SetType(0X133D8, "void sub_133D8(void);");
	set_frame_size(0X133D8, 0X10, 0, 0);
	add_func    (0X1344E,0X134C4);
	set_func_flags(0X1344E,0x400);
	set_frame_size(0X1344E, 0X10, 0, 0);
	add_func    (0X134C4,0X13560);
	set_func_flags(0X134C4,0x400);
	set_frame_size(0X134C4, 0X8, 0, 0);
	add_func    (0X13560,0X135D4);
	set_func_flags(0X13560,0x400);
	set_frame_size(0X13560, 0X18, 0, 0);
	add_func    (0X135D4,0X136B6);
	set_func_flags(0X135D4,0x400);
	set_frame_size(0X135D4, 0X18, 0, 0);
	add_func    (0X136B6,0X137BC);
	set_func_flags(0X136B6,0x400);
	set_frame_size(0X136B6, 0X28, 0, 0);
	add_func    (0X137BC,0X137E8);
	set_func_flags(0X137BC,0x400);
	set_frame_size(0X137BC, 0X10, 0, 0);
	add_func    (0X137E8,0X13810);
	set_func_flags(0X137E8,0x400);
	add_func    (0X13810,0X1385E);
	set_func_flags(0X13810,0x400);
	set_frame_size(0X13810, 0X10, 0, 0);
	add_func    (0X1385E,0X1387C);
	set_func_flags(0X1385E,0x400);
	set_frame_size(0X1385E, 0X8, 0, 0);
	add_func    (0X1387C,0X138F4);
	set_func_flags(0X1387C,0x400);
	set_frame_size(0X1387C, 0X10, 0, 0);
	add_func    (0X138F4,0X139DC);
	set_func_flags(0X138F4,0x400);
	set_frame_size(0X138F4, 0X10, 0, 0);
	add_func    (0X139DC,0X13AB0);
	set_func_flags(0X139DC,0x400);
	set_frame_size(0X139DC, 0X20, 0, 0);
	add_func    (0X13B00,0X13B46);
	set_func_flags(0X13B00,0x400);
	set_frame_size(0X13B00, 0X30, 0, 0);
	add_func    (0X13B46,0X13D60);
	set_func_flags(0X13B46,0x401);
	SetType(0X13B46, "void __cdecl task_BK5811_worker(void *dtptr);");
	set_func_cmt(0X13B46,	"Worker task for Wi-Fi transciever", 1);
	set_frame_size(0X13B46, 0X10, 0, 0);
	add_func    (0X13D60,0X13D6C);
	set_func_flags(0X13D60,0x400);
	add_func    (0X13D6C,0X13D90);
	set_func_flags(0X13D6C,0x400);
	set_frame_size(0X13D6C, 0X10, 0, 0);
	add_func    (0X13DC8,0X13E1E);
	set_func_flags(0X13DC8,0x400);
	set_frame_size(0X13DC8, 0X10, 0, 0);
	add_func    (0X13E1E,0X13E32);
	set_func_flags(0X13E1E,0x400);
	set_frame_size(0X13E1E, 0X8, 0, 0);
	add_func    (0X13E32,0X13E44);
	set_func_flags(0X13E32,0x400);
	add_func    (0X13E44,0X13E5A);
	set_func_flags(0X13E44,0x400);
	set_frame_size(0X13E44, 0X8, 0, 0);
	add_func    (0X13E5A,0X13EB0);
	set_func_flags(0X13E5A,0x400);
	set_frame_size(0X13E5A, 0X10, 0, 0);
	add_func    (0X13EB0,0X13EEA);
	set_func_flags(0X13EB0,0x400);
	set_frame_size(0X13EB0, 0X18, 0, 0);
	add_func    (0X13EEA,0X13F2C);
	set_func_flags(0X13EEA,0x400);
	set_frame_size(0X13EEA, 0X20, 0, 0);
	add_func    (0X13F2C,0X13F64);
	set_func_flags(0X13F2C,0x400);
	set_frame_size(0X13F2C, 0X10, 0, 0);
	add_func    (0X13F64,0X13F9C);
	set_func_flags(0X13F64,0x400);
	set_frame_size(0X13F64, 0X10, 0, 0);
	add_func    (0X13F9C,0X13FA6);
	set_func_flags(0X13F9C,0x400);
	add_func    (0X13FA6,0X13FB0);
	set_func_flags(0X13FA6,0x400);
	add_func    (0X13FBC,0X14102);
	set_func_flags(0X13FBC,0x400);
	SetType(0X13FBC, "int sub_13FBC(void);");
	set_frame_size(0X13FBC, 0X30, 0, 0);
	add_func    (0X14102,0X1413E);
	set_func_flags(0X14102,0x400);
	set_frame_size(0X14102, 0X48, 0, 0);
	define_local_var(0X14102, 0X1413E, "[bp-0X46]", "data_buf");
	add_func    (0X1413E,0X141E0);
	set_func_flags(0X1413E,0x400);
	set_frame_size(0X1413E, 0X48, 0, 0);
	add_func    (0X141E0,0X142A0);
	set_func_flags(0X141E0,0x400);
	set_frame_size(0X141E0, 0X40, 0, 0);
	add_func    (0X142A0,0X142DE);
	set_func_flags(0X142A0,0x400);
	add_func    (0X142DE,0X1432A);
	set_func_flags(0X142DE,0x400);
	SetType(0X142DE, "void sub_142DE(void);");
	set_frame_size(0X142DE, 0X8, 0, 0);
	add_func    (0X1432A,0X14360);
	set_func_flags(0X1432A,0x400);
	set_frame_size(0X1432A, 0X18, 0, 0);
	add_func    (0X14360,0X14390);
	set_func_flags(0X14360,0x400);
	set_frame_size(0X14360, 0X10, 0, 0);
	add_func    (0X14390,0X143D6);
	set_func_flags(0X14390,0x400);
	set_frame_size(0X14390, 0X18, 0, 0);
	add_func    (0X143D6,0X143F0);
	set_func_flags(0X143D6,0x400);
	add_func    (0X143F0,0X14592);
	set_func_flags(0X143F0,0x400);
	set_frame_size(0X143F0, 0X60, 0, 0);
	add_func    (0X14592,0X14838);
	set_func_flags(0X14592,0x400);
	set_frame_size(0X14592, 0X70, 0, 0);
	add_func    (0X14838,0X14968);
	set_func_flags(0X14838,0x400);
	set_frame_size(0X14838, 0X28, 0, 0);
	add_func    (0X14968,0X149EE);
	set_func_flags(0X14968,0x400);
	SetType(0X14968, "void sub_14968(void);");
	set_frame_size(0X14968, 0X10, 0, 0);
	add_func    (0X149EE,0X14A56);
	set_func_flags(0X149EE,0x400);
	SetType(0X149EE, "void sub_149EE(void);");
	set_frame_size(0X149EE, 0X10, 0, 0);
	add_func    (0X14A9C,0X14B04);
	set_func_flags(0X14A9C,0x400);
	SetType(0X14A9C, "void sub_14A9C(void);");
	set_frame_size(0X14A9C, 0X10, 0, 0);
	add_func    (0X14B04,0X14CD8);
	set_func_flags(0X14B04,0x401);
	SetType(0X14B04, "void __cdecl task_CC1120_worker(void *dtptr);");
	set_func_cmt(0X14B04,	"Worker task for 900M transciever", 1);
	set_frame_size(0X14B04, 0X10, 0, 0);
	add_func    (0X14CD8,0X14CE4);
	set_func_flags(0X14CD8,0x400);
	add_func    (0X14CE4,0X14D08);
	set_func_flags(0X14CE4,0x400);
	set_frame_size(0X14CE4, 0X10, 0, 0);
	add_func    (0X14D5C,0X14D70);
	set_func_flags(0X14D5C,0x400);
	add_func    (0X14D70,0X14DA0);
	set_func_flags(0X14D70,0x400);
	set_frame_size(0X14D70, 0XC, 0, 0);
	add_func    (0X14DA0,0X14DDA);
	set_func_flags(0X14DA0,0x400);
	set_frame_size(0X14DA0, 0X18, 0, 0);
	add_func    (0X14DDA,0X14E2C);
	set_func_flags(0X14DDA,0x400);
	set_frame_size(0X14DDA, 0X18, 0, 0);
	add_func    (0X14E2C,0X14E48);
	set_func_flags(0X14E2C,0x400);
	add_func    (0X14E48,0X14EC2);
	set_func_flags(0X14E48,0x400);
	set_frame_size(0X14E48, 0X18, 0, 0);
	add_func    (0X14EC2,0X14F12);
	set_func_flags(0X14EC2,0x400);
	set_frame_size(0X14EC2, 0X10, 0, 0);
	add_func    (0X14F12,0X14F28);
	set_func_flags(0X14F12,0x400);
	add_func    (0X14F28,0X14F3C);
	set_func_flags(0X14F28,0x400);
	set_frame_size(0X14F28, 0X8, 0, 0);
	add_func    (0X14F3C,0X1503C);
	set_func_flags(0X14F3C,0x400);
	set_frame_size(0X14F3C, 0X2C, 0, 0);
	add_func    (0X1503C,0X1505A);
	set_func_flags(0X1503C,0x400);
	set_frame_size(0X1503C, 0X8, 0, 0);
	add_func    (0X1505A,0X150B0);
	set_func_flags(0X1505A,0x400);
	set_frame_size(0X1505A, 0X20, 0, 0);
	add_func    (0X150B0,0X15214);
	set_func_flags(0X150B0,0x400);
	set_frame_size(0X150B0, 0X2C, 0, 0);
	add_func    (0X15214,0X152A6);
	set_func_flags(0X15214,0x400);
	set_frame_size(0X15214, 0X10, 0, 0);
	add_func    (0X152A6,0X152C8);
	set_func_flags(0X152A6,0x400);
	set_frame_size(0X152A6, 0X8, 0, 0);
	add_func    (0X152C8,0X152DE);
	set_func_flags(0X152C8,0x400);
	add_func    (0X152DE,0X15318);
	set_func_flags(0X152DE,0x400);
	set_frame_size(0X152DE, 0X8, 0, 0);
	add_func    (0X15318,0X1562E);
	set_func_flags(0X15318,0x400);
	set_frame_size(0X15318, 0X28, 0, 0);
	add_func    (0X1562E,0X156C0);
	set_func_flags(0X1562E,0x400);
	set_frame_size(0X1562E, 0X20, 0, 0);
	add_func    (0X156C0,0X156DE);
	set_func_flags(0X156C0,0x400);
	set_frame_size(0X156C0, 0X10, 0, 0);
	add_func    (0X156DE,0X156FC);
	set_func_flags(0X156DE,0x400);
	set_frame_size(0X156DE, 0X10, 0, 0);
	add_func    (0X156FC,0X15750);
	set_func_flags(0X156FC,0x400);
	set_frame_size(0X156FC, 0X228, 0, 0);
	define_local_var(0X156FC, 0X15750, "[bp-0X220]", "data_buf");
	define_local_var(0X156FC, 0X15750, "[bp-0X120]", "a4");
	add_func    (0X15750,0X157C4);
	set_func_flags(0X15750,0x400);
	set_frame_size(0X15750, 0X138, 0, 0);
	define_local_var(0X15750, 0X157C4, "[bp-0X38]", "param_buf");
	define_local_var(0X15750, 0X157C4, "[bp-0X2C]", "a4");
	add_func    (0X157C4,0X15820);
	set_func_flags(0X157C4,0x400);
	set_frame_size(0X157C4, 0X38, 0, 0);
	define_local_var(0X157C4, 0X15820, "[bp-0X1C]", "param_buf");
	add_func    (0X15820,0X1586C);
	set_func_flags(0X15820,0x400);
	set_frame_size(0X15820, 0X50, 0, 0);
	define_local_var(0X15820, 0X1586C, "[bp-0X28]", "param_buf");
	add_func    (0X1586C,0X158B8);
	set_func_flags(0X1586C,0x400);
	set_frame_size(0X1586C, 0X30, 0, 0);
	define_local_var(0X1586C, 0X158B8, "[bp-0X14]", "param_buf");
	add_func    (0X158B8,0X15906);
	set_func_flags(0X158B8,0x400);
	set_frame_size(0X158B8, 0X38, 0, 0);
	define_local_var(0X158B8, 0X15906, "[bp-0X1C]", "param_buf");
	add_func    (0X15906,0X1599E);
	set_func_flags(0X15906,0x400);
	set_frame_size(0X15906, 0X38, 0, 0);
	define_local_var(0X15906, 0X1599E, "[bp-0X2C]", "a4");
	add_func    (0X1599E,0X15A1C);
	set_func_flags(0X1599E,0x400);
	set_frame_size(0X1599E, 0X48, 0, 0);
	define_local_var(0X1599E, 0X15A1C, "[bp-0X34]", "a4");
	add_func    (0X15A1C,0X15A5E);
	set_func_flags(0X15A1C,0x400);
	SetType(0X15A1C, "void __fastcall cmd_exec_set09_cmd2C(struct DjiPacket *pkt);");
	add_func    (0X15A6C,0X15B5E);
	set_func_flags(0X15A6C,0x400);
	set_frame_size(0X15A6C, 0X18, 0, 0);
	add_func    (0X15B5E,0X15B86);
	set_func_flags(0X15B5E,0x400);
	set_frame_size(0X15B5E, 0X8, 0, 0);
	add_func    (0X15B86,0X15CFA);
	set_func_flags(0X15B86,0x400);
	set_frame_size(0X15B86, 0X28, 0, 0);
	add_func    (0X15CFA,0X15D22);
	set_func_flags(0X15CFA,0x400);
	set_frame_size(0X15CFA, 0X8, 0, 0);
	add_func    (0X15D22,0X15D4A);
	set_func_flags(0X15D22,0x400);
	set_frame_size(0X15D22, 0X8, 0, 0);
	add_func    (0X15D4A,0X15D7A);
	set_func_flags(0X15D4A,0x400);
	set_frame_size(0X15D4A, 0X8, 0, 0);
	add_func    (0X15D7A,0X15D96);
	set_func_flags(0X15D7A,0x400);
	set_frame_size(0X15D7A, 0X8, 0, 0);
	add_func    (0X15D96,0X15DAC);
	set_func_flags(0X15D96,0x400);
	set_frame_size(0X15D96, 0X10, 0, 0);
	add_func    (0X15DC4,0X15DCA);
	set_func_flags(0X15DC4,0x400);
	SetType(0X15DC4, "int get_board_version(void);");
	add_func    (0X15DCA,0X15DF6);
	set_func_flags(0X15DCA,0x400);
	set_frame_size(0X15DCA, 0X8, 0, 0);
	add_func    (0X15DF6,0X15E24);
	set_func_flags(0X15DF6,0x400);
	SetType(0X15DF6, "void __fastcall spi_raw_ct16_dt8_write(int bus_n_bytes, int addr8, int data8);");
	set_func_cmt(0X15DF6,	"Sends SPI write command. Commands follow a 24-bit format, 16-bit control field and 8-bit data.", 1);
	set_frame_size(0X15DF6, 0X10, 0, 0);
	add_func    (0X15E24,0X15E50);
	set_func_flags(0X15E24,0x400);
	SetType(0X15E24, "int __fastcall spi_raw_ct16_dt8_read(int bus_n_bytes, int addr8);");
	set_func_cmt(0X15E24,	"Sends SPI read command. Commands follow a 24-bit format, 16-bit control field and 8-bit data.", 1);
	set_frame_size(0X15E24, 0X10, 0, 0);
	add_func    (0X15E50,0X15E8A);
	set_func_flags(0X15E50,0x400);
	SetType(0X15E50, "void __fastcall spi_ad936x_raw_write_multi(int bus_n_bytes, int addr8, uint8_t *dtbuf, unsigned int dtlen);");
	set_frame_size(0X15E50, 0X18, 0, 0);
	add_func    (0X15E8A,0X15EC8);
	set_func_flags(0X15E8A,0x400);
	SetType(0X15E8A, "void __fastcall spi_ad936x_raw_read_multi(int bus_n_bytes, int addr8, uint8_t *dtbuf, unsigned int dtlen);");
	set_frame_size(0X15E8A, 0X18, 0, 0);
	add_func    (0X15EC8,0X15F16);
	set_func_flags(0X15EC8,0x400);
	SetType(0X15EC8, "void __fastcall ad936x_reg_sync_write(unsigned int addr10, int val, int wrflag);");
	set_frame_size(0X15EC8, 0X18, 0, 0);
	add_func    (0X15F16,0X15F62);
	set_func_flags(0X15F16,0x400);
	SetType(0X15F16, "int __fastcall ad936x_reg_sync_read(unsigned int addr10, int wrflag);");
	set_frame_size(0X15F16, 0X10, 0, 0);
	add_func    (0X15F74,0X16054);
	set_func_flags(0X15F74,0x400);
	set_frame_size(0X15F74, 0X18, 0, 0);
	add_func    (0X16054,0X1609E);
	set_func_flags(0X16054,0x400);
	set_frame_size(0X16054, 0X10, 0, 0);
	add_func    (0X1609E,0X16132);
	set_func_flags(0X1609E,0x400);
	set_frame_size(0X1609E, 0X20, 0, 0);
	add_func    (0X16136,0X16166);
	set_func_flags(0X16136,0x400);
	set_frame_size(0X16136, 0X108, 0, 0);
	add_func    (0X16166,0X1625E);
	set_func_flags(0X16166,0x400);
	set_frame_size(0X16166, 0X10, 0, 0);
	add_func    (0X1625E,0X1640A);
	set_func_flags(0X1625E,0x400);
	set_frame_size(0X1625E, 0X20, 0, 0);
	add_func    (0X1640A,0X16414);
	set_func_flags(0X1640A,0x400);
	add_func    (0X16414,0X166AA);
	set_func_flags(0X16414,0x400);
	set_frame_size(0X16414, 0X18, 0, 0);
	add_func    (0X166AA,0X16756);
	set_func_flags(0X166AA,0x400);
	set_frame_size(0X166AA, 0X10, 0, 0);
	add_func    (0X16756,0X16848);
	set_func_flags(0X16756,0x400);
	set_frame_size(0X16756, 0X10, 0, 0);
	add_func    (0X16848,0X16850);
	set_func_flags(0X16848,0x400);
	add_func    (0X16850,0X16896);
	set_func_flags(0X16850,0x400);
	set_frame_size(0X16850, 0X8, 0, 0);
	add_func    (0X16896,0X1698A);
	set_func_flags(0X16896,0x400);
	set_frame_size(0X16896, 0X10, 0, 0);
	add_func    (0X1698A,0X16AD0);
	set_func_flags(0X1698A,0x400);
	set_frame_size(0X1698A, 0X20, 0, 0);
	add_func    (0X16AD0,0X16AD8);
	set_func_flags(0X16AD0,0x400);
	add_func    (0X16AD8,0X16C74);
	set_func_flags(0X16AD8,0x400);
	set_frame_size(0X16AD8, 0X20, 0, 0);
	add_func    (0X16C74,0X16D54);
	set_func_flags(0X16C74,0x400);
	set_frame_size(0X16C74, 0X14, 0, 0);
	add_func    (0X16D54,0X16EF6);
	set_func_flags(0X16D54,0x400);
	set_frame_size(0X16D54, 0X10, 0, 0);
	add_func    (0X16EF6,0X17062);
	set_func_flags(0X16EF6,0x400);
	set_frame_size(0X16EF6, 0X8, 0, 0);
	add_func    (0X17062,0X17084);
	set_func_flags(0X17062,0x400);
	set_frame_size(0X17062, 0XC, 0, 0);
	add_func    (0X17084,0X170BE);
	set_func_flags(0X17084,0x400);
	set_frame_size(0X17084, 0XC, 0, 0);
	add_func    (0X170BE,0X171A6);
	set_func_flags(0X170BE,0x400);
	set_frame_size(0X170BE, 0X18, 0, 0);
	add_func    (0X171A6,0X1743E);
	set_func_flags(0X171A6,0x400);
	set_frame_size(0X171A6, 0X10, 0, 0);
	add_func    (0X1743E,0X174D4);
	set_func_flags(0X1743E,0x400);
	set_frame_size(0X1743E, 0X8, 0, 0);
	add_func    (0X174D4,0X174E6);
	set_func_flags(0X174D4,0x400);
	add_func    (0X174E6,0X174EE);
	set_func_flags(0X174E6,0x400);
	add_func    (0X174EE,0X1750A);
	set_func_flags(0X174EE,0x400);
	add_func    (0X1750A,0X17526);
	set_func_flags(0X1750A,0x400);
	set_frame_size(0X1750A, 0X4, 0, 0);
	add_func    (0X17526,0X17550);
	set_func_flags(0X17526,0x400);
	set_frame_size(0X17526, 0X8, 0, 0);
	add_func    (0X17550,0X1755C);
	set_func_flags(0X17550,0x400);
	add_func    (0X1755C,0X176F8);
	set_func_flags(0X1755C,0x400);
	set_frame_size(0X1755C, 0X30, 0, 0);
	add_func    (0X176F8,0X1771E);
	set_func_flags(0X176F8,0x400);
	add_func    (0X1771E,0X17742);
	set_func_flags(0X1771E,0x400);
	add_func    (0X17742,0X1777E);
	set_func_flags(0X17742,0x400);
	set_frame_size(0X17742, 0X8, 0, 0);
	add_func    (0X1777E,0X177B8);
	set_func_flags(0X1777E,0x400);
	set_frame_size(0X1777E, 0X8, 0, 0);
	add_func    (0X177B8,0X177D0);
	set_func_flags(0X177B8,0x400);
	add_func    (0X177D0,0X177E8);
	set_func_flags(0X177D0,0x400);
	add_func    (0X177E8,0X1785A);
	set_func_flags(0X177E8,0x400);
	set_frame_size(0X177E8, 0X30, 0, 0);
	add_func    (0X1785A,0X178BC);
	set_func_flags(0X1785A,0x400);
	set_frame_size(0X1785A, 0X8, 0, 0);
	add_func    (0X178F0,0X17906);
	set_func_flags(0X178F0,0x400);
	SetType(0X178F0, "void __fastcall set_transciever_flag_20001A28_E(int flag);");
	add_func    (0X17906,0X17912);
	set_func_flags(0X17906,0x400);
	SetType(0X17906, "void __fastcall set_transciever_flag_20001A28_D(int flag);");
	add_func    (0X17912,0X1791C);
	set_func_flags(0X17912,0x400);
	add_func    (0X1791C,0X17938);
	set_func_flags(0X1791C,0x400);
	add_func    (0X17938,0X17942);
	set_func_flags(0X17938,0x400);
	add_func    (0X17942,0X17952);
	set_func_flags(0X17942,0x400);
	add_func    (0X17952,0X1795C);
	set_func_flags(0X17952,0x400);
	add_func    (0X1795C,0X17970);
	set_func_flags(0X1795C,0x400);
	SetType(0X1795C, "void __cdecl update_tcx_power_zone_flag(int power_zone_is_ce);");
	add_func    (0X17970,0X17978);
	set_func_flags(0X17970,0x400);
	add_func    (0X17978,0X17980);
	set_func_flags(0X17978,0x400);
	add_func    (0X17980,0X17988);
	set_func_flags(0X17980,0x400);
	add_func    (0X17988,0X1799E);
	set_func_flags(0X17988,0x400);
	add_func    (0X1799E,0X179AE);
	set_func_flags(0X1799E,0x400);
	add_func    (0X179AE,0X179CA);
	set_func_flags(0X179AE,0x400);
	add_func    (0X179CA,0X179EC);
	set_func_flags(0X179CA,0x400);
	set_frame_size(0X179CA, 0X8, 0, 0);
	add_func    (0X179EC,0X179FC);
	set_func_flags(0X179EC,0x400);
	add_func    (0X179FC,0X17A0A);
	set_func_flags(0X179FC,0x400);
	add_func    (0X17A0A,0X17A16);
	set_func_flags(0X17A0A,0x400);
	add_func    (0X17A16,0X17A2C);
	set_func_flags(0X17A16,0x400);
	add_func    (0X17A2C,0X17A40);
	set_func_flags(0X17A2C,0x400);
	add_func    (0X17A40,0X17A48);
	set_func_flags(0X17A40,0x400);
	add_func    (0X17A48,0X17A6A);
	set_func_flags(0X17A48,0x400);
	add_func    (0X17A6A,0X17A74);
	set_func_flags(0X17A6A,0x400);
	add_func    (0X17A7C,0X17A84);
	set_func_flags(0X17A7C,0x400);
	add_func    (0X17A84,0X17A8C);
	set_func_flags(0X17A84,0x400);
	add_func    (0X17A8C,0X17A94);
	set_func_flags(0X17A8C,0x400);
	add_func    (0X17A94,0X17AF2);
	set_func_flags(0X17A94,0x400);
	SetType(0X17A94, "void __cdecl tcx_config_80105FA(int atten_ctrl_type);");
	set_frame_size(0X17A94, 0X10, 0, 0);
	add_func    (0X17AF2,0X17B06);
	set_func_flags(0X17AF2,0x400);
	add_func    (0X17B06,0X17B12);
	set_func_flags(0X17B06,0x400);
	add_func    (0X17B12,0X17B20);
	set_func_flags(0X17B12,0x400);
	add_func    (0X17B20,0X17B3E);
	set_func_flags(0X17B20,0x400);
	add_func    (0X17B3E,0X17B46);
	set_func_flags(0X17B3E,0x400);
	add_func    (0X17B46,0X17B4E);
	set_func_flags(0X17B46,0x400);
	add_func    (0X17B4E,0X17B58);
	set_func_flags(0X17B4E,0x400);
	add_func    (0X17B58,0X17B60);
	set_func_flags(0X17B58,0x400);
	add_func    (0X17B60,0X17C30);
	set_func_flags(0X17B60,0x400);
	SetType(0X17B60, "void __cdecl ad936x_config_set(unsigned int nreg, unsigned int nval, int a3);");
	set_frame_size(0X17B60, 0X10, 0, 0);
	add_func    (0X17C30,0X17CFA);
	set_func_flags(0X17C30,0x400);
	set_frame_size(0X17C30, 0X8, 0, 0);
	add_func    (0X17CFA,0X17D14);
	set_func_flags(0X17CFA,0x400);
	set_frame_size(0X17CFA, 0X8, 0, 0);
	add_func    (0X17D14,0X17D4A);
	set_func_flags(0X17D14,0x400);
	add_func    (0X17D54,0X17DDC);
	set_func_flags(0X17D54,0x400);
	set_func_cmt(0X17D54,	"Initializes the SPIx peripheral.", 1);
	set_frame_size(0X17D54, 0X18, 0, 0);
	add_func    (0X17DDC,0X17DF0);
	set_func_flags(0X17DDC,0x400);
	add_func    (0X17DFC,0X17E1E);
	set_func_flags(0X17DFC,0x400);
	set_frame_size(0X17DFC, 0X8, 0, 0);
	add_func    (0X17E1E,0X17E42);
	set_func_flags(0X17E1E,0x400);
	set_frame_size(0X17E1E, 0X8, 0, 0);
	add_func    (0X17E42,0X17E5C);
	set_func_flags(0X17E42,0x400);
	set_frame_size(0X17E42, 0X8, 0, 0);
	add_func    (0X17E5C,0X17E96);
	set_func_flags(0X17E5C,0x400);
	set_frame_size(0X17E5C, 0X8, 0, 0);
	add_func    (0X17E96,0X18000);
	set_func_flags(0X17E96,0x400);
	set_frame_size(0X17E96, 0X18, 0, 0);
	add_func    (0X18000,0X180D8);
	set_func_flags(0X18000,0x400);
	set_frame_size(0X18000, 0X10, 0, 0);
	add_func    (0X180D8,0X180F4);
	set_func_flags(0X180D8,0x400);
	set_frame_size(0X180D8, 0X8, 0, 0);
	add_func    (0X180F4,0X181D0);
	set_func_flags(0X180F4,0x400);
	set_frame_size(0X180F4, 0X18, 0, 0);
	add_func    (0X181D0,0X18212);
	set_func_flags(0X181D0,0x400);
	set_frame_size(0X181D0, 0X10, 0, 0);
	add_func    (0X18214,0X1828A);
	set_func_flags(0X18214,0x400);
	set_frame_size(0X18214, 0X18, 0, 0);
	add_func    (0X1828A,0X182C2);
	set_func_flags(0X1828A,0x400);
	add_func    (0X182C2,0X184A8);
	set_func_flags(0X182C2,0x400);
	set_frame_size(0X182C2, 0X38, 0, 0);
	define_local_var(0X182C2, 0X184A8, "[bp-0X10]", "varg_r0");
	define_local_var(0X182C2, 0X184A8, "[bp-0XC]", "varg_r1");
	define_local_var(0X182C2, 0X184A8, "[bp-0X8]", "varg_r2");
	define_local_var(0X182C2, 0X184A8, "[bp-0X4]", "varg_r3");
	add_func    (0X184A8,0X188B8);
	set_func_flags(0X184A8,0x400);
	set_frame_size(0X184A8, 0X58, 0, 0);
	add_func    (0X188B8,0X189EE);
	set_func_flags(0X188B8,0x400);
	set_frame_size(0X188B8, 0X18, 0, 0);
	add_func    (0X189EE,0X18A62);
	set_func_flags(0X189EE,0x400);
	set_frame_size(0X189EE, 0X10, 0, 0);
	add_func    (0X18A62,0X18AAC);
	set_func_flags(0X18A62,0x400);
	set_frame_size(0X18A62, 0X10, 0, 0);
	add_func    (0X18B10,0X18B24);
	set_func_flags(0X18B10,0x400);
	SetType(0X18B10, "int __fastcall compute_buf_crc8(int seed, uint8_t *buf, unsigned int len);");
	set_frame_size(0X18B10, 0X8, 0, 0);
	add_func    (0X18B24,0X18B32);
	set_func_flags(0X18B24,0x400);
	add_func    (0X18B32,0X18C5A);
	set_func_flags(0X18B32,0x400);
	SetType(0X18B32, "signed int __fastcall packet_unkn_18B32(struct DjiPacket **pkt);");
	set_frame_size(0X18B32, 0X30, 0, 0);
	define_local_var(0X18B32, 0X18C5A, "[bp-0X2C]", "p_err");
	add_func    (0X18C5A,0X18C68);
	set_func_flags(0X18C5A,0x400);
	SetType(0X18C5A, "void __cdecl packet_set_checksum(uint8_t *buf, uint16_t chksum);");
	set_frame_size(0X18C5A, 0XC, 0, 0);
	add_func    (0X18C78,0X18C82);
	set_func_flags(0X18C78,0x400);
	add_func    (0X18C82,0X18C8A);
	set_func_flags(0X18C82,0x400);
	add_func    (0X18C8A,0X18C90);
	set_func_flags(0X18C8A,0x400);
	add_func    (0X18C90,0X18CAA);
	set_func_flags(0X18C90,0x400);
	set_frame_size(0X18C90, 0X4, 0, 0);
	add_func    (0X18CAA,0X18CC4);
	set_func_flags(0X18CAA,0x400);
	set_frame_size(0X18CAA, 0X4, 0, 0);
	add_func    (0X18CC4,0X18CEC);
	set_func_flags(0X18CC4,0x400);
	set_frame_size(0X18CC4, 0X4, 0, 0);
	add_func    (0X18CEC,0X18D02);
	set_func_flags(0X18CEC,0x400);
	set_frame_size(0X18CEC, 0X8, 0, 0);
	add_func    (0X18D02,0X18D44);
	set_func_flags(0X18D02,0x400);
	set_frame_size(0X18D02, 0X4, 0, 0);
	add_func    (0X18D44,0X18D7C);
	set_func_flags(0X18D44,0x400);
	set_frame_size(0X18D44, 0X4, 0, 0);
	add_func    (0X18D7C,0X18DF6);
	set_func_flags(0X18D7C,0x400);
	set_frame_size(0X18D7C, 0X8, 0, 0);
	add_func    (0X18DF6,0X18E32);
	set_func_flags(0X18DF6,0x400);
	set_frame_size(0X18DF6, 0X4, 0, 0);
	add_func    (0X18E32,0X18E6A);
	set_func_flags(0X18E32,0x400);
	set_frame_size(0X18E32, 0XC, 0, 0);
	add_func    (0X18E9C,0X18ECC);
	set_func_flags(0X18E9C,0x400);
	set_frame_size(0X18E9C, 0X10, 0, 0);
	add_func    (0X18EF2,0X18F36);
	set_func_flags(0X18EF2,0x400);
	set_frame_size(0X18EF2, 0X4, 0, 0);
	add_func    (0X18F36,0X18F70);
	set_func_flags(0X18F36,0x400);
	set_frame_size(0X18F36, 0X4, 0, 0);
	add_func    (0X18F70,0X18FAC);
	set_func_flags(0X18F70,0x400);
	set_frame_size(0X18F70, 0X18, 0, 0);
	add_func    (0X18FAC,0X18FF8);
	set_func_flags(0X18FAC,0x400);
	set_frame_size(0X18FAC, 0X10, 0, 0);
	add_func    (0X18FF8,0X1902A);
	set_func_flags(0X18FF8,0x400);
	set_frame_size(0X18FF8, 0X8, 0, 0);
	add_func    (0X1902A,0X19076);
	set_func_flags(0X1902A,0x400);
	set_frame_size(0X1902A, 0X1C, 0, 0);
	add_func    (0X190A4,0X19110);
	set_func_flags(0X190A4,0x400);
	set_frame_size(0X190A4, 0X18, 0, 0);
	add_func    (0X19110,0X1921C);
	set_func_flags(0X19110,0x400);
	set_frame_size(0X19110, 0X40, 0, 0);
	add_func    (0X1921C,0X19326);
	set_func_flags(0X1921C,0x400);
	set_frame_size(0X1921C, 0X24, 0, 0);
	add_func    (0X19326,0X194AE);
	set_func_flags(0X19326,0x400);
	set_frame_size(0X19326, 0X58, 0, 0);
	define_local_var(0X19326, 0X194AE, "[bp+0]", "param_buf");
	define_local_var(0X19326, 0X194AE, "[bp+0X8]", "src");
	add_func    (0X194AE,0X1952C);
	set_func_flags(0X194AE,0x400);
	set_frame_size(0X194AE, 0X70, 0, 0);
	add_func    (0X1952C,0X195A0);
	set_func_flags(0X1952C,0x400);
	set_frame_size(0X1952C, 0XB8, 0, 0);
	add_func    (0X195A0,0X195FC);
	set_func_flags(0X195A0,0x400);
	set_frame_size(0X195A0, 0XB0, 0, 0);
	add_func    (0X195FC,0X1966A);
	set_func_flags(0X195FC,0x400);
	set_frame_size(0X195FC, 0XB8, 0, 0);
	add_func    (0X1966A,0X19688);
	set_func_flags(0X1966A,0x400);
	set_frame_size(0X1966A, 0X8, 0, 0);
	add_func    (0X19688,0X196A6);
	set_func_flags(0X19688,0x400);
	set_frame_size(0X19688, 0X8, 0, 0);
	add_func    (0X196A6,0X196DC);
	set_func_flags(0X196A6,0x400);
	set_frame_size(0X196A6, 0X28, 0, 0);
	add_func    (0X196DC,0X19714);
	set_func_flags(0X196DC,0x400);
	set_frame_size(0X196DC, 0X30, 0, 0);
	add_func    (0X19714,0X197A2);
	set_func_flags(0X19714,0x400);
	set_frame_size(0X19714, 0XC8, 0, 0);
	define_local_var(0X19714, 0X197A2, "[bp-0X70]", "param_buf");
	add_func    (0X197A2,0X197E4);
	set_func_flags(0X197A2,0x400);
	set_frame_size(0X197A2, 0X28, 0, 0);
	add_func    (0X197E4,0X19954);
	set_func_flags(0X197E4,0x400);
	set_frame_size(0X197E4, 0X30, 0, 0);
	add_func    (0X19954,0X199B6);
	set_func_flags(0X19954,0x400);
	set_frame_size(0X19954, 0X58, 0, 0);
	add_func    (0X199B6,0X19A00);
	set_func_flags(0X199B6,0x400);
	set_frame_size(0X199B6, 0X30, 0, 0);
	add_func    (0X19A00,0X19A2C);
	set_func_flags(0X19A00,0x400);
	set_frame_size(0X19A00, 0X10, 0, 0);
	add_func    (0X19A2C,0X19A58);
	set_func_flags(0X19A2C,0x400);
	set_frame_size(0X19A2C, 0X10, 0, 0);
	add_func    (0X19A58,0X19A78);
	set_func_flags(0X19A58,0x400);
	set_frame_size(0X19A58, 0X28, 0, 0);
	add_func    (0X19A8C,0X19BD8);
	set_func_flags(0X19A8C,0x400);
	set_frame_size(0X19A8C, 0X50, 0, 0);
	add_func    (0X19BD8,0X19C06);
	set_func_flags(0X19BD8,0x400);
	set_frame_size(0X19BD8, 0X28, 0, 0);
	add_func    (0X19C06,0X19C32);
	set_func_flags(0X19C06,0x400);
	set_frame_size(0X19C06, 0X28, 0, 0);
	add_func    (0X19C32,0X19C76);
	set_func_flags(0X19C32,0x400);
	set_frame_size(0X19C32, 0X10, 0, 0);
	add_func    (0X19C76,0X19C8C);
	set_func_flags(0X19C76,0x400);
	set_frame_size(0X19C76, 0X8, 0, 0);
	add_func    (0X19C8C,0X19CA2);
	set_func_flags(0X19C8C,0x400);
	set_frame_size(0X19C8C, 0X8, 0, 0);
	add_func    (0X19CA2,0X19CB8);
	set_func_flags(0X19CA2,0x400);
	set_frame_size(0X19CA2, 0X8, 0, 0);
	add_func    (0X19CB8,0X19CCE);
	set_func_flags(0X19CB8,0x400);
	set_frame_size(0X19CB8, 0X8, 0, 0);
	add_func    (0X19CCE,0X19CDE);
	set_func_flags(0X19CCE,0x400);
	set_frame_size(0X19CCE, 0X8, 0, 0);
	add_func    (0X19CDE,0X19D02);
	set_func_flags(0X19CDE,0x400);
	set_frame_size(0X19CDE, 0X10, 0, 0);
	add_func    (0X19D02,0X19D28);
	set_func_flags(0X19D02,0x400);
	set_frame_size(0X19D02, 0X10, 0, 0);
	add_func    (0X19D28,0X19D32);
	set_func_flags(0X19D28,0x400);
	add_func    (0X19D32,0X19D50);
	set_func_flags(0X19D32,0x400);
	set_frame_size(0X19D32, 0X8, 0, 0);
	add_func    (0X19D54,0X19E80);
	set_func_flags(0X19D54,0x410);
	set_frame_size(0X19D54, 0X120, 32, 0);
	add_func    (0X19E80,0X19F00);
	set_func_flags(0X19E80,0x400);
	set_frame_size(0X19E80, 0X20, 0, 0);
	add_func    (0X19F00,0X19F6C);
	set_func_flags(0X19F00,0x400);
	set_frame_size(0X19F00, 0X20, 0, 0);
	add_func    (0X19F6C,0X19F8E);
	set_func_flags(0X19F6C,0x400);
	set_frame_size(0X19F6C, 0X8, 0, 0);
	add_func    (0X19F8E,0X19FB4);
	set_func_flags(0X19F8E,0x400);
	set_frame_size(0X19F8E, 0XB8, 0, 0);
	add_func    (0X19FE8,0X1A20C);
	set_func_flags(0X19FE8,0x400);
	set_frame_size(0X19FE8, 0X20, 0, 0);
	add_func    (0X1A20C,0X1A40E);
	set_func_flags(0X1A20C,0x400);
	set_frame_size(0X1A20C, 0XC, 0, 0);
	add_func    (0X1A40E,0X1A72E);
	set_func_flags(0X1A40E,0x400);
	set_frame_size(0X1A40E, 0X24, 0, 0);
	add_func    (0X1A72E,0X1A872);
	set_func_flags(0X1A72E,0x400);
	set_frame_size(0X1A72E, 0X208, 0, 0);
	add_func    (0X1A872,0X1A8B8);
	set_func_flags(0X1A872,0x400);
	set_frame_size(0X1A872, 0X1C, 0, 0);
	add_func    (0X1A8B8,0X1A908);
	set_func_flags(0X1A8B8,0x400);
	set_frame_size(0X1A8B8, 0X18, 0, 0);
	add_func    (0X1A908,0X1A92C);
	set_func_flags(0X1A908,0x400);
	set_frame_size(0X1A908, 0XC, 0, 0);
	add_func    (0X1A938,0X1AC64);
	set_func_flags(0X1A938,0x404);
	SetType(0X1A938, "int __cdecl CAN_SetupAFLUT(struct LPC_CANAF_TypeDef *CANAFx, struct AF_SectionDef *AFSection);");
	set_func_cmt(0X1A938,	"Setup Acceptance Filter Look-Up Table", 1);
	set_frame_size(0X1A938, 0X30, 0, 0);
	add_func    (0X1AC64,0X1ACBA);
	set_func_flags(0X1AC64,0x400);
	set_func_cmt(0X1AC64,	"User function - not a part of LPC SDK", 1);
	set_frame_size(0X1AC64, 0X4, 0, 0);
	add_func    (0X1ACBA,0X1AF2C);
	set_func_flags(0X1ACBA,0x404);
	SetType(0X1ACBA, "int __cdecl CAN_LoadExplicitEntry(struct LPC_CAN_TypeDef *CANx, uint32_t id, int format);");
	set_func_cmt(0X1ACBA,	"Add Explicit ID into AF Look-Up Table dynamically.", 1);
	set_frame_size(0X1ACBA, 0X30, 0, 0);
	add_func    (0X1AF2C,0X1B128);
	set_func_flags(0X1AF2C,0x404);
	SetType(0X1AF2C, "int __cdecl CAN_LoadFullCANEntry(struct LPC_CAN_TypeDef *CANx, uint16_t id);");
	set_func_cmt(0X1AF2C,	"Load FullCAN entry into AFLUT", 1);
	set_frame_size(0X1AF2C, 0X24, 0, 0);
	add_func    (0X1B128,0X1B35A);
	set_func_flags(0X1B128,0x404);
	SetType(0X1B128, "int __cdecl CAN_LoadGroupEntry(struct LPC_CAN_TypeDef *CANx, uint32_t lowerID, uint32_t upperID, int format);");
	set_func_cmt(0X1B128,	"Load Group entry into AFLUT", 1);
	set_frame_size(0X1B128, 0X2C, 0, 0);
	add_func    (0X1B35A,0X1B6A6);
	set_func_flags(0X1B35A,0x404);
	SetType(0X1B35A, "int __cdecl CAN_RemoveEntry(int EntryType, uint16_t position);");
	set_frame_size(0X1B35A, 0X2C, 0, 0);
	add_func    (0X1B6AC,0X1B6D2);
	set_func_flags(0X1B6AC,0x400);
	set_frame_size(0X1B6AC, 0X10, 0, 0);
	add_func    (0X1B6D2,0X1B732);
	set_func_flags(0X1B6D2,0x400);
	set_frame_size(0X1B6D2, 0X8, 0, 0);
	add_func    (0X1B732,0X1B782);
	set_func_flags(0X1B732,0x400);
	set_frame_size(0X1B732, 0X8, 0, 0);
	add_func    (0X1B782,0X1B786);
	set_func_flags(0X1B782,0x480);
	add_func    (0X1B786,0X1B7AC);
	set_func_flags(0X1B786,0x400);
	set_frame_size(0X1B786, 0X8, 0, 0);
	add_func    (0X1B7AC,0X1B7CA);
	set_func_flags(0X1B7AC,0x400);
	add_func    (0X1B7CA,0X1B7D8);
	set_func_flags(0X1B7CA,0x400);
	set_frame_size(0X1B7CA, 0X8, 0, 0);
	add_func    (0X1B7D8,0X1B7E6);
	set_func_flags(0X1B7D8,0x400);
	set_frame_size(0X1B7D8, 0X8, 0, 0);
	add_func    (0X1B7E6,0X1B7F4);
	set_func_flags(0X1B7E6,0x400);
	set_frame_size(0X1B7E6, 0X8, 0, 0);
	add_func    (0X1B7F4,0X1B88A);
	set_func_flags(0X1B7F4,0x400);
	set_frame_size(0X1B7F4, 0X28, 0, 0);
	add_func    (0X1B88A,0X1B97A);
	set_func_flags(0X1B88A,0x400);
	set_frame_size(0X1B88A, 0X38, 0, 0);
	add_func    (0X1B97A,0X1B9D0);
	set_func_flags(0X1B97A,0x400);
	set_frame_size(0X1B97A, 0X10, 0, 0);
	add_func    (0X1B9D0,0X1BA34);
	set_func_flags(0X1B9D0,0x400);
	set_frame_size(0X1B9D0, 0X8, 0, 0);
	add_func    (0X1BA34,0X1BA42);
	set_func_flags(0X1BA34,0x400);
	add_func    (0X1BA70,0X1BACC);
	set_func_flags(0X1BA70,0x400);
	add_func    (0X1BACC,0X1BAE0);
	set_func_flags(0X1BACC,0x400);
	add_func    (0X1BAE0,0X1BAF2);
	set_func_flags(0X1BAE0,0x400);
	add_func    (0X1BAF2,0X1BB0A);
	set_func_flags(0X1BAF2,0x400);
	add_func    (0X1BB0A,0X1BB20);
	set_func_flags(0X1BB0A,0x400);
	add_func    (0X1BB20,0X1BB2C);
	set_func_flags(0X1BB20,0x400);
	add_func    (0X1BB2C,0X1BB34);
	set_func_flags(0X1BB2C,0x400);
	add_func    (0X1BB34,0X1BB6C);
	set_func_flags(0X1BB34,0x400);
	set_frame_size(0X1BB34, 0X10, 0, 0);
	add_func    (0X1BB6C,0X1BBA0);
	set_func_flags(0X1BB6C,0x400);
	set_frame_size(0X1BB6C, 0XC, 0, 0);
	add_func    (0X1BBA0,0X1BC08);
	set_func_flags(0X1BBA0,0x400);
	set_frame_size(0X1BBA0, 0X10, 0, 0);
	add_func    (0X1BC08,0X1BC42);
	set_func_flags(0X1BC08,0x400);
	set_frame_size(0X1BC08, 0X10, 0, 0);
	add_func    (0X1BC68,0X1BC8A);
	set_func_flags(0X1BC68,0x404);
	SetType(0X1BC68, "void CPU_TS_TmrInit(void);");
	set_func_cmt(0X1BC68,	"Initialize & start CPU timestamp timer.", 1);
	set_frame_size(0X1BC68, 0X8, 0, 0);
	add_func    (0X1BC8A,0X1BC90);
	set_func_flags(0X1BC8A,0x404);
	set_func_cmt(0X1BC8A,	"Get current CPU timestamp timer count value. May be defined as CPU_TS_TmrRd() to improve performance when retrieving the timestamp.", 1);
	set_frame_size(0X1BC8A, 0, 0, 0);
	add_func    (0X1BC90,0X1BC96);
	set_func_flags(0X1BC90,0x400);
	add_func    (0X1BCA0,0X1BCA2);
	set_func_flags(0X1BCA0,0x400);
	add_func    (0X1BCA2,0X1BCB0);
	set_func_flags(0X1BCA2,0x400);
	add_func    (0X1BCB0,0X1BCB4);
	set_func_flags(0X1BCB0,0x480);
	SetType(0X1BCB0, "void j___disable_irq(void);");
	add_func    (0X1BCB4,0X1BCC2);
	set_func_flags(0X1BCB4,0x400);
	add_func    (0X1BCC2,0X1BCEC);
	set_func_flags(0X1BCC2,0x400);
	SetType(0X1BCC2, "void __fastcall OS_CPU_UsrIntHandlerRegister(unsigned int num, void *handler);");
	set_func_cmt(0X1BCC2,	"User-made - not found in SDK", 1);
	set_frame_size(0X1BCC2, 0X10, 0, 0);
	add_func    (0X1BCEC,0X1BD1A);
	set_func_flags(0X1BCEC,0x400);
	set_frame_size(0X1BCEC, 0X10, 0, 0);
	add_func    (0X1BD1A,0X1BD1C);
	set_func_flags(0X1BD1A,0x440);
	add_func    (0X1BD1C,0X1BD30);
	set_func_flags(0X1BD1C,0x400);
	set_frame_size(0X1BD1C, 0X8, 0, 0);
	add_func    (0X1BD30,0X1BD32);
	set_func_flags(0X1BD30,0x401);
	add_func    (0X1BD32,0X1BD34);
	set_func_flags(0X1BD32,0x401);
	add_func    (0X1BD34,0X1BD36);
	set_func_flags(0X1BD34,0x401);
	add_func    (0X1BD36,0X1BD38);
	set_func_flags(0X1BD36,0x401);
	add_func    (0X1BD38,0X1BD3A);
	set_func_flags(0X1BD38,0x401);
	add_func    (0X1BD3A,0X1BD3C);
	set_func_flags(0X1BD3A,0x401);
	add_func    (0X1BD3C,0X1BD3E);
	set_func_flags(0X1BD3C,0x401);
	add_func    (0X1BD3E,0X1BD70);
	set_func_flags(0X1BD3E,0x404);
	SetType(0X1BD3E, "void __cdecl OS_CPU_IntHandler(int int_num);");
	set_func_cmt(0X1BD3E,	"Handles all Cortex NVIC's external sources interrupts", 1);
	set_frame_size(0X1BD3E, 0X10, 0, 0);
	add_func    (0X1BEBA,0X1BF70);
	set_func_flags(0X1BEBA,0x400);
	set_frame_size(0X1BEBA, 0X10, 0, 0);
	add_func    (0X1BF90,0X1BF92);
	set_func_flags(0X1BF90,0x404);
	SetType(0X1BF90, "void OSCfg_Init(void);");
	set_func_cmt(0X1BF90,	"This function is used to make sure that debug variables that are unused in the application are not optimized away.\nThis function might not be necessary for all compilers.", 1);
	set_frame_size(0X1BF90, 0, 0, 0);
	add_func    (0X1BF94,0X1BFA2);
	set_func_flags(0X1BF94,0x405);
	SetType(0X1BF94, "void __cdecl OS_IdleTask(void *p_arg);");
	set_func_cmt(0X1BF94,	"This task is internal to uC/OS-III and executes whenever no other higher priority tasks executes because they are ALL waiting for event(s) to occur.", 1);
	set_frame_size(0X1BF94, 0, 0, 0);
	add_func    (0X1BFA2,0X1BFE0);
	set_func_flags(0X1BFA2,0x404);
	SetType(0X1BFA2, "void __cdecl OS_IdleTaskInit(enum OS_ERR *p_err);");
	set_func_cmt(0X1BFA2,	"This function initializes the idle task", 1);
	set_frame_size(0X1BFA2, 0X28, 0, 0);
	define_local_var(0X1BFA2, 0X1BFE0, "[bp-0X20]", "stk_limit");
	define_local_var(0X1BFA2, 0X1BFE0, "[bp-0X14]", "time_quanta");
	define_local_var(0X1BFA2, 0X1BFE0, "[bp-0X10]", "p_ext");
	add_func    (0X1BFE0,0X1BFFE);
	set_func_flags(0X1BFE0,0x404);
	SetType(0X1BFE0, "void OS_RdyListInit(void);");
	set_func_cmt(0X1BFE0,	"This function is called by OSInit() to initialize the ready list.\nThe ready list contains a list of all the tasks that are ready to run.", 1);
	set_frame_size(0X1BFE0, 0, 0, 0);
	add_func    (0X1BFFE,0X1C086);
	set_func_flags(0X1BFFE,0x404);
	SetType(0X1BFFE, "void __cdecl OSInit(enum OS_ERR *p_err);");
	set_func_cmt(0X1BFFE,	"This function is used to initialize the internals of uC/OS-III and MUST be called prior to creating any uC/OS-III object and, prior to calling OS_Start().", 1);
	set_frame_size(0X1BFFE, 0X8, 0, 0);
	add_func    (0X1C086,0X1C09C);
	set_func_flags(0X1C086,0x404);
	SetType(0X1C086, "void OSIntEnter(void);");
	set_func_cmt(0X1C086,	"This function is used to notify uC/OS-III that you are about to service an interrupt service routine (ISR).\nThis allows uC/OS-III to keep track of interrupt nesting and thus only perform rescheduling at the last nested ISR.", 1);
	set_frame_size(0X1C086, 0, 0, 0);
	add_func    (0X1C09C,0X1C104);
	set_func_flags(0X1C09C,0x404);
	SetType(0X1C09C, "void OSIntExit(void);");
	set_func_cmt(0X1C09C,	"This function is used to notify uC/OS-III that you have completed servicing an ISR.\nWhen the last nested ISR has completed, uC/OS-III will call the scheduler to determine whether a new, high-priority task, is ready to run.", 1);
	set_frame_size(0X1C09C, 0X8, 0, 0);
	add_func    (0X1C104,0X1C15E);
	set_func_flags(0X1C104,0x404);
	SetType(0X1C104, "void OSSched(void);");
	set_func_cmt(0X1C104,	"This function is called by other uC/OS-III services to determine whether a new, high priority task has been made ready to run.\nThis function is invoked by TASK level code and is not used to reschedule tasks from ISRs (see OSIntExit() for ISR rescheduling).", 1);
	set_frame_size(0X1C104, 0X8, 0, 0);
	add_func    (0X1C15E,0X1C172);
	set_func_flags(0X1C15E,0x404);
	SetType(0X1C15E, "void OS_SchedLockTimeMeasStart(void);");
	set_func_cmt(0X1C15E,	"These functions are used to measure the peak amount of time that the scheduler is locked", 1);
	set_frame_size(0X1C15E, 0X8, 0, 0);
	add_func    (0X1C172,0X1C1B6);
	set_func_flags(0X1C172,0x404);
	SetType(0X1C172, "void __cdecl OSSchedLock(enum OS_ERR *p_err);");
	set_func_cmt(0X1C172,	"This function is used to prevent rescheduling from taking place.\nThis allows your application to prevent context switches until you are ready to permit context switching.", 1);
	set_frame_size(0X1C172, 0X10, 0, 0);
	add_func    (0X1C1B6,0X1C1E0);
	set_func_flags(0X1C1B6,0x404);
	SetType(0X1C1B6, "void OS_SchedLockTimeMeasStop(void);");
	set_frame_size(0X1C1B6, 0X8, 0, 0);
	add_func    (0X1C1E0,0X1C23C);
	set_func_flags(0X1C1E0,0x404);
	SetType(0X1C1E0, "void __cdecl OSSchedUnlock(enum OS_ERR *p_err);");
	set_func_cmt(0X1C1E0,	"This function is used to re-allow rescheduling.", 1);
	set_frame_size(0X1C1E0, 0X10, 0, 0);
	add_func    (0X1C23C,0X1C27A);
	set_func_flags(0X1C23C,0x404);
	SetType(0X1C23C, "void __cdecl OSStart(enum OS_ERR *p_err);");
	set_func_cmt(0X1C23C,	"This function is used to start the multitasking process which lets uC/OS-III manages the task that you created.\nBefore you can call OSStart(), you MUST have called OSInit() and you MUST have created at least one application task.", 1);
	set_frame_size(0X1C23C, 0X10, 0, 0);
	add_func    (0X1C27A,0X1C284);
	set_func_flags(0X1C27A,0x404);
	SetType(0X1C27A, "unsigned __int16 __cdecl OSVersion(enum OS_ERR *p_err);");
	set_frame_size(0X1C27A, 0, 0, 0);
	add_func    (0X1C284,0X1C2B2);
	set_func_flags(0X1C284,0x404);
	SetType(0X1C284, "void __cdecl OS_PendDbgNameAdd(struct OS_PEND_OBJ *p_obj, struct OS_TCB *p_tcb);");
	set_func_cmt(0X1C284,	"Used to add pointers to ASCII 'names' of objects so they can easily be displayed using a kernel aware tool.", 1);
	set_frame_size(0X1C284, 0, 0, 0);
	add_func    (0X1C2B2,0X1C30C);
	set_func_flags(0X1C2B2,0x404);
	SetType(0X1C2B2, "void __cdecl OS_PendListInsertPrio(struct OS_PEND_LIST *p_pend_list, struct OS_PEND_DATA *p_pend_data);");
	set_func_cmt(0X1C2B2,	"This function is called to place an OS_PEND_DATA entry in a linked list based on its priority.\nThe highest priority being placed at the head of the list.", 1);
	set_frame_size(0X1C2B2, 0XC, 0, 0);
	add_func    (0X1C30C,0X1C33C);
	set_func_flags(0X1C30C,0x404);
	SetType(0X1C30C, "void __cdecl OS_PendDataInit(struct OS_TCB *p_tcb, struct OS_PEND_DATA *p_pend_data_tbl, unsigned __int16 tbl_size);");
	set_func_cmt(0X1C30C,	"This function is called to initialize the fields of a table of OS_PEND_DATA entries.\nIt's assumed that the .PendObjPtr field of each entry in the table is set by the caller and thus will NOT be touched by this function.", 1);
	set_frame_size(0X1C30C, 0X8, 0, 0);
	add_func    (0X1C33C,0X1C40C);
	set_func_flags(0X1C33C,0x404);
	SetType(0X1C33C, "void __cdecl OS_RdyListRemove(struct OS_TCB *p_tcb);");
	set_func_cmt(0X1C33C,	"This function is called to remove an OS_TCB from an OS_RDY_LIST knowing the address of the OS_TCB to remove.", 1);
	set_frame_size(0X1C33C, 0X10, 0, 0);
	add_func    (0X1C40C,0X1C436);
	set_func_flags(0X1C40C,0x404);
	SetType(0X1C40C, "void __cdecl OS_TaskBlock(struct OS_TCB *p_tcb, unsigned __int32 timeout);");
	set_func_cmt(0X1C40C,	"This function is called to remove a task from the ready list and also insert it in the timer tick list if the specified timeout is non-zero.", 1);
	set_frame_size(0X1C40C, 0X10, 0, 0);
	add_func    (0X1C436,0X1C47E);
	set_func_flags(0X1C436,0x404);
	SetType(0X1C436, "void __cdecl OS_Pend(struct OS_PEND_DATA *p_pend_data, struct OS_PEND_OBJ *p_obj, unsigned __int8 pending_on, unsigned __int32 timeout);");
	set_func_cmt(0X1C436,	"This function is called to place a task in the blocked state waiting for an event to occur.\nThis function exist because it is common to a number of OSxxxPend() services.", 1);
	set_frame_size(0X1C436, 0X18, 0, 0);
	add_func    (0X1C47E,0X1C4B4);
	set_func_flags(0X1C47E,0x404);
	SetType(0X1C47E, "void __cdecl OS_PendListRemove1(struct OS_PEND_LIST *p_pend_list, struct OS_PEND_DATA *p_pend_data);");
	set_func_cmt(0X1C47E,	"This function is called to remove a task from a wait list knowing only the TCB of the task to remove", 1);
	set_frame_size(0X1C47E, 0X8, 0, 0);
	add_func    (0X1C4B4,0X1C4DA);
	set_func_flags(0X1C4B4,0x404);
	SetType(0X1C4B4, "void __cdecl OS_PendListRemove(struct OS_TCB *p_tcb);");
	set_func_cmt(0X1C4B4,	"This function is called to remove a task from a pend list knowing only the TCB of the task to remove", 1);
	set_frame_size(0X1C4B4, 0X10, 0, 0);
	add_func    (0X1C4DA,0X1C4FA);
	set_func_flags(0X1C4DA,0x404);
	SetType(0X1C4DA, "void __cdecl OS_PendAbort1(struct OS_PEND_OBJ *p_obj, struct OS_TCB *p_tcb, unsigned __int32 ts);");
	set_func_cmt(0X1C4DA,	"This function is called when a task is pending on multiple objects and one of the objects has been pend aborted.\nThis function needs to indicate to the caller which object was pend aborted by placing the address of the object in the OS_PEND_DATA table corresponding to the pend aborted object.", 1);
	set_frame_size(0X1C4DA, 0X8, 0, 0);
	add_func    (0X1C4FA,0X1C52E);
	set_func_flags(0X1C4FA,0x404);
	SetType(0X1C4FA, "void __cdecl OS_RdyListInsertHead(struct OS_TCB *p_tcb);");
	set_func_cmt(0X1C4FA,	"This function is called to place an OS_TCB at the beginning of a linked list", 1);
	set_frame_size(0X1C4FA, 0, 0, 0);
	add_func    (0X1C52E,0X1C55E);
	set_func_flags(0X1C52E,0x404);
	SetType(0X1C52E, "void __cdecl OS_RdyListInsertTail(struct OS_TCB *p_tcb);");
	set_func_cmt(0X1C52E,	"This function is called to place an OS_TCB at the end of a linked list.\nThis function is INTERNAL to uC/OS-III and your application MUST NOT call it.", 1);
	set_frame_size(0X1C52E, 0, 0, 0);
	add_func    (0X1C55E,0X1C584);
	set_func_flags(0X1C55E,0x404);
	SetType(0X1C55E, "void __cdecl OS_RdyListInsert(struct OS_TCB *p_tcb);");
	set_func_cmt(0X1C55E,	"This function is called to insert a TCB in the ready list.\nThis function is INTERNAL to uC/OS-III and your application should not call it.", 1);
	set_frame_size(0X1C55E, 0X8, 0, 0);
	add_func    (0X1C584,0X1C59E);
	set_func_flags(0X1C584,0x404);
	SetType(0X1C584, "void __cdecl OS_TaskRdy(struct OS_TCB *p_tcb);");
	set_func_cmt(0X1C584,	"This function is called to make a task ready-to-run.\nThis function is INTERNAL to uC/OS-III and your application MUST NOT call it.", 1);
	set_frame_size(0X1C584, 0X8, 0, 0);
	add_func    (0X1C59E,0X1C622);
	set_func_flags(0X1C59E,0x404);
	SetType(0X1C59E, "void __cdecl OS_PendAbort(struct OS_PEND_OBJ *p_obj, struct OS_TCB *p_tcb, unsigned __int32 ts);");
	set_func_cmt(0X1C59E,	"This function is called by OSxxxPendAbort() functions to abort pending on an event.", 1);
	set_frame_size(0X1C59E, 0X18, 0, 0);
	add_func    (0X1C626,0X1C63C);
	set_func_flags(0X1C626,0x404);
	SetType(0X1C626, "void __cdecl OS_PendDbgNameRemove(struct OS_PEND_OBJ *p_obj, struct OS_TCB *p_tcb);");
	set_func_cmt(0X1C626,	"Used to remove pointers to ASCII 'names' of objects.", 1);
	set_frame_size(0X1C626, 0, 0, 0);
	add_func    (0X1C63C,0X1C66E);
	set_func_flags(0X1C63C,0x404);
	SetType(0X1C63C, "void __cdecl OS_PendListChangePrio(struct OS_TCB *p_tcb, unsigned __int8 prio_new);");
	set_func_cmt(0X1C63C,	"This function is called to change the position of a task waiting in one or more pend lists.\nBecause a task can be waiting on multiple objects then each pend list needs to be updated.  Specifically, the\ntask can be the highest priority task waiting on one pend list, the lowest priority task waiting in yet\nanother pend list or somewhere else in another pend list.", 1);
	set_frame_size(0X1C63C, 0X10, 0, 0);
	add_func    (0X1C66E,0X1C678);
	set_func_flags(0X1C66E,0x404);
	SetType(0X1C66E, "void __cdecl OS_PendListInit(struct OS_PEND_LIST *p_pend_list);");
	set_func_cmt(0X1C66E,	"This function is called to initialize the fields of an OS_PEND_LIST.", 1);
	set_frame_size(0X1C66E, 0, 0, 0);
	add_func    (0X1C678,0X1C698);
	set_func_flags(0X1C678,0x404);
	SetType(0X1C678, "void __cdecl OS_PendListInsertHead(struct OS_PEND_LIST *p_pend_list, struct OS_PEND_DATA *p_pend_data);");
	set_func_cmt(0X1C678,	"This function is called to place an OS_PEND_DATA entry at the beginning of a linked list", 1);
	set_frame_size(0X1C678, 0, 0, 0);
	add_func    (0X1C698,0X1C6B8);
	set_func_flags(0X1C698,0x404);
	SetType(0X1C698, "void __cdecl OS_PendObjDel1(struct OS_PEND_OBJ *p_obj, struct OS_TCB *p_tcb, unsigned __int32 ts);");
	set_func_cmt(0X1C698,	"This function is called when a task is pending on multiple objects and the object is being deleted.\nThis function needs to indicate to the caller which object was deleted by placing the address of the\nobject in the OS_PEND_DATA table corresponding to the deleted object.", 1);
	set_frame_size(0X1C698, 0X8, 0, 0);
	add_func    (0X1C6B8,0X1C736);
	set_func_flags(0X1C6B8,0x404);
	SetType(0X1C6B8, "void __cdecl OS_PendObjDel(struct OS_PEND_OBJ *p_obj, struct OS_TCB *p_tcb, unsigned __int32 ts);");
	set_func_cmt(0X1C6B8,	"This function is called when a object is to make a task ready-to-run.", 1);
	set_frame_size(0X1C6B8, 0X18, 0, 0);
	add_func    (0X1C736,0X1C75C);
	set_func_flags(0X1C736,0x404);
	SetType(0X1C736, "void __cdecl OS_Post1(struct OS_PEND_OBJ *p_obj, struct OS_TCB *p_tcb, void *p_void, unsigned __int16 msg_size, unsigned __int32 ts);");
	set_func_cmt(0X1C736,	"This function is called when a task is pending on multiple objects and the object has been posted to.\nThis function needs to indicate to the caller which object was posted to by placing the address of the\nobject in the OS_PEND_DATA table corresponding to the posted object.", 1);
	set_frame_size(0X1C736, 0X10, 0, 0);
	define_local_var(0X1C736, 0X1C75C, "[bp+0]", "ts");
	add_func    (0X1C75C,0X1C7F4);
	set_func_flags(0X1C75C,0x404);
	SetType(0X1C75C, "void __cdecl OS_Post(struct OS_PEND_OBJ *p_obj, struct OS_TCB *p_tcb, void *p_void, unsigned __int16 msg_size, unsigned __int32 ts);");
	set_func_cmt(0X1C75C,	"This function is called to post to a task.  This function exist because it is common to a number of OSxxxPost() services.\nINTERNAL to uC/OS-III - your application should not call it.", 1);
	set_frame_size(0X1C75C, 0X18, 0, 0);
	define_local_var(0X1C75C, 0X1C7F4, "[bp+0]", "ts");
	add_func    (0X1C7F4,0X1C828);
	set_func_flags(0X1C7F4,0x400);
	set_frame_size(0X1C7F4, 0X8, 0, 0);
	add_func    (0X1C838,0X1C83A);
	set_func_flags(0X1C838,0x404);
	SetType(0X1C838, "void OSIdleTaskHook(void);");
	set_func_cmt(0X1C838,	"This function is called by the idle task.\nThis hook has been added to allow you to do such things as STOP the CPU to conserve power.", 1);
	set_frame_size(0X1C838, 0, 0, 0);
	add_func    (0X1C83A,0X1C860);
	set_func_flags(0X1C83A,0x404);
	SetType(0X1C83A, "void OSInitHook(void);");
	set_func_cmt(0X1C83A,	"This function is called by OSInit() at the beginning of OSInit().", 1);
	set_frame_size(0X1C83A, 0XC, 0, 0);
	add_func    (0X1C860,0X1C862);
	set_func_flags(0X1C860,0x404);
	SetType(0X1C860, "void OSStatTaskHook(void);");
	set_func_cmt(0X1C860,	"This function is called every second by uC/OS-III's statistics task.\nThis allows your application to add functionality to the statistics task.", 1);
	set_frame_size(0X1C860, 0, 0, 0);
	add_func    (0X1C862,0X1C864);
	set_func_flags(0X1C862,0x404);
	SetType(0X1C862, "void __cdecl OSTaskCreateHook(struct OS_TCB *p_tcb);");
	set_func_cmt(0X1C862,	"This function is called when a task is created.", 1);
	set_frame_size(0X1C862, 0, 0, 0);
	add_func    (0X1C864,0X1C866);
	set_func_flags(0X1C864,0x404);
	SetType(0X1C864, "void __cdecl OSTaskDelHook(struct OS_TCB *p_tcb);");
	set_func_cmt(0X1C864,	"This function is called when a task is deleted.", 1);
	set_frame_size(0X1C864, 0, 0, 0);
	add_func    (0X1C866,0X1C868);
	set_func_flags(0X1C866,0x404);
	SetType(0X1C866, "void __cdecl OSTaskReturnHook(struct OS_TCB *p_tcb);");
	set_func_cmt(0X1C866,	"This function is called if a task accidentally returns.  In other words, a task should either be an infinite loop or delete itself when done.", 1);
	set_frame_size(0X1C866, 0, 0, 0);
	add_func    (0X1C868,0X1C8C4);
	set_func_flags(0X1C868,0x404);
	SetType(0X1C868, "struct CPU_STK *__cdecl OSTaskStkInit(void (__cdecl *p_task)(void *), void *p_arg, struct CPU_STK *p_stk_base, struct CPU_STK *p_stk_limit, unsigned __int32 stk_size, unsigned __int16 opt);");
	set_func_cmt(0X1C868,	"This function is called by OS_Task_Create() or OSTaskCreateExt() to initialize the stack frame of the task being created.\nThis function is highly processor specific.", 1);
	set_frame_size(0X1C868, 0X8, 0, 0);
	define_local_var(0X1C868, 0X1C8C4, "[bp+0]", "stk_size");
	define_local_var(0X1C868, 0X1C8C4, "[bp+0X4]", "opt");
	add_func    (0X1C8C4,0X1C912);
	set_func_flags(0X1C8C4,0x404);
	SetType(0X1C8C4, "void OSTaskSwHook(void);");
	set_func_cmt(0X1C8C4,	"This function is called when a task switch is performed.\nThis allows you to perform other operations during a context switch.", 1);
	set_frame_size(0X1C8C4, 0X10, 0, 0);
	add_func    (0X1C912,0X1C914);
	set_func_flags(0X1C912,0x404);
	SetType(0X1C912, "void OSTimeTickHook(void);");
	set_func_cmt(0X1C912,	"This function is called every tick.", 1);
	set_frame_size(0X1C912, 0, 0, 0);
	add_func    (0X1C914,0X1C93E);
	set_func_flags(0X1C914,0x404);
	SetType(0X1C914, "void OS_CPU_SysTickHandler(void);");
	set_func_cmt(0X1C914,	"Handle the system tick (SysTick) interrupt, which is used to generate the uC/OS-II tick interrupt.", 1);
	set_frame_size(0X1C914, 0X8, 0, 0);
	add_func    (0X1C988,0X1C98A);
	set_func_flags(0X1C988,0x404);
	SetType(0X1C988, "void OS_Dbg_Init(void);");
	set_func_cmt(0X1C988,	"This function is used to make sure that debug variables that are unused in the application are not optimized away.\nThis function might not be necessary for all compilers.", 1);
	set_frame_size(0X1C988, 0, 0, 0);
	add_func    (0X1C98C,0X1C9BC);
	set_func_flags(0X1C98C,0x404);
	SetType(0X1C98C, "void __cdecl OS_MsgPoolCreate(struct OS_MSG *p_msg, unsigned __int16 size);");
	set_func_cmt(0X1C98C,	"This function is called to create a singly linked list of OS_MSGs which is used as a pool of available OS_MSGs to be used for sending messages.", 1);
	set_frame_size(0X1C98C, 0X8, 0, 0);
	add_func    (0X1C9BC,0X1C9E2);
	set_func_flags(0X1C9BC,0x404);
	SetType(0X1C9BC, "int __fastcall OS_MsgUnkn_129BC(struct OS_MSG *p_msg, int size, enum OS_ERR *p_err);");
	set_frame_size(0X1C9BC, 0X10, 0, 0);
	add_func    (0X1C9E2,0X1CA04);
	set_func_flags(0X1C9E2,0x404);
	SetType(0X1C9E2, "void __cdecl OS_MsgPoolInit(enum OS_ERR *p_err);");
	set_func_cmt(0X1C9E2,	"This function is called by OSInit() to initialize the free list of OS_MSGs.", 1);
	set_frame_size(0X1C9E2, 0X10, 0, 0);
	add_func    (0X1CA04,0X1CA24);
	set_func_flags(0X1CA04,0x400);
	set_frame_size(0X1CA04, 0X10, 0, 0);
	add_func    (0X1CA24,0X1CA52);
	set_func_flags(0X1CA24,0x404);
	SetType(0X1CA24, "unsigned __int16 __cdecl OS_MsgQFreeAll(struct OS_MSG_Q *p_msg_q);");
	set_func_cmt(0X1CA24,	"This function returns all the messages in a message queue to the free list.", 1);
	set_frame_size(0X1CA24, 0X8, 0, 0);
	add_func    (0X1CA52,0X1CA60);
	set_func_flags(0X1CA52,0x404);
	SetType(0X1CA52, "void __cdecl OS_MsgQInit(struct OS_MSG_Q *p_msg_q, unsigned __int16 size);");
	set_func_cmt(0X1CA52,	"This function is called to initialize a message queue.\nINTERNAL to uC/OS-III - your application MUST NOT call it.", 1);
	set_frame_size(0X1CA52, 0, 0, 0);
	add_func    (0X1CA60,0X1CAB2);
	set_func_flags(0X1CA60,0x404);
	SetType(0X1CA60, "void *__cdecl OS_MsgQGet(struct OS_MSG_Q *p_msg_q, unsigned __int16 *p_msg_size, unsigned __int32 *p_ts, enum OS_ERR *p_err);");
	set_func_cmt(0X1CA60,	"This function retrieves a message from a message queue.", 1);
	set_frame_size(0X1CA60, 0X14, 0, 0);
	add_func    (0X1CAB2,0X1CB38);
	set_func_flags(0X1CAB2,0x404);
	SetType(0X1CAB2, "void __cdecl OS_MsgQPut(struct OS_MSG_Q *p_msg_q, void *p_void, unsigned __int16 msg_size, unsigned __int16 opt, unsigned __int32 ts, enum OS_ERR *p_err);");
	set_func_cmt(0X1CAB2,	"This function places a message in a message queue.", 1);
	set_frame_size(0X1CAB2, 0X1C, 0, 0);
	define_local_var(0X1CAB2, 0X1CB38, "[bp+0]", "ts");
	define_local_var(0X1CAB2, 0X1CB38, "[bp+0X4]", "p_err");
	add_func    (0X1CB44,0X1CB54);
	set_func_flags(0X1CB44,0x404);
	SetType(0X1CB44, "void OS_PrioInit(void);");
	set_frame_size(0X1CB44, 0, 0, 0);
	add_func    (0X1CB54,0X1CB74);
	set_func_flags(0X1CB54,0x404);
	SetType(0X1CB54, "enum OS_PRIO OS_PrioGetHighest(void);");
	set_frame_size(0X1CB54, 0X8, 0, 0);
	add_func    (0X1CB74,0X1CB90);
	set_func_flags(0X1CB74,0x404);
	SetType(0X1CB74, "void __cdecl OS_PrioInsert(enum OS_PRIO prio);");
	set_func_cmt(0X1CB74,	"This function is called to insert a priority in the priority table.", 1);
	set_frame_size(0X1CB74, 0, 0, 0);
	add_func    (0X1CB90,0X1CBAC);
	set_func_flags(0X1CB90,0x404);
	SetType(0X1CB90, "void __cdecl OS_PrioRemove(enum OS_PRIO prio);");
	set_func_cmt(0X1CB90,	"This function is called to remove a priority in the priority table.", 1);
	set_frame_size(0X1CB90, 0, 0, 0);
	add_func    (0X1CBB0,0X1CBCA);
	set_func_flags(0X1CBB0,0x404);
	SetType(0X1CBB0, "void __cdecl OS_SemDbgListAdd(struct OS_SEM *p_sem);");
	set_func_cmt(0X1CBB0,	"Called by uC/OS-III to add a semaphore to the debug list.", 1);
	set_frame_size(0X1CBB0, 0, 0, 0);
	add_func    (0X1CBCA,0X1CC14);
	set_func_flags(0X1CBCA,0x404);
	SetType(0X1CBCA, "void __cdecl OSSemCreate(struct OS_SEM *p_sem, char *p_name, unsigned __int32 cnt, enum OS_ERR *p_err);");
	set_func_cmt(0X1CBCA,	"This function creates a semaphore.", 1);
	set_frame_size(0X1CBCA, 0X18, 0, 0);
	add_func    (0X1CC14,0X1CC2A);
	set_func_flags(0X1CC14,0x404);
	SetType(0X1CC14, "void __cdecl OS_SemClr(struct OS_SEM *p_sem);");
	set_func_cmt(0X1CC14,	"This function is called by OSSemDel() to clear the contents of a semaphore", 1);
	set_frame_size(0X1CC14, 0, 0, 0);
	add_func    (0X1CC2A,0X1CC4E);
	set_func_flags(0X1CC2A,0x404);
	SetType(0X1CC2A, "void __cdecl OS_SemDbgListRemove(struct OS_SEM *p_sem);");
	set_frame_size(0X1CC2A, 0, 0, 0);
	add_func    (0X1CC4E,0X1CD0A);
	set_func_flags(0X1CC4E,0x404);
	SetType(0X1CC4E, "unsigned __int16 __cdecl OSSemDel(struct OS_SEM *p_sem, unsigned __int16 opt, enum OS_ERR *p_err);");
	set_func_cmt(0X1CC4E,	"This function deletes a semaphore.", 1);
	set_frame_size(0X1CC4E, 0X28, 0, 0);
	define_local_var(0X1CC4E, 0X1CD0A, "[bp-0X28]", "priMask");
	add_func    (0X1CD0E,0X1CE18);
	set_func_flags(0X1CD0E,0x404);
	SetType(0X1CD0E, "unsigned __int16 __cdecl OSSemPend(struct OS_SEM *p_sem, unsigned __int32 timeout, enum OS_OPT opt, unsigned __int32 *p_ts, enum OS_ERR *p_err);");
	set_frame_size(0X1CD0E, 0X48, 0, 0);
	define_local_var(0X1CD0E, 0X1CE18, "[bp+0]", "p_err");
	add_func    (0X1CE18,0X1CE8E);
	set_func_flags(0X1CE18,0x404);
	SetType(0X1CE18, "unsigned __int16 __cdecl OSSemPendAbort(void *p_unk, unsigned __int16 opt, enum OS_ERR *p_err);");
	set_func_cmt(0X1CE18,	"This function aborts & readies any tasks currently waiting on (xxx)", 1);
	set_frame_size(0X1CE18, 0X28, 0, 0);
	add_func    (0X1CE8E,0X1CF20);
	set_func_flags(0X1CE8E,0x404);
	SetType(0X1CE8E, "unsigned __int16 __cdecl OS_SemPost(struct OS_SEM *p_sem, enum OS_OPT opt, unsigned __int32 ts, enum OS_ERR *p_err);");
	set_frame_size(0X1CE8E, 0X28, 0, 0);
	define_local_var(0X1CE8E, 0X1CF20, "[bp-0X28]", "ts");
	add_func    (0X1CF20,0X1CF3A);
	set_func_flags(0X1CF20,0x404);
	SetType(0X1CF20, "unsigned __int16 __cdecl OSSemPost(struct OS_SEM *p_sem, enum OS_OPT opt, enum OS_ERR *p_err);");
	set_frame_size(0X1CF20, 0X10, 0, 0);
	add_func    (0X1CF3A,0X1CF48);
	set_func_flags(0X1CF3A,0x404);
	SetType(0X1CF3A, "void __cdecl OS_SemInit(enum OS_ERR *p_err);");
	set_frame_size(0X1CF3A, 0, 0, 0);
	add_func    (0X1CF6C,0X1D028);
	set_func_flags(0X1CF6C,0x404);
	SetType(0X1CF6C, "void __cdecl OSTaskChangePrio(struct OS_TCB *p_tcb, enum OS_PRIO prio_new, enum OS_ERR *p_err);");
	set_func_cmt(0X1CF6C,	"This function allows you to change the priority of a task dynamically.\nNote that the new priority MUST be available.", 1);
	set_frame_size(0X1CF6C, 0X18, 0, 0);
	add_func    (0X1D028,0X1D046);
	set_func_flags(0X1D028,0x404);
	SetType(0X1D028, "void __cdecl OS_TaskDbgListAdd(struct OS_TCB *p_tcb);");
	set_func_cmt(0X1D028,	"These functions are called by uC/OS-III to add or remove an OS_TCB from the debug list.", 1);
	set_frame_size(0X1D028, 0, 0, 0);
	add_func    (0X1D046,0X1D0CA);
	set_func_flags(0X1D046,0x404);
	SetType(0X1D046, "void __cdecl OS_TaskInitTCB(struct OS_TCB *p_tcb);");
	set_frame_size(0X1D046, 0X10, 0, 0);
	add_func    (0X1D0CA,0X1D1B6);
	set_func_flags(0X1D0CA,0x404);
	SetType(0X1D0CA, "void __fastcall OSTaskCreate(struct OS_TCB *p_tcb, char *p_name, void (__cdecl *p_task)(void *), void *p_arg, enum OS_PRIO prio, enum CPU_STK *p_stk_base, unsigned int stk_limit, unsigned int stk_size, int q_size, unsigned __int32 time_quanta, void *p_ext, enum OS_OPT opt, enum OS_ERR *p_err);");
	set_frame_size(0X1D0CA, 0X40, 0, 0);
	define_local_var(0X1D0CA, 0X1D1B6, "[bp+0]", "prio");
	define_local_var(0X1D0CA, 0X1D1B6, "[bp+0X4]", "p_stk_base");
	define_local_var(0X1D0CA, 0X1D1B6, "[bp+0X8]", "stk_limit");
	define_local_var(0X1D0CA, 0X1D1B6, "[bp+0XC]", "stk_size");
	define_local_var(0X1D0CA, 0X1D1B6, "[bp+0X10]", "q_size");
	define_local_var(0X1D0CA, 0X1D1B6, "[bp+0X14]", "time_quanta");
	define_local_var(0X1D0CA, 0X1D1B6, "[bp+0X18]", "p_ext");
	define_local_var(0X1D0CA, 0X1D1B6, "[bp+0X1C]", "opt");
	define_local_var(0X1D0CA, 0X1D1B6, "[bp+0X20]", "p_err");
	add_func    (0X1D1B6,0X1D1FC);
	set_func_flags(0X1D1B6,0x404);
	SetType(0X1D1B6, "unsigned __int16 __cdecl OSTaskQFlush(struct OS_TCB *p_tcb, enum OS_ERR *p_err);");
	set_frame_size(0X1D1B6, 0X10, 0, 0);
	add_func    (0X1D1FC,0X1D328);
	set_func_flags(0X1D1FC,0x404);
	SetType(0X1D1FC, "void *__cdecl OSTaskQPend(unsigned __int32 timeout, enum OS_OPT opt, unsigned __int16 *p_msg_size, unsigned __int32 *p_ts, enum OS_ERR *p_err);");
	set_frame_size(0X1D1FC, 0X28, 0, 0);
	define_local_var(0X1D1FC, 0X1D328, "[bp-0X28]", "priMask");
	define_local_var(0X1D1FC, 0X1D328, "[bp+0]", "p_err");
	add_func    (0X1D328,0X1D3AA);
	set_func_flags(0X1D328,0x404);
	SetType(0X1D328, "void __cdecl OS_TaskQPost(struct OS_TCB *p_tcb, void *p_void, unsigned __int16 msg_size, unsigned __int16 opt, unsigned __int32 ts, enum OS_ERR *p_err);");
	set_func_cmt(0X1D328,	"This function sends a message to a task", 1);
	set_frame_size(0X1D328, 0X28, 0, 0);
	define_local_var(0X1D328, 0X1D3AA, "[bp+0]", "ts");
	define_local_var(0X1D328, 0X1D3AA, "[bp+0X4]", "p_err");
	add_func    (0X1D3D0,0X1D3D4);
	set_func_flags(0X1D3D0,0x484);
	SetType(0X1D3D0, "void j_OSSched(void);");
	set_frame_size(0X1D3D0, 0, 0, 0);
	add_func    (0X1D3E8,0X1D40E);
	set_func_flags(0X1D3E8,0x404);
	SetType(0X1D3E8, "void __cdecl OSTaskQPost(struct OS_TCB *p_tcb, void *p_void, unsigned __int16 msg_size, enum OS_OPT opt, enum OS_ERR *p_err);");
	set_func_cmt(0X1D3E8,	"This function sends a message to a task", 1);
	set_frame_size(0X1D3E8, 0X20, 0, 0);
	define_local_var(0X1D3E8, 0X1D40E, "[bp+0]", "p_err");
	add_func    (0X1D40E,0X1D4C6);
	set_func_flags(0X1D40E,0x404);
	SetType(0X1D40E, "void __cdecl OS_TaskResume(struct OS_TCB *p_tcb, enum OS_ERR *p_err);");
	set_func_cmt(0X1D40E,	"This function is called to resume a previously suspended task.  This is the only call that will remove an explicit task suspension.", 1);
	set_frame_size(0X1D40E, 0X10, 0, 0);
	add_func    (0X1D4C6,0X1D5DA);
	set_func_flags(0X1D4C6,0x404);
	SetType(0X1D4C6, "unsigned __int16 __cdecl OSTaskSemPend(unsigned __int32 timeout, unsigned __int16 opt, unsigned __int32 *p_ts, enum OS_ERR *p_err);");
	set_func_cmt(0X1D4C6,	"This function is called to block the current task until a signal is sent by another task or ISR.", 1);
	set_frame_size(0X1D4C6, 0X20, 0, 0);
	add_func    (0X1D5DA,0X1D682);
	set_func_flags(0X1D5DA,0x404);
	SetType(0X1D5DA, "int __cdecl OS_TaskSemPost(struct OS_TCB *p_tcb, unsigned __int16 opt, unsigned __int32 ts, enum OS_ERR *p_err);");
	set_func_cmt(0X1D5DA,	"This function is called to signal a task waiting for a signal.", 1);
	set_frame_size(0X1D5DA, 0X20, 0, 0);
	define_local_var(0X1D5DA, 0X1D682, "[bp-0X20]", "ts");
	add_func    (0X1D682,0X1D69C);
	set_func_flags(0X1D682,0x404);
	SetType(0X1D682, "int __cdecl OSTaskSemPost(struct OS_TCB *p_tcb, unsigned __int16 opt, enum OS_ERR *p_err);");
	set_frame_size(0X1D682, 0X10, 0, 0);
	add_func    (0X1D69C,0X1D6CC);
	set_func_flags(0X1D69C,0x404);
	SetType(0X1D69C, "unsigned __int16 __cdecl OSTaskSemSet(struct OS_TCB *p_tcb, unsigned __int16 cnt, enum OS_ERR *p_err);");
	set_func_cmt(0X1D69C,	"This function is called to clear the signal counter", 1);
	set_frame_size(0X1D69C, 0X18, 0, 0);
	add_func    (0X1D6CC,0X1D77A);
	set_func_flags(0X1D6CC,0x404);
	SetType(0X1D6CC, "void __cdecl OS_TaskSuspend(struct OS_TCB *p_tcb, enum OS_ERR *p_err);");
	set_func_cmt(0X1D6CC,	"This function is called to suspend a task.\nThe task can be the calling task if 'p_tcb' is a NULL pointer or the pointer to the TCB of the calling task.", 1);
	set_frame_size(0X1D6CC, 0X10, 0, 0);
	add_func    (0X1D77A,0X1D7AC);
	set_func_flags(0X1D77A,0x404);
	SetType(0X1D77A, "void __cdecl OS_TaskDbgListRemove(struct OS_TCB *p_tcb);");
	set_frame_size(0X1D77A, 0, 0, 0);
	add_func    (0X1D7AC,0X1D7BE);
	set_func_flags(0X1D7AC,0x404);
	SetType(0X1D7AC, "void __cdecl OS_TaskInit(enum OS_ERR *p_err);");
	set_func_cmt(0X1D7AC,	"This function is called by OSInit() to initialize the task management.", 1);
	set_frame_size(0X1D7AC, 0, 0, 0);
	add_func    (0X1D7BE,0X1D7D6);
	set_func_flags(0X1D7BE,0x405);
	SetType(0X1D7BE, "void OS_TaskReturn(void);");
	set_func_cmt(0X1D7BE,	"This function is called if a task accidentally returns without deleting itself.\nIn other words, a task should either be an infinite loop or delete itself if it's done.", 1);
	set_frame_size(0X1D7BE, 0X8, 0, 0);
	add_func    (0X1D7F4,0X1D82A);
	set_func_flags(0X1D7F4,0x404);
	SetType(0X1D7F4, "void __cdecl OS_TickListRemove(struct OS_TCB *p_tcb);");
	set_func_cmt(0X1D7F4,	"This function is called to remove a task from the tick list", 1);
	set_frame_size(0X1D7F4, 0X8, 0, 0);
	add_func    (0X1D82A,0X1D936);
	set_func_flags(0X1D82A,0x404);
	SetType(0X1D82A, "void OS_TickListUpdate(void);");
	set_func_cmt(0X1D82A,	"This function is called when a tick occurs and determines if the timeout waiting for a kernel object has expired or a delay has expired.", 1);
	set_frame_size(0X1D82A, 0X28, 0, 0);
	define_local_var(0X1D82A, 0X1D936, "[bp-0X28]", "priMask");
	add_func    (0X1D936,0X1D95A);
	set_func_flags(0X1D936,0x405);
	SetType(0X1D936, "void __cdecl OS_TickTask(void *p_arg);");
	set_func_cmt(0X1D936,	"This task is internal to uC/OS-III and is triggered by the tick interrupt.", 1);
	set_frame_size(0X1D936, 0X10, 0, 0);
	define_local_var(0X1D936, 0X1D95A, "[bp-0XC]", "p_ts");
	add_func    (0X1D95A,0X1D97C);
	set_func_flags(0X1D95A,0x404);
	SetType(0X1D95A, "void OS_TickListInit(void);");
	set_func_cmt(0X1D95A,	"This function initializes the tick handling data structures of uC/OS-III.", 1);
	set_frame_size(0X1D95A, 0X8, 0, 0);
	add_func    (0X1D97C,0X1D9D4);
	set_func_flags(0X1D97C,0x404);
	SetType(0X1D97C, "void __cdecl OS_TickTaskInit(enum OS_ERR *p_err);");
	set_func_cmt(0X1D97C,	"This function is called by OSInit() to create the tick task.", 1);
	set_frame_size(0X1D97C, 0X30, 0, 0);
	define_local_var(0X1D97C, 0X1D9D4, "[bp-0X30]", "prio");
	define_local_var(0X1D97C, 0X1D9D4, "[bp-0X2C]", "p_stk_base");
	define_local_var(0X1D97C, 0X1D9D4, "[bp-0X20]", "q_size");
	define_local_var(0X1D97C, 0X1D9D4, "[bp-0X1C]", "time_quanta");
	define_local_var(0X1D97C, 0X1D9D4, "[bp-0X10]", "p_err");
	add_func    (0X1D9D4,0X1DA9E);
	set_func_flags(0X1D9D4,0x404);
	SetType(0X1D9D4, "void __cdecl OS_TickListInsert(struct OS_TCB *p_tcb, unsigned __int32 time, unsigned __int16 opt, enum OS_ERR *p_err);");
	set_func_cmt(0X1D9D4,	"This function is called to place a task in a list of task waiting for either time to expire or waiting to timeout on a pend call.", 1);
	set_frame_size(0X1D9D4, 0X14, 0, 0);
	add_func    (0X1DA9E,0X1DABC);
	set_func_flags(0X1DA9E,0x404);
	SetType(0X1DA9E, "void OS_TickListResetPeak(void);");
	set_func_cmt(0X1DA9E,	"This function is used to reset the peak detector for the number of entries in each spoke.", 1);
	set_frame_size(0X1DA9E, 0X8, 0, 0);
	add_func    (0X1DAF8,0X1DB5A);
	set_func_flags(0X1DAF8,0x404);
	SetType(0X1DAF8, "void __cdecl OSTimeDly(unsigned __int32 dly, unsigned __int16 opt, enum OS_ERR *p_err);");
	set_func_cmt(0X1DAF8,	"This function is called to delay execution of the currently running task until the specified number of system ticks expires.\nThis, of course, directly equates to delaying the current task for some time to expire.", 1);
	set_frame_size(0X1DAF8, 0X18, 0, 0);
	add_func    (0X1DB78,0X1DC34);
	set_func_flags(0X1DB78,0x404);
	SetType(0X1DB78, "void __cdecl OSTimeDlyHMSM(unsigned __int16 hours, unsigned __int16 minutes, unsigned __int16 seconds, unsigned __int32 milli, unsigned __int16 opt, enum OS_ERR *p_err);");
	set_func_cmt(0X1DB78,	"This function is called to delay execution of the currently running task until some time expires.\nThis call allows you to specify the delay time in HOURS, MINUTES, SECONDS and MILLISECONDS instead of ticks.", 1);
	set_frame_size(0X1DB78, 0X18, 0, 0);
	define_local_var(0X1DB78, 0X1DC34, "[bp+0]", "opt");
	define_local_var(0X1DB78, 0X1DC34, "[bp+0X4]", "p_err");
	add_func    (0X1DC34,0X1DC58);
	set_func_flags(0X1DC34,0x404);
	SetType(0X1DC34, "unsigned __int32 __cdecl OSTimeGet(enum OS_ERR *p_err);");
	set_func_cmt(0X1DC34,	"This function is used by your application to obtain the current value of the counter which keeps track of the number of clock ticks.", 1);
	set_frame_size(0X1DC34, 0X10, 0, 0);
	add_func    (0X1DC58,0X1DC7C);
	set_func_flags(0X1DC58,0x404);
	SetType(0X1DC58, "void __cdecl OSTimeSet(unsigned __int32 ticks, enum OS_ERR *p_err);");
	set_func_cmt(0X1DC58,	"This function sets the counter which keeps track of the number of clock ticks.", 1);
	set_frame_size(0X1DC58, 0X10, 0, 0);
	add_func    (0X1DC7C,0X1DC8E);
	set_func_flags(0X1DC7C,0x404);
	SetType(0X1DC7C, "void OSTimeTick(void);");
	set_func_cmt(0X1DC7C,	"This function is used to signal to uC/OS-III the occurrence of a 'system tick' (also known as a 'clock tick').\nThis function should be called by the tick ISR.", 1);
	set_frame_size(0X1DC7C, 0X8, 0, 0);
	add_func    (0X1DCA4,0X1DCBA);
	set_func_flags(0X1DCA4,0x404);
	SetType(0X1DCA4, "void OS_CSP_TickInit(void);");
	set_func_cmt(0X1DCA4,	"Initialize the the Tick Interrupt.", 1);
	set_frame_size(0X1DCA4, 0X8, 0, 0);
	add_func    (0X1DCC0,0X1DCC4);
	set_func_flags(0X1DCC0,0x404);
	SetType(0X1DCC0, "void _disable_irq(void);");
	set_func_cmt(0X1DCC0,	"Disable IRQ Interrupts\n\n  This function disables IRQ interrupts by setting the I-bit in the CPSR.\n  Can only be executed in Privileged modes.", 1);
	set_frame_size(0X1DCC0, 0, 0, 0);
	add_func    (0X1DCC4,0X1DCC8);
	set_func_flags(0X1DCC4,0x404);
	SetType(0X1DCC4, "void _enable_irq(void);");
	set_func_cmt(0X1DCC4,	"Enable IRQ Interrupts\n\n  This function enables IRQ interrupts by clearing the I-bit in the CPSR.\n  Can only be executed in Privileged modes.", 1);
	set_frame_size(0X1DCC4, 0, 0, 0);
	add_func    (0X1DCC8,0X1DCD0);
	set_func_flags(0X1DCC8,0x404);
	SetType(0X1DCC8, "unsigned __int16 get_PRIMASK(void);");
	set_func_cmt(0X1DCC8,	"Get Priority Mask\n\n    This function returns the current state of the priority mask bit from the Priority Mask Register.", 1);
	set_frame_size(0X1DCC8, 0, 0, 0);
	add_func    (0X1DCD0,0X1DCD6);
	set_func_flags(0X1DCD0,0x404);
	SetType(0X1DCD0, "void __cdecl _set_PRIMASK(unsigned __int16 priMask);");
	set_func_cmt(0X1DCD0,	"Set Priority Mask\n\n    This function assigns the given value to the Priority Mask Register.", 1);
	set_frame_size(0X1DCD0, 0, 0, 0);
	add_func    (0X1DCD6,0X1DCDC);
	set_func_flags(0X1DCD6,0x404);
	SetType(0X1DCD6, "unsigned int __cdecl CPU_CntLeadZeros(unsigned int val);");
	set_func_cmt(0X1DCD6,	"Counts the number of contiguous, most-significant, leading zero bits before the first binary one bit in a data value.", 1);
	set_frame_size(0X1DCD6, 0, 0, 0);
	add_func    (0X1DCDC,0X1DCE2);
	set_func_flags(0X1DCDC,0x404);
	SetType(0X1DCDC, "unsigned __int16 __cdecl _RBIT(unsigned __int16 value);");
	set_func_cmt(0X1DCDC,	"Reverse bit order of value\n\n    This function reverses the bit order of the given value.", 1);
	set_frame_size(0X1DCDC, 0, 0, 0);
	add_func    (0X1DCE2,0X1DCE6);
	set_func_flags(0X1DCE2,0x404);
	SetType(0X1DCE2, "void _WFI(void);");
	set_func_cmt(0X1DCE2,	"Wait For Interrupt\n\n    Wait For Interrupt is a hint instruction that suspends execution\n    until one of a number of events occurs.", 1);
	set_frame_size(0X1DCE2, 0, 0, 0);
	add_func    (0X1DCE6,0X1DCEA);
	set_func_flags(0X1DCE6,0x404);
	SetType(0X1DCE6, "void _WFE(void);");
	set_func_cmt(0X1DCE6,	"Wait For Event\n\n    Wait For Event is a hint instruction that permits the processor to enter\n    a low-power state until one of a number of events occurs.", 1);
	set_frame_size(0X1DCE6, 0, 0, 0);
	add_func    (0X1DCEC,0X1DD18);
	set_func_flags(0X1DCEC,0x404);
	SetType(0X1DCEC, "void __cdecl CPU_BitBandClr(unsigned __int32 addr, unsigned __int8 bit_nbr);");
	set_func_cmt(0X1DCEC,	"Clear bit in bit-band region.", 1);
	set_frame_size(0X1DCEC, 0XC, 0, 0);
	add_func    (0X1DD18,0X1DD44);
	set_func_flags(0X1DD18,0x404);
	SetType(0X1DD18, "void __cdecl CPU_BitBandSet(unsigned __int32 addr, unsigned __int8 bit_nbr);");
	set_func_cmt(0X1DD18,	"Set bit in bit-band region.", 1);
	set_frame_size(0X1DD18, 0X8, 0, 0);
	add_func    (0X1DD44,0X1DE06);
	set_func_flags(0X1DD44,0x404);
	SetType(0X1DD44, "void __cdecl CPU_IntSrcDis(unsigned __int8 pos);");
	set_func_cmt(0X1DD44,	"Disable an interrupt source.", 1);
	set_frame_size(0X1DD44, 0X10, 0, 0);
	add_func    (0X1DE06,0X1DEC8);
	set_func_flags(0X1DE06,0x404);
	SetType(0X1DE06, "void __cdecl CPU_IntSrcEn(unsigned __int8 pos);");
	set_func_cmt(0X1DE06,	"Enable an interrupt source.", 1);
	set_frame_size(0X1DE06, 0X10, 0, 0);
	add_func    (0X1DEC8,0X1DF1C);
	set_func_flags(0X1DEC8,0x404);
	SetType(0X1DEC8, "void __cdecl CPU_IntSrcPendClr(unsigned __int8 pos);");
	set_func_cmt(0X1DEC8,	"Clear a pending interrupt.", 1);
	set_frame_size(0X1DEC8, 0X10, 0, 0);
	add_func    (0X1DF1C,0X1E04C);
	set_func_flags(0X1DF1C,0x404);
	SetType(0X1DF1C, "void __cdecl CPU_IntSrcPrioSet(unsigned __int8 pos, unsigned __int8 prio);");
	set_func_cmt(0X1DF1C,	"Set priority of an interrupt source.", 1);
	set_frame_size(0X1DF1C, 0X18, 0, 0);
	add_func    (0X1E04C,0X1E16C);
	set_func_flags(0X1E04C,0x404);
	SetType(0X1E04C, "__int16 __cdecl CPU_IntSrcPrioGet(unsigned __int8 pos);");
	set_func_cmt(0X1E04C,	"Get priority of an interrupt source.", 1);
	set_frame_size(0X1E04C, 0X10, 0, 0);
	add_func    (0X1E16C,0X1E198);
	set_func_flags(0X1E16C,0x404);
	SetType(0X1E16C, "void CPU_IntDisMeasStop(void);");
	set_func_cmt(0X1E16C,	"Stop interrupts disabled time measurement.", 1);
	set_frame_size(0X1E16C, 0X8, 0, 0);
	add_func    (0X1E198,0X1E1B4);
	set_func_flags(0X1E198,0x404);
	SetType(0X1E198, "void CPU_IntDisMeasStart(void);");
	set_func_cmt(0X1E198,	"Start interrupts disabled time measurement.", 1);
	set_frame_size(0X1E198, 0X8, 0, 0);
	add_func    (0X1E1B4,0X1E1C8);
	set_func_flags(0X1E1B4,0x404);
	SetType(0X1E1B4, "void CPU_Init(void);");
	set_func_cmt(0X1E1B4,	"Initialize CPU module", 1);
	set_frame_size(0X1E1B4, 0X8, 0, 0);
	add_func    (0X1E1C8,0X1E1CA);
	set_func_flags(0X1E1C8,0x405);
	SetType(0X1E1C8, "void CPU_SW_Exception(void);");
	set_func_cmt(0X1E1C8,	"Trap unrecoverable software exception.", 1);
	set_frame_size(0X1E1C8, 0, 0, 0);
	add_func    (0X1E1CA,0X1E1D0);
	set_func_flags(0X1E1CA,0x484);
	SetType(0X1E1CA, "unsigned __int32 CPU_TS_Get32(void);");
	set_func_cmt(0X1E1CA,	"Get current 32-bit CPU timestamp.", 1);
	set_frame_size(0X1E1CA, 0, 0, 0);
	add_func    (0X1E1D0,0X1E1E8);
	set_func_flags(0X1E1D0,0x404);
	SetType(0X1E1D0, "unsigned __int32 __cdecl CPU_TS_TmrFreqGet(enum CPU_ERR *p_err);");
	set_func_cmt(0X1E1D0,	"Get CPU timestamp's timer frequency.", 1);
	set_frame_size(0X1E1D0, 0, 0, 0);
	add_func    (0X1E1E8,0X1E1EE);
	set_func_flags(0X1E1E8,0x404);
	SetType(0X1E1E8, "void __cdecl CPU_TS_TmrFreqSet(unsigned __int32 freq_hz);");
	set_func_cmt(0X1E1E8,	"Set CPU timestamp's timer frequency.", 1);
	set_frame_size(0X1E1E8, 0, 0, 0);
	add_func    (0X1E1EE,0X1E206);
	set_func_flags(0X1E1EE,0x404);
	SetType(0X1E1EE, "unsigned __int32 CPU_IntDisMeasMaxCurGet(void);");
	set_func_cmt(0X1E1EE,	"Get current maximum interrupts disabled time.", 1);
	set_frame_size(0X1E1EE, 0X8, 0, 0);
	add_func    (0X1E206,0X1E220);
	set_func_flags(0X1E206,0x404);
	SetType(0X1E206, "unsigned __int32 CPU_IntDisMeasMaxCurReset(void);");
	set_func_cmt(0X1E206,	"Reset current maximum interrupts disabled time.", 1);
	set_frame_size(0X1E206, 0X8, 0, 0);
	add_func    (0X1E220,0X1E238);
	set_func_flags(0X1E220,0x404);
	SetType(0X1E220, "unsigned __int32 CPU_IntDisMeasMaxGet(void);");
	set_func_cmt(0X1E220,	"Get (non-resetable) maximum interrupts disabled time.", 1);
	set_frame_size(0X1E220, 0X8, 0, 0);
	add_func    (0X1E238,0X1E27E);
	set_func_flags(0X1E238,0x404);
	SetType(0X1E238, "void CPU_IntDisMeasInit(void);");
	set_func_cmt(0X1E238,	"Initialize interrupts disabled time measurements feature", 1);
	set_frame_size(0X1E238, 0X18, 0, 0);
	add_func    (0X1E27E,0X1E28E);
	set_func_flags(0X1E27E,0x404);
	SetType(0X1E27E, "unsigned __int32 __cdecl CPU_IntDisMeasMaxCalc(unsigned __int32 time_tot_cnts);");
	set_func_cmt(0X1E27E,	"Calculate maximum interrupts disabled time.", 1);
	set_frame_size(0X1E27E, 0, 0, 0);
	add_func    (0X1E296,0X1E2F2);
	set_func_flags(0X1E296,0x400);
	SetType(0X1E296, "uint32_t Chip_Clock_GetPeripheralClockRate(void);");
	set_func_cmt(0X1E296,	"Returns the clock rate for a peripheral", 1);
	set_frame_size(0X1E296, 0XC, 0, 0);
	add_func    (0X1E2F2,0X1E38E);
	set_func_flags(0X1E2F2,0x400);
	set_frame_size(0X1E2F2, 0X10, 0, 0);
	add_func    (0X1E38E,0X1E3D4);
	set_func_flags(0X1E38E,0x400);
	set_frame_size(0X1E38E, 0X10, 0, 0);
	add_func    (0X1E3D4,0X1E41A);
	set_func_flags(0X1E3D4,0x400);
	set_frame_size(0X1E3D4, 0X10, 0, 0);
	add_func    (0X1E41A,0X1E476);
	set_func_flags(0X1E41A,0x400);
	set_frame_size(0X1E41A, 0X8, 0, 0);
	add_func    (0X1E476,0X1E478);
	set_func_flags(0X1E476,0x440);
	add_func    (0X1E478,0X1E47A);
	set_func_flags(0X1E478,0x400);
	add_func    (0X1E47A,0X1E47E);
	set_func_flags(0X1E47A,0x400);
	add_func    (0X1E47E,0X1E482);
	set_func_flags(0X1E47E,0x400);
	add_func    (0X1E490,0X1E4C4);
	set_func_flags(0X1E490,0x400);
	set_frame_size(0X1E490, 0X8, 0, 0);
	add_func    (0X1E4C4,0X1E502);
	set_func_flags(0X1E4C4,0x400);
	set_frame_size(0X1E4C4, 0XC, 0, 0);
	add_func    (0X1E502,0X1E536);
	set_func_flags(0X1E502,0x400);
	set_frame_size(0X1E502, 0X8, 0, 0);
	add_func    (0X1E536,0X1E574);
	set_func_flags(0X1E536,0x400);
	set_frame_size(0X1E536, 0XC, 0, 0);
	add_func    (0X1E574,0X1E586);
	set_func_flags(0X1E574,0x400);
	add_func    (0X1E586,0X1E59C);
	set_func_flags(0X1E586,0x400);
	add_func    (0X1E59C,0X1E5A0);
	set_func_flags(0X1E59C,0x400);
	add_func    (0X1E5A0,0X1E5A4);
	set_func_flags(0X1E5A0,0x400);
	add_func    (0X1E5A4,0X1E5A8);
	set_func_flags(0X1E5A4,0x400);
	add_func    (0X1E5A8,0X1E5AC);
	set_func_flags(0X1E5A8,0x400);
	add_func    (0X1E5AC,0X1E5B0);
	set_func_flags(0X1E5AC,0x400);
	add_func    (0X1E5B0,0X1E5B4);
	set_func_flags(0X1E5B0,0x400);
	add_func    (0X1E5B4,0X1E5DA);
	set_func_flags(0X1E5B4,0x400);
	add_func    (0X1E5DA,0X1E5DE);
	set_func_flags(0X1E5DA,0x400);
	add_func    (0X1E5DE,0X1E5E2);
	set_func_flags(0X1E5DE,0x400);
	add_func    (0X1E5E2,0X1E620);
	set_func_flags(0X1E5E2,0x400);
	set_frame_size(0X1E5E2, 0X10, 0, 0);
	add_func    (0X1E620,0X1E674);
	set_func_flags(0X1E620,0x400);
	set_frame_size(0X1E620, 0X8, 0, 0);
	add_func    (0X1E674,0X1E68C);
	set_func_flags(0X1E674,0x400);
	add_func    (0X1E68C,0X1E6BC);
	set_func_flags(0X1E68C,0x400);
	add_func    (0X1E6D0,0X1E6F6);
	set_func_flags(0X1E6D0,0x400);
	set_frame_size(0X1E6D0, 0X8, 0, 0);
	add_func    (0X1E6F6,0X1E708);
	set_func_flags(0X1E6F6,0x400);
	add_func    (0X1E708,0X1E712);
	set_func_flags(0X1E708,0x400);
	add_func    (0X1E712,0X1E766);
	set_func_flags(0X1E712,0x400);
	set_frame_size(0X1E712, 0XC, 0, 0);
	add_func    (0X1E766,0X1E77E);
	set_func_flags(0X1E766,0x400);
	set_frame_size(0X1E766, 0X8, 0, 0);
}

static Functions_1(void) {

	add_func    (0X1E77E,0X1E7F0);
	set_func_flags(0X1E77E,0x400);
	set_frame_size(0X1E77E, 0X10, 0, 0);
	add_func    (0X1E7F0,0X1E852);
	set_func_flags(0X1E7F0,0x400);
	set_frame_size(0X1E7F0, 0X10, 0, 0);
	add_func    (0X1E852,0X1E8CC);
	set_func_flags(0X1E852,0x400);
	set_frame_size(0X1E852, 0X10, 0, 0);
	add_func    (0X1E8CC,0X1E8F4);
	set_func_flags(0X1E8CC,0x400);
	set_frame_size(0X1E8CC, 0X10, 0, 0);
	add_func    (0X1E8F4,0X1E92A);
	set_func_flags(0X1E8F4,0x400);
	set_frame_size(0X1E8F4, 0X8, 0, 0);
	add_func    (0X1E92A,0X1E950);
	set_func_flags(0X1E92A,0x400);
	set_frame_size(0X1E92A, 0X8, 0, 0);
	add_func    (0X1E950,0X1E996);
	set_func_flags(0X1E950,0x400);
	set_frame_size(0X1E950, 0X8, 0, 0);
	add_func    (0X1E996,0X1EA1E);
	set_func_flags(0X1E996,0x400);
	set_frame_size(0X1E996, 0X8, 0, 0);
	add_func    (0X1EA1E,0X1EA46);
	set_func_flags(0X1EA1E,0x400);
	set_frame_size(0X1EA1E, 0X8, 0, 0);
	add_func    (0X1EA46,0X1EA76);
	set_func_flags(0X1EA46,0x400);
	set_frame_size(0X1EA46, 0X8, 0, 0);
	add_func    (0X1EA76,0X1EAB0);
	set_func_flags(0X1EA76,0x400);
	set_frame_size(0X1EA76, 0X8, 0, 0);
	add_func    (0X1EAB0,0X1EB0C);
	set_func_flags(0X1EAB0,0x400);
	set_frame_size(0X1EAB0, 0X8, 0, 0);
	add_func    (0X1EB0C,0X1EC4E);
	set_func_flags(0X1EB0C,0x400);
	set_frame_size(0X1EB0C, 0X18, 0, 0);
	add_func    (0X1EC4E,0X1EC8A);
	set_func_flags(0X1EC4E,0x400);
	set_frame_size(0X1EC4E, 0X8, 0, 0);
	add_func    (0X1EC8A,0X1ECDE);
	set_func_flags(0X1EC8A,0x400);
	set_frame_size(0X1EC8A, 0X8, 0, 0);
	add_func    (0X1ECDE,0X1ED76);
	set_func_flags(0X1ECDE,0x400);
	set_frame_size(0X1ECDE, 0X8, 0, 0);
	add_func    (0X1EDA8,0X1EDC6);
	set_func_flags(0X1EDA8,0x400);
	add_func    (0X1EDC6,0X1EDDA);
	set_func_flags(0X1EDC6,0x400);
	add_func    (0X1EDDA,0X1EDEE);
	set_func_flags(0X1EDDA,0x400);
	set_frame_size(0X1EDDA, 0X8, 0, 0);
	add_func    (0X1EDEE,0X1EE12);
	set_func_flags(0X1EDEE,0x400);
	set_frame_size(0X1EDEE, 0X8, 0, 0);
	add_func    (0X1EE34,0X1EE4A);
	set_func_flags(0X1EE34,0x400);
	add_func    (0X1EE4A,0X1EE54);
	set_func_flags(0X1EE4A,0x400);
	add_func    (0X1EE54,0X1EE78);
	set_func_flags(0X1EE54,0x400);
	set_frame_size(0X1EE54, 0X8, 0, 0);
	add_func    (0X1EE78,0X1EE94);
	set_func_flags(0X1EE78,0x400);
	set_frame_size(0X1EE78, 0X8, 0, 0);
	add_func    (0X1EE94,0X1EE9E);
	set_func_flags(0X1EE94,0x400);
	add_func    (0X1EE9E,0X1EEA6);
	set_func_flags(0X1EE9E,0x400);
	add_func    (0X1EEA6,0X1F0CC);
	set_func_flags(0X1EEA6,0x400);
	set_frame_size(0X1EEA6, 0X18, 0, 0);
	add_func    (0X1F0DC,0X1F0EA);
	set_func_flags(0X1F0DC,0x400);
	add_func    (0X1F0EA,0X1F100);
	set_func_flags(0X1F0EA,0x400);
	add_func    (0X1F100,0X1F126);
	set_func_flags(0X1F100,0x400);
	add_func    (0X1F12C,0X1F162);
	set_func_flags(0X1F12C,0x400);
	set_frame_size(0X1F12C, 0X8, 0, 0);
	add_func    (0X1F162,0X1F17C);
	set_func_flags(0X1F162,0x400);
	add_func    (0X1F17C,0X1F198);
	set_func_flags(0X1F17C,0x400);
	set_frame_size(0X1F17C, 0XC, 0, 0);
	add_func    (0X1F198,0X1F1D0);
	set_func_flags(0X1F198,0x400);
	add_func    (0X1F1E4,0X1F2B8);
	set_func_flags(0X1F1E4,0x400);
	set_frame_size(0X1F1E4, 0X20, 0, 0);
	add_func    (0X1F2B8,0X1F30C);
	set_func_flags(0X1F2B8,0x400);
	set_frame_size(0X1F2B8, 0X8, 0, 0);
	add_func    (0X1F30C,0X1F31C);
	set_func_flags(0X1F30C,0x400);
	add_func    (0X1F31C,0X1F31E);
	set_func_flags(0X1F31C,0x440);
	add_func    (0X1F31E,0X1F348);
	set_func_flags(0X1F31E,0x400);
	set_frame_size(0X1F31E, 0X8, 0, 0);
	add_func    (0X1F348,0X1F37E);
	set_func_flags(0X1F348,0x400);
	set_frame_size(0X1F348, 0X8, 0, 0);
	add_func    (0X1F37E,0X1F380);
	set_func_flags(0X1F37E,0x440);
	add_func    (0X1F380,0X1F394);
	set_func_flags(0X1F380,0x400);
	set_frame_size(0X1F380, 0X4, 0, 0);
	add_func    (0X1F394,0X1F3A8);
	set_func_flags(0X1F394,0x400);
	set_frame_size(0X1F394, 0X4, 0, 0);
	add_func    (0X1F3A8,0X1F3BC);
	set_func_flags(0X1F3A8,0x400);
	set_frame_size(0X1F3A8, 0X4, 0, 0);
	add_func    (0X1F3BC,0X1F3D0);
	set_func_flags(0X1F3BC,0x400);
	set_frame_size(0X1F3BC, 0X4, 0, 0);
	add_func    (0X1F3D0,0X1F3E4);
	set_func_flags(0X1F3D0,0x400);
	set_frame_size(0X1F3D0, 0X4, 0, 0);
	add_func    (0X1F3E8,0X1F43A);
	set_func_flags(0X1F3E8,0x400);
	set_frame_size(0X1F3E8, 0X14, 0, 0);
	add_func    (0X1F43A,0X1F47C);
	set_func_flags(0X1F43A,0x400);
	set_frame_size(0X1F43A, 0X10, 0, 0);
	add_func    (0X1F47C,0X1F49A);
	set_func_flags(0X1F47C,0x400);
	set_frame_size(0X1F47C, 0X8, 0, 0);
	add_func    (0X1F4EC,0X1F4F0);
	set_func_flags(0X1F4EC,0x480);
	add_func    (0X1F4F0,0X1F4F8);
	set_func_flags(0X1F4F0,0x400);
	add_func    (0X1F4F8,0X1F500);
	set_func_flags(0X1F4F8,0x400);
	add_func    (0X1F500,0X1F504);
	set_func_flags(0X1F500,0x480);
	add_func    (0X1F504,0X1F506);
	set_func_flags(0X1F504,0x440);
	add_func    (0X1F506,0X1F508);
	set_func_flags(0X1F506,0x440);
	add_func    (0X1F508,0X1F51A);
	set_func_flags(0X1F508,0x400);
	add_func    (0X1F548,0X1F55C);
	set_func_flags(0X1F548,0x400);
	set_frame_size(0X1F548, 0X8, 0, 0);
	add_func    (0X1F55C,0X1F576);
	set_func_flags(0X1F55C,0x400);
	set_frame_size(0X1F55C, 0X8, 0, 0);
	add_func    (0X1F576,0X1F5E0);
	set_func_flags(0X1F576,0x400);
	set_frame_size(0X1F576, 0X10, 0, 0);
	add_func    (0X1F5E0,0X1F63A);
	set_func_flags(0X1F5E0,0x400);
	SetType(0X1F5E0, "int __fastcall sub_1F5E0(struct #46 *pkt, int a2);");
	set_frame_size(0X1F5E0, 0X18, 0, 0);
	add_func    (0X1F63A,0X1F64C);
	set_func_flags(0X1F63A,0x400);
	set_frame_size(0X1F63A, 0X8, 0, 0);
	add_func    (0X1F64C,0X1F66E);
	set_func_flags(0X1F64C,0x400);
	set_frame_size(0X1F64C, 0X18, 0, 0);
	define_local_var(0X1F64C, 0X1F66E, "[bp-0X10]", "varg_r0");
	define_local_var(0X1F64C, 0X1F66E, "[bp-0XC]", "varg_r1");
	define_local_var(0X1F64C, 0X1F66E, "[bp-0X8]", "varg_r2");
	define_local_var(0X1F64C, 0X1F66E, "[bp-0X4]", "varg_r3");
	add_func    (0X1F66E,0X1F670);
	set_func_flags(0X1F66E,0x400);
	add_func    (0X1F670,0X1F68A);
	set_func_flags(0X1F670,0x400);
	add_func    (0X1F68A,0X1F69C);
	set_func_flags(0X1F68A,0x400);
	add_func    (0X1F69C,0X1F6AA);
	set_func_flags(0X1F69C,0x400);
	add_func    (0X1F6AA,0X1F6B4);
	set_func_flags(0X1F6AA,0x400);
	add_func    (0X1F6CC,0X1F6DC);
	set_func_flags(0X1F6CC,0x404);
	SetType(0X1F6CC, "void WDT_Feed(void);");
	set_func_cmt(0X1F6CC,	"After set WDTEN, call this function to start Watchdog or reload the Watchdog timer", 1);
	set_frame_size(0X1F6CC, 0, 0, 0);
	add_func    (0X1F6DC,0X1F6FC);
	set_func_flags(0X1F6DC,0x404);
	SetType(0X1F6DC, "uint8_t __cdecl Chip_IAP_EraseSector(uint32_t strSector, uint32_t endSector);");
	set_func_cmt(0X1F6DC,	"Erase sector", 1);
	set_frame_size(0X1F6DC, 0X8, 0, 0);
	add_func    (0X1F6FC,0X1F726);
	set_func_flags(0X1F6FC,0x404);
	SetType(0X1F6FC, "uint8_t __cdecl Chip_IAP_CopyRamToFlash(uint32_t dstAdd, uint32_t *srcAdd, uint32_t byteswrt);");
	set_func_cmt(0X1F6FC,	"Copy RAM to flash", 1);
	set_frame_size(0X1F6FC, 0X8, 0, 0);
	add_func    (0X1F726,0X1F74A);
	set_func_flags(0X1F726,0x404);
	SetType(0X1F726, "uint8_t __cdecl Chip_IAP_BlankCheckSector(uint32_t strSector, uint32_t endSector);");
	set_func_cmt(0X1F726,	"Blank check sector", 1);
	set_frame_size(0X1F726, 0X8, 0, 0);
	add_func    (0X1F74A,0X1F774);
	set_func_flags(0X1F74A,0x404);
	SetType(0X1F74A, "uint8_t __cdecl Chip_IAP_Compare(uint32_t dstAdd, uint32_t srcAdd, uint32_t bytescmp);");
	set_frame_size(0X1F74A, 0X8, 0, 0);
	add_func    (0X1F774,0X1F7A6);
	set_func_flags(0X1F774,0x404);
	SetType(0X1F774, "uint32_t __cdecl Chip_IAP_ReadUID();");
	set_func_cmt(0X1F774,	"Read the unique ID", 1);
	set_frame_size(0X1F774, 0X8, 0, 0);
	add_func    (0X1F7B6,0X1F7D8);
	set_func_flags(0X1F7B6,0x400);
	set_frame_size(0X1F7B6, 0X8, 0, 0);
	add_func    (0X1F7D8,0X1F84C);
	set_func_flags(0X1F7D8,0x400);
	set_func_cmt(0X1F7D8,	"FLASH IAP programming using IAP commands to write to FLASH memory", 1);
	set_frame_size(0X1F7D8, 0X10, 0, 0);
	add_func    (0X1F84C,0X1F8B0);
	set_func_flags(0X1F84C,0x400);
	set_frame_size(0X1F84C, 0X18, 0, 0);
	add_func    (0X1F8B0,0X1F8FA);
	set_func_flags(0X1F8B0,0x400);
	set_frame_size(0X1F8B0, 0X8, 0, 0);
	add_func    (0X1F8FA,0X1F904);
	set_func_flags(0X1F8FA,0x400);
	add_func    (0X1F904,0X1F90E);
	set_func_flags(0X1F904,0x400);
	add_func    (0X1F90E,0X1F918);
	set_func_flags(0X1F90E,0x400);
	add_func    (0X1F918,0X1F922);
	set_func_flags(0X1F918,0x400);
	add_func    (0X1F922,0X1F92C);
	set_func_flags(0X1F922,0x400);
	add_func    (0X1F92C,0X1F936);
	set_func_flags(0X1F92C,0x400);
	add_func    (0X1F936,0X1F942);
	set_func_flags(0X1F936,0x400);
	add_func    (0X1F942,0X1F94E);
	set_func_flags(0X1F942,0x400);
	SetType(0X1F942, "uint8_t __fastcall packet_flash_1F942(uint8_t *pkt, int a2);");
	add_func    (0X1F94E,0X1F958);
	set_func_flags(0X1F94E,0x400);
	add_func    (0X1F958,0X1F962);
	set_func_flags(0X1F958,0x400);
	add_func    (0X1F962,0X1F96C);
	set_func_flags(0X1F962,0x400);
	add_func    (0X1F96C,0X1F976);
	set_func_flags(0X1F96C,0x400);
	add_func    (0X1F976,0X1F980);
	set_func_flags(0X1F976,0x400);
	add_func    (0X1F980,0X1F98A);
	set_func_flags(0X1F980,0x400);
	add_func    (0X1F98A,0X1F994);
	set_func_flags(0X1F98A,0x400);
	add_func    (0X1F994,0X1F99E);
	set_func_flags(0X1F994,0x400);
	add_func    (0X1F99E,0X1F9A8);
	set_func_flags(0X1F99E,0x400);
	add_func    (0X1F9A8,0X1F9B2);
	set_func_flags(0X1F9A8,0x400);
	add_func    (0X1F9B2,0X1F9C2);
	set_func_flags(0X1F9B2,0x400);
	set_frame_size(0X1F9B2, 0X8, 0, 0);
	add_func    (0X1F9C2,0X1F9D6);
	set_func_flags(0X1F9C2,0x400);
	set_frame_size(0X1F9C2, 0X8, 0, 0);
	add_func    (0X1F9D6,0X1F9E0);
	set_func_flags(0X1F9D6,0x400);
	add_func    (0X1F9E0,0X1F9F0);
	set_func_flags(0X1F9E0,0x400);
	set_frame_size(0X1F9E0, 0X4, 0, 0);
	add_func    (0X1F9F0,0X1F9FA);
	set_func_flags(0X1F9F0,0x400);
	add_func    (0X1FA04,0X1FA08);
	set_func_flags(0X1FA04,0x404);
	SetType(0X1FA04, "void __cdecl iap_entry(unsigned int cmd_param[5], unsigned int status_result[4]);");
	set_func_cmt(0X1FA04,	"LPC17XX/40XX IAP_ENTRY API function", 1);
	set_frame_size(0X1FA04, 0, 0, 0);
	add_func    (0X1FA08,0X1FA28);
	set_func_flags(0X1FA08,0x404);
	SetType(0X1FA08, "uint8_t __cdecl Chip_IAP_PreSectorForReadWrite(uint32_t strSector, uint32_t endSector);");
	set_func_cmt(0X1FA08,	"Prepare sector for write operation", 1);
	set_frame_size(0X1FA08, 0X8, 0, 0);
	add_func    (0X1FA28,0X1FA36);
	set_func_flags(0X1FA28,0x400);
	add_func    (0X1FA54,0X1FA7A);
	set_func_flags(0X1FA54,0x400);
	SetType(0X1FA54, "signed int __fastcall compute_buf_crc16(uint8_t *buf, unsigned int len, unsigned int seed);");
	set_frame_size(0X1FA54, 0X8, 0, 0);
	add_func    (0X1FA7A,0X1FAAE);
	set_func_flags(0X1FA7A,0x400);
	set_frame_size(0X1FA7A, 0XC, 0, 0);
	add_func    (0X1FAAE,0X1FAD0);
	set_func_flags(0X1FAAE,0x400);
	SetType(0X1FAAE, "void __fastcall packet_make_checksum(uint8_t *buf, unsigned int len);");
	set_func_cmt(0X1FAAE,	"Given a DjiPacket as buffer and its length, computes CRC16 and sets in two ending bytes of the packet.", 1);
	set_frame_size(0X1FAAE, 0XC, 0, 0);
	add_func    (0X1FAD4,0X1FAEA);
	set_func_flags(0X1FAD4,0x400);
	set_frame_size(0X1FAD4, 0X8, 0, 0);
	add_func    (0X1FAEA,0X1FB10);
	set_func_flags(0X1FAEA,0x400);
	set_frame_size(0X1FAEA, 0XC, 0, 0);
	add_func    (0X1FB10,0X1FB2C);
	set_func_flags(0X1FB10,0x400);
	set_frame_size(0X1FB10, 0XC, 0, 0);
	add_func    (0X1FB30,0X1FBDA);
	set_func_flags(0X1FB30,0x400);
	SetType(0X1FB30, "void __cdecl ADC_Init(struct LPC_ADC_TypeDef *ADCx, void *ptr2);");
	set_func_cmt(0X1FB30,	"Initial for ADC", 1);
	set_frame_size(0X1FB30, 0X10, 0, 0);
	add_func    (0X1FBDA,0X1FC00);
	set_func_flags(0X1FBDA,0x400);
	set_frame_size(0X1FBDA, 0X18, 0, 0);
	add_func    (0X1FC00,0X1FC0E);
	set_func_flags(0X1FC00,0x400);
	SetType(0X1FC00, "unsigned __int32 __cdecl ADC_GetData(unsigned __int32 channel);");
	set_func_cmt(0X1FC00,	"Get Result conversion from A/D data register", 1);
	add_func    (0X1FC0E,0X1FC2A);
	set_func_flags(0X1FC0E,0x400);
	add_func    (0X1FC2A,0X1FC3C);
	set_func_flags(0X1FC2A,0x404);
	SetType(0X1FC2A, "void __cdecl ADC_StartCmd(struct LPC_ADC_TypeDef *ADCx, unsigned __int8 start_mode);");
	set_func_cmt(0X1FC2A,	"Set start mode for ADC", 1);
	set_frame_size(0X1FC2A, 0, 0, 0);
	add_func    (0X1FC3C,0X1FC52);
	set_func_flags(0X1FC3C,0x404);
	SetType(0X1FC3C, "void __cdecl ADC_BurstCmd(struct LPC_ADC_TypeDef *ADCx, enum FunctionalState NewState);");
	set_func_cmt(0X1FC3C,	"ADC Burst mode setting", 1);
	set_frame_size(0X1FC3C, 0, 0, 0);
	add_func    (0X1FC52,0X1FC68);
	set_func_flags(0X1FC52,0x404);
	SetType(0X1FC52, "void __cdecl ADC_PowerdownCmd(struct LPC_ADC_TypeDef *ADCx, enum FunctionalState NewState);");
	set_func_cmt(0X1FC52,	"Set AD conversion in power mode", 1);
	set_frame_size(0X1FC52, 0, 0, 0);
	add_func    (0X1FC68,0X1FC7E);
	set_func_flags(0X1FC68,0x404);
	SetType(0X1FC68, "void __cdecl ADC_EdgeStartConfig(struct LPC_ADC_TypeDef *ADCx, unsigned __int8 EdgeOption);");
	set_func_cmt(0X1FC68,	"Set Edge start configuration", 1);
	set_frame_size(0X1FC68, 0, 0, 0);
	add_func    (0X1FC7E,0X1FC96);
	set_func_flags(0X1FC7E,0x404);
	SetType(0X1FC7E, "void __cdecl ADC_IntConfig(struct LPC_ADC_TypeDef *ADCx, enum ADC_TYPE_INT_OPT IntType, enum FunctionalState NewState);");
	set_func_cmt(0X1FC7E,	"ADC interrupt configuration", 1);
	set_frame_size(0X1FC7E, 0X8, 0, 0);
	add_func    (0X1FC96,0X1FCAA);
	set_func_flags(0X1FC96,0x404);
	SetType(0X1FC96, "void __cdecl ADC_ChannelCmd(struct LPC_ADC_TypeDef *ADCx, unsigned __int8 Channel, enum FunctionalState NewState);");
	set_func_cmt(0X1FC96,	"Enable/Disable ADC channel number", 1);
	set_frame_size(0X1FC96, 0, 0, 0);
	add_func    (0X1FCAA,0X1FCB6);
	set_func_flags(0X1FCAA,0x404);
	SetType(0X1FCAA, "unsigned __int16 __cdecl ADC_ChannelGetData(struct LPC_ADC_TypeDef *ADCx, unsigned __int8 channel);");
	set_func_cmt(0X1FCAA,	"Get ADC result", 1);
	set_frame_size(0X1FCAA, 0, 0, 0);
	add_func    (0X1FCB6,0X1FCD0);
	set_func_flags(0X1FCB6,0x404);
	SetType(0X1FCB6, "enum FlagStatus __cdecl ADC_ChannelGetStatus(struct LPC_ADC_TypeDef *ADCx, unsigned __int8 channel, unsigned __int32 StatusType);");
	set_func_cmt(0X1FCB6,	"Get ADC Chanel status from ADC data register", 1);
	set_frame_size(0X1FCB6, 0, 0, 0);
	add_func    (0X1FCD0,0X1FCD4);
	set_func_flags(0X1FCD0,0x404);
	SetType(0X1FCD0, "unsigned __int32 __cdecl ADC_GlobalGetData(struct LPC_ADC_TypeDef *ADCx);");
	set_func_cmt(0X1FCD0,	"Get ADC Data from AD Global register", 1);
	set_frame_size(0X1FCD0, 0, 0, 0);
	add_func    (0X1FCD4,0X1FCEA);
	set_func_flags(0X1FCD4,0x404);
	SetType(0X1FCD4, "enum FlagStatus __cdecl ADC_GlobalGetStatus(struct LPC_ADC_TypeDef *ADCx, unsigned __int32 StatusType);");
	set_func_cmt(0X1FCD4,	"Get ADC Chanel status from AD global data register", 1);
	set_frame_size(0X1FCD4, 0, 0, 0);
	add_func    (0X1FCFC,0X1FD50);
	set_func_flags(0X1FCFC,0x404);
	SetType(0X1FCFC, "void __cdecl CLKPWR_SetPCLKDiv(unsigned __int32 ClkType, unsigned __int32 DivVal);");
	set_func_cmt(0X1FCFC,	"Set value of each Peripheral Clock Selection", 1);
	set_frame_size(0X1FCFC, 0X8, 0, 0);
	add_func    (0X1FD50,0X1FD6A);
	set_func_flags(0X1FD50,0x404);
	SetType(0X1FD50, "unsigned __int32 __cdecl CLKPWR_GetPCLKSEL(unsigned __int32 ClkType);");
	set_func_cmt(0X1FD50,	"Get current value of each Peripheral Clock Selection", 1);
	set_frame_size(0X1FD50, 0, 0, 0);
	add_func    (0X1FD6A,0X1FD90);
	set_func_flags(0X1FD6A,0x404);
	SetType(0X1FD6A, "unsigned __int32 __cdecl CLKPWR_GetPCLK(unsigned __int32 ClkType);");
	set_func_cmt(0X1FD6A,	"Get current value of each Peripheral Clock", 1);
	set_frame_size(0X1FD6A, 0X4, 0, 0);
	add_func    (0X1FDB2,0X1FDBE);
	set_func_flags(0X1FDB2,0x404);
	SetType(0X1FDB2, "void CLKPWR_Sleep(void);");
	set_func_cmt(0X1FDB2,	"Enter Sleep mode with co-operated instruction by the Cortex-M3.", 1);
	set_frame_size(0X1FDB2, 0, 0, 0);
	add_func    (0X1FDBE,0X1FDD0);
	set_func_flags(0X1FDBE,0x404);
	SetType(0X1FDBE, "void CLKPWR_DeepSleep(void);");
	set_func_cmt(0X1FDBE,	"Enter Deep Sleep mode with co-operated instruction by the Cortex-M3.", 1);
	set_frame_size(0X1FDBE, 0, 0, 0);
	add_func    (0X1FDD0,0X1FDE2);
	set_func_flags(0X1FDD0,0x404);
	SetType(0X1FDD0, "void CLKPWR_PowerDown(void);");
	set_func_cmt(0X1FDD0,	"Enter Power Down mode with co-operated instruction by the Cortex-M3.", 1);
	set_frame_size(0X1FDD0, 0, 0, 0);
	add_func    (0X1FDE2,0X1FDF4);
	set_func_flags(0X1FDE2,0x404);
	SetType(0X1FDE2, "void CLKPWR_DeepPowerDown(void);");
	set_func_cmt(0X1FDE2,	"Enter Deep Power Down mode with co-operated instruction by the Cortex-M3.", 1);
	set_frame_size(0X1FDE2, 0, 0, 0);
	add_func    (0X1FE04,0X1FE10);
	set_func_flags(0X1FE04,0x400);
	SetType(0X1FE04, "void __cdecl check_failed(unsigned __int8 *file, unsigned __int32 line);");
	set_frame_size(0X1FE04, 0, 0, 0);
	add_func    (0X1FE40,0X1FE6A);
	set_func_flags(0X1FE40,0x404);
	SetType(0X1FE40, "void __cdecl RTC_Init(struct LPC_RTC_TypeDef *RTCx);");
	set_func_cmt(0X1FE40,	"Initializes the RTC peripheral.", 1);
	set_frame_size(0X1FE40, 0X8, 0, 0);
	add_func    (0X1FE6A,0X1FE8E);
	set_func_flags(0X1FE6A,0x404);
	SetType(0X1FE6A, "void __cdecl RTC_DeInit(struct LPC_RTC_TypeDef *RTCx);");
	set_func_cmt(0X1FE6A,	"De-initializes the RTC peripheral registers to their default reset values.", 1);
	set_frame_size(0X1FE6A, 0X8, 0, 0);
	add_func    (0X1FE8E,0X1FEB2);
	set_func_flags(0X1FE8E,0x404);
	SetType(0X1FE8E, "void __cdecl RTC_ResetClockTickCounter(struct LPC_RTC_TypeDef *RTCx);");
	set_func_cmt(0X1FE8E,	"Reset clock tick counter in RTC peripheral", 1);
	set_frame_size(0X1FE8E, 0X8, 0, 0);
	add_func    (0X1FEB2,0X1FEE6);
	set_func_flags(0X1FEB2,0x404);
	SetType(0X1FEB2, "void __cdecl RTC_Cmd(struct LPC_RTC_TypeDef *RTCx, enum FunctionalState NewState);");
	set_func_cmt(0X1FEB2,	"Start/Stop RTC peripheral", 1);
	set_frame_size(0X1FEB2, 0X10, 0, 0);
	add_func    (0X1FEE6,0X1FFD6);
	set_func_flags(0X1FEE6,0x404);
	SetType(0X1FEE6, "void __cdecl RTC_CntIncrIntConfig(struct LPC_RTC_TypeDef *RTCx, unsigned __int32 CntIncrIntType, enum FunctionalState NewState);");
	set_func_cmt(0X1FEE6,	"Enable/Disable Counter increment interrupt for each time type in RTC peripheral", 1);
	set_frame_size(0X1FEE6, 0X10, 0, 0);
	set_name(0X1FF64, "def_15F38", SN_LOCAL);
	add_func    (0X1FFD6,0X200C6);
	set_func_flags(0X1FFD6,0x404);
	SetType(0X1FFD6, "void __cdecl RTC_AlarmIntConfig(struct LPC_RTC_TypeDef *RTCx, unsigned __int32 AlarmTimeType, enum FunctionalState NewState);");
	set_func_cmt(0X1FFD6,	"Enable/Disable Alarm interrupt for each time type", 1);
	set_frame_size(0X1FFD6, 0X10, 0, 0);
	set_name(0X20054, "def_16028", SN_LOCAL);
	add_func    (0X200C6,0X201D8);
	set_func_flags(0X200C6,0x404);
	SetType(0X200C6, "void __cdecl RTC_SetTime(struct LPC_RTC_TypeDef *RTCx, unsigned __int32 Timetype, unsigned __int32 TimeValue);");
	set_func_cmt(0X200C6,	"Set current time value for each time type in RTC peripheral", 1);
	set_frame_size(0X200C6, 0X18, 0, 0);
	add_func    (0X201D8,0X2028E);
	set_func_flags(0X201D8,0x404);
	SetType(0X201D8, "unsigned __int32 __cdecl RTC_GetTime(struct LPC_RTC_TypeDef *RTCx, unsigned __int32 Timetype);");
	set_func_cmt(0X201D8,	"Get current time value for each type time type", 1);
	set_frame_size(0X201D8, 0X10, 0, 0);
	add_func    (0X2028E,0X202F2);
	set_func_flags(0X2028E,0x404);
	SetType(0X2028E, "void __cdecl RTC_SetFullTime(struct LPC_RTC_TypeDef *RTCx, struct RTC_TIME_Type *pFullTime);");
	set_func_cmt(0X2028E,	"Set full of time in RTC peripheral", 1);
	set_frame_size(0X2028E, 0X10, 0, 0);
	add_func    (0X202F2,0X20356);
	set_func_flags(0X202F2,0x404);
	SetType(0X202F2, "void __cdecl RTC_GetFullTime(struct LPC_RTC_TypeDef *RTCx, struct RTC_TIME_Type *pFullTime);");
	set_func_cmt(0X202F2,	"Get full of time in RTC peripheral", 1);
	set_frame_size(0X202F2, 0X10, 0, 0);
	add_func    (0X20356,0X20454);
	set_func_flags(0X20356,0x404);
	SetType(0X20356, "void __cdecl RTC_SetAlarmTime(struct LPC_RTC_TypeDef *RTCx, unsigned __int32 Timetype, unsigned __int32 ALValue);");
	set_func_cmt(0X20356,	"Set alarm time value for each time type", 1);
	set_frame_size(0X20356, 0X18, 0, 0);
	add_func    (0X20454,0X204B0);
	set_func_flags(0X20454,0x404);
	SetType(0X20454, "unsigned __int32 __cdecl RTC_GetAlarmTime(struct LPC_RTC_TypeDef *RTCx, unsigned __int32 Timetype);");
	set_func_cmt(0X20454,	"Get alarm time value for each time type", 1);
	set_frame_size(0X20454, 0, 0, 0);
	add_func    (0X204B0,0X20516);
	set_func_flags(0X204B0,0x404);
	SetType(0X204B0, "void __cdecl RTC_SetFullAlarmTime(struct LPC_RTC_TypeDef *RTCx, struct RTC_TIME_Type *pFullTime);");
	set_func_cmt(0X204B0,	"Set full of alarm time in RTC peripheral", 1);
	set_frame_size(0X204B0, 0X10, 0, 0);
	add_func    (0X20516,0X2057C);
	set_func_flags(0X20516,0x404);
	SetType(0X20516, "void __cdecl RTC_GetFullAlarmTime(struct LPC_RTC_TypeDef *RTCx, struct RTC_TIME_Type *pFullTime);");
	set_func_cmt(0X20516,	"Get full of alarm time in RTC peripheral", 1);
	set_frame_size(0X20516, 0X10, 0, 0);
	add_func    (0X2057C,0X205B2);
	set_func_flags(0X2057C,0x404);
	SetType(0X2057C, "enum IntStatus __cdecl RTC_GetIntPending(struct LPC_RTC_TypeDef *RTCx, unsigned __int32 IntType);");
	set_func_cmt(0X2057C,	"Check whether if specified Location interrupt in", 1);
	set_frame_size(0X2057C, 0X10, 0, 0);
	add_func    (0X205B2,0X205E6);
	set_func_flags(0X205B2,0x404);
	SetType(0X205B2, "void __cdecl RTC_ClearIntPending(struct LPC_RTC_TypeDef *RTCx, unsigned __int32 IntType);");
	set_func_cmt(0X205B2,	"Clear specified Location interrupt pending in", 1);
	set_frame_size(0X205B2, 0X10, 0, 0);
	add_func    (0X205E6,0X20622);
	set_func_flags(0X205E6,0x404);
	SetType(0X205E6, "void __cdecl RTC_CalibCounterCmd(struct LPC_RTC_TypeDef *RTCx, enum FunctionalState NewState);");
	set_func_cmt(0X205E6,	"Enable/Disable calibration counter in RTC peripheral", 1);
	set_frame_size(0X205E6, 0X10, 0, 0);
	add_func    (0X20622,0X20676);
	set_func_flags(0X20622,0x404);
	SetType(0X20622, "void __cdecl RTC_CalibConfig(struct LPC_RTC_TypeDef *RTCx, unsigned __int32 CalibValue, unsigned __int8 CalibDir);");
	set_func_cmt(0X20622,	"Configures Calibration in RTC peripheral", 1);
	set_frame_size(0X20622, 0X18, 0, 0);
	add_func    (0X2067C,0X206AE);
	set_func_flags(0X2067C,0x404);
	SetType(0X2067C, "void __cdecl RTC_WriteGPREG(struct LPC_RTC_TypeDef *RTCx, unsigned __int8 Channel, unsigned __int32 Value);");
	set_func_cmt(0X2067C,	"Write value to General purpose registers", 1);
	set_frame_size(0X2067C, 0X10, 0, 0);
	add_func    (0X206AE,0X206DE);
	set_func_flags(0X206AE,0x404);
	SetType(0X206AE, "unsigned __int32 __cdecl RTC_ReadGPREG(struct LPC_RTC_TypeDef *RTCx, unsigned __int8 Channel);");
	set_func_cmt(0X206AE,	"Read value from General purpose registers", 1);
	set_frame_size(0X206AE, 0X10, 0, 0);
	add_func    (0X206E4,0X206FA);
	set_func_flags(0X206E4,0x400);
	add_func    (0X206FA,0X2071E);
	set_func_flags(0X206FA,0x400);
	add_func    (0X2071E,0X20798);
	set_func_flags(0X2071E,0x400);
	set_frame_size(0X2071E, 0X10, 0, 0);
	add_func    (0X20798,0X208AE);
	set_func_flags(0X20798,0x400);
	set_frame_size(0X20798, 0X28, 0, 0);
	add_func    (0X208AE,0X208BA);
	set_func_flags(0X208AE,0x400);
	add_func    (0X208C6,0X2091C);
	set_func_flags(0X208C6,0x400);
	set_frame_size(0X208C6, 0X10, 0, 0);
	add_func    (0X2091C,0X209AC);
	set_func_flags(0X2091C,0x400);
	set_frame_size(0X2091C, 0X20, 0, 0);
	add_func    (0X209AC,0X209DC);
	set_func_flags(0X209AC,0x400);
	add_func    (0X209DC,0X20A5A);
	set_func_flags(0X209DC,0x400);
	set_frame_size(0X209DC, 0X10, 0, 0);
	add_func    (0X20A5A,0X20B82);
	set_func_flags(0X20A5A,0x400);
	set_frame_size(0X20A5A, 0X28, 0, 0);
	add_func    (0X20B82,0X20B8E);
	set_func_flags(0X20B82,0x400);
	add_func    (0X20B8E,0X20B9A);
	set_func_flags(0X20B8E,0x400);
	add_func    (0X20B9A,0X20BEC);
	set_func_flags(0X20B9A,0x400);
	set_frame_size(0X20B9A, 0X10, 0, 0);
	add_func    (0X20BEC,0X20C74);
	set_func_flags(0X20BEC,0x400);
	set_frame_size(0X20BEC, 0X20, 0, 0);
	add_func    (0X20C74,0X20C98);
	set_func_flags(0X20C74,0x400);
	add_func    (0X20C98,0X20D02);
	set_func_flags(0X20C98,0x400);
	set_frame_size(0X20C98, 0X10, 0, 0);
	add_func    (0X20D02,0X20E06);
	set_func_flags(0X20D02,0x400);
	set_frame_size(0X20D02, 0X28, 0, 0);
	add_func    (0X20E06,0X20E12);
	set_func_flags(0X20E06,0x400);
	add_func    (0X20E12,0X20E1E);
	set_func_flags(0X20E12,0x400);
	add_func    (0X20E1E,0X20E72);
	set_func_flags(0X20E1E,0x400);
	set_frame_size(0X20E1E, 0X10, 0, 0);
	add_func    (0X20E72,0X20EFE);
	set_func_flags(0X20E72,0x400);
	set_frame_size(0X20E72, 0X20, 0, 0);
	add_func    (0X20F18,0X20F3C);
	set_func_flags(0X20F18,0x400);
	add_func    (0X20F3C,0X20FA6);
	set_func_flags(0X20F3C,0x400);
	set_frame_size(0X20F3C, 0X10, 0, 0);
	add_func    (0X20FA6,0X210B8);
	set_func_flags(0X20FA6,0x400);
	set_frame_size(0X20FA6, 0X28, 0, 0);
	add_func    (0X210B8,0X210C4);
	set_func_flags(0X210B8,0x400);
	add_func    (0X210C4,0X210D0);
	set_func_flags(0X210C4,0x400);
	add_func    (0X210D0,0X21126);
	set_func_flags(0X210D0,0x400);
	set_frame_size(0X210D0, 0X10, 0, 0);
	add_func    (0X21126,0X211B4);
	set_func_flags(0X21126,0x400);
	set_frame_size(0X21126, 0X20, 0, 0);
	add_func    (0X211B4,0X211EA);
	set_func_flags(0X211B4,0x400);
	set_frame_size(0X211B4, 0X20, 0, 0);
	define_local_var(0X211B4, 0X211EA, "[bp-0X10]", "varg_r0");
	define_local_var(0X211B4, 0X211EA, "[bp-0XC]", "varg_r1");
	define_local_var(0X211B4, 0X211EA, "[bp-0X8]", "varg_r2");
	define_local_var(0X211B4, 0X211EA, "[bp-0X4]", "varg_r3");
	add_func    (0X211EA,0X21200);
	set_func_flags(0X211EA,0x400);
	add_func    (0X21218,0X21298);
	set_func_flags(0X21218,0x404);
	SetType(0X21218, "uint8_t __cdecl WDT_SetTimeOut(uint8_t clk_source, uint32_t timeout);");
	set_func_cmt(0X21218,	"Set WDT time out value and WDT mode", 1);
	set_frame_size(0X21218, 0X10, 0, 0);
	add_func    (0X21298,0X212C6);
	set_func_flags(0X21298,0x404);
	SetType(0X21298, "void __cdecl WDT_Init(enum WDT_CLK_OPT ClkSrc, enum WDT_MODE_OPT WDTMode);");
	set_func_cmt(0X21298,	"Initial for Watchdog function", 1);
	set_frame_size(0X21298, 0X10, 0, 0);
	add_func    (0X212C6,0X212DE);
	set_func_flags(0X212C6,0x404);
	SetType(0X212C6, "void WDT_Feed_cond(void);");
	set_func_cmt(0X212C6,	"After set WDTEN, call this function to start Watchdog or reload the Watchdog timer", 1);
	set_frame_size(0X212C6, 0, 0, 0);
	add_func    (0X212DE,0X212FE);
	set_func_flags(0X212DE,0x404);
	SetType(0X212DE, "void __cdecl WDT_Start(uint32_t TimeOut);");
	set_func_cmt(0X212DE,	"Start WDT activity with given timeout value", 1);
	set_frame_size(0X212DE, 0X8, 0, 0);
	add_func    (0X212FE,0X2130A);
	set_func_flags(0X212FE,0x404);
	SetType(0X212FE, "uint32_t WDT_ReadTimeOutFlag(void);");
	set_func_cmt(0X212FE,	"Read WDT Time out flag", 1);
	set_frame_size(0X212FE, 0, 0, 0);
	add_func    (0X2130A,0X21318);
	set_func_flags(0X2130A,0x404);
	SetType(0X2130A, "void WDT_ClrTimeOutFlag(void);");
	set_func_cmt(0X2130A,	"Clear WDT Time out flag", 1);
	set_frame_size(0X2130A, 0, 0, 0);
	add_func    (0X21318,0X21336);
	set_func_flags(0X21318,0x404);
	SetType(0X21318, "void __cdecl WDT_UpdateTimeOut(uint32_t TimeOut);");
	set_func_cmt(0X21318,	"Update WDT timeout value and feed", 1);
	set_frame_size(0X21318, 0X8, 0, 0);
	add_func    (0X21336,0X2133E);
	set_func_flags(0X21336,0x404);
	SetType(0X21336, "uint32_t WDT_GetCurrentCount(void);");
	set_func_cmt(0X21336,	"Get the current value of WDT", 1);
	set_frame_size(0X21336, 0, 0, 0);
	add_func    (0X2133E,0X2134A);
	set_func_flags(0X2133E,0x404);
	SetType(0X2133E, "uint8_t WDT_IsTimedOut(void);");
	set_frame_size(0X2133E, 0, 0, 0);
	add_func    (0X2134A,0X21352);
	set_func_flags(0X2134A,0x400);
	add_func    (0X21352,0X2135A);
	set_func_flags(0X21352,0x400);
	add_func    (0X2136C,0X2138C);
	set_func_flags(0X2136C,0x400);
	set_frame_size(0X2136C, 0X10, 0, 0);
	add_func    (0X21390,0X213C0);
	set_func_flags(0X21390,0x400);
	set_frame_size(0X21390, 0X18, 0, 0);
	add_func    (0X213C4,0X213EA);
	set_func_flags(0X213C4,0x400);
	set_frame_size(0X213C4, 0X20, 0, 0);
	define_local_var(0X213C4, 0X213EA, "[bp-0X10]", "varg_r0");
	define_local_var(0X213C4, 0X213EA, "[bp-0XC]", "varg_r1");
	define_local_var(0X213C4, 0X213EA, "[bp-0X8]", "varg_r2");
	define_local_var(0X213C4, 0X213EA, "[bp-0X4]", "varg_r3");
	add_func    (0X213F0,0X21446);
	set_func_flags(0X213F0,0x400);
	set_frame_size(0X213F0, 0X10, 0, 0);
	add_func    (0X21446,0X21462);
	set_func_flags(0X21446,0x400);
	set_frame_size(0X21446, 0X10, 0, 0);
	add_func    (0X21484,0X21608);
	set_func_flags(0X21484,0x400);
	set_frame_size(0X21484, 0X28, 0, 0);
	add_func    (0X2160C,0X21640);
	set_func_flags(0X2160C,0x400);
	set_frame_size(0X2160C, 0X48, 0, 0);
	define_local_var(0X2160C, 0X21640, "[bp-0X10]", "varg_r0");
	define_local_var(0X2160C, 0X21640, "[bp-0XC]", "varg_r1");
	define_local_var(0X2160C, 0X21640, "[bp-0X8]", "varg_r2");
	define_local_var(0X2160C, 0X21640, "[bp-0X4]", "varg_r3");
	add_func    (0X21648,0X21794);
	set_func_flags(0X21648,0x400);
	set_frame_size(0X21648, 0X38, 0, 0);
	add_func    (0X21794,0X217A8);
	set_func_flags(0X21794,0x400);
	add_func    (0X217A8,0X21800);
	set_func_flags(0X217A8,0x400);
	set_frame_size(0X217A8, 0X8, 0, 0);
	add_func    (0X21800,0X2183E);
	set_func_flags(0X21800,0x400);
	set_frame_size(0X21800, 0X8, 0, 0);
	add_func    (0X2183E,0X218D4);
	set_func_flags(0X2183E,0x400);
	set_frame_size(0X2183E, 0X10, 0, 0);
	add_func    (0X218D4,0X2195E);
	set_func_flags(0X218D4,0x400);
	SetType(0X218D4, "int __fastcall memcpy(uint8_t *dst, uint8_t *src, unsigned int len);");
	add_func    (0X2195E,0X219C2);
	set_func_flags(0X2195E,0x400);
	set_frame_size(0X2195E, 0X8, 0, 0);
	add_func    (0X219C2,0X219D2);
	set_func_flags(0X219C2,0x400);
	add_func    (0X219D2,0X21A64);
	set_func_flags(0X219D2,0x400);
	SetType(0X219D2, "void __fastcall sub_219D2(void *a1, unsigned int a2);");
	set_frame_size(0X219D2, 0X4, 0, 0);
	add_func    (0X21A6E,0X21A7A);
	set_func_flags(0X21A6E,0x400);
	set_frame_size(0X21A6E, 0X8, 0, 0);
	add_func    (0X21A7A,0X21AA6);
	set_func_flags(0X21A7A,0x400);
	set_frame_size(0X21A7A, 0X10, 0, 0);
	add_func    (0X21AA6,0X21AC8);
	set_func_flags(0X21AA6,0x400);
	set_frame_size(0X21AA6, 0X10, 0, 0);
	add_func    (0X21AC8,0X21ADA);
	set_func_flags(0X21AC8,0x400);
	add_func    (0X21ADA,0X21AEC);
	set_func_flags(0X21ADA,0x400);
	add_func    (0X21AEC,0X21B3E);
	set_func_flags(0X21AEC,0x400);
	set_frame_size(0X21AEC, 0X10, 0, 0);
	add_func    (0X21B3E,0X21BF0);
	set_func_flags(0X21B3E,0x400);
	set_frame_size(0X21B3E, 0X20, 0, 0);
	add_func    (0X21BF0,0X21C58);
	set_func_flags(0X21BF0,0x400);
	set_frame_size(0X21BF0, 0X18, 0, 0);
	add_func    (0X21C90,0X21C9A);
	set_func_flags(0X21C90,0x400);
	add_func    (0X21C9A,0X21CBA);
	set_func_flags(0X21C9A,0x400);
	set_frame_size(0X21C9A, 0X40, 0, 0);
	add_func    (0X21CC0,0X21CCA);
	set_func_flags(0X21CC0,0x400);
	add_func    (0X21CCA,0X21CDA);
	set_func_flags(0X21CCA,0x400);
	add_func    (0X21CDC,0X21D92);
	set_func_flags(0X21CDC,0x400);
	set_frame_size(0X21CDC, 0X38, 0, 0);
	add_func    (0X21D98,0X21E04);
	set_func_flags(0X21D98,0x400);
	set_frame_size(0X21D98, 0X18, 0, 0);
	add_func    (0X21E14,0X21E58);
	set_func_flags(0X21E14,0x400);
	set_frame_size(0X21E14, 0X8, 0, 0);
	add_func    (0X21E58,0X21E70);
	set_func_flags(0X21E58,0x400);
	set_frame_size(0X21E58, 0X8, 0, 0);
	add_func    (0X21E84,0X21EA0);
	set_func_flags(0X21E84,0x400);
	add_func    (0X21EA0,0X2209C);
	set_func_flags(0X21EA0,0x400);
	set_frame_size(0X21EA0, 0X58, 0, 0);
	add_func    (0X2209C,0X22338);
	set_func_flags(0X2209C,0x400);
	set_frame_size(0X2209C, 0X78, 0, 0);
	add_func    (0X22350,0X22368);
	set_func_flags(0X22350,0x400);
	add_func    (0X223B0,0X223B4);
	set_func_flags(0X223B0,0x400);
	add_func    (0X223B8,0X223BC);
	set_func_flags(0X223B8,0x400);
	add_func    (0X223C0,0X2244A);
	set_func_flags(0X223C0,0x400);
	set_frame_size(0X223C0, 0XC, 0, 0);
	add_func    (0X2244A,0X2245C);
	set_func_flags(0X2244A,0x400);
	set_frame_size(0X2244A, 0X8, 0, 0);
	add_func    (0X2245E,0X2260A);
	set_func_flags(0X2245E,0x400);
	set_frame_size(0X2245E, 0X60, 0, 0);
	add_func    (0X2260A,0X22876);
	set_func_flags(0X2260A,0x400);
	set_frame_size(0X2260A, 0X68, 0, 0);
	add_func    (0X22876,0X2288A);
	set_func_flags(0X22876,0x400);
	set_frame_size(0X22876, 0X8, 0, 0);
	add_func    (0X228A2,0X228B6);
	set_func_flags(0X228A2,0x400);
	set_frame_size(0X228A2, 0X8, 0, 0);
	add_func    (0X228D0,0X22C3E);
	set_func_flags(0X228D0,0x400);
	set_frame_size(0X228D0, 0X60, 0, 0);
	add_func    (0X22C44,0X22D1C);
	set_func_flags(0X22C44,0x400);
	set_frame_size(0X22C44, 0X48, 0, 0);
	add_func    (0X22D20,0X22D60);
	set_func_flags(0X22D20,0x400);
	set_frame_size(0X22D20, 0X10, 0, 0);
	add_func    (0X22D60,0X22D6A);
	set_func_flags(0X22D60,0x400);
	set_frame_size(0X22D60, 0X8, 0, 0);
	add_func    (0X22D70,0X22DE0);
	set_func_flags(0X22D70,0x400);
	set_frame_size(0X22D70, 0X18, 0, 0);
	add_func    (0X22DF0,0X230FA);
	set_func_flags(0X22DF0,0x400);
	set_frame_size(0X22DF0, 0X50, 0, 0);
	add_func    (0X23108,0X2322C);
	set_func_flags(0X23108,0x400);
	set_frame_size(0X23108, 0X48, 0, 0);
	add_func    (0X2323C,0X2324E);
	set_func_flags(0X2323C,0x401);
	set_frame_size(0X2323C, 0X8, 0, 0);
	add_func    (0X23250,0X232D0);
	set_func_flags(0X23250,0x400);
	add_func    (0X232D0,0X232F6);
	set_func_flags(0X232D0,0x400);
	add_func    (0X232F8,0X23300);
	set_func_flags(0X232F8,0x401);
	add_func    (0X23306,0X233EA);
	set_func_flags(0X23306,0x400);
	add_func    (0X233EA,0X236A2);
	set_func_flags(0X233EA,0x400);
	set_frame_size(0X233EA, 0X10, 0, 0);
	add_func    (0X23724,0X23774);
	set_func_flags(0X23724,0x400);
	set_frame_size(0X23724, 0X8, 0, 0);
	add_func    (0X23778,0X2383E);
	set_func_flags(0X23778,0x400);
	add_func    (0X2383E,0X23866);
	set_func_flags(0X2383E,0x400);
	set_frame_size(0X2383E, 0X18, 0, 0);
	add_func    (0X23866,0X2388E);
	set_func_flags(0X23866,0x400);
	set_frame_size(0X23866, 0X18, 0, 0);
	add_func    (0X2388E,0X238B6);
	set_func_flags(0X2388E,0x400);
	set_frame_size(0X2388E, 0X18, 0, 0);
	add_func    (0X238B6,0X238DE);
	set_func_flags(0X238B6,0x400);
	set_frame_size(0X238B6, 0X18, 0, 0);
	add_func    (0X238DE,0X23B22);
	set_func_flags(0X238DE,0x400);
	add_func    (0X23B24,0X23B46);
	set_func_flags(0X23B24,0x405);
	SetType(0X23B24, "void OSStartHighRdy(void);");
	set_func_cmt(0X23B24,	"This function triggers a PendSV exception (essentially, causes a context switch) to cause the first task to start.", 1);
	set_frame_size(0X23B24, 0, 0, 0);
	set_name(0X23B44, "OSStartHang", SN_LOCAL);
	add_func    (0X23B46,0X23B88);
	set_func_flags(0X23B46,0x404);
	SetType(0X23B46, "void OS_CPU_PendSVHandler(void);");
	set_func_cmt(0X23B46,	"Handle PendSV Exception.\nPendSV is used to cause a context switch.", 1);
	set_frame_size(0X23B46, 0X4, 0, 0);
	set_name(0X23B5A, "OS_CPU_PendSVHandler_nosave", SN_LOCAL);
	add_func    (0X23BA8,0X23BB0);
	set_func_flags(0X23BA8,0x400);
	add_func    (0X23BB8,0X23C2E);
	set_func_flags(0X23BB8,0x400);
	set_frame_size(0X23BB8, 0X8, 0, 0);
	add_func    (0X23C40,0X23CB4);
	set_func_flags(0X23C40,0x400);
	set_frame_size(0X23C40, 0X10, 0, 0);
	add_func    (0X23CBC,0X23D70);
	set_func_flags(0X23CBC,0x400);
	set_frame_size(0X23CBC, 0X10, 0, 0);
	add_func    (0X23D7C,0X23EDC);
	set_func_flags(0X23D7C,0x400);
	set_frame_size(0X23D7C, 0X28, 0, 0);
	add_func    (0X23EE4,0X23FE8);
	set_func_flags(0X23EE4,0x400);
	set_frame_size(0X23EE4, 0X28, 0, 0);
	add_func    (0X23FF0,0X24018);
	set_func_flags(0X23FF0,0x400);
	add_func    (0X24018,0X24354);
	set_func_flags(0X24018,0x400);
	set_frame_size(0X24018, 0X80, 0, 0);
	add_func    (0X243A0,0X24486);
	set_func_flags(0X243A0,0x400);
	set_frame_size(0X243A0, 0X30, 0, 0);
	add_func    (0X2449C,0X24546);
	set_func_flags(0X2449C,0x400);
	set_frame_size(0X2449C, 0X18, 0, 0);
	add_func    (0X24548,0X24628);
	set_func_flags(0X24548,0x400);
	set_frame_size(0X24548, 0X40, 0, 0);
	add_func    (0X24634,0X24640);
	set_func_flags(0X24634,0x400);
	add_func    (0X24644,0X2464A);
	set_func_flags(0X24644,0x400);
	add_func    (0X2464A,0X2464E);
	set_func_flags(0X2464A,0x480);
	add_func    (0X2464E,0X2465A);
	set_func_flags(0X2464E,0x400);
	add_func    (0X2465A,0X24668);
	set_func_flags(0X2465A,0x400);
	add_func    (0X24668,0X24672);
	set_func_flags(0X24668,0x400);
	add_func    (0X24678,0X24682);
	set_func_flags(0X24678,0x400);
	add_func    (0X24682,0X24688);
	set_func_flags(0X24682,0x400);
	add_func    (0X24688,0X24690);
	set_func_flags(0X24688,0x400);
	add_func    (0X24690,0X246A0);
	set_func_flags(0X24690,0x400);
	set_frame_size(0X24690, 0X8, 0, 0);
	add_func    (0X246A0,0X24724);
	set_func_flags(0X246A0,0x400);
	set_frame_size(0X246A0, 0X18, 0, 0);
	add_func    (0X24728,0X2473E);
	set_func_flags(0X24728,0x400);
	set_frame_size(0X24728, 0X8, 0, 0);
	add_func    (0X2473E,0X2474C);
	set_func_flags(0X2473E,0x400);
	add_func    (0X2474C,0X247E0);
	set_func_flags(0X2474C,0x400);
	set_frame_size(0X2474C, 0X20, 0, 0);
	add_func    (0X247E8,0X24838);
	set_func_flags(0X247E8,0x400);
	set_frame_size(0X247E8, 0X8, 0, 0);
	add_func    (0X24840,0X248B4);
	set_func_flags(0X24840,0x400);
	set_frame_size(0X24840, 0X18, 0, 0);
	add_func    (0X248B4,0X24BDC);
	set_func_flags(0X248B4,0x400);
	set_frame_size(0X248B4, 0X60, 0, 0);
	add_func    (0X24C10,0X24CD6);
	set_func_flags(0X24C10,0x400);
	set_frame_size(0X24C10, 0X18, 0, 0);
	add_func    (0X24CF4,0X24E74);
	set_func_flags(0X24CF4,0x400);
	set_frame_size(0X24CF4, 0X18, 0, 0);
	add_func    (0X24EA8,0X25878);
	set_func_flags(0X24EA8,0x400);
	set_frame_size(0X24EA8, 0X80, 0, 0);
	set_name(0X25738, "LPC_ADC1_BASE_ptr1", SN_LOCAL);
	add_func    (0X25880,0X25916);
	set_func_flags(0X25880,0x400);
	set_frame_size(0X25880, 0X20, 0, 0);
	add_func    (0X25920,0X2596C);
	set_func_flags(0X25920,0x400);
	set_frame_size(0X25920, 0X18, 0, 0);
	add_func    (0X2596C,0X2598E);
	set_func_flags(0X2596C,0x400);
	set_frame_size(0X2596C, 0X8, 0, 0);
	add_func    (0X25998,0X259BA);
	set_func_flags(0X25998,0x400);
	set_frame_size(0X25998, 0X8, 0, 0);
	add_func    (0X259C4,0X25A1C);
	set_func_flags(0X259C4,0x400);
	add_func    (0X25A28,0X25ABC);
	set_func_flags(0X25A28,0x400);
	set_frame_size(0X25A28, 0X8, 0, 0);
	add_func    (0X25ABC,0X25ADC);
	set_func_flags(0X25ABC,0x400);
	add_func    (0X25BA0,0X25DC8);
	set_func_flags(0X25BA0,0x400);
	set_frame_size(0X25BA0, 0X18, 0, 0);
	add_func    (0X25E50,0X25EC8);
	set_func_flags(0X25E50,0x400);
	add_func    (0X25EC8,0X25F24);
	set_func_flags(0X25EC8,0x400);
	set_frame_size(0X25EC8, 0, 0, 0);
	add_func    (0X25F28,0X25F80);
	set_func_flags(0X25F28,0x400);
	set_frame_size(0X25F28, 0, 0, 0);
	add_func    (0X25F82,0X25FB0);
	set_func_flags(0X25F82,0x400);
	add_func    (0X25FB0,0X25FD6);
	set_func_flags(0X25FB0,0x400);
	add_func    (0X25FD8,0X2603A);
	set_func_flags(0X25FD8,0x400);
	add_func    (0X2603A,0X26050);
	set_func_flags(0X2603A,0x400);
	set_frame_size(0X2603A, 0X10, 0, 0);
	add_func    (0X26050,0X2619C);
	set_func_flags(0X26050,0x400);
	set_frame_size(0X26050, 0X10, 0, 0);
	add_func    (0X261A4,0X26240);
	set_func_flags(0X261A4,0x400);
	add_func    (0X26240,0X2624C);
	set_func_flags(0X26240,0x400);
	add_func    (0X2624C,0X262B8);
	set_func_flags(0X2624C,0x400);
	add_func    (0X262B8,0X262CE);
	set_func_flags(0X262B8,0x400);
	set_frame_size(0X262B8, 0X8, 0, 0);
	add_func    (0X262D0,0X26498);
	set_func_flags(0X262D0,0x400);
	set_frame_size(0X262D0, 0X18, 0, 0);
	add_func    (0X2649C,0X2666C);
	set_func_flags(0X2649C,0x400);
	set_frame_size(0X2649C, 0X8, 0, 0);
	add_func    (0X26670,0X266B8);
	set_func_flags(0X26670,0x400);
	set_frame_size(0X26670, 0X8, 0, 0);
	add_func    (0X266C8,0X266D6);
	set_func_flags(0X266C8,0x400);
	add_func    (0X267B0,0X26930);
	set_func_flags(0X267B0,0x400);
	set_frame_size(0X267B0, 0X4, 0, 0);
	add_func    (0X26934,0X26960);
	set_func_flags(0X26934,0x400);
	set_frame_size(0X26934, 0, 0, 0);
	add_func    (0X26960,0X2696A);
	set_func_flags(0X26960,0x400);
	add_func    (0X2696C,0X269A4);
	set_func_flags(0X2696C,0x400);
	set_frame_size(0X2696C, 0, 0, 0);
	add_func    (0X269AC,0X269DC);
	set_func_flags(0X269AC,0x400);
	add_func    (0X269DC,0X26A02);
	set_func_flags(0X269DC,0x400);
	add_func    (0X26A04,0X26A6C);
	set_func_flags(0X26A04,0x400);
	add_func    (0X26A6C,0X26B6E);
	set_func_flags(0X26A6C,0x400);
	add_func    (0X26B6E,0X26BFA);
	set_func_flags(0X26B6E,0x400);
	add_func    (0X26C04,0X26D02);
	set_func_flags(0X26C04,0x400);
	add_func    (0X26D6A,0X26DC6);
	set_func_flags(0X26D6A,0x400);
	add_func    (0X26DC6,0X26E12);
	set_func_flags(0X26DC6,0x400);
	add_func    (0X26E12,0X26E16);
	set_func_flags(0X26E12,0x480);
	add_func    (0X26E16,0X26E1A);
	set_func_flags(0X26E16,0x480);
	add_func    (0X26E1A,0X26E1E);
	set_func_flags(0X26E1A,0x480);
}

//------------------------------------------------------------------------
// Information about functions

static Functions(void) {

	Functions_0();
	Functions_1();
}

//------------------------------------------------------------------------
// Information about segment registers

static SegRegs(void) {
	split_sreg_range(0XA000,"T",0,3);
	split_sreg_range(0XA0CC,"T",0X1,3);
	split_sreg_range(0XA0D4,"T",0X1,3);
	split_sreg_range(0XA0EA,"T",0X1,3);
	split_sreg_range(0XA180,"T",0X1,3);
	split_sreg_range(0XA210,"T",0X1,3);
	split_sreg_range(0XA230,"T",0X1,3);
	split_sreg_range(0XA234,"T",0X1,3);
	split_sreg_range(0XA248,"T",0X1,3);
	split_sreg_range(0XA254,"T",0X1,3);
	split_sreg_range(0XA27C,"T",0X1,3);
	split_sreg_range(0XA280,"T",0X1,3);
	split_sreg_range(0XA28A,"T",0X1,3);
	split_sreg_range(0XA33C,"T",0X1,3);
	split_sreg_range(0XA396,"T",0X1,3);
	split_sreg_range(0XA43E,"T",0X1,3);
	split_sreg_range(0XA478,"T",0X1,3);
	split_sreg_range(0XA4B0,"T",0X1,3);
	split_sreg_range(0XA4B4,"T",0X1,3);
	split_sreg_range(0XA4CC,"T",0X1,3);
	split_sreg_range(0XA4DA,"T",0X1,3);
	split_sreg_range(0XA4E6,"T",0X1,3);
	split_sreg_range(0XA4F2,"T",0X1,3);
	split_sreg_range(0XA4FE,"T",0X1,3);
	split_sreg_range(0XA50A,"T",0X1,3);
	split_sreg_range(0XA518,"T",0X1,3);
	split_sreg_range(0XA524,"T",0X1,3);
	split_sreg_range(0XA530,"T",0X1,3);
	split_sreg_range(0XA556,"T",0X1,3);
	split_sreg_range(0XA55C,"T",0X1,3);
	split_sreg_range(0XA574,"T",0X1,3);
	split_sreg_range(0XA5A0,"T",0X1,3);
	split_sreg_range(0XA5A8,"T",0X1,3);
	split_sreg_range(0XA5AE,"T",0X1,3);
	split_sreg_range(0XA5B0,"T",0X1,3);
	split_sreg_range(0XA622,"T",0X1,3);
	split_sreg_range(0XA634,"T",0X1,3);
	split_sreg_range(0XA636,"T",0X1,3);
	split_sreg_range(0XA674,"T",0X1,3);
	split_sreg_range(0XA694,"T",0X1,3);
	split_sreg_range(0XA6AA,"T",0X1,3);
	split_sreg_range(0XA6C0,"T",0X1,3);
	split_sreg_range(0XA6D6,"T",0X1,3);
	split_sreg_range(0XA6EC,"T",0X1,3);
	split_sreg_range(0XA702,"T",0X1,3);
	split_sreg_range(0XA718,"T",0X1,3);
	split_sreg_range(0XA738,"T",0X1,3);
	split_sreg_range(0XA74E,"T",0X1,3);
	split_sreg_range(0XA750,"T",0X1,3);
	split_sreg_range(0XA87A,"T",0X1,3);
	split_sreg_range(0XA892,"T",0X1,3);
	split_sreg_range(0XA926,"T",0X1,3);
	split_sreg_range(0XA948,"T",0X1,3);
	split_sreg_range(0XA98C,"T",0X1,3);
	split_sreg_range(0XA9DE,"T",0X1,3);
	split_sreg_range(0XAA04,"T",0X1,3);
	split_sreg_range(0XAA0C,"T",0X1,3);
	split_sreg_range(0XAA10,"T",0X1,3);
	split_sreg_range(0XAA2E,"T",0X1,3);
	split_sreg_range(0XAA32,"T",0X1,3);
	split_sreg_range(0XAA38,"T",0X1,3);
	split_sreg_range(0XAA42,"T",0X1,3);
	split_sreg_range(0XAA4A,"T",0X1,3);
	split_sreg_range(0XAA54,"T",0X1,3);
	split_sreg_range(0XAA56,"T",0X1,3);
	split_sreg_range(0XAA5A,"T",0X1,3);
	split_sreg_range(0XAA6C,"T",0X1,3);
	split_sreg_range(0XABE0,"T",0X1,3);
	split_sreg_range(0XAC00,"T",0X1,3);
	split_sreg_range(0XAC5C,"T",0X1,3);
	split_sreg_range(0XAC60,"T",0X1,3);
	split_sreg_range(0XAC74,"T",0X1,3);
	split_sreg_range(0XAC78,"T",0X1,3);
	split_sreg_range(0XAC80,"T",0X1,3);
	split_sreg_range(0XAC88,"T",0X1,3);
	split_sreg_range(0XAC90,"T",0X1,3);
	split_sreg_range(0XAC9C,"T",0X1,3);
	split_sreg_range(0XACB8,"T",0X1,3);
	split_sreg_range(0XACCE,"T",0X1,3);
	split_sreg_range(0XACE4,"T",0X1,3);
	split_sreg_range(0XACFA,"T",0X1,3);
	split_sreg_range(0XAD9E,"T",0X1,3);
	split_sreg_range(0XADA8,"T",0X1,3);
	split_sreg_range(0XADB2,"T",0X1,3);
	split_sreg_range(0XADBA,"T",0X1,3);
	split_sreg_range(0XADBE,"T",0X1,3);
	split_sreg_range(0XADC0,"T",0X1,3);
	split_sreg_range(0XAE12,"T",0X1,3);
	split_sreg_range(0XAE50,"T",0X1,3);
	split_sreg_range(0XAE7C,"T",0X1,3);
	split_sreg_range(0XAE84,"T",0X1,3);
	split_sreg_range(0XAEB0,"T",0X1,3);
	split_sreg_range(0XAEB8,"T",0X1,3);
	split_sreg_range(0XAEE4,"T",0X1,3);
	split_sreg_range(0XAEEC,"T",0X1,3);
	split_sreg_range(0XAEFE,"T",0X1,3);
	split_sreg_range(0XAF00,"T",0X1,3);
	split_sreg_range(0XAF12,"T",0X1,3);
	split_sreg_range(0XAF14,"T",0X1,3);
	split_sreg_range(0XAF26,"T",0X1,3);
	split_sreg_range(0XAF28,"T",0X1,3);
	split_sreg_range(0XAF68,"T",0X1,3);
	split_sreg_range(0XAF96,"T",0X1,3);
	split_sreg_range(0XAFBA,"T",0X1,3);
	split_sreg_range(0XAFC4,"T",0X1,3);
	split_sreg_range(0XAFDE,"T",0X1,3);
	split_sreg_range(0XAFF4,"T",0X1,3);
	split_sreg_range(0XB038,"T",0X1,3);
	split_sreg_range(0XB080,"T",0X1,3);
	split_sreg_range(0XB084,"T",0X1,3);
	split_sreg_range(0XB090,"T",0X1,3);
	split_sreg_range(0XB0EA,"T",0X1,3);
	split_sreg_range(0XB0F0,"T",0X1,3);
	split_sreg_range(0XB162,"T",0X1,3);
	split_sreg_range(0XB178,"T",0X1,3);
	split_sreg_range(0XB182,"T",0X1,3);
	split_sreg_range(0XB186,"T",0X1,3);
	split_sreg_range(0XB18E,"T",0X1,3);
	split_sreg_range(0XB196,"T",0X1,3);
	split_sreg_range(0XB19C,"T",0X1,3);
	split_sreg_range(0XB1B4,"T",0X1,3);
	split_sreg_range(0XB1CE,"T",0X1,3);
	split_sreg_range(0XB1D0,"T",0X1,3);
	split_sreg_range(0XB1DA,"T",0X1,3);
	split_sreg_range(0XB1EE,"T",0X1,3);
	split_sreg_range(0XB200,"T",0X1,3);
	split_sreg_range(0XB20A,"T",0X1,3);
	split_sreg_range(0XB226,"T",0X1,3);
	split_sreg_range(0XB274,"T",0X1,3);
	split_sreg_range(0XB286,"T",0X1,3);
	split_sreg_range(0XB29E,"T",0X1,3);
	split_sreg_range(0XB2A0,"T",0X1,3);
	split_sreg_range(0XB2A2,"T",0X1,3);
	split_sreg_range(0XB2B2,"T",0X1,3);
	split_sreg_range(0XB2BC,"T",0X1,3);
	split_sreg_range(0XB2E4,"T",0X1,3);
	split_sreg_range(0XB2F8,"T",0X1,3);
	split_sreg_range(0XB31A,"T",0X1,3);
	split_sreg_range(0XB31C,"T",0X1,3);
	split_sreg_range(0XB328,"T",0X1,3);
	split_sreg_range(0XB332,"T",0X1,3);
	split_sreg_range(0XB34A,"T",0X1,3);
	split_sreg_range(0XB352,"T",0X1,3);
	split_sreg_range(0XB370,"T",0X1,3);
	split_sreg_range(0XB374,"T",0X1,3);
	split_sreg_range(0XB376,"T",0X1,3);
	split_sreg_range(0XB37C,"T",0X1,3);
	split_sreg_range(0XB3BE,"T",0X1,3);
	split_sreg_range(0XB3CC,"T",0X1,3);
	split_sreg_range(0XB3E6,"T",0X1,3);
	split_sreg_range(0XB400,"T",0X1,3);
	split_sreg_range(0XB402,"T",0X1,3);
	split_sreg_range(0XB404,"T",0X1,3);
	split_sreg_range(0XB414,"T",0X1,3);
	split_sreg_range(0XB440,"T",0X1,3);
	split_sreg_range(0XB462,"T",0X1,3);
	split_sreg_range(0XB484,"T",0X1,3);
	split_sreg_range(0XB49A,"T",0X1,3);
	split_sreg_range(0XB49C,"T",0X1,3);
	split_sreg_range(0XB4B8,"T",0X1,3);
	split_sreg_range(0XB4D8,"T",0X1,3);
	split_sreg_range(0XB4F0,"T",0X1,3);
	split_sreg_range(0XB4F2,"T",0X1,3);
	split_sreg_range(0XB514,"T",0X1,3);
	split_sreg_range(0XB51C,"T",0X1,3);
	split_sreg_range(0XB52C,"T",0X1,3);
	split_sreg_range(0XB53A,"T",0X1,3);
	split_sreg_range(0XB548,"T",0X1,3);
	split_sreg_range(0XB54E,"T",0X1,3);
	split_sreg_range(0XB566,"T",0X1,3);
	split_sreg_range(0XB572,"T",0X1,3);
	split_sreg_range(0XB57C,"T",0X1,3);
	split_sreg_range(0XB582,"T",0X1,3);
	split_sreg_range(0XB594,"T",0X1,3);
	split_sreg_range(0XB598,"T",0X1,3);
	split_sreg_range(0XB5AC,"T",0X1,3);
	split_sreg_range(0XB5B2,"T",0X1,3);
	split_sreg_range(0XB5BE,"T",0X1,3);
	split_sreg_range(0XB5C4,"T",0X1,3);
	split_sreg_range(0XB5C6,"T",0X1,3);
	split_sreg_range(0XB5D8,"T",0X1,3);
	split_sreg_range(0XB5E2,"T",0X1,3);
	split_sreg_range(0XB5E6,"T",0X1,3);
	split_sreg_range(0XB5EA,"T",0X1,3);
	split_sreg_range(0XB5EC,"T",0X1,3);
	split_sreg_range(0XB5F6,"T",0X1,3);
	split_sreg_range(0XB61C,"T",0X1,3);
	split_sreg_range(0XB622,"T",0X1,3);
	split_sreg_range(0XB644,"T",0X1,3);
	split_sreg_range(0XB64A,"T",0X1,3);
	split_sreg_range(0XB654,"T",0X1,3);
	split_sreg_range(0XB656,"T",0X1,3);
	split_sreg_range(0XB666,"T",0X1,3);
	split_sreg_range(0XB672,"T",0X1,3);
	split_sreg_range(0XB694,"T",0X1,3);
	split_sreg_range(0XB6A2,"T",0X1,3);
	split_sreg_range(0XB6B4,"T",0X1,3);
	split_sreg_range(0XB6B6,"T",0X1,3);
	split_sreg_range(0XB6E6,"T",0X1,3);
	split_sreg_range(0XB6EA,"T",0X1,3);
	split_sreg_range(0XB6F0,"T",0X1,3);
	split_sreg_range(0XB6F6,"T",0X1,3);
	split_sreg_range(0XB700,"T",0X1,3);
	split_sreg_range(0XB710,"T",0X1,3);
	split_sreg_range(0XB720,"T",0X1,3);
	split_sreg_range(0XB726,"T",0X1,3);
	split_sreg_range(0XB72A,"T",0X1,3);
	split_sreg_range(0XB72C,"T",0X1,3);
	split_sreg_range(0XB736,"T",0X1,3);
	split_sreg_range(0XB73A,"T",0X1,3);
	split_sreg_range(0XB73E,"T",0X1,3);
	split_sreg_range(0XB74A,"T",0X1,3);
	split_sreg_range(0XB768,"T",0X1,3);
	split_sreg_range(0XB780,"T",0X1,3);
	split_sreg_range(0XB79E,"T",0X1,3);
	split_sreg_range(0XB7AC,"T",0X1,3);
	split_sreg_range(0XB7B2,"T",0X1,3);
	split_sreg_range(0XB7C0,"T",0X1,3);
	split_sreg_range(0XB7C4,"T",0X1,3);
	split_sreg_range(0XB7CC,"T",0X1,3);
	split_sreg_range(0XB7DA,"T",0X1,3);
	split_sreg_range(0XB7E2,"T",0X1,3);
	split_sreg_range(0XB7E6,"T",0X1,3);
	split_sreg_range(0XB800,"T",0X1,3);
	split_sreg_range(0XB80A,"T",0X1,3);
	split_sreg_range(0XB810,"T",0X1,3);
	split_sreg_range(0XB818,"T",0X1,3);
	split_sreg_range(0XB81E,"T",0X1,3);
	split_sreg_range(0XB824,"T",0X1,3);
	split_sreg_range(0XB82A,"T",0X1,3);
	split_sreg_range(0XB830,"T",0X1,3);
	split_sreg_range(0XB83C,"T",0X1,3);
	split_sreg_range(0XB842,"T",0X1,3);
	split_sreg_range(0XB848,"T",0X1,3);
	split_sreg_range(0XB84E,"T",0X1,3);
	split_sreg_range(0XB854,"T",0X1,3);
	split_sreg_range(0XB85A,"T",0X1,3);
	split_sreg_range(0XB860,"T",0X1,3);
	split_sreg_range(0XB86C,"T",0X1,3);
	split_sreg_range(0XB878,"T",0X1,3);
	split_sreg_range(0XB88E,"T",0X1,3);
	split_sreg_range(0XB8AC,"T",0X1,3);
	split_sreg_range(0XB8AE,"T",0X1,3);
	split_sreg_range(0XB8B2,"T",0X1,3);
	split_sreg_range(0XB8D2,"T",0X1,3);
	split_sreg_range(0XB8F2,"T",0X1,3);
	split_sreg_range(0XB8FA,"T",0X1,3);
	split_sreg_range(0XB900,"T",0X1,3);
	split_sreg_range(0XB916,"T",0X1,3);
	split_sreg_range(0XB920,"T",0X1,3);
	split_sreg_range(0XB926,"T",0X1,3);
	split_sreg_range(0XB92E,"T",0X1,3);
	split_sreg_range(0XB936,"T",0X1,3);
	split_sreg_range(0XB93E,"T",0X1,3);
	split_sreg_range(0XB948,"T",0X1,3);
	split_sreg_range(0XB950,"T",0X1,3);
	split_sreg_range(0XB958,"T",0X1,3);
	split_sreg_range(0XB960,"T",0X1,3);
	split_sreg_range(0XB968,"T",0X1,3);
	split_sreg_range(0XB976,"T",0X1,3);
	split_sreg_range(0XB980,"T",0X1,3);
	split_sreg_range(0XB98A,"T",0X1,3);
	split_sreg_range(0XB996,"T",0X1,3);
	split_sreg_range(0XB9A2,"T",0X1,3);
	split_sreg_range(0XB9AE,"T",0X1,3);
	split_sreg_range(0XB9B4,"T",0X1,3);
	split_sreg_range(0XB9B6,"T",0X1,3);
	split_sreg_range(0XB9B8,"T",0X1,3);
	split_sreg_range(0XB9BA,"T",0X1,3);
	split_sreg_range(0XB9BC,"T",0X1,3);
	split_sreg_range(0XB9BE,"T",0X1,3);
	split_sreg_range(0XB9C0,"T",0X1,3);
	split_sreg_range(0XB9C2,"T",0X1,3);
	split_sreg_range(0XB9CA,"T",0X1,3);
	split_sreg_range(0XB9EA,"T",0X1,3);
	split_sreg_range(0XB9EC,"T",0X1,3);
	split_sreg_range(0XB9EE,"T",0X1,3);
	split_sreg_range(0XB9F0,"T",0X1,3);
	split_sreg_range(0XB9FC,"T",0X1,3);
	split_sreg_range(0XBA08,"T",0X1,3);
	split_sreg_range(0XBA14,"T",0X1,3);
	split_sreg_range(0XBA20,"T",0X1,3);
	split_sreg_range(0XBA2C,"T",0X1,3);
	split_sreg_range(0XBA38,"T",0X1,3);
	split_sreg_range(0XBA44,"T",0X1,3);
	split_sreg_range(0XBA72,"T",0X1,3);
	split_sreg_range(0XBA92,"T",0X1,3);
	split_sreg_range(0XBA94,"T",0X1,3);
	split_sreg_range(0XBA96,"T",0X1,3);
	split_sreg_range(0XBA98,"T",0X1,3);
	split_sreg_range(0XBA9A,"T",0X1,3);
	split_sreg_range(0XBAAA,"T",0X1,3);
	split_sreg_range(0XBAD8,"T",0X1,3);
	split_sreg_range(0XBB06,"T",0X1,3);
	split_sreg_range(0XBB34,"T",0X1,3);
	split_sreg_range(0XBB78,"T",0X1,3);
	split_sreg_range(0XBBA6,"T",0X1,3);
	split_sreg_range(0XBBBE,"T",0X1,3);
	split_sreg_range(0XBBDE,"T",0X1,3);
	split_sreg_range(0XBBFC,"T",0X1,3);
	split_sreg_range(0XBC12,"T",0X1,3);
	split_sreg_range(0XBC18,"T",0X1,3);
	split_sreg_range(0XBC20,"T",0X1,3);
	split_sreg_range(0XBC22,"T",0X1,3);
	split_sreg_range(0XBC28,"T",0X1,3);
	split_sreg_range(0XBC2A,"T",0X1,3);
	split_sreg_range(0XBC44,"T",0X1,3);
	split_sreg_range(0XBC68,"T",0X1,3);
	split_sreg_range(0XBC8E,"T",0X1,3);
	split_sreg_range(0XBCAA,"T",0X1,3);
	split_sreg_range(0XBCB0,"T",0X1,3);
	split_sreg_range(0XBCB4,"T",0X1,3);
	split_sreg_range(0XBCB8,"T",0X1,3);
	split_sreg_range(0XBCBE,"T",0X1,3);
	split_sreg_range(0XBCC4,"T",0X1,3);
	split_sreg_range(0XBCC8,"T",0X1,3);
	split_sreg_range(0XBCE4,"T",0X1,3);
	split_sreg_range(0XBCEA,"T",0X1,3);
	split_sreg_range(0XBCEE,"T",0X1,3);
	split_sreg_range(0XBCF2,"T",0X1,3);
	split_sreg_range(0XBCFA,"T",0X1,3);
	split_sreg_range(0XBD1E,"T",0X1,3);
	split_sreg_range(0XBD3A,"T",0X1,3);
	split_sreg_range(0XBD44,"T",0X1,3);
	split_sreg_range(0XBD48,"T",0X1,3);
	split_sreg_range(0XBD4A,"T",0X1,3);
	split_sreg_range(0XBD70,"T",0X1,3);
	split_sreg_range(0XBD78,"T",0X1,3);
	split_sreg_range(0XBD7E,"T",0X1,3);
	split_sreg_range(0XBDD8,"T",0X1,3);
	split_sreg_range(0XBDF6,"T",0X1,3);
	split_sreg_range(0XBEC6,"T",0X1,3);
	split_sreg_range(0XBECE,"T",0X1,3);
	split_sreg_range(0XBED2,"T",0X1,3);
	split_sreg_range(0XBED4,"T",0X1,3);
	split_sreg_range(0XBF4C,"T",0X1,3);
	split_sreg_range(0XBF5E,"T",0X1,3);
	split_sreg_range(0XBF6C,"T",0X1,3);
	split_sreg_range(0XBF9A,"T",0X1,3);
	split_sreg_range(0XBFC4,"T",0X1,3);
	split_sreg_range(0XBFD6,"T",0X1,3);
	split_sreg_range(0XBFF0,"T",0X1,3);
	split_sreg_range(0XC000,"T",0X1,3);
	split_sreg_range(0XC008,"T",0X1,3);
	split_sreg_range(0XC024,"T",0X1,3);
	split_sreg_range(0XC02E,"T",0X1,3);
	split_sreg_range(0XC036,"T",0X1,3);
	split_sreg_range(0XC052,"T",0X1,3);
	split_sreg_range(0XC05C,"T",0X1,3);
	split_sreg_range(0XC064,"T",0X1,3);
	split_sreg_range(0XC078,"T",0X1,3);
	split_sreg_range(0XC0A6,"T",0X1,3);
	split_sreg_range(0XC0A8,"T",0X1,3);
	split_sreg_range(0XC0C0,"T",0X1,3);
	split_sreg_range(0XC0C2,"T",0X1,3);
	split_sreg_range(0XC0C4,"T",0X1,3);
	split_sreg_range(0XC0D6,"T",0X1,3);
	split_sreg_range(0XC0DA,"T",0X1,3);
	split_sreg_range(0XC0DE,"T",0X1,3);
	split_sreg_range(0XC0E2,"T",0X1,3);
	split_sreg_range(0XC0E4,"T",0X1,3);
	split_sreg_range(0XC0EC,"T",0X1,3);
	split_sreg_range(0XC104,"T",0X1,3);
	split_sreg_range(0XC10C,"T",0X1,3);
	split_sreg_range(0XC110,"T",0X1,3);
	split_sreg_range(0XC158,"T",0X1,3);
	split_sreg_range(0XC15A,"T",0X1,3);
	split_sreg_range(0XC15C,"T",0X1,3);
	split_sreg_range(0XC17E,"T",0X1,3);
	split_sreg_range(0XC1A6,"T",0X1,3);
	split_sreg_range(0XC1B4,"T",0X1,3);
	split_sreg_range(0XC1C8,"T",0X1,3);
	split_sreg_range(0XC1D0,"T",0X1,3);
	split_sreg_range(0XC1DA,"T",0X1,3);
	split_sreg_range(0XC1E6,"T",0X1,3);
	split_sreg_range(0XC1EA,"T",0X1,3);
	split_sreg_range(0XC1EE,"T",0X1,3);
	split_sreg_range(0XC1F2,"T",0X1,3);
	split_sreg_range(0XC1F8,"T",0X1,3);
	split_sreg_range(0XC20C,"T",0X1,3);
	split_sreg_range(0XC228,"T",0X1,3);
	split_sreg_range(0XC242,"T",0X1,3);
	split_sreg_range(0XC244,"T",0X1,3);
	split_sreg_range(0XC24A,"T",0X1,3);
	split_sreg_range(0XC264,"T",0X1,3);
	split_sreg_range(0XC266,"T",0X1,3);
	split_sreg_range(0XC2F2,"T",0X1,3);
	split_sreg_range(0XC2F4,"T",0X1,3);
	split_sreg_range(0XC2FA,"T",0X1,3);
	split_sreg_range(0XC2FC,"T",0X1,3);
	split_sreg_range(0XC316,"T",0X1,3);
	split_sreg_range(0XC360,"T",0X1,3);
	split_sreg_range(0XC384,"T",0X1,3);
	split_sreg_range(0XC38A,"T",0X1,3);
	split_sreg_range(0XC39C,"T",0X1,3);
	split_sreg_range(0XC3AE,"T",0X1,3);
	split_sreg_range(0XC3CA,"T",0X1,3);
	split_sreg_range(0XC3D4,"T",0X1,3);
	split_sreg_range(0XC3DA,"T",0X1,3);
	split_sreg_range(0XC3DC,"T",0X1,3);
	split_sreg_range(0XC3EA,"T",0X1,3);
	split_sreg_range(0XC3EC,"T",0X1,3);
	split_sreg_range(0XC40C,"T",0X1,3);
	split_sreg_range(0XC410,"T",0X1,3);
	split_sreg_range(0XC412,"T",0X1,3);
	split_sreg_range(0XC428,"T",0X1,3);
	split_sreg_range(0XC442,"T",0X1,3);
	split_sreg_range(0XC494,"T",0X1,3);
	split_sreg_range(0XC4B4,"T",0X1,3);
	split_sreg_range(0XC4C4,"T",0X1,3);
	split_sreg_range(0XC4CE,"T",0X1,3);
	split_sreg_range(0XC4E6,"T",0X1,3);
	split_sreg_range(0XC510,"T",0X1,3);
	split_sreg_range(0XC522,"T",0X1,3);
	split_sreg_range(0XC52E,"T",0X1,3);
	split_sreg_range(0XC570,"T",0X1,3);
	split_sreg_range(0XC576,"T",0X1,3);
	split_sreg_range(0XC584,"T",0X1,3);
	split_sreg_range(0XC58E,"T",0X1,3);
	split_sreg_range(0XC5D8,"T",0X1,3);
	split_sreg_range(0XC5FC,"T",0X1,3);
	split_sreg_range(0XC618,"T",0X1,3);
	split_sreg_range(0XC630,"T",0X1,3);
	split_sreg_range(0XC640,"T",0X1,3);
	split_sreg_range(0XC64A,"T",0X1,3);
	split_sreg_range(0XC654,"T",0X1,3);
	split_sreg_range(0XC684,"T",0X1,3);
	split_sreg_range(0XC68A,"T",0X1,3);
	split_sreg_range(0XC698,"T",0X1,3);
	split_sreg_range(0XC6A2,"T",0X1,3);
	split_sreg_range(0XC6D2,"T",0X1,3);
	split_sreg_range(0XC6D8,"T",0X1,3);
	split_sreg_range(0XC6E6,"T",0X1,3);
	split_sreg_range(0XC6FE,"T",0X1,3);
	split_sreg_range(0XC718,"T",0X1,3);
	split_sreg_range(0XC76A,"T",0X1,3);
	split_sreg_range(0XC786,"T",0X1,3);
	split_sreg_range(0XC788,"T",0X1,3);
	split_sreg_range(0XC794,"T",0X1,3);
	split_sreg_range(0XC7B6,"T",0X1,3);
	split_sreg_range(0XC7C2,"T",0X1,3);
	split_sreg_range(0XC7DA,"T",0X1,3);
	split_sreg_range(0XC7DC,"T",0X1,3);
	split_sreg_range(0XC7DE,"T",0X1,3);
	split_sreg_range(0XC82E,"T",0X1,3);
	split_sreg_range(0XC830,"T",0X1,3);
	split_sreg_range(0XC832,"T",0X1,3);
	split_sreg_range(0XC8C2,"T",0X1,3);
	split_sreg_range(0XC8E6,"T",0X1,3);
	split_sreg_range(0XC904,"T",0X1,3);
	split_sreg_range(0XC912,"T",0X1,3);
	split_sreg_range(0XC91E,"T",0X1,3);
	split_sreg_range(0XC922,"T",0X1,3);
	split_sreg_range(0XC934,"T",0X1,3);
	split_sreg_range(0XC952,"T",0X1,3);
	split_sreg_range(0XC956,"T",0X1,3);
	split_sreg_range(0XC96E,"T",0X1,3);
	split_sreg_range(0XC97A,"T",0X1,3);
	split_sreg_range(0XC9A6,"T",0X1,3);
	split_sreg_range(0XC9AC,"T",0X1,3);
	split_sreg_range(0XC9B4,"T",0X1,3);
	split_sreg_range(0XCA00,"T",0X1,3);
	split_sreg_range(0XCA04,"T",0X1,3);
	split_sreg_range(0XCA68,"T",0X1,3);
	split_sreg_range(0XCA6C,"T",0X1,3);
	split_sreg_range(0XCA8A,"T",0X1,3);
	split_sreg_range(0XCA9A,"T",0X1,3);
	split_sreg_range(0XCAD8,"T",0X1,3);
	split_sreg_range(0XCADC,"T",0X1,3);
	split_sreg_range(0XCB0C,"T",0X1,3);
	split_sreg_range(0XCB10,"T",0X1,3);
	split_sreg_range(0XCB20,"T",0X1,3);
	split_sreg_range(0XCB36,"T",0X1,3);
	split_sreg_range(0XCB3E,"T",0X1,3);
	split_sreg_range(0XCB44,"T",0X1,3);
	split_sreg_range(0XCB4A,"T",0X1,3);
	split_sreg_range(0XCB80,"T",0X1,3);
	split_sreg_range(0XCB84,"T",0X1,3);
	split_sreg_range(0XCB9A,"T",0X1,3);
	split_sreg_range(0XCBA0,"T",0X1,3);
	split_sreg_range(0XCBA8,"T",0X1,3);
	split_sreg_range(0XCBB0,"T",0X1,3);
	split_sreg_range(0XCBB8,"T",0X1,3);
	split_sreg_range(0XCBC2,"T",0X1,3);
	split_sreg_range(0XCBCA,"T",0X1,3);
	split_sreg_range(0XCC1E,"T",0X1,3);
	split_sreg_range(0XCC22,"T",0X1,3);
	split_sreg_range(0XCC52,"T",0X1,3);
	split_sreg_range(0XCC54,"T",0X1,3);
	split_sreg_range(0XCC90,"T",0X1,3);
	split_sreg_range(0XCC94,"T",0X1,3);
	split_sreg_range(0XCCD0,"T",0X1,3);
	split_sreg_range(0XCD0A,"T",0X1,3);
	split_sreg_range(0XCD44,"T",0X1,3);
	split_sreg_range(0XCD46,"T",0X1,3);
	split_sreg_range(0XCD76,"T",0X1,3);
	split_sreg_range(0XCDF6,"T",0X1,3);
	split_sreg_range(0XCDFA,"T",0X1,3);
	split_sreg_range(0XCE24,"T",0X1,3);
	split_sreg_range(0XCE36,"T",0X1,3);
	split_sreg_range(0XCE38,"T",0X1,3);
	split_sreg_range(0XCE4C,"T",0X1,3);
	split_sreg_range(0XCE4E,"T",0X1,3);
	split_sreg_range(0XCE64,"T",0X1,3);
	split_sreg_range(0XCE90,"T",0X1,3);
	split_sreg_range(0XCE94,"T",0X1,3);
	split_sreg_range(0XCF86,"T",0X1,3);
	split_sreg_range(0XCF8A,"T",0X1,3);
	split_sreg_range(0XCFA4,"T",0X1,3);
	split_sreg_range(0XCFB8,"T",0X1,3);
	split_sreg_range(0XCFDE,"T",0X1,3);
	split_sreg_range(0XCFE0,"T",0X1,3);
	split_sreg_range(0XD012,"T",0X1,3);
	split_sreg_range(0XD02C,"T",0X1,3);
	split_sreg_range(0XD03C,"T",0X1,3);
	split_sreg_range(0XD048,"T",0X1,3);
	split_sreg_range(0XD050,"T",0X1,3);
	split_sreg_range(0XD08C,"T",0X1,3);
	split_sreg_range(0XD09C,"T",0X1,3);
	split_sreg_range(0XD0A6,"T",0X1,3);
	split_sreg_range(0XD0A8,"T",0X1,3);
	split_sreg_range(0XD0C8,"T",0X1,3);
	split_sreg_range(0XD0D8,"T",0X1,3);
	split_sreg_range(0XD0E4,"T",0X1,3);
	split_sreg_range(0XD108,"T",0X1,3);
	split_sreg_range(0XD110,"T",0X1,3);
	split_sreg_range(0XD12A,"T",0X1,3);
	split_sreg_range(0XD12E,"T",0X1,3);
	split_sreg_range(0XD132,"T",0X1,3);
	split_sreg_range(0XD13A,"T",0X1,3);
	split_sreg_range(0XD13E,"T",0X1,3);
	split_sreg_range(0XD150,"T",0X1,3);
	split_sreg_range(0XD152,"T",0X1,3);
	split_sreg_range(0XD156,"T",0X1,3);
	split_sreg_range(0XD164,"T",0X1,3);
	split_sreg_range(0XD166,"T",0X1,3);
	split_sreg_range(0XD17C,"T",0X1,3);
	split_sreg_range(0XD1A4,"T",0X1,3);
	split_sreg_range(0XD1A6,"T",0X1,3);
	split_sreg_range(0XD1B6,"T",0X1,3);
	split_sreg_range(0XD1BC,"T",0X1,3);
	split_sreg_range(0XD1BE,"T",0X1,3);
	split_sreg_range(0XD1E2,"T",0X1,3);
	split_sreg_range(0XD1EA,"T",0X1,3);
	split_sreg_range(0XD202,"T",0X1,3);
	split_sreg_range(0XD206,"T",0X1,3);
	split_sreg_range(0XD20A,"T",0X1,3);
	split_sreg_range(0XD20E,"T",0X1,3);
	split_sreg_range(0XD212,"T",0X1,3);
	split_sreg_range(0XD216,"T",0X1,3);
	split_sreg_range(0XD236,"T",0X1,3);
	split_sreg_range(0XD238,"T",0X1,3);
	split_sreg_range(0XD280,"T",0X1,3);
	split_sreg_range(0XD286,"T",0X1,3);
	split_sreg_range(0XD2EC,"T",0X1,3);
	split_sreg_range(0XD2F2,"T",0X1,3);
	split_sreg_range(0XD310,"T",0X1,3);
	split_sreg_range(0XD336,"T",0X1,3);
	split_sreg_range(0XD338,"T",0X1,3);
	split_sreg_range(0XD33E,"T",0X1,3);
	split_sreg_range(0XD34A,"T",0X1,3);
	split_sreg_range(0XD386,"T",0X1,3);
	split_sreg_range(0XD388,"T",0X1,3);
	split_sreg_range(0XD3F4,"T",0X1,3);
	split_sreg_range(0XD3F8,"T",0X1,3);
	split_sreg_range(0XD42C,"T",0X1,3);
	split_sreg_range(0XD42E,"T",0X1,3);
	split_sreg_range(0XD444,"T",0X1,3);
	split_sreg_range(0XD44A,"T",0X1,3);
	split_sreg_range(0XD46A,"T",0X1,3);
	split_sreg_range(0XD46C,"T",0X1,3);
	split_sreg_range(0XD4A2,"T",0X1,3);
	split_sreg_range(0XD4A4,"T",0X1,3);
	split_sreg_range(0XD4BC,"T",0X1,3);
	split_sreg_range(0XD4C2,"T",0X1,3);
	split_sreg_range(0XD4E2,"T",0X1,3);
	split_sreg_range(0XD4E4,"T",0X1,3);
	split_sreg_range(0XD53E,"T",0X1,3);
	split_sreg_range(0XD542,"T",0X1,3);
	split_sreg_range(0XD560,"T",0X1,3);
	split_sreg_range(0XD5A2,"T",0X1,3);
	split_sreg_range(0XD5E0,"T",0X1,3);
	split_sreg_range(0XD5E4,"T",0X1,3);
	split_sreg_range(0XD60A,"T",0X1,3);
	split_sreg_range(0XD614,"T",0X1,3);
	split_sreg_range(0XD650,"T",0X1,3);
	split_sreg_range(0XD654,"T",0X1,3);
	split_sreg_range(0XD66C,"T",0X1,3);
	split_sreg_range(0XD672,"T",0X1,3);
	split_sreg_range(0XD67A,"T",0X1,3);
	split_sreg_range(0XD682,"T",0X1,3);
	split_sreg_range(0XD684,"T",0X1,3);
	split_sreg_range(0XD688,"T",0X1,3);
	split_sreg_range(0XD6AA,"T",0X1,3);
	split_sreg_range(0XD6AC,"T",0X1,3);
	split_sreg_range(0XD6E8,"T",0X1,3);
	split_sreg_range(0XD70C,"T",0X1,3);
	split_sreg_range(0XD742,"T",0X1,3);
	split_sreg_range(0XD744,"T",0X1,3);
	split_sreg_range(0XD786,"T",0X1,3);
	split_sreg_range(0XD78A,"T",0X1,3);
	split_sreg_range(0XD7B2,"T",0X1,3);
	split_sreg_range(0XD7DA,"T",0X1,3);
	split_sreg_range(0XD7DC,"T",0X1,3);
	split_sreg_range(0XD818,"T",0X1,3);
	split_sreg_range(0XD81A,"T",0X1,3);
	split_sreg_range(0XD852,"T",0X1,3);
	split_sreg_range(0XD854,"T",0X1,3);
	split_sreg_range(0XD87C,"T",0X1,3);
	split_sreg_range(0XD87E,"T",0X1,3);
	split_sreg_range(0XD892,"T",0X1,3);
	split_sreg_range(0XD894,"T",0X1,3);
	split_sreg_range(0XD8AE,"T",0X1,3);
	split_sreg_range(0XD8BE,"T",0X1,3);
	split_sreg_range(0XD8D6,"T",0X1,3);
	split_sreg_range(0XD8DA,"T",0X1,3);
	split_sreg_range(0XD8E4,"T",0X1,3);
	split_sreg_range(0XD8F0,"T",0X1,3);
	split_sreg_range(0XD902,"T",0X1,3);
	split_sreg_range(0XD906,"T",0X1,3);
	split_sreg_range(0XD910,"T",0X1,3);
	split_sreg_range(0XD91A,"T",0X1,3);
	split_sreg_range(0XD928,"T",0X1,3);
	split_sreg_range(0XD92C,"T",0X1,3);
	split_sreg_range(0XD936,"T",0X1,3);
	split_sreg_range(0XD940,"T",0X1,3);
	split_sreg_range(0XD94E,"T",0X1,3);
	split_sreg_range(0XD952,"T",0X1,3);
	split_sreg_range(0XD95C,"T",0X1,3);
	split_sreg_range(0XD966,"T",0X1,3);
	split_sreg_range(0XD974,"T",0X1,3);
	split_sreg_range(0XD978,"T",0X1,3);
	split_sreg_range(0XD982,"T",0X1,3);
	split_sreg_range(0XD98C,"T",0X1,3);
	split_sreg_range(0XD99A,"T",0X1,3);
	split_sreg_range(0XD99E,"T",0X1,3);
	split_sreg_range(0XD9B4,"T",0X1,3);
	split_sreg_range(0XD9B8,"T",0X1,3);
	split_sreg_range(0XD9D0,"T",0X1,3);
	split_sreg_range(0XD9D4,"T",0X1,3);
	split_sreg_range(0XD9EA,"T",0X1,3);
	split_sreg_range(0XD9EE,"T",0X1,3);
	split_sreg_range(0XD9F8,"T",0X1,3);
	split_sreg_range(0XD9FC,"T",0X1,3);
	split_sreg_range(0XDA46,"T",0X1,3);
	split_sreg_range(0XDA68,"T",0X1,3);
	split_sreg_range(0XDA70,"T",0X1,3);
	split_sreg_range(0XDA88,"T",0X1,3);
	split_sreg_range(0XDA8C,"T",0X1,3);
	split_sreg_range(0XDAA0,"T",0X1,3);
	split_sreg_range(0XDAA4,"T",0X1,3);
	split_sreg_range(0XDAE4,"T",0X1,3);
	split_sreg_range(0XDB18,"T",0X1,3);
	split_sreg_range(0XDB1C,"T",0X1,3);
	split_sreg_range(0XDB34,"T",0X1,3);
	split_sreg_range(0XDB38,"T",0X1,3);
	split_sreg_range(0XDB4E,"T",0X1,3);
	split_sreg_range(0XDB52,"T",0X1,3);
	split_sreg_range(0XDB66,"T",0X1,3);
	split_sreg_range(0XDB6A,"T",0X1,3);
	split_sreg_range(0XDB7E,"T",0X1,3);
	split_sreg_range(0XDB82,"T",0X1,3);
	split_sreg_range(0XDB96,"T",0X1,3);
	split_sreg_range(0XDB9A,"T",0X1,3);
	split_sreg_range(0XDBAE,"T",0X1,3);
	split_sreg_range(0XDBB2,"T",0X1,3);
	split_sreg_range(0XDBC8,"T",0X1,3);
	split_sreg_range(0XDBCC,"T",0X1,3);
	split_sreg_range(0XDBE2,"T",0X1,3);
	split_sreg_range(0XDBF4,"T",0X1,3);
	split_sreg_range(0XDBF6,"T",0X1,3);
	split_sreg_range(0XDD16,"T",0X1,3);
	split_sreg_range(0XDD18,"T",0X1,3);
	split_sreg_range(0XDD2E,"T",0X1,3);
	split_sreg_range(0XDD32,"T",0X1,3);
	split_sreg_range(0XDD5E,"T",0X1,3);
	split_sreg_range(0XDD60,"T",0X1,3);
	split_sreg_range(0XDD78,"T",0X1,3);
	split_sreg_range(0XDD88,"T",0X1,3);
	split_sreg_range(0XDD8C,"T",0X1,3);
	split_sreg_range(0XDD8E,"T",0X1,3);
	split_sreg_range(0XDD92,"T",0X1,3);
	split_sreg_range(0XDDB4,"T",0X1,3);
	split_sreg_range(0XDDB8,"T",0X1,3);
	split_sreg_range(0XDDFC,"T",0X1,3);
	split_sreg_range(0XDE00,"T",0X1,3);
	split_sreg_range(0XDE2A,"T",0X1,3);
	split_sreg_range(0XDEA6,"T",0X1,3);
	split_sreg_range(0XDEAA,"T",0X1,3);
	split_sreg_range(0XDEBA,"T",0X1,3);
	split_sreg_range(0XDEE6,"T",0X1,3);
	split_sreg_range(0XDEE8,"T",0X1,3);
	split_sreg_range(0XDF18,"T",0X1,3);
	split_sreg_range(0XDF50,"T",0X1,3);
	split_sreg_range(0XDF8A,"T",0X1,3);
	split_sreg_range(0XDF8C,"T",0X1,3);
	split_sreg_range(0XDFAC,"T",0X1,3);
	split_sreg_range(0XDFB8,"T",0X1,3);
	split_sreg_range(0XDFBA,"T",0X1,3);
	split_sreg_range(0XDFE2,"T",0X1,3);
	split_sreg_range(0XDFF2,"T",0X1,3);
	split_sreg_range(0XDFF6,"T",0X1,3);
	split_sreg_range(0XE01C,"T",0X1,3);
	split_sreg_range(0XE02A,"T",0X1,3);
	split_sreg_range(0XE048,"T",0X1,3);
	split_sreg_range(0XE070,"T",0X1,3);
	split_sreg_range(0XE074,"T",0X1,3);
	split_sreg_range(0XE086,"T",0X1,3);
	split_sreg_range(0XE0A8,"T",0X1,3);
	split_sreg_range(0XE0D0,"T",0X1,3);
	split_sreg_range(0XE0E6,"T",0X1,3);
	split_sreg_range(0XE118,"T",0X1,3);
	split_sreg_range(0XE146,"T",0X1,3);
	split_sreg_range(0XE14C,"T",0X1,3);
	split_sreg_range(0XE16E,"T",0X1,3);
	split_sreg_range(0XE1B0,"T",0X1,3);
	split_sreg_range(0XE1D0,"T",0X1,3);
	split_sreg_range(0XE1D6,"T",0X1,3);
	split_sreg_range(0XE1DE,"T",0X1,3);
	split_sreg_range(0XE20A,"T",0X1,3);
	split_sreg_range(0XE20C,"T",0X1,3);
	split_sreg_range(0XE23C,"T",0X1,3);
	split_sreg_range(0XE23E,"T",0X1,3);
	split_sreg_range(0XE26A,"T",0X1,3);
	split_sreg_range(0XE26C,"T",0X1,3);
	split_sreg_range(0XE2A8,"T",0X1,3);
	split_sreg_range(0XE2AC,"T",0X1,3);
	split_sreg_range(0XE2CC,"T",0X1,3);
	split_sreg_range(0XE2FC,"T",0X1,3);
	split_sreg_range(0XE318,"T",0X1,3);
	split_sreg_range(0XE31C,"T",0X1,3);
	split_sreg_range(0XE35E,"T",0X1,3);
	split_sreg_range(0XE360,"T",0X1,3);
	split_sreg_range(0XE378,"T",0X1,3);
	split_sreg_range(0XE398,"T",0X1,3);
	split_sreg_range(0XE3B4,"T",0X1,3);
	split_sreg_range(0XE3BC,"T",0X1,3);
	split_sreg_range(0XE3DE,"T",0X1,3);
	split_sreg_range(0XE3E0,"T",0X1,3);
	split_sreg_range(0XE410,"T",0X1,3);
	split_sreg_range(0XE41E,"T",0X1,3);
	split_sreg_range(0XE424,"T",0X1,3);
	split_sreg_range(0XE43E,"T",0X1,3);
	split_sreg_range(0XE44E,"T",0X1,3);
	split_sreg_range(0XE458,"T",0X1,3);
	split_sreg_range(0XE45E,"T",0X1,3);
	split_sreg_range(0XE48A,"T",0X1,3);
	split_sreg_range(0XE48C,"T",0X1,3);
	split_sreg_range(0XE4C0,"T",0X1,3);
	split_sreg_range(0XE4C2,"T",0X1,3);
	split_sreg_range(0XE4F4,"T",0X1,3);
	split_sreg_range(0XE4F6,"T",0X1,3);
	split_sreg_range(0XE530,"T",0X1,3);
	split_sreg_range(0XE532,"T",0X1,3);
	split_sreg_range(0XE562,"T",0X1,3);
	split_sreg_range(0XE57A,"T",0X1,3);
	split_sreg_range(0XE57C,"T",0X1,3);
	split_sreg_range(0XE584,"T",0X1,3);
	split_sreg_range(0XE5B6,"T",0X1,3);
	split_sreg_range(0XE5B8,"T",0X1,3);
	split_sreg_range(0XE612,"T",0X1,3);
	split_sreg_range(0XE616,"T",0X1,3);
	split_sreg_range(0XE64C,"T",0X1,3);
	split_sreg_range(0XE64E,"T",0X1,3);
	split_sreg_range(0XE678,"T",0X1,3);
	split_sreg_range(0XE67A,"T",0X1,3);
	split_sreg_range(0XE704,"T",0X1,3);
	split_sreg_range(0XE708,"T",0X1,3);
	split_sreg_range(0XE71E,"T",0X1,3);
	split_sreg_range(0XE73A,"T",0X1,3);
	split_sreg_range(0XE764,"T",0X1,3);
	split_sreg_range(0XE7AC,"T",0X1,3);
	split_sreg_range(0XE7B0,"T",0X1,3);
	split_sreg_range(0XE7B4,"T",0X1,3);
	split_sreg_range(0XE7E6,"T",0X1,3);
	split_sreg_range(0XE7EA,"T",0X1,3);
	split_sreg_range(0XE81E,"T",0X1,3);
	split_sreg_range(0XE824,"T",0X1,3);
	split_sreg_range(0XE85A,"T",0X1,3);
	split_sreg_range(0XE868,"T",0X1,3);
	split_sreg_range(0XE86C,"T",0X1,3);
	split_sreg_range(0XE896,"T",0X1,3);
	split_sreg_range(0XE8A8,"T",0X1,3);
	split_sreg_range(0XE920,"T",0X1,3);
	split_sreg_range(0XE924,"T",0X1,3);
	split_sreg_range(0XE9CA,"T",0X1,3);
	split_sreg_range(0XEA0E,"T",0X1,3);
	split_sreg_range(0XEA28,"T",0X1,3);
	split_sreg_range(0XEA32,"T",0X1,3);
	split_sreg_range(0XEA42,"T",0X1,3);
	split_sreg_range(0XEA44,"T",0X1,3);
	split_sreg_range(0XEA46,"T",0X1,3);
	split_sreg_range(0XEA50,"T",0X1,3);
	split_sreg_range(0XEA52,"T",0X1,3);
	split_sreg_range(0XEA56,"T",0X1,3);
	split_sreg_range(0XEA9E,"T",0X1,3);
	split_sreg_range(0XEAB0,"T",0X1,3);
	split_sreg_range(0XEB26,"T",0X1,3);
	split_sreg_range(0XEB4A,"T",0X1,3);
	split_sreg_range(0XEB4E,"T",0X1,3);
	split_sreg_range(0XEB7C,"T",0X1,3);
	split_sreg_range(0XEBE4,"T",0X1,3);
	split_sreg_range(0XEC2E,"T",0X1,3);
	split_sreg_range(0XEC30,"T",0X1,3);
	split_sreg_range(0XEC98,"T",0X1,3);
	split_sreg_range(0XEC9A,"T",0X1,3);
	split_sreg_range(0XEC9E,"T",0X1,3);
	split_sreg_range(0XECE4,"T",0X1,3);
	split_sreg_range(0XED16,"T",0X1,3);
	split_sreg_range(0XED44,"T",0X1,3);
	split_sreg_range(0XED50,"T",0X1,3);
	split_sreg_range(0XED6C,"T",0X1,3);
	split_sreg_range(0XED72,"T",0X1,3);
	split_sreg_range(0XEDB4,"T",0X1,3);
	split_sreg_range(0XEDC2,"T",0X1,3);
	split_sreg_range(0XEDFC,"T",0X1,3);
	split_sreg_range(0XEE18,"T",0X1,3);
	split_sreg_range(0XEE3A,"T",0X1,3);
	split_sreg_range(0XEE3E,"T",0X1,3);
	split_sreg_range(0XEE7C,"T",0X1,3);
	split_sreg_range(0XEE96,"T",0X1,3);
	split_sreg_range(0XEEB0,"T",0X1,3);
	split_sreg_range(0XEED2,"T",0X1,3);
	split_sreg_range(0XEED4,"T",0X1,3);
	split_sreg_range(0XEEF0,"T",0X1,3);
	split_sreg_range(0XEEFE,"T",0X1,3);
	split_sreg_range(0XEF02,"T",0X1,3);
	split_sreg_range(0XEF4A,"T",0X1,3);
	split_sreg_range(0XEF64,"T",0X1,3);
	split_sreg_range(0XEF7E,"T",0X1,3);
	split_sreg_range(0XEFA2,"T",0X1,3);
	split_sreg_range(0XEFA4,"T",0X1,3);
	split_sreg_range(0XEFC0,"T",0X1,3);
	split_sreg_range(0XEFCE,"T",0X1,3);
	split_sreg_range(0XEFD2,"T",0X1,3);
	split_sreg_range(0XF00C,"T",0X1,3);
	split_sreg_range(0XF030,"T",0X1,3);
	split_sreg_range(0XF032,"T",0X1,3);
	split_sreg_range(0XF038,"T",0X1,3);
	split_sreg_range(0XF03E,"T",0X1,3);
	split_sreg_range(0XF044,"T",0X1,3);
	split_sreg_range(0XF04A,"T",0X1,3);
	split_sreg_range(0XF050,"T",0X1,3);
	split_sreg_range(0XF056,"T",0X1,3);
	split_sreg_range(0XF05C,"T",0X1,3);
	split_sreg_range(0XF062,"T",0X1,3);
	split_sreg_range(0XF088,"T",0X1,3);
	split_sreg_range(0XF0B4,"T",0X1,3);
	split_sreg_range(0XF0B8,"T",0X1,3);
	split_sreg_range(0XF0C0,"T",0X1,3);
	split_sreg_range(0XF0D6,"T",0X1,3);
	split_sreg_range(0XF0F2,"T",0X1,3);
	split_sreg_range(0XF102,"T",0X1,3);
	split_sreg_range(0XF106,"T",0X1,3);
	split_sreg_range(0XF11E,"T",0X1,3);
	split_sreg_range(0XF124,"T",0X1,3);
	split_sreg_range(0XF150,"T",0X1,3);
	split_sreg_range(0XF164,"T",0X1,3);
	split_sreg_range(0XF184,"T",0X1,3);
	split_sreg_range(0XF186,"T",0X1,3);
	split_sreg_range(0XF18A,"T",0X1,3);
	split_sreg_range(0XF1B4,"T",0X1,3);
	split_sreg_range(0XF1E6,"T",0X1,3);
	split_sreg_range(0XF208,"T",0X1,3);
	split_sreg_range(0XF20C,"T",0X1,3);
	split_sreg_range(0XF212,"T",0X1,3);
	split_sreg_range(0XF216,"T",0X1,3);
	split_sreg_range(0XF218,"T",0X1,3);
	split_sreg_range(0XF236,"T",0X1,3);
	split_sreg_range(0XF264,"T",0X1,3);
	split_sreg_range(0XF266,"T",0X1,3);
	split_sreg_range(0XF284,"T",0X1,3);
	split_sreg_range(0XF294,"T",0X1,3);
	split_sreg_range(0XF2A6,"T",0X1,3);
	split_sreg_range(0XF2AA,"T",0X1,3);
	split_sreg_range(0XF2C2,"T",0X1,3);
	split_sreg_range(0XF2E6,"T",0X1,3);
	split_sreg_range(0XF2E8,"T",0X1,3);
	split_sreg_range(0XF2EA,"T",0X1,3);
	split_sreg_range(0XF346,"T",0X1,3);
	split_sreg_range(0XF358,"T",0X1,3);
	split_sreg_range(0XF35E,"T",0X1,3);
	split_sreg_range(0XF368,"T",0X1,3);
	split_sreg_range(0XF376,"T",0X1,3);
	split_sreg_range(0XF38C,"T",0X1,3);
	split_sreg_range(0XF390,"T",0X1,3);
	split_sreg_range(0XF39C,"T",0X1,3);
	split_sreg_range(0XF3B6,"T",0X1,3);
	split_sreg_range(0XF3BA,"T",0X1,3);
	split_sreg_range(0XF3C8,"T",0X1,3);
	split_sreg_range(0XF406,"T",0X1,3);
	split_sreg_range(0XF408,"T",0X1,3);
	split_sreg_range(0XF414,"T",0X1,3);
	split_sreg_range(0XF416,"T",0X1,3);
	split_sreg_range(0XF428,"T",0X1,3);
	split_sreg_range(0XF42A,"T",0X1,3);
	split_sreg_range(0XF438,"T",0X1,3);
	split_sreg_range(0XF43E,"T",0X1,3);
	split_sreg_range(0XF444,"T",0X1,3);
	split_sreg_range(0XF44A,"T",0X1,3);
	split_sreg_range(0XF450,"T",0X1,3);
	split_sreg_range(0XF456,"T",0X1,3);
	split_sreg_range(0XF45A,"T",0X1,3);
	split_sreg_range(0XF470,"T",0X1,3);
	split_sreg_range(0XF4A6,"T",0X1,3);
	split_sreg_range(0XF4C8,"T",0X1,3);
	split_sreg_range(0XF4E0,"T",0X1,3);
	split_sreg_range(0XF4F2,"T",0X1,3);
	split_sreg_range(0XF4F4,"T",0X1,3);
	split_sreg_range(0XF500,"T",0X1,3);
	split_sreg_range(0XF532,"T",0X1,3);
	split_sreg_range(0XF55C,"T",0X1,3);
	split_sreg_range(0XF58E,"T",0X1,3);
	split_sreg_range(0XF5B0,"T",0X1,3);
	split_sreg_range(0XF5B6,"T",0X1,3);
	split_sreg_range(0XF5D0,"T",0X1,3);
	split_sreg_range(0XF5D2,"T",0X1,3);
	split_sreg_range(0XF5FA,"T",0X1,3);
	split_sreg_range(0XF614,"T",0X1,3);
	split_sreg_range(0XF622,"T",0X1,3);
	split_sreg_range(0XF624,"T",0X1,3);
	split_sreg_range(0XF630,"T",0X1,3);
	split_sreg_range(0XF692,"T",0X1,3);
	split_sreg_range(0XF696,"T",0X1,3);
	split_sreg_range(0XF6BC,"T",0X1,3);
	split_sreg_range(0XF6C4,"T",0X1,3);
	split_sreg_range(0XF6CC,"T",0X1,3);
	split_sreg_range(0XF6D2,"T",0X1,3);
	split_sreg_range(0XF6D8,"T",0X1,3);
	split_sreg_range(0XF6DE,"T",0X1,3);
	split_sreg_range(0XF6E4,"T",0X1,3);
	split_sreg_range(0XF704,"T",0X1,3);
	split_sreg_range(0XF71C,"T",0X1,3);
	split_sreg_range(0XF762,"T",0X1,3);
	split_sreg_range(0XF768,"T",0X1,3);
	split_sreg_range(0XF76E,"T",0X1,3);
	split_sreg_range(0XF774,"T",0X1,3);
	split_sreg_range(0XF77A,"T",0X1,3);
	split_sreg_range(0XF780,"T",0X1,3);
	split_sreg_range(0XF792,"T",0X1,3);
	split_sreg_range(0XF79A,"T",0X1,3);
	split_sreg_range(0XF7B8,"T",0X1,3);
	split_sreg_range(0XF7BA,"T",0X1,3);
	split_sreg_range(0XF7BC,"T",0X1,3);
	split_sreg_range(0XF7C0,"T",0X1,3);
	split_sreg_range(0XF7D0,"T",0X1,3);
	split_sreg_range(0XF7E2,"T",0X1,3);
	split_sreg_range(0XF80A,"T",0X1,3);
	split_sreg_range(0XF836,"T",0X1,3);
	split_sreg_range(0XF848,"T",0X1,3);
	split_sreg_range(0XF84A,"T",0X1,3);
	split_sreg_range(0XF84E,"T",0X1,3);
	split_sreg_range(0XF8BC,"T",0X1,3);
	split_sreg_range(0XF8C0,"T",0X1,3);
	split_sreg_range(0XF93C,"T",0X1,3);
	split_sreg_range(0XF952,"T",0X1,3);
	split_sreg_range(0XF958,"T",0X1,3);
	split_sreg_range(0XF96E,"T",0X1,3);
	split_sreg_range(0XF9A2,"T",0X1,3);
	split_sreg_range(0XF9AC,"T",0X1,3);
	split_sreg_range(0XF9B4,"T",0X1,3);
	split_sreg_range(0XF9BC,"T",0X1,3);
	split_sreg_range(0XF9C4,"T",0X1,3);
	split_sreg_range(0XFA34,"T",0X1,3);
	split_sreg_range(0XFA36,"T",0X1,3);
	split_sreg_range(0XFA3C,"T",0X1,3);
	split_sreg_range(0XFA78,"T",0X1,3);
	split_sreg_range(0XFA80,"T",0X1,3);
	split_sreg_range(0XFA8C,"T",0X1,3);
	split_sreg_range(0XFA8E,"T",0X1,3);
	split_sreg_range(0XFA96,"T",0X1,3);
	split_sreg_range(0XFABC,"T",0X1,3);
	split_sreg_range(0XFADC,"T",0X1,3);
	split_sreg_range(0XFB14,"T",0X1,3);
	split_sreg_range(0XFB18,"T",0X1,3);
	split_sreg_range(0XFB54,"T",0X1,3);
	split_sreg_range(0XFB58,"T",0X1,3);
	split_sreg_range(0XFBAA,"T",0X1,3);
	split_sreg_range(0XFBB0,"T",0X1,3);
	split_sreg_range(0XFBCC,"T",0X1,3);
	split_sreg_range(0XFBE2,"T",0X1,3);
	split_sreg_range(0XFBE6,"T",0X1,3);
	split_sreg_range(0XFBF4,"T",0X1,3);
	split_sreg_range(0XFBFA,"T",0X1,3);
	split_sreg_range(0XFBFE,"T",0X1,3);
	split_sreg_range(0XFC22,"T",0X1,3);
	split_sreg_range(0XFC30,"T",0X1,3);
	split_sreg_range(0XFC42,"T",0X1,3);
	split_sreg_range(0XFC5A,"T",0X1,3);
	split_sreg_range(0XFC66,"T",0X1,3);
	split_sreg_range(0XFC82,"T",0X1,3);
	split_sreg_range(0XFCB6,"T",0X1,3);
	split_sreg_range(0XFCBE,"T",0X1,3);
	split_sreg_range(0XFCCA,"T",0X1,3);
	split_sreg_range(0XFCDA,"T",0X1,3);
	split_sreg_range(0XFD18,"T",0X1,3);
	split_sreg_range(0XFD28,"T",0X1,3);
	split_sreg_range(0XFD2A,"T",0X1,3);
	split_sreg_range(0XFD68,"T",0X1,3);
	split_sreg_range(0XFD6C,"T",0X1,3);
	split_sreg_range(0XFDC2,"T",0X1,3);
	split_sreg_range(0XFDC8,"T",0X1,3);
	split_sreg_range(0XFE60,"T",0X1,3);
	split_sreg_range(0XFE96,"T",0X1,3);
	split_sreg_range(0XFEAC,"T",0X1,3);
	split_sreg_range(0XFEB0,"T",0X1,3);
	split_sreg_range(0XFF0C,"T",0X1,3);
	split_sreg_range(0XFF9E,"T",0X1,3);
	split_sreg_range(0XFFA2,"T",0X1,3);
	split_sreg_range(0XFFCA,"T",0X1,3);
	split_sreg_range(0X10048,"T",0X1,3);
	split_sreg_range(0X1004C,"T",0X1,3);
	split_sreg_range(0X1009A,"T",0X1,3);
	split_sreg_range(0X100B2,"T",0X1,3);
	split_sreg_range(0X100B6,"T",0X1,3);
	split_sreg_range(0X100D6,"T",0X1,3);
	split_sreg_range(0X10104,"T",0X1,3);
	split_sreg_range(0X10138,"T",0X1,3);
	split_sreg_range(0X1014E,"T",0X1,3);
	split_sreg_range(0X10160,"T",0X1,3);
	split_sreg_range(0X10172,"T",0X1,3);
	split_sreg_range(0X10184,"T",0X1,3);
	split_sreg_range(0X10196,"T",0X1,3);
	split_sreg_range(0X101A8,"T",0X1,3);
	split_sreg_range(0X101BC,"T",0X1,3);
	split_sreg_range(0X101FE,"T",0X1,3);
	split_sreg_range(0X10226,"T",0X1,3);
	split_sreg_range(0X10256,"T",0X1,3);
	split_sreg_range(0X1028C,"T",0X1,3);
	split_sreg_range(0X102AE,"T",0X1,3);
	split_sreg_range(0X102C4,"T",0X1,3);
	split_sreg_range(0X102D6,"T",0X1,3);
	split_sreg_range(0X102EC,"T",0X1,3);
	split_sreg_range(0X10304,"T",0X1,3);
	split_sreg_range(0X1031E,"T",0X1,3);
	split_sreg_range(0X10368,"T",0X1,3);
	split_sreg_range(0X103AA,"T",0X1,3);
	split_sreg_range(0X103AC,"T",0X1,3);
	split_sreg_range(0X103E6,"T",0X1,3);
	split_sreg_range(0X1040A,"T",0X1,3);
	split_sreg_range(0X1042E,"T",0X1,3);
	split_sreg_range(0X10436,"T",0X1,3);
	split_sreg_range(0X10438,"T",0X1,3);
	split_sreg_range(0X1043C,"T",0X1,3);
	split_sreg_range(0X10452,"T",0X1,3);
	split_sreg_range(0X10482,"T",0X1,3);
	split_sreg_range(0X10490,"T",0X1,3);
	split_sreg_range(0X104A4,"T",0X1,3);
	split_sreg_range(0X104AC,"T",0X1,3);
	split_sreg_range(0X104C2,"T",0X1,3);
	split_sreg_range(0X104CA,"T",0X1,3);
	split_sreg_range(0X104FE,"T",0X1,3);
	split_sreg_range(0X10510,"T",0X1,3);
	split_sreg_range(0X1052C,"T",0X1,3);
	split_sreg_range(0X10538,"T",0X1,3);
	split_sreg_range(0X1054E,"T",0X1,3);
	split_sreg_range(0X10552,"T",0X1,3);
	split_sreg_range(0X10588,"T",0X1,3);
	split_sreg_range(0X1059E,"T",0X1,3);
	split_sreg_range(0X105BA,"T",0X1,3);
	split_sreg_range(0X105C6,"T",0X1,3);
	split_sreg_range(0X105DC,"T",0X1,3);
	split_sreg_range(0X105E2,"T",0X1,3);
	split_sreg_range(0X10612,"T",0X1,3);
	split_sreg_range(0X10624,"T",0X1,3);
	split_sreg_range(0X1063C,"T",0X1,3);
	split_sreg_range(0X10644,"T",0X1,3);
	split_sreg_range(0X1065A,"T",0X1,3);
	split_sreg_range(0X1065C,"T",0X1,3);
	split_sreg_range(0X10672,"T",0X1,3);
	split_sreg_range(0X1068C,"T",0X1,3);
	split_sreg_range(0X106C6,"T",0X1,3);
	split_sreg_range(0X106D8,"T",0X1,3);
	split_sreg_range(0X10724,"T",0X1,3);
	split_sreg_range(0X1072E,"T",0X1,3);
	split_sreg_range(0X1073A,"T",0X1,3);
	split_sreg_range(0X10750,"T",0X1,3);
	split_sreg_range(0X10754,"T",0X1,3);
	split_sreg_range(0X1076C,"T",0X1,3);
	split_sreg_range(0X1077E,"T",0X1,3);
	split_sreg_range(0X107A8,"T",0X1,3);
	split_sreg_range(0X107B0,"T",0X1,3);
	split_sreg_range(0X107BA,"T",0X1,3);
	split_sreg_range(0X107C0,"T",0X1,3);
	split_sreg_range(0X107C6,"T",0X1,3);
	split_sreg_range(0X107CC,"T",0X1,3);
	split_sreg_range(0X107DC,"T",0X1,3);
	split_sreg_range(0X107EC,"T",0X1,3);
	split_sreg_range(0X10804,"T",0X1,3);
	split_sreg_range(0X10806,"T",0X1,3);
	split_sreg_range(0X10816,"T",0X1,3);
	split_sreg_range(0X10820,"T",0X1,3);
	split_sreg_range(0X1084E,"T",0X1,3);
	split_sreg_range(0X10852,"T",0X1,3);
	split_sreg_range(0X10870,"T",0X1,3);
	split_sreg_range(0X10874,"T",0X1,3);
	split_sreg_range(0X108CA,"T",0X1,3);
	split_sreg_range(0X108F4,"T",0X1,3);
	split_sreg_range(0X10910,"T",0X1,3);
	split_sreg_range(0X1095C,"T",0X1,3);
	split_sreg_range(0X10962,"T",0X1,3);
	split_sreg_range(0X1097C,"T",0X1,3);
	split_sreg_range(0X1099A,"T",0X1,3);
	split_sreg_range(0X109A4,"T",0X1,3);
	split_sreg_range(0X109A8,"T",0X1,3);
	split_sreg_range(0X109E2,"T",0X1,3);
	split_sreg_range(0X109F8,"T",0X1,3);
	split_sreg_range(0X10A14,"T",0X1,3);
	split_sreg_range(0X10A20,"T",0X1,3);
	split_sreg_range(0X10A36,"T",0X1,3);
	split_sreg_range(0X10A38,"T",0X1,3);
	split_sreg_range(0X10A66,"T",0X1,3);
	split_sreg_range(0X10A8E,"T",0X1,3);
	split_sreg_range(0X10AA4,"T",0X1,3);
	split_sreg_range(0X10AC0,"T",0X1,3);
	split_sreg_range(0X10AE6,"T",0X1,3);
	split_sreg_range(0X10AFA,"T",0X1,3);
	split_sreg_range(0X10B04,"T",0X1,3);
	split_sreg_range(0X10B0E,"T",0X1,3);
	split_sreg_range(0X10B12,"T",0X1,3);
	split_sreg_range(0X10B14,"T",0X1,3);
	split_sreg_range(0X10B1C,"T",0X1,3);
	split_sreg_range(0X10B7C,"T",0X1,3);
	split_sreg_range(0X10B7E,"T",0X1,3);
	split_sreg_range(0X10B8E,"T",0X1,3);
	split_sreg_range(0X10BA2,"T",0X1,3);
	split_sreg_range(0X10BAE,"T",0X1,3);
	split_sreg_range(0X10BBE,"T",0X1,3);
	split_sreg_range(0X10BF4,"T",0X1,3);
	split_sreg_range(0X10C06,"T",0X1,3);
	split_sreg_range(0X10C08,"T",0X1,3);
	split_sreg_range(0X10C12,"T",0X1,3);
	split_sreg_range(0X10C1C,"T",0X1,3);
	split_sreg_range(0X10C2E,"T",0X1,3);
	split_sreg_range(0X10C30,"T",0X1,3);
	split_sreg_range(0X10C3A,"T",0X1,3);
	split_sreg_range(0X10C44,"T",0X1,3);
	split_sreg_range(0X10C56,"T",0X1,3);
	split_sreg_range(0X10C58,"T",0X1,3);
	split_sreg_range(0X10C62,"T",0X1,3);
	split_sreg_range(0X10C6C,"T",0X1,3);
	split_sreg_range(0X10C7E,"T",0X1,3);
	split_sreg_range(0X10C88,"T",0X1,3);
	split_sreg_range(0X10C98,"T",0X1,3);
	split_sreg_range(0X10CA0,"T",0X1,3);
	split_sreg_range(0X10CC8,"T",0X1,3);
	split_sreg_range(0X10CD6,"T",0X1,3);
	split_sreg_range(0X10CDA,"T",0X1,3);
	split_sreg_range(0X10CF6,"T",0X1,3);
	split_sreg_range(0X10D20,"T",0X1,3);
	split_sreg_range(0X10D32,"T",0X1,3);
	split_sreg_range(0X10D46,"T",0X1,3);
	split_sreg_range(0X10D66,"T",0X1,3);
	split_sreg_range(0X10D82,"T",0X1,3);
	split_sreg_range(0X10DC0,"T",0X1,3);
	split_sreg_range(0X10DC8,"T",0X1,3);
	split_sreg_range(0X10DCC,"T",0X1,3);
	split_sreg_range(0X10DF2,"T",0X1,3);
	split_sreg_range(0X10DFA,"T",0X1,3);
	split_sreg_range(0X10DFE,"T",0X1,3);
	split_sreg_range(0X10E00,"T",0X1,3);
	split_sreg_range(0X10E0E,"T",0X1,3);
	split_sreg_range(0X10E12,"T",0X1,3);
	split_sreg_range(0X10E8C,"T",0X1,3);
	split_sreg_range(0X10EE2,"T",0X1,3);
	split_sreg_range(0X10EE8,"T",0X1,3);
	split_sreg_range(0X10EF2,"T",0X1,3);
	split_sreg_range(0X10EFA,"T",0X1,3);
	split_sreg_range(0X10F00,"T",0X1,3);
	split_sreg_range(0X10F1A,"T",0X1,3);
	split_sreg_range(0X10F1E,"T",0X1,3);
	split_sreg_range(0X10F20,"T",0X1,3);
	split_sreg_range(0X10F3A,"T",0X1,3);
	split_sreg_range(0X10F3E,"T",0X1,3);
	split_sreg_range(0X10F40,"T",0X1,3);
	split_sreg_range(0X10F5C,"T",0X1,3);
	split_sreg_range(0X10F60,"T",0X1,3);
	split_sreg_range(0X10F62,"T",0X1,3);
	split_sreg_range(0X10F7C,"T",0X1,3);
	split_sreg_range(0X10F7E,"T",0X1,3);
	split_sreg_range(0X10F80,"T",0X1,3);
	split_sreg_range(0X10F84,"T",0X1,3);
	split_sreg_range(0X10F86,"T",0X1,3);
	split_sreg_range(0X10F8A,"T",0X1,3);
	split_sreg_range(0X10F8C,"T",0X1,3);
	split_sreg_range(0X10F92,"T",0X1,3);
	split_sreg_range(0X10F9A,"T",0X1,3);
	split_sreg_range(0X10FA0,"T",0X1,3);
	split_sreg_range(0X10FB4,"T",0X1,3);
	split_sreg_range(0X10FB8,"T",0X1,3);
	split_sreg_range(0X10FBE,"T",0X1,3);
	split_sreg_range(0X10FC4,"T",0X1,3);
	split_sreg_range(0X10FEC,"T",0X1,3);
	split_sreg_range(0X10FF6,"T",0X1,3);
	split_sreg_range(0X10FFE,"T",0X1,3);
	split_sreg_range(0X11008,"T",0X1,3);
	split_sreg_range(0X1100C,"T",0X1,3);
	split_sreg_range(0X11014,"T",0X1,3);
	split_sreg_range(0X11032,"T",0X1,3);
	split_sreg_range(0X1106C,"T",0X1,3);
	split_sreg_range(0X11078,"T",0X1,3);
	split_sreg_range(0X1107A,"T",0X1,3);
	split_sreg_range(0X1107C,"T",0X1,3);
	split_sreg_range(0X11082,"T",0X1,3);
	split_sreg_range(0X11090,"T",0X1,3);
	split_sreg_range(0X110B4,"T",0X1,3);
	split_sreg_range(0X110BA,"T",0X1,3);
	split_sreg_range(0X110C4,"T",0X1,3);
	split_sreg_range(0X110CA,"T",0X1,3);
	split_sreg_range(0X110D6,"T",0X1,3);
	split_sreg_range(0X110D8,"T",0X1,3);
	split_sreg_range(0X110DC,"T",0X1,3);
	split_sreg_range(0X110E2,"T",0X1,3);
	split_sreg_range(0X11104,"T",0X1,3);
	split_sreg_range(0X11106,"T",0X1,3);
	split_sreg_range(0X1110E,"T",0X1,3);
	split_sreg_range(0X11116,"T",0X1,3);
	split_sreg_range(0X11122,"T",0X1,3);
	split_sreg_range(0X1112E,"T",0X1,3);
	split_sreg_range(0X1113A,"T",0X1,3);
	split_sreg_range(0X11146,"T",0X1,3);
	split_sreg_range(0X1114C,"T",0X1,3);
	split_sreg_range(0X11170,"T",0X1,3);
	split_sreg_range(0X11172,"T",0X1,3);
	split_sreg_range(0X1117C,"T",0X1,3);
	split_sreg_range(0X11184,"T",0X1,3);
	split_sreg_range(0X11192,"T",0X1,3);
	split_sreg_range(0X111A0,"T",0X1,3);
	split_sreg_range(0X111AE,"T",0X1,3);
	split_sreg_range(0X111BA,"T",0X1,3);
	split_sreg_range(0X111D8,"T",0X1,3);
	split_sreg_range(0X111E0,"T",0X1,3);
	split_sreg_range(0X111FE,"T",0X1,3);
	split_sreg_range(0X11204,"T",0X1,3);
	split_sreg_range(0X11206,"T",0X1,3);
	split_sreg_range(0X1120C,"T",0X1,3);
	split_sreg_range(0X1120E,"T",0X1,3);
	split_sreg_range(0X1134A,"T",0X1,3);
	split_sreg_range(0X113B8,"T",0X1,3);
	split_sreg_range(0X113BA,"T",0X1,3);
	split_sreg_range(0X113DE,"T",0X1,3);
	split_sreg_range(0X113E0,"T",0X1,3);
	split_sreg_range(0X11400,"T",0X1,3);
	split_sreg_range(0X1142C,"T",0X1,3);
	split_sreg_range(0X11430,"T",0X1,3);
	split_sreg_range(0X1143A,"T",0X1,3);
	split_sreg_range(0X11456,"T",0X1,3);
	split_sreg_range(0X1146C,"T",0X1,3);
	split_sreg_range(0X1147E,"T",0X1,3);
	split_sreg_range(0X11484,"T",0X1,3);
	split_sreg_range(0X11486,"T",0X1,3);
	split_sreg_range(0X1148A,"T",0X1,3);
	split_sreg_range(0X11498,"T",0X1,3);
	split_sreg_range(0X114A8,"T",0X1,3);
	split_sreg_range(0X114BC,"T",0X1,3);
	split_sreg_range(0X114D0,"T",0X1,3);
	split_sreg_range(0X114D2,"T",0X1,3);
	split_sreg_range(0X11506,"T",0X1,3);
	split_sreg_range(0X11562,"T",0X1,3);
	split_sreg_range(0X11590,"T",0X1,3);
	split_sreg_range(0X11596,"T",0X1,3);
	split_sreg_range(0X11598,"T",0X1,3);
	split_sreg_range(0X115B4,"T",0X1,3);
	split_sreg_range(0X115F2,"T",0X1,3);
	split_sreg_range(0X1169E,"T",0X1,3);
	split_sreg_range(0X116A0,"T",0X1,3);
	split_sreg_range(0X116C0,"T",0X1,3);
	split_sreg_range(0X1172E,"T",0X1,3);
	split_sreg_range(0X1173A,"T",0X1,3);
	split_sreg_range(0X1174E,"T",0X1,3);
	split_sreg_range(0X11764,"T",0X1,3);
	split_sreg_range(0X11776,"T",0X1,3);
	split_sreg_range(0X11786,"T",0X1,3);
	split_sreg_range(0X1178C,"T",0X1,3);
	split_sreg_range(0X117DE,"T",0X1,3);
	split_sreg_range(0X117F6,"T",0X1,3);
	split_sreg_range(0X1180E,"T",0X1,3);
	split_sreg_range(0X1183C,"T",0X1,3);
	split_sreg_range(0X1183E,"T",0X1,3);
	split_sreg_range(0X11842,"T",0X1,3);
	split_sreg_range(0X1186A,"T",0X1,3);
	split_sreg_range(0X11886,"T",0X1,3);
	split_sreg_range(0X118BA,"T",0X1,3);
	split_sreg_range(0X118CE,"T",0X1,3);
	split_sreg_range(0X118D8,"T",0X1,3);
	split_sreg_range(0X118DA,"T",0X1,3);
	split_sreg_range(0X118DC,"T",0X1,3);
	split_sreg_range(0X118DE,"T",0X1,3);
	split_sreg_range(0X11920,"T",0X1,3);
	split_sreg_range(0X11924,"T",0X1,3);
	split_sreg_range(0X11926,"T",0X1,3);
	split_sreg_range(0X11930,"T",0X1,3);
	split_sreg_range(0X11948,"T",0X1,3);
	split_sreg_range(0X1195C,"T",0X1,3);
	split_sreg_range(0X1195E,"T",0X1,3);
	split_sreg_range(0X11966,"T",0X1,3);
	split_sreg_range(0X1196A,"T",0X1,3);
	split_sreg_range(0X11982,"T",0X1,3);
	split_sreg_range(0X11996,"T",0X1,3);
	split_sreg_range(0X11998,"T",0X1,3);
	split_sreg_range(0X119A4,"T",0X1,3);
	split_sreg_range(0X119B6,"T",0X1,3);
	split_sreg_range(0X119C4,"T",0X1,3);
	split_sreg_range(0X119E2,"T",0X1,3);
	split_sreg_range(0X119FE,"T",0X1,3);
	split_sreg_range(0X11A02,"T",0X1,3);
	split_sreg_range(0X11A20,"T",0X1,3);
	split_sreg_range(0X11A2A,"T",0X1,3);
	split_sreg_range(0X11A30,"T",0X1,3);
	split_sreg_range(0X11A3A,"T",0X1,3);
	split_sreg_range(0X11A4A,"T",0X1,3);
	split_sreg_range(0X11A72,"T",0X1,3);
	split_sreg_range(0X11AA2,"T",0X1,3);
	split_sreg_range(0X11ABE,"T",0X1,3);
	split_sreg_range(0X11AD0,"T",0X1,3);
	split_sreg_range(0X11AE0,"T",0X1,3);
	split_sreg_range(0X11AE6,"T",0X1,3);
	split_sreg_range(0X11B04,"T",0X1,3);
	split_sreg_range(0X11B1C,"T",0X1,3);
	split_sreg_range(0X11B1E,"T",0X1,3);
	split_sreg_range(0X11B46,"T",0X1,3);
	split_sreg_range(0X11B5C,"T",0X1,3);
	split_sreg_range(0X11B6E,"T",0X1,3);
	split_sreg_range(0X11BC6,"T",0X1,3);
	split_sreg_range(0X11BC8,"T",0X1,3);
	split_sreg_range(0X11BCA,"T",0X1,3);
	split_sreg_range(0X11C44,"T",0X1,3);
	split_sreg_range(0X11C56,"T",0X1,3);
	split_sreg_range(0X11C66,"T",0X1,3);
	split_sreg_range(0X11CC4,"T",0X1,3);
	split_sreg_range(0X11CC6,"T",0X1,3);
	split_sreg_range(0X11D20,"T",0X1,3);
	split_sreg_range(0X11D4A,"T",0X1,3);
	split_sreg_range(0X11D4C,"T",0X1,3);
	split_sreg_range(0X11D58,"T",0X1,3);
	split_sreg_range(0X11DCA,"T",0X1,3);
	split_sreg_range(0X11DD4,"T",0X1,3);
	split_sreg_range(0X11E02,"T",0X1,3);
	split_sreg_range(0X11E70,"T",0X1,3);
	split_sreg_range(0X11E74,"T",0X1,3);
	split_sreg_range(0X11E76,"T",0X1,3);
	split_sreg_range(0X11E94,"T",0X1,3);
	split_sreg_range(0X11E9C,"T",0X1,3);
	split_sreg_range(0X11E9E,"T",0X1,3);
	split_sreg_range(0X11EA8,"T",0X1,3);
	split_sreg_range(0X11F2E,"T",0X1,3);
	split_sreg_range(0X11F32,"T",0X1,3);
	split_sreg_range(0X11F36,"T",0X1,3);
	split_sreg_range(0X11F38,"T",0X1,3);
	split_sreg_range(0X11F3E,"T",0X1,3);
	split_sreg_range(0X11F42,"T",0X1,3);
	split_sreg_range(0X11F58,"T",0X1,3);
	split_sreg_range(0X11F64,"T",0X1,3);
	split_sreg_range(0X11F7E,"T",0X1,3);
	split_sreg_range(0X11F86,"T",0X1,3);
	split_sreg_range(0X11F8C,"T",0X1,3);
	split_sreg_range(0X11F92,"T",0X1,3);
	split_sreg_range(0X11F96,"T",0X1,3);
	split_sreg_range(0X11F9E,"T",0X1,3);
	split_sreg_range(0X11FAC,"T",0X1,3);
	split_sreg_range(0X11FB8,"T",0X1,3);
	split_sreg_range(0X11FDE,"T",0X1,3);
	split_sreg_range(0X12004,"T",0X1,3);
	split_sreg_range(0X1200E,"T",0X1,3);
	split_sreg_range(0X12030,"T",0X1,3);
	split_sreg_range(0X12034,"T",0X1,3);
	split_sreg_range(0X1203E,"T",0X1,3);
	split_sreg_range(0X12064,"T",0X1,3);
	split_sreg_range(0X12070,"T",0X1,3);
	split_sreg_range(0X12072,"T",0X1,3);
	split_sreg_range(0X12086,"T",0X1,3);
	split_sreg_range(0X12108,"T",0X1,3);
	split_sreg_range(0X1210E,"T",0X1,3);
	split_sreg_range(0X1211E,"T",0X1,3);
	split_sreg_range(0X1212A,"T",0X1,3);
	split_sreg_range(0X12134,"T",0X1,3);
	split_sreg_range(0X12144,"T",0X1,3);
	split_sreg_range(0X1215C,"T",0X1,3);
	split_sreg_range(0X121A6,"T",0X1,3);
	split_sreg_range(0X121BA,"T",0X1,3);
	split_sreg_range(0X121C2,"T",0X1,3);
	split_sreg_range(0X121C8,"T",0X1,3);
	split_sreg_range(0X121F0,"T",0X1,3);
	split_sreg_range(0X121FC,"T",0X1,3);
	split_sreg_range(0X12260,"T",0X1,3);
	split_sreg_range(0X12266,"T",0X1,3);
	split_sreg_range(0X1226E,"T",0X1,3);
	split_sreg_range(0X12276,"T",0X1,3);
	split_sreg_range(0X122BA,"T",0X1,3);
	split_sreg_range(0X122F4,"T",0X1,3);
	split_sreg_range(0X122FC,"T",0X1,3);
	split_sreg_range(0X1230C,"T",0X1,3);
	split_sreg_range(0X12314,"T",0X1,3);
	split_sreg_range(0X1231C,"T",0X1,3);
	split_sreg_range(0X12336,"T",0X1,3);
	split_sreg_range(0X1233A,"T",0X1,3);
	split_sreg_range(0X12342,"T",0X1,3);
	split_sreg_range(0X1234E,"T",0X1,3);
	split_sreg_range(0X12374,"T",0X1,3);
	split_sreg_range(0X12394,"T",0X1,3);
	split_sreg_range(0X123A2,"T",0X1,3);
	split_sreg_range(0X123A8,"T",0X1,3);
	split_sreg_range(0X123AA,"T",0X1,3);
	split_sreg_range(0X123B0,"T",0X1,3);
	split_sreg_range(0X123BE,"T",0X1,3);
	split_sreg_range(0X123E6,"T",0X1,3);
	split_sreg_range(0X12400,"T",0X1,3);
	split_sreg_range(0X12418,"T",0X1,3);
	split_sreg_range(0X12432,"T",0X1,3);
	split_sreg_range(0X12464,"T",0X1,3);
	split_sreg_range(0X124DC,"T",0X1,3);
	split_sreg_range(0X124DE,"T",0X1,3);
	split_sreg_range(0X124E2,"T",0X1,3);
	split_sreg_range(0X124F4,"T",0X1,3);
	split_sreg_range(0X1255C,"T",0X1,3);
	split_sreg_range(0X12560,"T",0X1,3);
	split_sreg_range(0X125BA,"T",0X1,3);
	split_sreg_range(0X125BC,"T",0X1,3);
	split_sreg_range(0X125C4,"T",0X1,3);
	split_sreg_range(0X125D0,"T",0X1,3);
	split_sreg_range(0X12612,"T",0X1,3);
	split_sreg_range(0X12640,"T",0X1,3);
	split_sreg_range(0X12660,"T",0X1,3);
	split_sreg_range(0X1267C,"T",0X1,3);
	split_sreg_range(0X12688,"T",0X1,3);
	split_sreg_range(0X12696,"T",0X1,3);
	split_sreg_range(0X1269A,"T",0X1,3);
	split_sreg_range(0X126D8,"T",0X1,3);
	split_sreg_range(0X12716,"T",0X1,3);
	split_sreg_range(0X1271C,"T",0X1,3);
	split_sreg_range(0X1272E,"T",0X1,3);
	split_sreg_range(0X12730,"T",0X1,3);
	split_sreg_range(0X12734,"T",0X1,3);
	split_sreg_range(0X1273E,"T",0X1,3);
	split_sreg_range(0X1274A,"T",0X1,3);
	split_sreg_range(0X1276A,"T",0X1,3);
	split_sreg_range(0X12790,"T",0X1,3);
	split_sreg_range(0X12796,"T",0X1,3);
	split_sreg_range(0X127BA,"T",0X1,3);
	split_sreg_range(0X127C0,"T",0X1,3);
	split_sreg_range(0X127FA,"T",0X1,3);
	split_sreg_range(0X12820,"T",0X1,3);
	split_sreg_range(0X12848,"T",0X1,3);
	split_sreg_range(0X1284A,"T",0X1,3);
	split_sreg_range(0X1286C,"T",0X1,3);
	split_sreg_range(0X1289A,"T",0X1,3);
	split_sreg_range(0X128A6,"T",0X1,3);
	split_sreg_range(0X128D0,"T",0X1,3);
	split_sreg_range(0X128FC,"T",0X1,3);
	split_sreg_range(0X1290E,"T",0X1,3);
	split_sreg_range(0X12926,"T",0X1,3);
	split_sreg_range(0X12940,"T",0X1,3);
	split_sreg_range(0X12942,"T",0X1,3);
	split_sreg_range(0X12954,"T",0X1,3);
	split_sreg_range(0X12964,"T",0X1,3);
	split_sreg_range(0X1296E,"T",0X1,3);
	split_sreg_range(0X12976,"T",0X1,3);
	split_sreg_range(0X12988,"T",0X1,3);
	split_sreg_range(0X12994,"T",0X1,3);
	split_sreg_range(0X129C8,"T",0X1,3);
	split_sreg_range(0X129D0,"T",0X1,3);
	split_sreg_range(0X129DA,"T",0X1,3);
	split_sreg_range(0X129F2,"T",0X1,3);
	split_sreg_range(0X12A58,"T",0X1,3);
	split_sreg_range(0X12AC0,"T",0X1,3);
	split_sreg_range(0X12AC4,"T",0X1,3);
	split_sreg_range(0X12AC8,"T",0X1,3);
	split_sreg_range(0X12ACC,"T",0X1,3);
	split_sreg_range(0X12ACE,"T",0X1,3);
	split_sreg_range(0X12AD0,"T",0X1,3);
	split_sreg_range(0X12AEE,"T",0X1,3);
	split_sreg_range(0X12B2A,"T",0X1,3);
	split_sreg_range(0X12B74,"T",0X1,3);
	split_sreg_range(0X12B76,"T",0X1,3);
	split_sreg_range(0X12B7A,"T",0X1,3);
	split_sreg_range(0X12B7C,"T",0X1,3);
	split_sreg_range(0X12BAE,"T",0X1,3);
	split_sreg_range(0X12BC2,"T",0X1,3);
	split_sreg_range(0X12BC8,"T",0X1,3);
	split_sreg_range(0X12BD0,"T",0X1,3);
	split_sreg_range(0X12BD2,"T",0X1,3);
	split_sreg_range(0X12BEC,"T",0X1,3);
	split_sreg_range(0X12C1A,"T",0X1,3);
	split_sreg_range(0X12C2A,"T",0X1,3);
	split_sreg_range(0X12C30,"T",0X1,3);
	split_sreg_range(0X12C7C,"T",0X1,3);
	split_sreg_range(0X12CEA,"T",0X1,3);
	split_sreg_range(0X12D00,"T",0X1,3);
	split_sreg_range(0X12D06,"T",0X1,3);
	split_sreg_range(0X12D14,"T",0X1,3);
	split_sreg_range(0X12D8A,"T",0X1,3);
	split_sreg_range(0X12DF0,"T",0X1,3);
	split_sreg_range(0X12DF2,"T",0X1,3);
	split_sreg_range(0X12E38,"T",0X1,3);
	split_sreg_range(0X12E3A,"T",0X1,3);
	split_sreg_range(0X12E88,"T",0X1,3);
	split_sreg_range(0X12F10,"T",0X1,3);
	split_sreg_range(0X12F12,"T",0X1,3);
	split_sreg_range(0X12F40,"T",0X1,3);
	split_sreg_range(0X12F9E,"T",0X1,3);
	split_sreg_range(0X12FA0,"T",0X1,3);
	split_sreg_range(0X12FA8,"T",0X1,3);
	split_sreg_range(0X12FCA,"T",0X1,3);
	split_sreg_range(0X12FCE,"T",0X1,3);
	split_sreg_range(0X13016,"T",0X1,3);
	split_sreg_range(0X13058,"T",0X1,3);
	split_sreg_range(0X1306E,"T",0X1,3);
	split_sreg_range(0X13088,"T",0X1,3);
	split_sreg_range(0X130A8,"T",0X1,3);
	split_sreg_range(0X130C8,"T",0X1,3);
	split_sreg_range(0X130CE,"T",0X1,3);
	split_sreg_range(0X130F2,"T",0X1,3);
	split_sreg_range(0X13118,"T",0X1,3);
	split_sreg_range(0X1313C,"T",0X1,3);
	split_sreg_range(0X131A8,"T",0X1,3);
	split_sreg_range(0X131B8,"T",0X1,3);
	split_sreg_range(0X131BE,"T",0X1,3);
	split_sreg_range(0X13228,"T",0X1,3);
	split_sreg_range(0X1322E,"T",0X1,3);
	split_sreg_range(0X1326A,"T",0X1,3);
	split_sreg_range(0X1327A,"T",0X1,3);
	split_sreg_range(0X13294,"T",0X1,3);
	split_sreg_range(0X132B4,"T",0X1,3);
	split_sreg_range(0X132B8,"T",0X1,3);
	split_sreg_range(0X132D8,"T",0X1,3);
	split_sreg_range(0X132DA,"T",0X1,3);
	split_sreg_range(0X132DE,"T",0X1,3);
	split_sreg_range(0X13302,"T",0X1,3);
	split_sreg_range(0X13328,"T",0X1,3);
	split_sreg_range(0X1334C,"T",0X1,3);
	split_sreg_range(0X133D8,"T",0X1,3);
	split_sreg_range(0X1344E,"T",0X1,3);
	split_sreg_range(0X134C4,"T",0X1,3);
	split_sreg_range(0X13560,"T",0X1,3);
	split_sreg_range(0X13596,"T",0X1,3);
	split_sreg_range(0X13598,"T",0X1,3);
	split_sreg_range(0X135AE,"T",0X1,3);
	split_sreg_range(0X135CA,"T",0X1,3);
	split_sreg_range(0X135CE,"T",0X1,3);
	split_sreg_range(0X135D4,"T",0X1,3);
	split_sreg_range(0X135EE,"T",0X1,3);
	split_sreg_range(0X135F2,"T",0X1,3);
	split_sreg_range(0X1360E,"T",0X1,3);
	split_sreg_range(0X13612,"T",0X1,3);
	split_sreg_range(0X13660,"T",0X1,3);
	split_sreg_range(0X13662,"T",0X1,3);
	split_sreg_range(0X13696,"T",0X1,3);
	split_sreg_range(0X136B6,"T",0X1,3);
	split_sreg_range(0X13702,"T",0X1,3);
	split_sreg_range(0X13704,"T",0X1,3);
	split_sreg_range(0X1371A,"T",0X1,3);
	split_sreg_range(0X13732,"T",0X1,3);
	split_sreg_range(0X1373A,"T",0X1,3);
	split_sreg_range(0X13772,"T",0X1,3);
	split_sreg_range(0X137B2,"T",0X1,3);
	split_sreg_range(0X137BC,"T",0X1,3);
	split_sreg_range(0X137CA,"T",0X1,3);
	split_sreg_range(0X137DA,"T",0X1,3);
	split_sreg_range(0X137E8,"T",0X1,3);
	split_sreg_range(0X137FA,"T",0X1,3);
	split_sreg_range(0X13806,"T",0X1,3);
	split_sreg_range(0X1380E,"T",0X1,3);
	split_sreg_range(0X13810,"T",0X1,3);
	split_sreg_range(0X1381E,"T",0X1,3);
	split_sreg_range(0X1385A,"T",0X1,3);
	split_sreg_range(0X1385E,"T",0X1,3);
	split_sreg_range(0X1387C,"T",0X1,3);
	split_sreg_range(0X138F2,"T",0X1,3);
	split_sreg_range(0X138F4,"T",0X1,3);
	split_sreg_range(0X1391A,"T",0X1,3);
	split_sreg_range(0X13964,"T",0X1,3);
	split_sreg_range(0X13972,"T",0X1,3);
	split_sreg_range(0X13982,"T",0X1,3);
	split_sreg_range(0X13984,"T",0X1,3);
	split_sreg_range(0X13986,"T",0X1,3);
	split_sreg_range(0X1399A,"T",0X1,3);
	split_sreg_range(0X139A0,"T",0X1,3);
	split_sreg_range(0X139A6,"T",0X1,3);
	split_sreg_range(0X139AE,"T",0X1,3);
	split_sreg_range(0X139B4,"T",0X1,3);
	split_sreg_range(0X139BA,"T",0X1,3);
	split_sreg_range(0X139C0,"T",0X1,3);
	split_sreg_range(0X139C8,"T",0X1,3);
	split_sreg_range(0X139D4,"T",0X1,3);
	split_sreg_range(0X139DC,"T",0X1,3);
	split_sreg_range(0X13A04,"T",0X1,3);
	split_sreg_range(0X13A28,"T",0X1,3);
	split_sreg_range(0X13A34,"T",0X1,3);
	split_sreg_range(0X13A44,"T",0X1,3);
	split_sreg_range(0X13A4E,"T",0X1,3);
	split_sreg_range(0X13A52,"T",0X1,3);
	split_sreg_range(0X13A68,"T",0X1,3);
	split_sreg_range(0X13A7A,"T",0X1,3);
	split_sreg_range(0X13A9A,"T",0X1,3);
	split_sreg_range(0X13AA4,"T",0X1,3);
	split_sreg_range(0X13AA6,"T",0X1,3);
	split_sreg_range(0X13B00,"T",0X1,3);
	split_sreg_range(0X13B08,"T",0X1,3);
	split_sreg_range(0X13B1C,"T",0X1,3);
	split_sreg_range(0X13B36,"T",0X1,3);
	split_sreg_range(0X13B3A,"T",0X1,3);
	split_sreg_range(0X13B46,"T",0X1,3);
	split_sreg_range(0X13B7C,"T",0X1,3);
	split_sreg_range(0X13B90,"T",0X1,3);
	split_sreg_range(0X13B98,"T",0X1,3);
	split_sreg_range(0X13B9E,"T",0X1,3);
	split_sreg_range(0X13BA4,"T",0X1,3);
	split_sreg_range(0X13BB4,"T",0X1,3);
	split_sreg_range(0X13BB8,"T",0X1,3);
	split_sreg_range(0X13BC8,"T",0X1,3);
	split_sreg_range(0X13BE6,"T",0X1,3);
	split_sreg_range(0X13C20,"T",0X1,3);
	split_sreg_range(0X13C3C,"T",0X1,3);
	split_sreg_range(0X13C42,"T",0X1,3);
	split_sreg_range(0X13C4A,"T",0X1,3);
	split_sreg_range(0X13C4C,"T",0X1,3);
	split_sreg_range(0X13C4E,"T",0X1,3);
	split_sreg_range(0X13C66,"T",0X1,3);
	split_sreg_range(0X13C8E,"T",0X1,3);
	split_sreg_range(0X13C94,"T",0X1,3);
	split_sreg_range(0X13C9A,"T",0X1,3);
	split_sreg_range(0X13C9E,"T",0X1,3);
	split_sreg_range(0X13CA2,"T",0X1,3);
	split_sreg_range(0X13CB2,"T",0X1,3);
	split_sreg_range(0X13CB6,"T",0X1,3);
	split_sreg_range(0X13CB8,"T",0X1,3);
	split_sreg_range(0X13CBC,"T",0X1,3);
	split_sreg_range(0X13CC0,"T",0X1,3);
	split_sreg_range(0X13CDA,"T",0X1,3);
	split_sreg_range(0X13CE0,"T",0X1,3);
	split_sreg_range(0X13CE6,"T",0X1,3);
	split_sreg_range(0X13CEA,"T",0X1,3);
	split_sreg_range(0X13CEE,"T",0X1,3);
	split_sreg_range(0X13D06,"T",0X1,3);
	split_sreg_range(0X13D10,"T",0X1,3);
	split_sreg_range(0X13D2C,"T",0X1,3);
	split_sreg_range(0X13D30,"T",0X1,3);
	split_sreg_range(0X13D4A,"T",0X1,3);
	split_sreg_range(0X13D60,"T",0X1,3);
	split_sreg_range(0X13D64,"T",0X1,3);
	split_sreg_range(0X13D66,"T",0X1,3);
	split_sreg_range(0X13D6C,"T",0X1,3);
	split_sreg_range(0X13DC8,"T",0X1,3);
	split_sreg_range(0X13DD0,"T",0X1,3);
	split_sreg_range(0X13DDC,"T",0X1,3);
	split_sreg_range(0X13E1E,"T",0X1,3);
	split_sreg_range(0X13E26,"T",0X1,3);
	split_sreg_range(0X13E32,"T",0X1,3);
	split_sreg_range(0X13E3C,"T",0X1,3);
	split_sreg_range(0X13E44,"T",0X1,3);
	split_sreg_range(0X13E5A,"T",0X1,3);
	split_sreg_range(0X13E70,"T",0X1,3);
	split_sreg_range(0X13E7E,"T",0X1,3);
	split_sreg_range(0X13E84,"T",0X1,3);
	split_sreg_range(0X13E8E,"T",0X1,3);
	split_sreg_range(0X13E96,"T",0X1,3);
	split_sreg_range(0X13EA2,"T",0X1,3);
	split_sreg_range(0X13EA8,"T",0X1,3);
	split_sreg_range(0X13EB0,"T",0X1,3);
	split_sreg_range(0X13EC2,"T",0X1,3);
	split_sreg_range(0X13EE6,"T",0X1,3);
	split_sreg_range(0X13EEA,"T",0X1,3);
	split_sreg_range(0X13EFE,"T",0X1,3);
	split_sreg_range(0X13F2C,"T",0X1,3);
	split_sreg_range(0X13F3E,"T",0X1,3);
	split_sreg_range(0X13F40,"T",0X1,3);
	split_sreg_range(0X13F42,"T",0X1,3);
	split_sreg_range(0X13F54,"T",0X1,3);
	split_sreg_range(0X13F64,"T",0X1,3);
	split_sreg_range(0X13F76,"T",0X1,3);
	split_sreg_range(0X13F78,"T",0X1,3);
	split_sreg_range(0X13F7A,"T",0X1,3);
	split_sreg_range(0X13F8C,"T",0X1,3);
	split_sreg_range(0X13F9C,"T",0X1,3);
	split_sreg_range(0X13FA6,"T",0X1,3);
	split_sreg_range(0X13FBC,"T",0X1,3);
	split_sreg_range(0X14004,"T",0X1,3);
	split_sreg_range(0X14064,"T",0X1,3);
	split_sreg_range(0X140CA,"T",0X1,3);
	split_sreg_range(0X140EE,"T",0X1,3);
	split_sreg_range(0X14102,"T",0X1,3);
	split_sreg_range(0X1413E,"T",0X1,3);
	split_sreg_range(0X1419A,"T",0X1,3);
	split_sreg_range(0X1419C,"T",0X1,3);
	split_sreg_range(0X141A2,"T",0X1,3);
	split_sreg_range(0X141A6,"T",0X1,3);
	split_sreg_range(0X141CC,"T",0X1,3);
	split_sreg_range(0X141DC,"T",0X1,3);
	split_sreg_range(0X141E0,"T",0X1,3);
	split_sreg_range(0X1421E,"T",0X1,3);
	split_sreg_range(0X14232,"T",0X1,3);
	split_sreg_range(0X1423C,"T",0X1,3);
	split_sreg_range(0X14272,"T",0X1,3);
	split_sreg_range(0X1429C,"T",0X1,3);
	split_sreg_range(0X142A0,"T",0X1,3);
	split_sreg_range(0X142DE,"T",0X1,3);
	split_sreg_range(0X1432A,"T",0X1,3);
	split_sreg_range(0X1433A,"T",0X1,3);
	split_sreg_range(0X14360,"T",0X1,3);
	split_sreg_range(0X14366,"T",0X1,3);
	split_sreg_range(0X14384,"T",0X1,3);
	split_sreg_range(0X14390,"T",0X1,3);
	split_sreg_range(0X143D6,"T",0X1,3);
	split_sreg_range(0X143F0,"T",0X1,3);
	split_sreg_range(0X14448,"T",0X1,3);
	split_sreg_range(0X1444E,"T",0X1,3);
	split_sreg_range(0X14452,"T",0X1,3);
	split_sreg_range(0X14456,"T",0X1,3);
	split_sreg_range(0X14458,"T",0X1,3);
	split_sreg_range(0X1445A,"T",0X1,3);
	split_sreg_range(0X1446C,"T",0X1,3);
	split_sreg_range(0X144A0,"T",0X1,3);
	split_sreg_range(0X144E4,"T",0X1,3);
	split_sreg_range(0X144E6,"T",0X1,3);
	split_sreg_range(0X14504,"T",0X1,3);
	split_sreg_range(0X14506,"T",0X1,3);
	split_sreg_range(0X14512,"T",0X1,3);
	split_sreg_range(0X14520,"T",0X1,3);
	split_sreg_range(0X14558,"T",0X1,3);
	split_sreg_range(0X1455A,"T",0X1,3);
	split_sreg_range(0X1455E,"T",0X1,3);
	split_sreg_range(0X14572,"T",0X1,3);
	split_sreg_range(0X14586,"T",0X1,3);
	split_sreg_range(0X1458E,"T",0X1,3);
	split_sreg_range(0X14592,"T",0X1,3);
	split_sreg_range(0X14634,"T",0X1,3);
	split_sreg_range(0X14640,"T",0X1,3);
	split_sreg_range(0X14650,"T",0X1,3);
	split_sreg_range(0X14656,"T",0X1,3);
	split_sreg_range(0X1467C,"T",0X1,3);
	split_sreg_range(0X14696,"T",0X1,3);
	split_sreg_range(0X146B2,"T",0X1,3);
	split_sreg_range(0X146D0,"T",0X1,3);
	split_sreg_range(0X146F4,"T",0X1,3);
	split_sreg_range(0X14702,"T",0X1,3);
	split_sreg_range(0X14712,"T",0X1,3);
	split_sreg_range(0X14714,"T",0X1,3);
	split_sreg_range(0X14740,"T",0X1,3);
	split_sreg_range(0X147A2,"T",0X1,3);
	split_sreg_range(0X147A4,"T",0X1,3);
	split_sreg_range(0X147B8,"T",0X1,3);
	split_sreg_range(0X147BE,"T",0X1,3);
	split_sreg_range(0X14838,"T",0X1,3);
	split_sreg_range(0X14892,"T",0X1,3);
	split_sreg_range(0X148A2,"T",0X1,3);
	split_sreg_range(0X148A8,"T",0X1,3);
	split_sreg_range(0X148F0,"T",0X1,3);
	split_sreg_range(0X148FE,"T",0X1,3);
	split_sreg_range(0X14910,"T",0X1,3);
	split_sreg_range(0X1492A,"T",0X1,3);
	split_sreg_range(0X14944,"T",0X1,3);
	split_sreg_range(0X14946,"T",0X1,3);
	split_sreg_range(0X1494A,"T",0X1,3);
	split_sreg_range(0X14968,"T",0X1,3);
	split_sreg_range(0X149EE,"T",0X1,3);
	split_sreg_range(0X14A56,"T",0X1,3);
	split_sreg_range(0X14A9C,"T",0X1,3);
	split_sreg_range(0X14B04,"T",0X1,3);
	split_sreg_range(0X14B18,"T",0X1,3);
	split_sreg_range(0X14B2A,"T",0X1,3);
	split_sreg_range(0X14B38,"T",0X1,3);
	split_sreg_range(0X14B40,"T",0X1,3);
	split_sreg_range(0X14B48,"T",0X1,3);
	split_sreg_range(0X14B4C,"T",0X1,3);
	split_sreg_range(0X14B6A,"T",0X1,3);
	split_sreg_range(0X14B8A,"T",0X1,3);
	split_sreg_range(0X14BB8,"T",0X1,3);
	split_sreg_range(0X14BCE,"T",0X1,3);
	split_sreg_range(0X14BD4,"T",0X1,3);
	split_sreg_range(0X14BDE,"T",0X1,3);
	split_sreg_range(0X14BE0,"T",0X1,3);
	split_sreg_range(0X14BE2,"T",0X1,3);
	split_sreg_range(0X14BFA,"T",0X1,3);
	split_sreg_range(0X14C10,"T",0X1,3);
	split_sreg_range(0X14C16,"T",0X1,3);
	split_sreg_range(0X14C1C,"T",0X1,3);
	split_sreg_range(0X14C20,"T",0X1,3);
	split_sreg_range(0X14C24,"T",0X1,3);
	split_sreg_range(0X14C3E,"T",0X1,3);
	split_sreg_range(0X14C46,"T",0X1,3);
	split_sreg_range(0X14C4C,"T",0X1,3);
	split_sreg_range(0X14C52,"T",0X1,3);
	split_sreg_range(0X14C56,"T",0X1,3);
	split_sreg_range(0X14C6C,"T",0X1,3);
	split_sreg_range(0X14C76,"T",0X1,3);
	split_sreg_range(0X14C92,"T",0X1,3);
	split_sreg_range(0X14C9A,"T",0X1,3);
	split_sreg_range(0X14C9E,"T",0X1,3);
	split_sreg_range(0X14CB8,"T",0X1,3);
	split_sreg_range(0X14CD8,"T",0X1,3);
	split_sreg_range(0X14CDC,"T",0X1,3);
	split_sreg_range(0X14CDE,"T",0X1,3);
	split_sreg_range(0X14CE4,"T",0X1,3);
	split_sreg_range(0X14D5C,"T",0X1,3);
	split_sreg_range(0X14D70,"T",0X1,3);
	split_sreg_range(0X14D82,"T",0X1,3);
	split_sreg_range(0X14D9E,"T",0X1,3);
	split_sreg_range(0X14DA0,"T",0X1,3);
	split_sreg_range(0X14DB6,"T",0X1,3);
	split_sreg_range(0X14DD2,"T",0X1,3);
	split_sreg_range(0X14DDA,"T",0X1,3);
	split_sreg_range(0X14DEE,"T",0X1,3);
	split_sreg_range(0X14E0A,"T",0X1,3);
	split_sreg_range(0X14E0E,"T",0X1,3);
	split_sreg_range(0X14E26,"T",0X1,3);
	split_sreg_range(0X14E28,"T",0X1,3);
	split_sreg_range(0X14E2C,"T",0X1,3);
	split_sreg_range(0X14E3C,"T",0X1,3);
	split_sreg_range(0X14E44,"T",0X1,3);
	split_sreg_range(0X14E48,"T",0X1,3);
	split_sreg_range(0X14E58,"T",0X1,3);
	split_sreg_range(0X14E74,"T",0X1,3);
	split_sreg_range(0X14E90,"T",0X1,3);
	split_sreg_range(0X14EAC,"T",0X1,3);
	split_sreg_range(0X14EC2,"T",0X1,3);
	split_sreg_range(0X14ED0,"T",0X1,3);
	split_sreg_range(0X14ED4,"T",0X1,3);
	split_sreg_range(0X14EDC,"T",0X1,3);
	split_sreg_range(0X14EE2,"T",0X1,3);
	split_sreg_range(0X14EFA,"T",0X1,3);
	split_sreg_range(0X14F02,"T",0X1,3);
	split_sreg_range(0X14F04,"T",0X1,3);
	split_sreg_range(0X14F08,"T",0X1,3);
	split_sreg_range(0X14F12,"T",0X1,3);
	split_sreg_range(0X14F1E,"T",0X1,3);
	split_sreg_range(0X14F26,"T",0X1,3);
	split_sreg_range(0X14F28,"T",0X1,3);
	split_sreg_range(0X14F3C,"T",0X1,3);
	split_sreg_range(0X14F60,"T",0X1,3);
	split_sreg_range(0X14F7A,"T",0X1,3);
	split_sreg_range(0X14F88,"T",0X1,3);
	split_sreg_range(0X14F96,"T",0X1,3);
	split_sreg_range(0X14FA8,"T",0X1,3);
	split_sreg_range(0X14FB2,"T",0X1,3);
	split_sreg_range(0X14FBA,"T",0X1,3);
	split_sreg_range(0X14FD8,"T",0X1,3);
	split_sreg_range(0X14FDC,"T",0X1,3);
	split_sreg_range(0X14FF0,"T",0X1,3);
	split_sreg_range(0X14FFA,"T",0X1,3);
	split_sreg_range(0X15010,"T",0X1,3);
	split_sreg_range(0X15038,"T",0X1,3);
	split_sreg_range(0X1503C,"T",0X1,3);
	split_sreg_range(0X1504A,"T",0X1,3);
	split_sreg_range(0X15058,"T",0X1,3);
	split_sreg_range(0X1505A,"T",0X1,3);
	split_sreg_range(0X15064,"T",0X1,3);
	split_sreg_range(0X15068,"T",0X1,3);
	split_sreg_range(0X15088,"T",0X1,3);
	split_sreg_range(0X150B0,"T",0X1,3);
	split_sreg_range(0X150D4,"T",0X1,3);
	split_sreg_range(0X150EE,"T",0X1,3);
	split_sreg_range(0X150FC,"T",0X1,3);
	split_sreg_range(0X1510A,"T",0X1,3);
	split_sreg_range(0X1511C,"T",0X1,3);
	split_sreg_range(0X15126,"T",0X1,3);
	split_sreg_range(0X1512E,"T",0X1,3);
	split_sreg_range(0X1514C,"T",0X1,3);
	split_sreg_range(0X15150,"T",0X1,3);
	split_sreg_range(0X1516C,"T",0X1,3);
	split_sreg_range(0X1517E,"T",0X1,3);
	split_sreg_range(0X15180,"T",0X1,3);
	split_sreg_range(0X15184,"T",0X1,3);
	split_sreg_range(0X15196,"T",0X1,3);
	split_sreg_range(0X151A4,"T",0X1,3);
	split_sreg_range(0X151A6,"T",0X1,3);
	split_sreg_range(0X151B8,"T",0X1,3);
	split_sreg_range(0X151BA,"T",0X1,3);
	split_sreg_range(0X151E0,"T",0X1,3);
	split_sreg_range(0X151F4,"T",0X1,3);
	split_sreg_range(0X15210,"T",0X1,3);
	split_sreg_range(0X15212,"T",0X1,3);
	split_sreg_range(0X15214,"T",0X1,3);
	split_sreg_range(0X15226,"T",0X1,3);
	split_sreg_range(0X15228,"T",0X1,3);
	split_sreg_range(0X1523E,"T",0X1,3);
	split_sreg_range(0X15264,"T",0X1,3);
	split_sreg_range(0X1526A,"T",0X1,3);
	split_sreg_range(0X1527A,"T",0X1,3);
	split_sreg_range(0X1527C,"T",0X1,3);
	split_sreg_range(0X15290,"T",0X1,3);
	split_sreg_range(0X1529A,"T",0X1,3);
	split_sreg_range(0X152A6,"T",0X1,3);
	split_sreg_range(0X152BA,"T",0X1,3);
	split_sreg_range(0X152BE,"T",0X1,3);
	split_sreg_range(0X152C8,"T",0X1,3);
	split_sreg_range(0X152DC,"T",0X1,3);
	split_sreg_range(0X152DE,"T",0X1,3);
	split_sreg_range(0X15318,"T",0X1,3);
	split_sreg_range(0X1532A,"T",0X1,3);
	split_sreg_range(0X1532C,"T",0X1,3);
	split_sreg_range(0X1534C,"T",0X1,3);
	split_sreg_range(0X15370,"T",0X1,3);
	split_sreg_range(0X15384,"T",0X1,3);
	split_sreg_range(0X153A8,"T",0X1,3);
	split_sreg_range(0X153AA,"T",0X1,3);
	split_sreg_range(0X153BC,"T",0X1,3);
	split_sreg_range(0X153BE,"T",0X1,3);
	split_sreg_range(0X153CC,"T",0X1,3);
	split_sreg_range(0X153CE,"T",0X1,3);
	split_sreg_range(0X153DC,"T",0X1,3);
	split_sreg_range(0X153DE,"T",0X1,3);
	split_sreg_range(0X153EA,"T",0X1,3);
	split_sreg_range(0X153EC,"T",0X1,3);
	split_sreg_range(0X15428,"T",0X1,3);
	split_sreg_range(0X1542C,"T",0X1,3);
	split_sreg_range(0X15454,"T",0X1,3);
	split_sreg_range(0X15456,"T",0X1,3);
	split_sreg_range(0X15472,"T",0X1,3);
	split_sreg_range(0X15496,"T",0X1,3);
	split_sreg_range(0X1549A,"T",0X1,3);
	split_sreg_range(0X1549E,"T",0X1,3);
	split_sreg_range(0X154F0,"T",0X1,3);
	split_sreg_range(0X15504,"T",0X1,3);
	split_sreg_range(0X15506,"T",0X1,3);
	split_sreg_range(0X15556,"T",0X1,3);
	split_sreg_range(0X1555A,"T",0X1,3);
	split_sreg_range(0X15578,"T",0X1,3);
	split_sreg_range(0X1557C,"T",0X1,3);
	split_sreg_range(0X15590,"T",0X1,3);
	split_sreg_range(0X15592,"T",0X1,3);
	split_sreg_range(0X15594,"T",0X1,3);
	split_sreg_range(0X15598,"T",0X1,3);
	split_sreg_range(0X155A4,"T",0X1,3);
	split_sreg_range(0X155C0,"T",0X1,3);
	split_sreg_range(0X155D4,"T",0X1,3);
	split_sreg_range(0X155EE,"T",0X1,3);
	split_sreg_range(0X155FA,"T",0X1,3);
	split_sreg_range(0X15624,"T",0X1,3);
	split_sreg_range(0X1562A,"T",0X1,3);
	split_sreg_range(0X1562E,"T",0X1,3);
	split_sreg_range(0X1563C,"T",0X1,3);
	split_sreg_range(0X15650,"T",0X1,3);
	split_sreg_range(0X15668,"T",0X1,3);
	split_sreg_range(0X1567C,"T",0X1,3);
	split_sreg_range(0X156B4,"T",0X1,3);
	split_sreg_range(0X156BC,"T",0X1,3);
	split_sreg_range(0X156C0,"T",0X1,3);
	split_sreg_range(0X156DC,"T",0X1,3);
	split_sreg_range(0X156DE,"T",0X1,3);
	split_sreg_range(0X156FA,"T",0X1,3);
	split_sreg_range(0X156FC,"T",0X1,3);
	split_sreg_range(0X1574A,"T",0X1,3);
	split_sreg_range(0X15750,"T",0X1,3);
	split_sreg_range(0X15786,"T",0X1,3);
	split_sreg_range(0X1578A,"T",0X1,3);
	split_sreg_range(0X157C0,"T",0X1,3);
	split_sreg_range(0X157C4,"T",0X1,3);
	split_sreg_range(0X1581C,"T",0X1,3);
	split_sreg_range(0X15820,"T",0X1,3);
	split_sreg_range(0X15868,"T",0X1,3);
	split_sreg_range(0X1586C,"T",0X1,3);
	split_sreg_range(0X158B4,"T",0X1,3);
	split_sreg_range(0X158B8,"T",0X1,3);
	split_sreg_range(0X158CA,"T",0X1,3);
	split_sreg_range(0X15906,"T",0X1,3);
	split_sreg_range(0X15922,"T",0X1,3);
	split_sreg_range(0X15958,"T",0X1,3);
	split_sreg_range(0X1595C,"T",0X1,3);
	split_sreg_range(0X15980,"T",0X1,3);
	split_sreg_range(0X15994,"T",0X1,3);
	split_sreg_range(0X1599E,"T",0X1,3);
	split_sreg_range(0X159B8,"T",0X1,3);
	split_sreg_range(0X159C4,"T",0X1,3);
	split_sreg_range(0X159D4,"T",0X1,3);
	split_sreg_range(0X159E2,"T",0X1,3);
	split_sreg_range(0X15A18,"T",0X1,3);
	split_sreg_range(0X15A1C,"T",0X1,3);
	split_sreg_range(0X15A42,"T",0X1,3);
	split_sreg_range(0X15A50,"T",0X1,3);
	split_sreg_range(0X15A52,"T",0X1,3);
	split_sreg_range(0X15A54,"T",0X1,3);
	split_sreg_range(0X15A56,"T",0X1,3);
	split_sreg_range(0X15A58,"T",0X1,3);
	split_sreg_range(0X15A5A,"T",0X1,3);
	split_sreg_range(0X15A5C,"T",0X1,3);
	split_sreg_range(0X15A6C,"T",0X1,3);
	split_sreg_range(0X15AA4,"T",0X1,3);
	split_sreg_range(0X15AAE,"T",0X1,3);
	split_sreg_range(0X15AE0,"T",0X1,3);
	split_sreg_range(0X15B04,"T",0X1,3);
	split_sreg_range(0X15B48,"T",0X1,3);
	split_sreg_range(0X15B4C,"T",0X1,3);
	split_sreg_range(0X15B50,"T",0X1,3);
	split_sreg_range(0X15B52,"T",0X1,3);
	split_sreg_range(0X15B56,"T",0X1,3);
	split_sreg_range(0X15B5E,"T",0X1,3);
	split_sreg_range(0X15B86,"T",0X1,3);
	split_sreg_range(0X15B9C,"T",0X1,3);
	split_sreg_range(0X15BBA,"T",0X1,3);
	split_sreg_range(0X15BD0,"T",0X1,3);
	split_sreg_range(0X15BEC,"T",0X1,3);
	split_sreg_range(0X15BF6,"T",0X1,3);
	split_sreg_range(0X15C00,"T",0X1,3);
	split_sreg_range(0X15C08,"T",0X1,3);
	split_sreg_range(0X15C10,"T",0X1,3);
	split_sreg_range(0X15C28,"T",0X1,3);
	split_sreg_range(0X15C34,"T",0X1,3);
	split_sreg_range(0X15C4C,"T",0X1,3);
	split_sreg_range(0X15C64,"T",0X1,3);
	split_sreg_range(0X15C92,"T",0X1,3);
	split_sreg_range(0X15C96,"T",0X1,3);
	split_sreg_range(0X15CD6,"T",0X1,3);
	split_sreg_range(0X15CE8,"T",0X1,3);
	split_sreg_range(0X15CEC,"T",0X1,3);
	split_sreg_range(0X15CFA,"T",0X1,3);
	split_sreg_range(0X15D22,"T",0X1,3);
	split_sreg_range(0X15D4A,"T",0X1,3);
	split_sreg_range(0X15D56,"T",0X1,3);
	split_sreg_range(0X15D66,"T",0X1,3);
	split_sreg_range(0X15D72,"T",0X1,3);
	split_sreg_range(0X15D78,"T",0X1,3);
	split_sreg_range(0X15D7A,"T",0X1,3);
	split_sreg_range(0X15D96,"T",0X1,3);
	split_sreg_range(0X15DC4,"T",0X1,3);
	split_sreg_range(0X15DCA,"T",0X1,3);
	split_sreg_range(0X15DF6,"T",0X1,3);
	split_sreg_range(0X15E24,"T",0X1,3);
	split_sreg_range(0X15E50,"T",0X1,3);
	split_sreg_range(0X15E70,"T",0X1,3);
	split_sreg_range(0X15E74,"T",0X1,3);
	split_sreg_range(0X15E86,"T",0X1,3);
	split_sreg_range(0X15E8A,"T",0X1,3);
	split_sreg_range(0X15EAE,"T",0X1,3);
	split_sreg_range(0X15EB8,"T",0X1,3);
	split_sreg_range(0X15EC8,"T",0X1,3);
	split_sreg_range(0X15F0A,"T",0X1,3);
	split_sreg_range(0X15F0C,"T",0X1,3);
	split_sreg_range(0X15F16,"T",0X1,3);
	split_sreg_range(0X15F54,"T",0X1,3);
	split_sreg_range(0X15F56,"T",0X1,3);
	split_sreg_range(0X15F74,"T",0X1,3);
	split_sreg_range(0X15F88,"T",0X1,3);
	split_sreg_range(0X15FB6,"T",0X1,3);
	split_sreg_range(0X15FC6,"T",0X1,3);
	split_sreg_range(0X15FD8,"T",0X1,3);
	split_sreg_range(0X15FF0,"T",0X1,3);
	split_sreg_range(0X16012,"T",0X1,3);
	split_sreg_range(0X1601C,"T",0X1,3);
	split_sreg_range(0X16042,"T",0X1,3);
	split_sreg_range(0X1604A,"T",0X1,3);
	split_sreg_range(0X1604C,"T",0X1,3);
	split_sreg_range(0X16050,"T",0X1,3);
	split_sreg_range(0X16054,"T",0X1,3);
	split_sreg_range(0X1607E,"T",0X1,3);
	split_sreg_range(0X16088,"T",0X1,3);
	split_sreg_range(0X16090,"T",0X1,3);
	split_sreg_range(0X16094,"T",0X1,3);
	split_sreg_range(0X1609E,"T",0X1,3);
	split_sreg_range(0X160E0,"T",0X1,3);
	split_sreg_range(0X160E4,"T",0X1,3);
	split_sreg_range(0X16124,"T",0X1,3);
	split_sreg_range(0X1612A,"T",0X1,3);
	split_sreg_range(0X16132,"T",0X1,3);
	split_sreg_range(0X16136,"T",0X1,3);
	split_sreg_range(0X16156,"T",0X1,3);
	split_sreg_range(0X16160,"T",0X1,3);
	split_sreg_range(0X16166,"T",0X1,3);
	split_sreg_range(0X1618E,"T",0X1,3);
	split_sreg_range(0X161A8,"T",0X1,3);
	split_sreg_range(0X161CE,"T",0X1,3);
	split_sreg_range(0X161F4,"T",0X1,3);
	split_sreg_range(0X1623E,"T",0X1,3);
	split_sreg_range(0X16246,"T",0X1,3);
	split_sreg_range(0X1625C,"T",0X1,3);
	split_sreg_range(0X1625E,"T",0X1,3);
	split_sreg_range(0X16288,"T",0X1,3);
	split_sreg_range(0X16298,"T",0X1,3);
	split_sreg_range(0X1629E,"T",0X1,3);
	split_sreg_range(0X162A6,"T",0X1,3);
	split_sreg_range(0X162DE,"T",0X1,3);
	split_sreg_range(0X16326,"T",0X1,3);
	split_sreg_range(0X1632A,"T",0X1,3);
	split_sreg_range(0X1633A,"T",0X1,3);
	split_sreg_range(0X16384,"T",0X1,3);
	split_sreg_range(0X16388,"T",0X1,3);
	split_sreg_range(0X163CC,"T",0X1,3);
	split_sreg_range(0X163D2,"T",0X1,3);
	split_sreg_range(0X163D8,"T",0X1,3);
	split_sreg_range(0X16408,"T",0X1,3);
	split_sreg_range(0X1640A,"T",0X1,3);
	split_sreg_range(0X16414,"T",0X1,3);
	split_sreg_range(0X1643C,"T",0X1,3);
	split_sreg_range(0X164CE,"T",0X1,3);
	split_sreg_range(0X164E8,"T",0X1,3);
	split_sreg_range(0X16538,"T",0X1,3);
	split_sreg_range(0X1653A,"T",0X1,3);
	split_sreg_range(0X1653C,"T",0X1,3);
	split_sreg_range(0X1653E,"T",0X1,3);
	split_sreg_range(0X16564,"T",0X1,3);
	split_sreg_range(0X165A2,"T",0X1,3);
	split_sreg_range(0X165B4,"T",0X1,3);
	split_sreg_range(0X165B6,"T",0X1,3);
	split_sreg_range(0X165D2,"T",0X1,3);
	split_sreg_range(0X16638,"T",0X1,3);
	split_sreg_range(0X16648,"T",0X1,3);
	split_sreg_range(0X1664A,"T",0X1,3);
	split_sreg_range(0X166AA,"T",0X1,3);
	split_sreg_range(0X166C8,"T",0X1,3);
	split_sreg_range(0X166EC,"T",0X1,3);
	split_sreg_range(0X166F2,"T",0X1,3);
	split_sreg_range(0X166FA,"T",0X1,3);
	split_sreg_range(0X1672E,"T",0X1,3);
	split_sreg_range(0X16744,"T",0X1,3);
	split_sreg_range(0X16754,"T",0X1,3);
	split_sreg_range(0X16756,"T",0X1,3);
	split_sreg_range(0X16780,"T",0X1,3);
	split_sreg_range(0X167C4,"T",0X1,3);
	split_sreg_range(0X167CA,"T",0X1,3);
	split_sreg_range(0X16804,"T",0X1,3);
	split_sreg_range(0X1682A,"T",0X1,3);
	split_sreg_range(0X1683E,"T",0X1,3);
	split_sreg_range(0X16846,"T",0X1,3);
	split_sreg_range(0X16848,"T",0X1,3);
	split_sreg_range(0X16850,"T",0X1,3);
	split_sreg_range(0X16896,"T",0X1,3);
	split_sreg_range(0X16916,"T",0X1,3);
	split_sreg_range(0X16972,"T",0X1,3);
	split_sreg_range(0X16974,"T",0X1,3);
	split_sreg_range(0X16988,"T",0X1,3);
	split_sreg_range(0X1698A,"T",0X1,3);
	split_sreg_range(0X169BC,"T",0X1,3);
	split_sreg_range(0X169F4,"T",0X1,3);
	split_sreg_range(0X16A6C,"T",0X1,3);
	split_sreg_range(0X16AA8,"T",0X1,3);
	split_sreg_range(0X16AAA,"T",0X1,3);
	split_sreg_range(0X16AAC,"T",0X1,3);
	split_sreg_range(0X16AB0,"T",0X1,3);
	split_sreg_range(0X16AB8,"T",0X1,3);
	split_sreg_range(0X16AC6,"T",0X1,3);
	split_sreg_range(0X16ACC,"T",0X1,3);
	split_sreg_range(0X16AD0,"T",0X1,3);
	split_sreg_range(0X16AD8,"T",0X1,3);
	split_sreg_range(0X16B32,"T",0X1,3);
	split_sreg_range(0X16B54,"T",0X1,3);
	split_sreg_range(0X16B6C,"T",0X1,3);
	split_sreg_range(0X16B86,"T",0X1,3);
	split_sreg_range(0X16B9E,"T",0X1,3);
	split_sreg_range(0X16BAC,"T",0X1,3);
	split_sreg_range(0X16BDC,"T",0X1,3);
	split_sreg_range(0X16BE6,"T",0X1,3);
	split_sreg_range(0X16BF0,"T",0X1,3);
	split_sreg_range(0X16BF2,"T",0X1,3);
	split_sreg_range(0X16C1A,"T",0X1,3);
	split_sreg_range(0X16C2E,"T",0X1,3);
	split_sreg_range(0X16C32,"T",0X1,3);
	split_sreg_range(0X16C5C,"T",0X1,3);
	split_sreg_range(0X16C74,"T",0X1,3);
	split_sreg_range(0X16CAE,"T",0X1,3);
	split_sreg_range(0X16CB6,"T",0X1,3);
	split_sreg_range(0X16CC2,"T",0X1,3);
	split_sreg_range(0X16CD0,"T",0X1,3);
	split_sreg_range(0X16CFC,"T",0X1,3);
	split_sreg_range(0X16CFE,"T",0X1,3);
	split_sreg_range(0X16D08,"T",0X1,3);
	split_sreg_range(0X16D18,"T",0X1,3);
	split_sreg_range(0X16D20,"T",0X1,3);
	split_sreg_range(0X16D2A,"T",0X1,3);
	split_sreg_range(0X16D34,"T",0X1,3);
	split_sreg_range(0X16D40,"T",0X1,3);
	split_sreg_range(0X16D42,"T",0X1,3);
	split_sreg_range(0X16D4C,"T",0X1,3);
	split_sreg_range(0X16D54,"T",0X1,3);
	split_sreg_range(0X16D9A,"T",0X1,3);
	split_sreg_range(0X16DB6,"T",0X1,3);
	split_sreg_range(0X16DD0,"T",0X1,3);
	split_sreg_range(0X16DF2,"T",0X1,3);
	split_sreg_range(0X16E14,"T",0X1,3);
	split_sreg_range(0X16E2C,"T",0X1,3);
	split_sreg_range(0X16E30,"T",0X1,3);
	split_sreg_range(0X16E40,"T",0X1,3);
	split_sreg_range(0X16E76,"T",0X1,3);
	split_sreg_range(0X16E94,"T",0X1,3);
	split_sreg_range(0X16EBC,"T",0X1,3);
	split_sreg_range(0X16EC4,"T",0X1,3);
	split_sreg_range(0X16ECE,"T",0X1,3);
	split_sreg_range(0X16EDC,"T",0X1,3);
	split_sreg_range(0X16EDE,"T",0X1,3);
	split_sreg_range(0X16EE2,"T",0X1,3);
	split_sreg_range(0X16EEE,"T",0X1,3);
	split_sreg_range(0X16EF4,"T",0X1,3);
	split_sreg_range(0X16EF6,"T",0X1,3);
	split_sreg_range(0X16FA2,"T",0X1,3);
	split_sreg_range(0X16FC2,"T",0X1,3);
	split_sreg_range(0X17004,"T",0X1,3);
	split_sreg_range(0X17006,"T",0X1,3);
	split_sreg_range(0X17060,"T",0X1,3);
	split_sreg_range(0X17062,"T",0X1,3);
	split_sreg_range(0X17070,"T",0X1,3);
	split_sreg_range(0X1707A,"T",0X1,3);
	split_sreg_range(0X1707E,"T",0X1,3);
	split_sreg_range(0X17084,"T",0X1,3);
	split_sreg_range(0X170B8,"T",0X1,3);
	split_sreg_range(0X170BE,"T",0X1,3);
	split_sreg_range(0X170E8,"T",0X1,3);
	split_sreg_range(0X170EE,"T",0X1,3);
	split_sreg_range(0X170F6,"T",0X1,3);
	split_sreg_range(0X170FE,"T",0X1,3);
	split_sreg_range(0X17102,"T",0X1,3);
	split_sreg_range(0X1710A,"T",0X1,3);
	split_sreg_range(0X17110,"T",0X1,3);
	split_sreg_range(0X17118,"T",0X1,3);
	split_sreg_range(0X17126,"T",0X1,3);
	split_sreg_range(0X17156,"T",0X1,3);
	split_sreg_range(0X1715A,"T",0X1,3);
	split_sreg_range(0X17160,"T",0X1,3);
	split_sreg_range(0X1717A,"T",0X1,3);
	split_sreg_range(0X17180,"T",0X1,3);
	split_sreg_range(0X171A6,"T",0X1,3);
	split_sreg_range(0X1720A,"T",0X1,3);
	split_sreg_range(0X17254,"T",0X1,3);
	split_sreg_range(0X17352,"T",0X1,3);
	split_sreg_range(0X17354,"T",0X1,3);
	split_sreg_range(0X1737A,"T",0X1,3);
	split_sreg_range(0X1738A,"T",0X1,3);
	split_sreg_range(0X1739A,"T",0X1,3);
	split_sreg_range(0X173BA,"T",0X1,3);
	split_sreg_range(0X173D8,"T",0X1,3);
	split_sreg_range(0X173DC,"T",0X1,3);
	split_sreg_range(0X173EA,"T",0X1,3);
	split_sreg_range(0X173F4,"T",0X1,3);
	split_sreg_range(0X17404,"T",0X1,3);
	split_sreg_range(0X17408,"T",0X1,3);
	split_sreg_range(0X17416,"T",0X1,3);
	split_sreg_range(0X1743C,"T",0X1,3);
	split_sreg_range(0X1743E,"T",0X1,3);
	split_sreg_range(0X174AC,"T",0X1,3);
	split_sreg_range(0X174D4,"T",0X1,3);
	split_sreg_range(0X174EE,"T",0X1,3);
	split_sreg_range(0X17508,"T",0X1,3);
	split_sreg_range(0X1750A,"T",0X1,3);
	split_sreg_range(0X17526,"T",0X1,3);
	split_sreg_range(0X17550,"T",0X1,3);
	split_sreg_range(0X1755C,"T",0X1,3);
	split_sreg_range(0X1761E,"T",0X1,3);
	split_sreg_range(0X17630,"T",0X1,3);
	split_sreg_range(0X1763A,"T",0X1,3);
	split_sreg_range(0X1765A,"T",0X1,3);
	split_sreg_range(0X176C8,"T",0X1,3);
	split_sreg_range(0X176E4,"T",0X1,3);
	split_sreg_range(0X176E8,"T",0X1,3);
	split_sreg_range(0X176EE,"T",0X1,3);
	split_sreg_range(0X176F8,"T",0X1,3);
	split_sreg_range(0X1771C,"T",0X1,3);
	split_sreg_range(0X1771E,"T",0X1,3);
	split_sreg_range(0X17740,"T",0X1,3);
	split_sreg_range(0X17742,"T",0X1,3);
	split_sreg_range(0X1777A,"T",0X1,3);
	split_sreg_range(0X1777E,"T",0X1,3);
	split_sreg_range(0X17790,"T",0X1,3);
	split_sreg_range(0X177B4,"T",0X1,3);
	split_sreg_range(0X177B8,"T",0X1,3);
	split_sreg_range(0X177D0,"T",0X1,3);
	split_sreg_range(0X177E8,"T",0X1,3);
	split_sreg_range(0X17806,"T",0X1,3);
	split_sreg_range(0X17808,"T",0X1,3);
	split_sreg_range(0X17856,"T",0X1,3);
	split_sreg_range(0X1785A,"T",0X1,3);
	split_sreg_range(0X1787C,"T",0X1,3);
	split_sreg_range(0X1789A,"T",0X1,3);
	split_sreg_range(0X1789E,"T",0X1,3);
	split_sreg_range(0X178B0,"T",0X1,3);
	split_sreg_range(0X178B4,"T",0X1,3);
	split_sreg_range(0X178B6,"T",0X1,3);
	split_sreg_range(0X178F0,"T",0X1,3);
	split_sreg_range(0X178FE,"T",0X1,3);
	split_sreg_range(0X17902,"T",0X1,3);
	split_sreg_range(0X17906,"T",0X1,3);
	split_sreg_range(0X1791C,"T",0X1,3);
	split_sreg_range(0X17936,"T",0X1,3);
	split_sreg_range(0X17938,"T",0X1,3);
	split_sreg_range(0X17942,"T",0X1,3);
	split_sreg_range(0X17950,"T",0X1,3);
	split_sreg_range(0X17952,"T",0X1,3);
	split_sreg_range(0X1795C,"T",0X1,3);
	split_sreg_range(0X1796E,"T",0X1,3);
	split_sreg_range(0X17978,"T",0X1,3);
	split_sreg_range(0X17980,"T",0X1,3);
	split_sreg_range(0X17988,"T",0X1,3);
	split_sreg_range(0X17996,"T",0X1,3);
	split_sreg_range(0X1799A,"T",0X1,3);
	split_sreg_range(0X179AA,"T",0X1,3);
	split_sreg_range(0X179AE,"T",0X1,3);
	split_sreg_range(0X179D6,"T",0X1,3);
	split_sreg_range(0X179EA,"T",0X1,3);
	split_sreg_range(0X179EC,"T",0X1,3);
	split_sreg_range(0X179FC,"T",0X1,3);
	split_sreg_range(0X17A0A,"T",0X1,3);
	split_sreg_range(0X17A16,"T",0X1,3);
	split_sreg_range(0X17A24,"T",0X1,3);
	split_sreg_range(0X17A28,"T",0X1,3);
	split_sreg_range(0X17A2C,"T",0X1,3);
	split_sreg_range(0X17A38,"T",0X1,3);
	split_sreg_range(0X17A3E,"T",0X1,3);
	split_sreg_range(0X17A40,"T",0X1,3);
	split_sreg_range(0X17A48,"T",0X1,3);
	split_sreg_range(0X17A68,"T",0X1,3);
	split_sreg_range(0X17A6A,"T",0X1,3);
	split_sreg_range(0X17A7C,"T",0X1,3);
	split_sreg_range(0X17A84,"T",0X1,3);
	split_sreg_range(0X17A94,"T",0X1,3);
	split_sreg_range(0X17AA4,"T",0X1,3);
	split_sreg_range(0X17AE2,"T",0X1,3);
	split_sreg_range(0X17AE4,"T",0X1,3);
	split_sreg_range(0X17AEA,"T",0X1,3);
	split_sreg_range(0X17AF2,"T",0X1,3);
	split_sreg_range(0X17B02,"T",0X1,3);
	split_sreg_range(0X17B06,"T",0X1,3);
	split_sreg_range(0X17B12,"T",0X1,3);
	split_sreg_range(0X17B20,"T",0X1,3);
	split_sreg_range(0X17B38,"T",0X1,3);
	split_sreg_range(0X17B3E,"T",0X1,3);
	split_sreg_range(0X17B46,"T",0X1,3);
	split_sreg_range(0X17B4E,"T",0X1,3);
	split_sreg_range(0X17B58,"T",0X1,3);
	split_sreg_range(0X17B60,"T",0X1,3);
	split_sreg_range(0X17BBC,"T",0X1,3);
	split_sreg_range(0X17BCE,"T",0X1,3);
	split_sreg_range(0X17BE2,"T",0X1,3);
	split_sreg_range(0X17BEA,"T",0X1,3);
	split_sreg_range(0X17BF0,"T",0X1,3);
	split_sreg_range(0X17C04,"T",0X1,3);
	split_sreg_range(0X17C0A,"T",0X1,3);
	split_sreg_range(0X17C14,"T",0X1,3);
	split_sreg_range(0X17C1A,"T",0X1,3);
	split_sreg_range(0X17C1E,"T",0X1,3);
	split_sreg_range(0X17C24,"T",0X1,3);
	split_sreg_range(0X17C30,"T",0X1,3);
	split_sreg_range(0X17C82,"T",0X1,3);
	split_sreg_range(0X17C94,"T",0X1,3);
	split_sreg_range(0X17CA6,"T",0X1,3);
	split_sreg_range(0X17CAE,"T",0X1,3);
	split_sreg_range(0X17CB4,"T",0X1,3);
	split_sreg_range(0X17CC6,"T",0X1,3);
	split_sreg_range(0X17CCC,"T",0X1,3);
	split_sreg_range(0X17CE0,"T",0X1,3);
	split_sreg_range(0X17CE6,"T",0X1,3);
	split_sreg_range(0X17CEA,"T",0X1,3);
	split_sreg_range(0X17CEE,"T",0X1,3);
	split_sreg_range(0X17CF6,"T",0X1,3);
	split_sreg_range(0X17CFA,"T",0X1,3);
	split_sreg_range(0X17D14,"T",0X1,3);
	split_sreg_range(0X17D28,"T",0X1,3);
	split_sreg_range(0X17D36,"T",0X1,3);
	split_sreg_range(0X17D46,"T",0X1,3);
	split_sreg_range(0X17D54,"T",0X1,3);
	split_sreg_range(0X17DB8,"T",0X1,3);
	split_sreg_range(0X17DC4,"T",0X1,3);
	split_sreg_range(0X17DD2,"T",0X1,3);
	split_sreg_range(0X17DD6,"T",0X1,3);
	split_sreg_range(0X17DDC,"T",0X1,3);
	split_sreg_range(0X17DE2,"T",0X1,3);
	split_sreg_range(0X17DFC,"T",0X1,3);
	split_sreg_range(0X17E42,"T",0X1,3);
	split_sreg_range(0X17E5C,"T",0X1,3);
	split_sreg_range(0X17E96,"T",0X1,3);
	split_sreg_range(0X17EC0,"T",0X1,3);
	split_sreg_range(0X17ED0,"T",0X1,3);
	split_sreg_range(0X17ED4,"T",0X1,3);
	split_sreg_range(0X17ED6,"T",0X1,3);
	split_sreg_range(0X17EDA,"T",0X1,3);
	split_sreg_range(0X17EDC,"T",0X1,3);
	split_sreg_range(0X17EF2,"T",0X1,3);
	split_sreg_range(0X17EF6,"T",0X1,3);
	split_sreg_range(0X17EFE,"T",0X1,3);
	split_sreg_range(0X17F1C,"T",0X1,3);
	split_sreg_range(0X17F24,"T",0X1,3);
	split_sreg_range(0X17F3C,"T",0X1,3);
	split_sreg_range(0X17F40,"T",0X1,3);
	split_sreg_range(0X17F48,"T",0X1,3);
	split_sreg_range(0X17F4C,"T",0X1,3);
	split_sreg_range(0X17F4E,"T",0X1,3);
	split_sreg_range(0X17F52,"T",0X1,3);
	split_sreg_range(0X17F5A,"T",0X1,3);
	split_sreg_range(0X17F62,"T",0X1,3);
	split_sreg_range(0X17F78,"T",0X1,3);
	split_sreg_range(0X17F7C,"T",0X1,3);
	split_sreg_range(0X17F84,"T",0X1,3);
	split_sreg_range(0X17F86,"T",0X1,3);
	split_sreg_range(0X17F8A,"T",0X1,3);
	split_sreg_range(0X17F8E,"T",0X1,3);
	split_sreg_range(0X17F90,"T",0X1,3);
	split_sreg_range(0X17FB2,"T",0X1,3);
	split_sreg_range(0X17FDE,"T",0X1,3);
	split_sreg_range(0X17FEA,"T",0X1,3);
	split_sreg_range(0X17FF6,"T",0X1,3);
	split_sreg_range(0X18000,"T",0X1,3);
	split_sreg_range(0X18022,"T",0X1,3);
	split_sreg_range(0X18032,"T",0X1,3);
	split_sreg_range(0X18036,"T",0X1,3);
	split_sreg_range(0X18038,"T",0X1,3);
	split_sreg_range(0X1803C,"T",0X1,3);
	split_sreg_range(0X1803E,"T",0X1,3);
	split_sreg_range(0X18054,"T",0X1,3);
	split_sreg_range(0X18058,"T",0X1,3);
	split_sreg_range(0X18060,"T",0X1,3);
	split_sreg_range(0X18064,"T",0X1,3);
	split_sreg_range(0X18068,"T",0X1,3);
	split_sreg_range(0X1806E,"T",0X1,3);
	split_sreg_range(0X18076,"T",0X1,3);
	split_sreg_range(0X1808E,"T",0X1,3);
	split_sreg_range(0X18092,"T",0X1,3);
	split_sreg_range(0X1809A,"T",0X1,3);
	split_sreg_range(0X1809E,"T",0X1,3);
	split_sreg_range(0X180A2,"T",0X1,3);
	split_sreg_range(0X180A4,"T",0X1,3);
	split_sreg_range(0X180AC,"T",0X1,3);
	split_sreg_range(0X180C8,"T",0X1,3);
	split_sreg_range(0X180D8,"T",0X1,3);
	split_sreg_range(0X180EA,"T",0X1,3);
	split_sreg_range(0X180F4,"T",0X1,3);
	split_sreg_range(0X1812A,"T",0X1,3);
	split_sreg_range(0X1812E,"T",0X1,3);
	split_sreg_range(0X18132,"T",0X1,3);
	split_sreg_range(0X1813A,"T",0X1,3);
	split_sreg_range(0X18150,"T",0X1,3);
	split_sreg_range(0X18154,"T",0X1,3);
	split_sreg_range(0X1815C,"T",0X1,3);
	split_sreg_range(0X18160,"T",0X1,3);
	split_sreg_range(0X18164,"T",0X1,3);
	split_sreg_range(0X1816E,"T",0X1,3);
	split_sreg_range(0X18190,"T",0X1,3);
	split_sreg_range(0X181BC,"T",0X1,3);
	split_sreg_range(0X181C0,"T",0X1,3);
	split_sreg_range(0X181C4,"T",0X1,3);
	split_sreg_range(0X181D0,"T",0X1,3);
	split_sreg_range(0X181D8,"T",0X1,3);
	split_sreg_range(0X181E0,"T",0X1,3);
	split_sreg_range(0X18208,"T",0X1,3);
	split_sreg_range(0X1820E,"T",0X1,3);
	split_sreg_range(0X18214,"T",0X1,3);
	split_sreg_range(0X18228,"T",0X1,3);
	split_sreg_range(0X18232,"T",0X1,3);
	split_sreg_range(0X18234,"T",0X1,3);
	split_sreg_range(0X18246,"T",0X1,3);
	split_sreg_range(0X18254,"T",0X1,3);
	split_sreg_range(0X18256,"T",0X1,3);
	split_sreg_range(0X1825E,"T",0X1,3);
	split_sreg_range(0X18262,"T",0X1,3);
	split_sreg_range(0X18278,"T",0X1,3);
	split_sreg_range(0X1827A,"T",0X1,3);
	split_sreg_range(0X1827E,"T",0X1,3);
	split_sreg_range(0X1828A,"T",0X1,3);
	split_sreg_range(0X182C2,"T",0X1,3);
	split_sreg_range(0X18300,"T",0X1,3);
	split_sreg_range(0X183EA,"T",0X1,3);
	split_sreg_range(0X183EC,"T",0X1,3);
	split_sreg_range(0X1846C,"T",0X1,3);
	split_sreg_range(0X18474,"T",0X1,3);
	split_sreg_range(0X1847E,"T",0X1,3);
	split_sreg_range(0X1849A,"T",0X1,3);
	split_sreg_range(0X184A8,"T",0X1,3);
	split_sreg_range(0X185C2,"T",0X1,3);
	split_sreg_range(0X185DC,"T",0X1,3);
	split_sreg_range(0X185DE,"T",0X1,3);
	split_sreg_range(0X185E0,"T",0X1,3);
	split_sreg_range(0X18654,"T",0X1,3);
	split_sreg_range(0X1865A,"T",0X1,3);
	split_sreg_range(0X186A8,"T",0X1,3);
	split_sreg_range(0X186EA,"T",0X1,3);
	split_sreg_range(0X186EC,"T",0X1,3);
	split_sreg_range(0X18744,"T",0X1,3);
	split_sreg_range(0X18746,"T",0X1,3);
	split_sreg_range(0X1878A,"T",0X1,3);
	split_sreg_range(0X1878E,"T",0X1,3);
	split_sreg_range(0X18794,"T",0X1,3);
	split_sreg_range(0X18798,"T",0X1,3);
	split_sreg_range(0X1879C,"T",0X1,3);
	split_sreg_range(0X187A6,"T",0X1,3);
	split_sreg_range(0X187B0,"T",0X1,3);
	split_sreg_range(0X1884E,"T",0X1,3);
	split_sreg_range(0X18850,"T",0X1,3);
	split_sreg_range(0X18890,"T",0X1,3);
	split_sreg_range(0X1889E,"T",0X1,3);
	split_sreg_range(0X188AA,"T",0X1,3);
	split_sreg_range(0X188AE,"T",0X1,3);
	split_sreg_range(0X188B8,"T",0X1,3);
	split_sreg_range(0X188F4,"T",0X1,3);
	split_sreg_range(0X18934,"T",0X1,3);
	split_sreg_range(0X18970,"T",0X1,3);
	split_sreg_range(0X189AC,"T",0X1,3);
	split_sreg_range(0X189CC,"T",0X1,3);
	split_sreg_range(0X189CE,"T",0X1,3);
	split_sreg_range(0X189EC,"T",0X1,3);
	split_sreg_range(0X189EE,"T",0X1,3);
	split_sreg_range(0X18A1E,"T",0X1,3);
	split_sreg_range(0X18A58,"T",0X1,3);
	split_sreg_range(0X18A5A,"T",0X1,3);
	split_sreg_range(0X18A62,"T",0X1,3);
	split_sreg_range(0X18B10,"T",0X1,3);
	split_sreg_range(0X18B16,"T",0X1,3);
	split_sreg_range(0X18B1E,"T",0X1,3);
	split_sreg_range(0X18B24,"T",0X1,3);
	split_sreg_range(0X18B30,"T",0X1,3);
	split_sreg_range(0X18B32,"T",0X1,3);
	split_sreg_range(0X18B7C,"T",0X1,3);
	split_sreg_range(0X18B82,"T",0X1,3);
	split_sreg_range(0X18B92,"T",0X1,3);
	split_sreg_range(0X18BAA,"T",0X1,3);
	split_sreg_range(0X18BD2,"T",0X1,3);
	split_sreg_range(0X18BD8,"T",0X1,3);
	split_sreg_range(0X18BDA,"T",0X1,3);
	split_sreg_range(0X18BDE,"T",0X1,3);
	split_sreg_range(0X18BF2,"T",0X1,3);
	split_sreg_range(0X18BF4,"T",0X1,3);
	split_sreg_range(0X18C04,"T",0X1,3);
	split_sreg_range(0X18C12,"T",0X1,3);
	split_sreg_range(0X18C46,"T",0X1,3);
	split_sreg_range(0X18C4C,"T",0X1,3);
	split_sreg_range(0X18C5A,"T",0X1,3);
	split_sreg_range(0X18C66,"T",0X1,3);
	split_sreg_range(0X18C6C,"T",0X1,3);
	split_sreg_range(0X18C70,"T",0X1,3);
	split_sreg_range(0X18C72,"T",0X1,3);
	split_sreg_range(0X18C78,"T",0X1,3);
	split_sreg_range(0X18C82,"T",0X1,3);
	split_sreg_range(0X18C8A,"T",0X1,3);
	split_sreg_range(0X18C90,"T",0X1,3);
	split_sreg_range(0X18CAA,"T",0X1,3);
	split_sreg_range(0X18CC4,"T",0X1,3);
	split_sreg_range(0X18CEC,"T",0X1,3);
	split_sreg_range(0X18CF4,"T",0X1,3);
	split_sreg_range(0X18CFC,"T",0X1,3);
	split_sreg_range(0X18D02,"T",0X1,3);
	split_sreg_range(0X18D44,"T",0X1,3);
	split_sreg_range(0X18D7C,"T",0X1,3);
	split_sreg_range(0X18D8C,"T",0X1,3);
	split_sreg_range(0X18D9E,"T",0X1,3);
	split_sreg_range(0X18DA6,"T",0X1,3);
	split_sreg_range(0X18DCE,"T",0X1,3);
	split_sreg_range(0X18DDE,"T",0X1,3);
	split_sreg_range(0X18DE2,"T",0X1,3);
	split_sreg_range(0X18DF2,"T",0X1,3);
	split_sreg_range(0X18DF6,"T",0X1,3);
	split_sreg_range(0X18E14,"T",0X1,3);
	split_sreg_range(0X18E1C,"T",0X1,3);
	split_sreg_range(0X18E32,"T",0X1,3);
	split_sreg_range(0X18E4A,"T",0X1,3);
	split_sreg_range(0X18E56,"T",0X1,3);
	split_sreg_range(0X18E6A,"T",0X1,3);
	split_sreg_range(0X18E7C,"T",0X1,3);
	split_sreg_range(0X18E82,"T",0X1,3);
	split_sreg_range(0X18E96,"T",0X1,3);
	split_sreg_range(0X18E9C,"T",0X1,3);
	split_sreg_range(0X18EA6,"T",0X1,3);
	split_sreg_range(0X18EB4,"T",0X1,3);
	split_sreg_range(0X18ECC,"T",0X1,3);
	split_sreg_range(0X18ED6,"T",0X1,3);
	split_sreg_range(0X18EE2,"T",0X1,3);
	split_sreg_range(0X18EEE,"T",0X1,3);
	split_sreg_range(0X18EF2,"T",0X1,3);
	split_sreg_range(0X18F36,"T",0X1,3);
	split_sreg_range(0X18F70,"T",0X1,3);
	split_sreg_range(0X18F84,"T",0X1,3);
	split_sreg_range(0X18FA0,"T",0X1,3);
	split_sreg_range(0X18FA4,"T",0X1,3);
	split_sreg_range(0X18FA8,"T",0X1,3);
	split_sreg_range(0X18FAC,"T",0X1,3);
	split_sreg_range(0X18FCC,"T",0X1,3);
	split_sreg_range(0X18FD0,"T",0X1,3);
	split_sreg_range(0X18FE6,"T",0X1,3);
	split_sreg_range(0X18FEA,"T",0X1,3);
	split_sreg_range(0X18FF8,"T",0X1,3);
	split_sreg_range(0X1901A,"T",0X1,3);
	split_sreg_range(0X1901E,"T",0X1,3);
	split_sreg_range(0X1902A,"T",0X1,3);
	split_sreg_range(0X1903E,"T",0X1,3);
	split_sreg_range(0X19044,"T",0X1,3);
	split_sreg_range(0X1904C,"T",0X1,3);
	split_sreg_range(0X1904E,"T",0X1,3);
	split_sreg_range(0X1905C,"T",0X1,3);
	split_sreg_range(0X19068,"T",0X1,3);
	split_sreg_range(0X19072,"T",0X1,3);
	split_sreg_range(0X190A4,"T",0X1,3);
	split_sreg_range(0X190CA,"T",0X1,3);
	split_sreg_range(0X190CE,"T",0X1,3);
	split_sreg_range(0X190D4,"T",0X1,3);
	split_sreg_range(0X190EE,"T",0X1,3);
	split_sreg_range(0X190F8,"T",0X1,3);
	split_sreg_range(0X19104,"T",0X1,3);
	split_sreg_range(0X19106,"T",0X1,3);
	split_sreg_range(0X1910C,"T",0X1,3);
	split_sreg_range(0X1910E,"T",0X1,3);
	split_sreg_range(0X19110,"T",0X1,3);
	split_sreg_range(0X1913A,"T",0X1,3);
	split_sreg_range(0X19152,"T",0X1,3);
	split_sreg_range(0X19158,"T",0X1,3);
	split_sreg_range(0X1915E,"T",0X1,3);
	split_sreg_range(0X19166,"T",0X1,3);
	split_sreg_range(0X1918C,"T",0X1,3);
	split_sreg_range(0X19190,"T",0X1,3);
	split_sreg_range(0X191BE,"T",0X1,3);
	split_sreg_range(0X191CC,"T",0X1,3);
	split_sreg_range(0X191DC,"T",0X1,3);
	split_sreg_range(0X191DE,"T",0X1,3);
	split_sreg_range(0X191F8,"T",0X1,3);
	split_sreg_range(0X191FA,"T",0X1,3);
	split_sreg_range(0X191FC,"T",0X1,3);
	split_sreg_range(0X19200,"T",0X1,3);
	split_sreg_range(0X19204,"T",0X1,3);
	split_sreg_range(0X19208,"T",0X1,3);
	split_sreg_range(0X1920E,"T",0X1,3);
	split_sreg_range(0X19218,"T",0X1,3);
	split_sreg_range(0X1921C,"T",0X1,3);
	split_sreg_range(0X19258,"T",0X1,3);
	split_sreg_range(0X19260,"T",0X1,3);
	split_sreg_range(0X19268,"T",0X1,3);
	split_sreg_range(0X19282,"T",0X1,3);
	split_sreg_range(0X19290,"T",0X1,3);
	split_sreg_range(0X192A4,"T",0X1,3);
	split_sreg_range(0X192AE,"T",0X1,3);
	split_sreg_range(0X192B6,"T",0X1,3);
	split_sreg_range(0X192BE,"T",0X1,3);
	split_sreg_range(0X192C0,"T",0X1,3);
	split_sreg_range(0X192C6,"T",0X1,3);
	split_sreg_range(0X192D0,"T",0X1,3);
	split_sreg_range(0X192D6,"T",0X1,3);
	split_sreg_range(0X192E4,"T",0X1,3);
	split_sreg_range(0X192F4,"T",0X1,3);
	split_sreg_range(0X19300,"T",0X1,3);
	split_sreg_range(0X19306,"T",0X1,3);
	split_sreg_range(0X19316,"T",0X1,3);
	split_sreg_range(0X1931C,"T",0X1,3);
	split_sreg_range(0X1931E,"T",0X1,3);
	split_sreg_range(0X19322,"T",0X1,3);
	split_sreg_range(0X19326,"T",0X1,3);
	split_sreg_range(0X19386,"T",0X1,3);
	split_sreg_range(0X19394,"T",0X1,3);
	split_sreg_range(0X193A8,"T",0X1,3);
	split_sreg_range(0X193B0,"T",0X1,3);
	split_sreg_range(0X193B4,"T",0X1,3);
	split_sreg_range(0X193F2,"T",0X1,3);
	split_sreg_range(0X19404,"T",0X1,3);
	split_sreg_range(0X19416,"T",0X1,3);
	split_sreg_range(0X19432,"T",0X1,3);
	split_sreg_range(0X19436,"T",0X1,3);
	split_sreg_range(0X1943C,"T",0X1,3);
	split_sreg_range(0X19442,"T",0X1,3);
	split_sreg_range(0X19448,"T",0X1,3);
	split_sreg_range(0X19452,"T",0X1,3);
	split_sreg_range(0X19454,"T",0X1,3);
	split_sreg_range(0X19456,"T",0X1,3);
	split_sreg_range(0X1945C,"T",0X1,3);
	split_sreg_range(0X19462,"T",0X1,3);
	split_sreg_range(0X19468,"T",0X1,3);
	split_sreg_range(0X19472,"T",0X1,3);
	split_sreg_range(0X19476,"T",0X1,3);
	split_sreg_range(0X19478,"T",0X1,3);
	split_sreg_range(0X1947E,"T",0X1,3);
	split_sreg_range(0X19484,"T",0X1,3);
	split_sreg_range(0X1948A,"T",0X1,3);
	split_sreg_range(0X19494,"T",0X1,3);
	split_sreg_range(0X19498,"T",0X1,3);
	split_sreg_range(0X1949C,"T",0X1,3);
	split_sreg_range(0X194A2,"T",0X1,3);
	split_sreg_range(0X194A8,"T",0X1,3);
	split_sreg_range(0X194AE,"T",0X1,3);
	split_sreg_range(0X194CA,"T",0X1,3);
	split_sreg_range(0X194D6,"T",0X1,3);
	split_sreg_range(0X194E0,"T",0X1,3);
	split_sreg_range(0X194E6,"T",0X1,3);
	split_sreg_range(0X19518,"T",0X1,3);
	split_sreg_range(0X1951A,"T",0X1,3);
	split_sreg_range(0X1951E,"T",0X1,3);
	split_sreg_range(0X1952C,"T",0X1,3);
	split_sreg_range(0X19548,"T",0X1,3);
	split_sreg_range(0X19552,"T",0X1,3);
	split_sreg_range(0X19566,"T",0X1,3);
	split_sreg_range(0X1959A,"T",0X1,3);
	split_sreg_range(0X1959C,"T",0X1,3);
	split_sreg_range(0X195A0,"T",0X1,3);
	split_sreg_range(0X195B0,"T",0X1,3);
	split_sreg_range(0X195C4,"T",0X1,3);
	split_sreg_range(0X195F6,"T",0X1,3);
	split_sreg_range(0X195F8,"T",0X1,3);
	split_sreg_range(0X195FC,"T",0X1,3);
	split_sreg_range(0X1960C,"T",0X1,3);
	split_sreg_range(0X19620,"T",0X1,3);
	split_sreg_range(0X19656,"T",0X1,3);
	split_sreg_range(0X1965C,"T",0X1,3);
	split_sreg_range(0X1966A,"T",0X1,3);
	split_sreg_range(0X19670,"T",0X1,3);
	split_sreg_range(0X19682,"T",0X1,3);
	split_sreg_range(0X19688,"T",0X1,3);
	split_sreg_range(0X1968E,"T",0X1,3);
	split_sreg_range(0X196A0,"T",0X1,3);
	split_sreg_range(0X196A6,"T",0X1,3);
	split_sreg_range(0X196D6,"T",0X1,3);
	split_sreg_range(0X196D8,"T",0X1,3);
	split_sreg_range(0X196DC,"T",0X1,3);
	split_sreg_range(0X1970E,"T",0X1,3);
	split_sreg_range(0X19710,"T",0X1,3);
	split_sreg_range(0X19714,"T",0X1,3);
	split_sreg_range(0X1979E,"T",0X1,3);
	split_sreg_range(0X197A2,"T",0X1,3);
	split_sreg_range(0X197D2,"T",0X1,3);
	split_sreg_range(0X197DC,"T",0X1,3);
	split_sreg_range(0X197E0,"T",0X1,3);
	split_sreg_range(0X197E4,"T",0X1,3);
	split_sreg_range(0X198BC,"T",0X1,3);
	split_sreg_range(0X198C4,"T",0X1,3);
	split_sreg_range(0X198D2,"T",0X1,3);
	split_sreg_range(0X198FC,"T",0X1,3);
	split_sreg_range(0X19902,"T",0X1,3);
	split_sreg_range(0X19906,"T",0X1,3);
	split_sreg_range(0X19924,"T",0X1,3);
	split_sreg_range(0X1992C,"T",0X1,3);
	split_sreg_range(0X1993C,"T",0X1,3);
	split_sreg_range(0X19940,"T",0X1,3);
	split_sreg_range(0X19954,"T",0X1,3);
	split_sreg_range(0X1995E,"T",0X1,3);
	split_sreg_range(0X19972,"T",0X1,3);
	split_sreg_range(0X19976,"T",0X1,3);
	split_sreg_range(0X199AE,"T",0X1,3);
	split_sreg_range(0X199B2,"T",0X1,3);
	split_sreg_range(0X199B6,"T",0X1,3);
	split_sreg_range(0X199DE,"T",0X1,3);
	split_sreg_range(0X199F4,"T",0X1,3);
	split_sreg_range(0X19A00,"T",0X1,3);
	split_sreg_range(0X19A1C,"T",0X1,3);
	split_sreg_range(0X19A20,"T",0X1,3);
	split_sreg_range(0X19A24,"T",0X1,3);
	split_sreg_range(0X19A26,"T",0X1,3);
	split_sreg_range(0X19A2C,"T",0X1,3);
	split_sreg_range(0X19A48,"T",0X1,3);
	split_sreg_range(0X19A4C,"T",0X1,3);
	split_sreg_range(0X19A50,"T",0X1,3);
	split_sreg_range(0X19A52,"T",0X1,3);
	split_sreg_range(0X19A58,"T",0X1,3);
	split_sreg_range(0X19A76,"T",0X1,3);
	split_sreg_range(0X19A78,"T",0X1,3);
	split_sreg_range(0X19A7C,"T",0X1,3);
	split_sreg_range(0X19A8C,"T",0X1,3);
	split_sreg_range(0X19AAC,"T",0X1,3);
	split_sreg_range(0X19AB4,"T",0X1,3);
	split_sreg_range(0X19BA0,"T",0X1,3);
	split_sreg_range(0X19BB2,"T",0X1,3);
	split_sreg_range(0X19BB8,"T",0X1,3);
	split_sreg_range(0X19BC8,"T",0X1,3);
	split_sreg_range(0X19BD8,"T",0X1,3);
	split_sreg_range(0X19BF6,"T",0X1,3);
	split_sreg_range(0X19BFA,"T",0X1,3);
	split_sreg_range(0X19C06,"T",0X1,3);
	split_sreg_range(0X19C1C,"T",0X1,3);
	split_sreg_range(0X19C32,"T",0X1,3);
	split_sreg_range(0X19C58,"T",0X1,3);
	split_sreg_range(0X19C5E,"T",0X1,3);
	split_sreg_range(0X19C60,"T",0X1,3);
	split_sreg_range(0X19C68,"T",0X1,3);
	split_sreg_range(0X19C72,"T",0X1,3);
	split_sreg_range(0X19C76,"T",0X1,3);
	split_sreg_range(0X19C8A,"T",0X1,3);
	split_sreg_range(0X19C8C,"T",0X1,3);
	split_sreg_range(0X19CA0,"T",0X1,3);
	split_sreg_range(0X19CA2,"T",0X1,3);
	split_sreg_range(0X19CB6,"T",0X1,3);
	split_sreg_range(0X19CB8,"T",0X1,3);
	split_sreg_range(0X19CCC,"T",0X1,3);
	split_sreg_range(0X19CCE,"T",0X1,3);
	split_sreg_range(0X19CDC,"T",0X1,3);
	split_sreg_range(0X19CDE,"T",0X1,3);
	split_sreg_range(0X19CE8,"T",0X1,3);
	split_sreg_range(0X19CF6,"T",0X1,3);
	split_sreg_range(0X19CFA,"T",0X1,3);
	split_sreg_range(0X19D02,"T",0X1,3);
	split_sreg_range(0X19D24,"T",0X1,3);
	split_sreg_range(0X19D26,"T",0X1,3);
	split_sreg_range(0X19D28,"T",0X1,3);
	split_sreg_range(0X19D32,"T",0X1,3);
	split_sreg_range(0X19D4E,"T",0X1,3);
	split_sreg_range(0X19D54,"T",0X1,3);
	split_sreg_range(0X19D66,"T",0X1,3);
	split_sreg_range(0X19D6C,"T",0X1,3);
	split_sreg_range(0X19D8E,"T",0X1,3);
	split_sreg_range(0X19DCC,"T",0X1,3);
	split_sreg_range(0X19DE4,"T",0X1,3);
	split_sreg_range(0X19E5C,"T",0X1,3);
	split_sreg_range(0X19E74,"T",0X1,3);
	split_sreg_range(0X19E7C,"T",0X1,3);
	split_sreg_range(0X19E80,"T",0X1,3);
	split_sreg_range(0X19E96,"T",0X1,3);
	split_sreg_range(0X19E98,"T",0X1,3);
	split_sreg_range(0X19ED6,"T",0X1,3);
	split_sreg_range(0X19F00,"T",0X1,3);
	split_sreg_range(0X19F16,"T",0X1,3);
	split_sreg_range(0X19F32,"T",0X1,3);
	split_sreg_range(0X19F6C,"T",0X1,3);
	split_sreg_range(0X19F74,"T",0X1,3);
	split_sreg_range(0X19F8E,"T",0X1,3);
	split_sreg_range(0X19FB4,"T",0X1,3);
	split_sreg_range(0X19FB8,"T",0X1,3);
	split_sreg_range(0X19FE8,"T",0X1,3);
	split_sreg_range(0X1A20C,"T",0X1,3);
	split_sreg_range(0X1A40E,"T",0X1,3);
	split_sreg_range(0X1A72A,"T",0X1,3);
	split_sreg_range(0X1A72E,"T",0X1,3);
	split_sreg_range(0X1A770,"T",0X1,3);
	split_sreg_range(0X1A79C,"T",0X1,3);
	split_sreg_range(0X1A7CA,"T",0X1,3);
	split_sreg_range(0X1A7F2,"T",0X1,3);
	split_sreg_range(0X1A7FE,"T",0X1,3);
	split_sreg_range(0X1A808,"T",0X1,3);
	split_sreg_range(0X1A836,"T",0X1,3);
	split_sreg_range(0X1A83C,"T",0X1,3);
	split_sreg_range(0X1A864,"T",0X1,3);
	split_sreg_range(0X1A872,"T",0X1,3);
	split_sreg_range(0X1A882,"T",0X1,3);
	split_sreg_range(0X1A8B8,"T",0X1,3);
	split_sreg_range(0X1A8E8,"T",0X1,3);
	split_sreg_range(0X1A8EE,"T",0X1,3);
	split_sreg_range(0X1A908,"T",0X1,3);
	split_sreg_range(0X1A938,"T",0X1,3);
	split_sreg_range(0X1A95E,"T",0X1,3);
	split_sreg_range(0X1A98A,"T",0X1,3);
	split_sreg_range(0X1A9B0,"T",0X1,3);
	split_sreg_range(0X1A9BA,"T",0X1,3);
	split_sreg_range(0X1A9C0,"T",0X1,3);
	split_sreg_range(0X1A9C8,"T",0X1,3);
	split_sreg_range(0X1A9E2,"T",0X1,3);
	split_sreg_range(0X1AA14,"T",0X1,3);
	split_sreg_range(0X1AA40,"T",0X1,3);
	split_sreg_range(0X1AA42,"T",0X1,3);
	split_sreg_range(0X1AA44,"T",0X1,3);
	split_sreg_range(0X1AA68,"T",0X1,3);
	split_sreg_range(0X1AA72,"T",0X1,3);
	split_sreg_range(0X1AA78,"T",0X1,3);
	split_sreg_range(0X1AA80,"T",0X1,3);
	split_sreg_range(0X1AA82,"T",0X1,3);
	split_sreg_range(0X1AA9C,"T",0X1,3);
	split_sreg_range(0X1AACA,"T",0X1,3);
	split_sreg_range(0X1AAF6,"T",0X1,3);
	split_sreg_range(0X1AAF8,"T",0X1,3);
	split_sreg_range(0X1AB18,"T",0X1,3);
	split_sreg_range(0X1AB4A,"T",0X1,3);
	split_sreg_range(0X1AB50,"T",0X1,3);
	split_sreg_range(0X1AB58,"T",0X1,3);
	split_sreg_range(0X1AB7E,"T",0X1,3);
	split_sreg_range(0X1AB94,"T",0X1,3);
	split_sreg_range(0X1AB98,"T",0X1,3);
	split_sreg_range(0X1AB9A,"T",0X1,3);
	split_sreg_range(0X1AB9E,"T",0X1,3);
	split_sreg_range(0X1ABA6,"T",0X1,3);
	split_sreg_range(0X1ABAE,"T",0X1,3);
	split_sreg_range(0X1ABB0,"T",0X1,3);
	split_sreg_range(0X1ABB4,"T",0X1,3);
	split_sreg_range(0X1ABE0,"T",0X1,3);
	split_sreg_range(0X1ABE4,"T",0X1,3);
	split_sreg_range(0X1AC0E,"T",0X1,3);
	split_sreg_range(0X1AC16,"T",0X1,3);
	split_sreg_range(0X1AC5E,"T",0X1,3);
	split_sreg_range(0X1AC64,"T",0X1,3);
	split_sreg_range(0X1ACA6,"T",0X1,3);
	split_sreg_range(0X1ACBA,"T",0X1,3);
	split_sreg_range(0X1ACD6,"T",0X1,3);
	split_sreg_range(0X1AD16,"T",0X1,3);
	split_sreg_range(0X1AD54,"T",0X1,3);
	split_sreg_range(0X1AD80,"T",0X1,3);
	split_sreg_range(0X1AD8C,"T",0X1,3);
	split_sreg_range(0X1AD9C,"T",0X1,3);
	split_sreg_range(0X1ADB2,"T",0X1,3);
	split_sreg_range(0X1ADC0,"T",0X1,3);
	split_sreg_range(0X1ADC6,"T",0X1,3);
	split_sreg_range(0X1ADE4,"T",0X1,3);
	split_sreg_range(0X1ADEE,"T",0X1,3);
	split_sreg_range(0X1AE00,"T",0X1,3);
	split_sreg_range(0X1AE04,"T",0X1,3);
	split_sreg_range(0X1AE10,"T",0X1,3);
	split_sreg_range(0X1AE22,"T",0X1,3);
	split_sreg_range(0X1AE32,"T",0X1,3);
	split_sreg_range(0X1AE36,"T",0X1,3);
	split_sreg_range(0X1AE3A,"T",0X1,3);
	split_sreg_range(0X1AE3E,"T",0X1,3);
	split_sreg_range(0X1AE4C,"T",0X1,3);
	split_sreg_range(0X1AE5A,"T",0X1,3);
	split_sreg_range(0X1AE6C,"T",0X1,3);
	split_sreg_range(0X1AE76,"T",0X1,3);
	split_sreg_range(0X1AE78,"T",0X1,3);
	split_sreg_range(0X1AE80,"T",0X1,3);
	split_sreg_range(0X1AE96,"T",0X1,3);
	split_sreg_range(0X1AEAC,"T",0X1,3);
	split_sreg_range(0X1AECA,"T",0X1,3);
	split_sreg_range(0X1AEDA,"T",0X1,3);
	split_sreg_range(0X1AEDE,"T",0X1,3);
	split_sreg_range(0X1AEEE,"T",0X1,3);
	split_sreg_range(0X1AF00,"T",0X1,3);
	split_sreg_range(0X1AF04,"T",0X1,3);
	split_sreg_range(0X1AF18,"T",0X1,3);
	split_sreg_range(0X1AF20,"T",0X1,3);
	split_sreg_range(0X1AF28,"T",0X1,3);
	split_sreg_range(0X1AF2C,"T",0X1,3);
	split_sreg_range(0X1AF42,"T",0X1,3);
	split_sreg_range(0X1AF74,"T",0X1,3);
	split_sreg_range(0X1AF76,"T",0X1,3);
	split_sreg_range(0X1AF7A,"T",0X1,3);
	split_sreg_range(0X1AFAA,"T",0X1,3);
	split_sreg_range(0X1AFBA,"T",0X1,3);
	split_sreg_range(0X1AFC0,"T",0X1,3);
	split_sreg_range(0X1AFDE,"T",0X1,3);
	split_sreg_range(0X1AFE8,"T",0X1,3);
	split_sreg_range(0X1B002,"T",0X1,3);
	split_sreg_range(0X1B00E,"T",0X1,3);
	split_sreg_range(0X1B022,"T",0X1,3);
	split_sreg_range(0X1B036,"T",0X1,3);
	split_sreg_range(0X1B03A,"T",0X1,3);
	split_sreg_range(0X1B03E,"T",0X1,3);
	split_sreg_range(0X1B042,"T",0X1,3);
	split_sreg_range(0X1B050,"T",0X1,3);
	split_sreg_range(0X1B05A,"T",0X1,3);
	split_sreg_range(0X1B06E,"T",0X1,3);
	split_sreg_range(0X1B076,"T",0X1,3);
	split_sreg_range(0X1B07E,"T",0X1,3);
	split_sreg_range(0X1B094,"T",0X1,3);
	split_sreg_range(0X1B0A6,"T",0X1,3);
	split_sreg_range(0X1B0A8,"T",0X1,3);
	split_sreg_range(0X1B0DA,"T",0X1,3);
	split_sreg_range(0X1B0F6,"T",0X1,3);
	split_sreg_range(0X1B128,"T",0X1,3);
	split_sreg_range(0X1B13A,"T",0X1,3);
	split_sreg_range(0X1B182,"T",0X1,3);
	split_sreg_range(0X1B184,"T",0X1,3);
	split_sreg_range(0X1B188,"T",0X1,3);
	split_sreg_range(0X1B1CC,"T",0X1,3);
	split_sreg_range(0X1B1D4,"T",0X1,3);
	split_sreg_range(0X1B1DA,"T",0X1,3);
	split_sreg_range(0X1B1DC,"T",0X1,3);
	split_sreg_range(0X1B20C,"T",0X1,3);
	split_sreg_range(0X1B212,"T",0X1,3);
	split_sreg_range(0X1B214,"T",0X1,3);
	split_sreg_range(0X1B21C,"T",0X1,3);
	split_sreg_range(0X1B220,"T",0X1,3);
	split_sreg_range(0X1B22C,"T",0X1,3);
	split_sreg_range(0X1B234,"T",0X1,3);
	split_sreg_range(0X1B242,"T",0X1,3);
	split_sreg_range(0X1B248,"T",0X1,3);
	split_sreg_range(0X1B264,"T",0X1,3);
	split_sreg_range(0X1B290,"T",0X1,3);
	split_sreg_range(0X1B29C,"T",0X1,3);
	split_sreg_range(0X1B2A2,"T",0X1,3);
	split_sreg_range(0X1B2A4,"T",0X1,3);
	split_sreg_range(0X1B2CE,"T",0X1,3);
	split_sreg_range(0X1B2DE,"T",0X1,3);
	split_sreg_range(0X1B2E6,"T",0X1,3);
	split_sreg_range(0X1B2EA,"T",0X1,3);
	split_sreg_range(0X1B304,"T",0X1,3);
	split_sreg_range(0X1B312,"T",0X1,3);
	split_sreg_range(0X1B314,"T",0X1,3);
	split_sreg_range(0X1B318,"T",0X1,3);
	split_sreg_range(0X1B332,"T",0X1,3);
	split_sreg_range(0X1B336,"T",0X1,3);
	split_sreg_range(0X1B346,"T",0X1,3);
	split_sreg_range(0X1B34E,"T",0X1,3);
	split_sreg_range(0X1B356,"T",0X1,3);
	split_sreg_range(0X1B35A,"T",0X1,3);
	split_sreg_range(0X1B3BA,"T",0X1,3);
	split_sreg_range(0X1B3BE,"T",0X1,3);
	split_sreg_range(0X1B3DC,"T",0X1,3);
	split_sreg_range(0X1B3F8,"T",0X1,3);
	split_sreg_range(0X1B400,"T",0X1,3);
	split_sreg_range(0X1B426,"T",0X1,3);
	split_sreg_range(0X1B42C,"T",0X1,3);
	split_sreg_range(0X1B43E,"T",0X1,3);
	split_sreg_range(0X1B44E,"T",0X1,3);
	split_sreg_range(0X1B458,"T",0X1,3);
	split_sreg_range(0X1B468,"T",0X1,3);
	split_sreg_range(0X1B492,"T",0X1,3);
	split_sreg_range(0X1B4A6,"T",0X1,3);
	split_sreg_range(0X1B4A8,"T",0X1,3);
	split_sreg_range(0X1B4AA,"T",0X1,3);
	split_sreg_range(0X1B4AC,"T",0X1,3);
	split_sreg_range(0X1B4AE,"T",0X1,3);
	split_sreg_range(0X1B4B8,"T",0X1,3);
	split_sreg_range(0X1B4D0,"T",0X1,3);
	split_sreg_range(0X1B4D6,"T",0X1,3);
	split_sreg_range(0X1B500,"T",0X1,3);
	split_sreg_range(0X1B51C,"T",0X1,3);
	split_sreg_range(0X1B524,"T",0X1,3);
	split_sreg_range(0X1B54A,"T",0X1,3);
	split_sreg_range(0X1B550,"T",0X1,3);
	split_sreg_range(0X1B566,"T",0X1,3);
	split_sreg_range(0X1B576,"T",0X1,3);
	split_sreg_range(0X1B580,"T",0X1,3);
	split_sreg_range(0X1B590,"T",0X1,3);
	split_sreg_range(0X1B5B4,"T",0X1,3);
	split_sreg_range(0X1B5CC,"T",0X1,3);
	split_sreg_range(0X1B5D2,"T",0X1,3);
	split_sreg_range(0X1B5D8,"T",0X1,3);
	split_sreg_range(0X1B5EE,"T",0X1,3);
	split_sreg_range(0X1B5FC,"T",0X1,3);
	split_sreg_range(0X1B618,"T",0X1,3);
	split_sreg_range(0X1B634,"T",0X1,3);
	split_sreg_range(0X1B642,"T",0X1,3);
	split_sreg_range(0X1B656,"T",0X1,3);
	split_sreg_range(0X1B660,"T",0X1,3);
	split_sreg_range(0X1B662,"T",0X1,3);
	split_sreg_range(0X1B66A,"T",0X1,3);
	split_sreg_range(0X1B670,"T",0X1,3);
	split_sreg_range(0X1B682,"T",0X1,3);
	split_sreg_range(0X1B692,"T",0X1,3);
	split_sreg_range(0X1B6A2,"T",0X1,3);
	split_sreg_range(0X1B6AC,"T",0X1,3);
	split_sreg_range(0X1B6D0,"T",0X1,3);
	split_sreg_range(0X1B6D2,"T",0X1,3);
	split_sreg_range(0X1B6FC,"T",0X1,3);
	split_sreg_range(0X1B700,"T",0X1,3);
	split_sreg_range(0X1B712,"T",0X1,3);
	split_sreg_range(0X1B71A,"T",0X1,3);
	split_sreg_range(0X1B71E,"T",0X1,3);
	split_sreg_range(0X1B722,"T",0X1,3);
	split_sreg_range(0X1B726,"T",0X1,3);
	split_sreg_range(0X1B728,"T",0X1,3);
	split_sreg_range(0X1B730,"T",0X1,3);
	split_sreg_range(0X1B732,"T",0X1,3);
	split_sreg_range(0X1B780,"T",0X1,3);
	split_sreg_range(0X1B786,"T",0X1,3);
	split_sreg_range(0X1B7CA,"T",0X1,3);
	split_sreg_range(0X1B7D8,"T",0X1,3);
	split_sreg_range(0X1B7E6,"T",0X1,3);
	split_sreg_range(0X1B7F4,"T",0X1,3);
	split_sreg_range(0X1B810,"T",0X1,3);
	split_sreg_range(0X1B81A,"T",0X1,3);
	split_sreg_range(0X1B828,"T",0X1,3);
	split_sreg_range(0X1B82A,"T",0X1,3);
	split_sreg_range(0X1B860,"T",0X1,3);
	split_sreg_range(0X1B86A,"T",0X1,3);
	split_sreg_range(0X1B86E,"T",0X1,3);
	split_sreg_range(0X1B87C,"T",0X1,3);
	split_sreg_range(0X1B88A,"T",0X1,3);
	split_sreg_range(0X1B8AA,"T",0X1,3);
	split_sreg_range(0X1B8B4,"T",0X1,3);
	split_sreg_range(0X1B8BA,"T",0X1,3);
	split_sreg_range(0X1B8F6,"T",0X1,3);
	split_sreg_range(0X1B938,"T",0X1,3);
	split_sreg_range(0X1B972,"T",0X1,3);
	split_sreg_range(0X1B974,"T",0X1,3);
	split_sreg_range(0X1B97A,"T",0X1,3);
	split_sreg_range(0X1B98A,"T",0X1,3);
	split_sreg_range(0X1B998,"T",0X1,3);
	split_sreg_range(0X1B9A8,"T",0X1,3);
	split_sreg_range(0X1B9C0,"T",0X1,3);
	split_sreg_range(0X1B9CE,"T",0X1,3);
	split_sreg_range(0X1B9D0,"T",0X1,3);
	split_sreg_range(0X1B9F8,"T",0X1,3);
	split_sreg_range(0X1BA18,"T",0X1,3);
	split_sreg_range(0X1BA34,"T",0X1,3);
	split_sreg_range(0X1BA70,"T",0X1,3);
	split_sreg_range(0X1BB06,"T",0X1,3);
	split_sreg_range(0X1BB0A,"T",0X1,3);
	split_sreg_range(0X1BB1C,"T",0X1,3);
	split_sreg_range(0X1BB20,"T",0X1,3);
	split_sreg_range(0X1BB34,"T",0X1,3);
	split_sreg_range(0X1BB4C,"T",0X1,3);
	split_sreg_range(0X1BB50,"T",0X1,3);
	split_sreg_range(0X1BB64,"T",0X1,3);
	split_sreg_range(0X1BB6C,"T",0X1,3);
	split_sreg_range(0X1BB80,"T",0X1,3);
	split_sreg_range(0X1BB84,"T",0X1,3);
	split_sreg_range(0X1BB98,"T",0X1,3);
	split_sreg_range(0X1BBA0,"T",0X1,3);
	split_sreg_range(0X1BBDA,"T",0X1,3);
	split_sreg_range(0X1BBE6,"T",0X1,3);
	split_sreg_range(0X1BBF2,"T",0X1,3);
	split_sreg_range(0X1BBFA,"T",0X1,3);
	split_sreg_range(0X1BC06,"T",0X1,3);
	split_sreg_range(0X1BC08,"T",0X1,3);
	split_sreg_range(0X1BC26,"T",0X1,3);
	split_sreg_range(0X1BC40,"T",0X1,3);
	split_sreg_range(0X1BC68,"T",0X1,3);
	split_sreg_range(0X1BC8A,"T",0X1,3);
	split_sreg_range(0X1BCA0,"T",0X1,3);
	split_sreg_range(0X1BCA2,"T",0X1,3);
	split_sreg_range(0X1BCAE,"T",0X1,3);
	split_sreg_range(0X1BCB4,"T",0X1,3);
	split_sreg_range(0X1BCC0,"T",0X1,3);
	split_sreg_range(0X1BCC2,"T",0X1,3);
	split_sreg_range(0X1BCEA,"T",0X1,3);
	split_sreg_range(0X1BCEC,"T",0X1,3);
	split_sreg_range(0X1BD18,"T",0X1,3);
	split_sreg_range(0X1BD1A,"T",0X1,3);
	split_sreg_range(0X1BD1C,"T",0X1,3);
	split_sreg_range(0X1BD20,"T",0X1,3);
	split_sreg_range(0X1BD30,"T",0X1,3);
	split_sreg_range(0X1BD32,"T",0X1,3);
	split_sreg_range(0X1BD34,"T",0X1,3);
	split_sreg_range(0X1BD36,"T",0X1,3);
	split_sreg_range(0X1BD38,"T",0X1,3);
	split_sreg_range(0X1BD3A,"T",0X1,3);
	split_sreg_range(0X1BD3C,"T",0X1,3);
	split_sreg_range(0X1BD3E,"T",0X1,3);
	split_sreg_range(0X1BD68,"T",0X1,3);
	split_sreg_range(0X1BD70,"T",0,3);
	split_sreg_range(0X1BEBA,"T",0X1,3);
	split_sreg_range(0X1BECC,"T",0X1,3);
	split_sreg_range(0X1BED4,"T",0X1,3);
	split_sreg_range(0X1BF08,"T",0X1,3);
	split_sreg_range(0X1BF1C,"T",0X1,3);
	split_sreg_range(0X1BF40,"T",0X1,3);
	split_sreg_range(0X1BF54,"T",0X1,3);
	split_sreg_range(0X1BF90,"T",0X1,3);
	split_sreg_range(0X1BF96,"T",0X1,3);
	split_sreg_range(0X1BFA2,"T",0X1,3);
	split_sreg_range(0X1BFE0,"T",0X1,3);
	split_sreg_range(0X1BFE6,"T",0X1,3);
	split_sreg_range(0X1BFFE,"T",0X1,3);
	split_sreg_range(0X1C02E,"T",0X1,3);
	split_sreg_range(0X1C034,"T",0X1,3);
	split_sreg_range(0X1C084,"T",0X1,3);
	split_sreg_range(0X1C086,"T",0X1,3);
	split_sreg_range(0X1C09A,"T",0X1,3);
	split_sreg_range(0X1C09C,"T",0X1,3);
	split_sreg_range(0X1C0F8,"T",0X1,3);
	split_sreg_range(0X1C102,"T",0X1,3);
	split_sreg_range(0X1C104,"T",0X1,3);
	split_sreg_range(0X1C152,"T",0X1,3);
	split_sreg_range(0X1C15C,"T",0X1,3);
	split_sreg_range(0X1C15E,"T",0X1,3);
	split_sreg_range(0X1C170,"T",0X1,3);
	split_sreg_range(0X1C172,"T",0X1,3);
	split_sreg_range(0X1C184,"T",0X1,3);
	split_sreg_range(0X1C192,"T",0X1,3);
	split_sreg_range(0X1C1B2,"T",0X1,3);
	split_sreg_range(0X1C1B6,"T",0X1,3);
	split_sreg_range(0X1C1D4,"T",0X1,3);
	split_sreg_range(0X1C1DE,"T",0X1,3);
	split_sreg_range(0X1C1E0,"T",0X1,3);
	split_sreg_range(0X1C1F2,"T",0X1,3);
	split_sreg_range(0X1C21E,"T",0X1,3);
	split_sreg_range(0X1C224,"T",0X1,3);
	split_sreg_range(0X1C238,"T",0X1,3);
	split_sreg_range(0X1C23C,"T",0X1,3);
	split_sreg_range(0X1C24A,"T",0X1,3);
	split_sreg_range(0X1C24E,"T",0X1,3);
	split_sreg_range(0X1C284,"T",0X1,3);
	split_sreg_range(0X1C296,"T",0X1,3);
	split_sreg_range(0X1C2A6,"T",0X1,3);
	split_sreg_range(0X1C2AA,"T",0X1,3);
	split_sreg_range(0X1C2AC,"T",0X1,3);
	split_sreg_range(0X1C2B2,"T",0X1,3);
	split_sreg_range(0X1C2C8,"T",0X1,3);
	split_sreg_range(0X1C2D4,"T",0X1,3);
	split_sreg_range(0X1C2E0,"T",0X1,3);
	split_sreg_range(0X1C2E6,"T",0X1,3);
	split_sreg_range(0X1C2F6,"T",0X1,3);
	split_sreg_range(0X1C2FE,"T",0X1,3);
	split_sreg_range(0X1C302,"T",0X1,3);
	split_sreg_range(0X1C30C,"T",0X1,3);
	split_sreg_range(0X1C318,"T",0X1,3);
	split_sreg_range(0X1C336,"T",0X1,3);
	split_sreg_range(0X1C33C,"T",0X1,3);
	split_sreg_range(0X1C362,"T",0X1,3);
	split_sreg_range(0X1C368,"T",0X1,3);
	split_sreg_range(0X1C376,"T",0X1,3);
	split_sreg_range(0X1C378,"T",0X1,3);
	split_sreg_range(0X1C3F8,"T",0X1,3);
	split_sreg_range(0X1C408,"T",0X1,3);
	split_sreg_range(0X1C40C,"T",0X1,3);
	split_sreg_range(0X1C422,"T",0X1,3);
	split_sreg_range(0X1C426,"T",0X1,3);
	split_sreg_range(0X1C42E,"T",0X1,3);
	split_sreg_range(0X1C436,"T",0X1,3);
	split_sreg_range(0X1C46E,"T",0X1,3);
	split_sreg_range(0X1C474,"T",0X1,3);
	split_sreg_range(0X1C47E,"T",0X1,3);
	split_sreg_range(0X1C494,"T",0X1,3);
	split_sreg_range(0X1C4A0,"T",0X1,3);
	split_sreg_range(0X1C4A6,"T",0X1,3);
	split_sreg_range(0X1C4AE,"T",0X1,3);
	split_sreg_range(0X1C4B4,"T",0X1,3);
	split_sreg_range(0X1C4BE,"T",0X1,3);
	split_sreg_range(0X1C4CE,"T",0X1,3);
	split_sreg_range(0X1C4DA,"T",0X1,3);
	split_sreg_range(0X1C4E2,"T",0X1,3);
	split_sreg_range(0X1C4EE,"T",0X1,3);
	split_sreg_range(0X1C4F4,"T",0X1,3);
	split_sreg_range(0X1C4FA,"T",0X1,3);
	split_sreg_range(0X1C520,"T",0X1,3);
	split_sreg_range(0X1C52E,"T",0X1,3);
	split_sreg_range(0X1C54E,"T",0X1,3);
	split_sreg_range(0X1C552,"T",0X1,3);
	split_sreg_range(0X1C55E,"T",0X1,3);
	split_sreg_range(0X1C57E,"T",0X1,3);
	split_sreg_range(0X1C584,"T",0X1,3);
	split_sreg_range(0X1C59C,"T",0X1,3);
	split_sreg_range(0X1C59E,"T",0X1,3);
	split_sreg_range(0X1C5D2,"T",0X1,3);
	split_sreg_range(0X1C5E2,"T",0X1,3);
	split_sreg_range(0X1C5FE,"T",0X1,3);
	split_sreg_range(0X1C60E,"T",0X1,3);
	split_sreg_range(0X1C61A,"T",0X1,3);
	split_sreg_range(0X1C622,"T",0X1,3);
	split_sreg_range(0X1C626,"T",0X1,3);
	split_sreg_range(0X1C636,"T",0X1,3);
	split_sreg_range(0X1C638,"T",0X1,3);
	split_sreg_range(0X1C63C,"T",0X1,3);
	split_sreg_range(0X1C648,"T",0X1,3);
	split_sreg_range(0X1C662,"T",0X1,3);
	split_sreg_range(0X1C668,"T",0X1,3);
	split_sreg_range(0X1C66E,"T",0X1,3);
	split_sreg_range(0X1C68C,"T",0X1,3);
	split_sreg_range(0X1C696,"T",0X1,3);
	split_sreg_range(0X1C698,"T",0X1,3);
	split_sreg_range(0X1C6A0,"T",0X1,3);
	split_sreg_range(0X1C6AC,"T",0X1,3);
	split_sreg_range(0X1C6B2,"T",0X1,3);
	split_sreg_range(0X1C6B8,"T",0X1,3);
	split_sreg_range(0X1C6E8,"T",0X1,3);
	split_sreg_range(0X1C712,"T",0X1,3);
	split_sreg_range(0X1C72C,"T",0X1,3);
	split_sreg_range(0X1C736,"T",0X1,3);
	split_sreg_range(0X1C740,"T",0X1,3);
	split_sreg_range(0X1C750,"T",0X1,3);
	split_sreg_range(0X1C756,"T",0X1,3);
	split_sreg_range(0X1C75C,"T",0X1,3);
	split_sreg_range(0X1C78A,"T",0X1,3);
	split_sreg_range(0X1C79A,"T",0X1,3);
	split_sreg_range(0X1C7A6,"T",0X1,3);
	split_sreg_range(0X1C7C2,"T",0X1,3);
	split_sreg_range(0X1C7D8,"T",0X1,3);
	split_sreg_range(0X1C7DE,"T",0X1,3);
	split_sreg_range(0X1C7E6,"T",0X1,3);
	split_sreg_range(0X1C7E8,"T",0X1,3);
	split_sreg_range(0X1C7F4,"T",0X1,3);
	split_sreg_range(0X1C816,"T",0X1,3);
	split_sreg_range(0X1C822,"T",0X1,3);
	split_sreg_range(0X1C826,"T",0X1,3);
	split_sreg_range(0X1C838,"T",0X1,3);
	split_sreg_range(0X1C83A,"T",0X1,3);
	split_sreg_range(0X1C848,"T",0X1,3);
	split_sreg_range(0X1C84C,"T",0X1,3);
	split_sreg_range(0X1C860,"T",0X1,3);
	split_sreg_range(0X1C862,"T",0X1,3);
	split_sreg_range(0X1C864,"T",0X1,3);
	split_sreg_range(0X1C866,"T",0X1,3);
	split_sreg_range(0X1C868,"T",0X1,3);
	split_sreg_range(0X1C8C4,"T",0X1,3);
	split_sreg_range(0X1C8E6,"T",0X1,3);
	split_sreg_range(0X1C8FC,"T",0X1,3);
	split_sreg_range(0X1C90C,"T",0X1,3);
	split_sreg_range(0X1C912,"T",0X1,3);
	split_sreg_range(0X1C914,"T",0X1,3);
	split_sreg_range(0X1C93E,"T",0X1,3);
	split_sreg_range(0X1C988,"T",0X1,3);
	split_sreg_range(0X1C98C,"T",0X1,3);
	split_sreg_range(0X1C99C,"T",0X1,3);
	split_sreg_range(0X1C9AE,"T",0X1,3);
	split_sreg_range(0X1C9BC,"T",0X1,3);
	split_sreg_range(0X1C9E2,"T",0X1,3);
	split_sreg_range(0X1CA04,"T",0X1,3);
	split_sreg_range(0X1CA24,"T",0X1,3);
	split_sreg_range(0X1CA4E,"T",0X1,3);
	split_sreg_range(0X1CA52,"T",0X1,3);
	split_sreg_range(0X1CA60,"T",0X1,3);
	split_sreg_range(0X1CA76,"T",0X1,3);
	split_sreg_range(0X1CA82,"T",0X1,3);
	split_sreg_range(0X1CA9C,"T",0X1,3);
	split_sreg_range(0X1CAA2,"T",0X1,3);
	split_sreg_range(0X1CAAC,"T",0X1,3);
	split_sreg_range(0X1CAB2,"T",0X1,3);
	split_sreg_range(0X1CAC8,"T",0X1,3);
	split_sreg_range(0X1CB04,"T",0X1,3);
	split_sreg_range(0X1CB08,"T",0X1,3);
	split_sreg_range(0X1CB0A,"T",0X1,3);
	split_sreg_range(0X1CB0E,"T",0X1,3);
	split_sreg_range(0X1CB16,"T",0X1,3);
	split_sreg_range(0X1CB1C,"T",0X1,3);
	split_sreg_range(0X1CB20,"T",0X1,3);
	split_sreg_range(0X1CB2C,"T",0X1,3);
	split_sreg_range(0X1CB44,"T",0X1,3);
	split_sreg_range(0X1CB4A,"T",0X1,3);
	split_sreg_range(0X1CB54,"T",0X1,3);
	split_sreg_range(0X1CB5C,"T",0X1,3);
	split_sreg_range(0X1CB62,"T",0X1,3);
	split_sreg_range(0X1CB74,"T",0X1,3);
	split_sreg_range(0X1CB90,"T",0X1,3);
	split_sreg_range(0X1CBB0,"T",0X1,3);
	split_sreg_range(0X1CBC2,"T",0X1,3);
	split_sreg_range(0X1CBC6,"T",0X1,3);
	split_sreg_range(0X1CBCA,"T",0X1,3);
	split_sreg_range(0X1CC14,"T",0X1,3);
	split_sreg_range(0X1CC2A,"T",0X1,3);
	split_sreg_range(0X1CC3A,"T",0X1,3);
	split_sreg_range(0X1CC3E,"T",0X1,3);
	split_sreg_range(0X1CC46,"T",0X1,3);
	split_sreg_range(0X1CC4A,"T",0X1,3);
	split_sreg_range(0X1CC4E,"T",0X1,3);
	split_sreg_range(0X1CC8E,"T",0X1,3);
	split_sreg_range(0X1CC9E,"T",0X1,3);
	split_sreg_range(0X1CCA2,"T",0X1,3);
	split_sreg_range(0X1CCC4,"T",0X1,3);
	split_sreg_range(0X1CCCC,"T",0X1,3);
	split_sreg_range(0X1CCDC,"T",0X1,3);
	split_sreg_range(0X1CD04,"T",0X1,3);
	split_sreg_range(0X1CD08,"T",0X1,3);
	split_sreg_range(0X1CD0A,"T",0X1,3);
	split_sreg_range(0X1CD0E,"T",0X1,3);
	split_sreg_range(0X1CD26,"T",0X1,3);
	split_sreg_range(0X1CD48,"T",0X1,3);
	split_sreg_range(0X1CD58,"T",0X1,3);
	split_sreg_range(0X1CD70,"T",0X1,3);
	split_sreg_range(0X1CD76,"T",0X1,3);
	split_sreg_range(0X1CD8E,"T",0X1,3);
	split_sreg_range(0X1CDD8,"T",0X1,3);
	split_sreg_range(0X1CDDC,"T",0X1,3);
	split_sreg_range(0X1CDE2,"T",0X1,3);
	split_sreg_range(0X1CDE6,"T",0X1,3);
	split_sreg_range(0X1CDEC,"T",0X1,3);
	split_sreg_range(0X1CDF2,"T",0X1,3);
	split_sreg_range(0X1CDF6,"T",0X1,3);
	split_sreg_range(0X1CDFA,"T",0X1,3);
	split_sreg_range(0X1CDFC,"T",0X1,3);
	split_sreg_range(0X1CE08,"T",0X1,3);
	split_sreg_range(0X1CE0C,"T",0X1,3);
	split_sreg_range(0X1CE12,"T",0X1,3);
	split_sreg_range(0X1CE18,"T",0X1,3);
	split_sreg_range(0X1CE44,"T",0X1,3);
	split_sreg_range(0X1CE56,"T",0X1,3);
	split_sreg_range(0X1CE5A,"T",0X1,3);
	split_sreg_range(0X1CE6E,"T",0X1,3);
	split_sreg_range(0X1CE74,"T",0X1,3);
	split_sreg_range(0X1CE86,"T",0X1,3);
	split_sreg_range(0X1CE8E,"T",0X1,3);
	split_sreg_range(0X1CEB8,"T",0X1,3);
	split_sreg_range(0X1CEBC,"T",0X1,3);
	split_sreg_range(0X1CED4,"T",0X1,3);
	split_sreg_range(0X1CEE8,"T",0X1,3);
	split_sreg_range(0X1CEFE,"T",0X1,3);
	split_sreg_range(0X1CF18,"T",0X1,3);
	split_sreg_range(0X1CF20,"T",0X1,3);
	split_sreg_range(0X1CF3A,"T",0X1,3);
	split_sreg_range(0X1CF6C,"T",0X1,3);
	split_sreg_range(0X1CF80,"T",0X1,3);
	split_sreg_range(0X1CF84,"T",0X1,3);
	split_sreg_range(0X1CF88,"T",0X1,3);
	split_sreg_range(0X1CFA6,"T",0X1,3);
	split_sreg_range(0X1CFDC,"T",0X1,3);
	split_sreg_range(0X1D004,"T",0X1,3);
	split_sreg_range(0X1D014,"T",0X1,3);
	split_sreg_range(0X1D018,"T",0X1,3);
	split_sreg_range(0X1D028,"T",0X1,3);
	split_sreg_range(0X1D03C,"T",0X1,3);
	split_sreg_range(0X1D040,"T",0X1,3);
	split_sreg_range(0X1D046,"T",0X1,3);
	split_sreg_range(0X1D0CA,"T",0X1,3);
	split_sreg_range(0X1D0FA,"T",0X1,3);
	split_sreg_range(0X1D114,"T",0X1,3);
	split_sreg_range(0X1D118,"T",0X1,3);
	split_sreg_range(0X1D11C,"T",0X1,3);
	split_sreg_range(0X1D1A2,"T",0X1,3);
	split_sreg_range(0X1D1B6,"T",0X1,3);
	split_sreg_range(0X1D1D6,"T",0X1,3);
	split_sreg_range(0X1D1FC,"T",0X1,3);
	split_sreg_range(0X1D214,"T",0X1,3);
	split_sreg_range(0X1D24E,"T",0X1,3);
	split_sreg_range(0X1D266,"T",0X1,3);
	split_sreg_range(0X1D272,"T",0X1,3);
	split_sreg_range(0X1D276,"T",0X1,3);
	split_sreg_range(0X1D28C,"T",0X1,3);
	split_sreg_range(0X1D290,"T",0X1,3);
	split_sreg_range(0X1D2D4,"T",0X1,3);
	split_sreg_range(0X1D2D8,"T",0X1,3);
	split_sreg_range(0X1D2DA,"T",0X1,3);
	split_sreg_range(0X1D2E8,"T",0X1,3);
	split_sreg_range(0X1D312,"T",0X1,3);
	split_sreg_range(0X1D318,"T",0X1,3);
	split_sreg_range(0X1D322,"T",0X1,3);
	split_sreg_range(0X1D328,"T",0X1,3);
	split_sreg_range(0X1D348,"T",0X1,3);
	split_sreg_range(0X1D388,"T",0X1,3);
	split_sreg_range(0X1D3D0,"T",0X1,3);
	split_sreg_range(0X1D3D4,"T",0X1,3);
	split_sreg_range(0X1D3E4,"T",0X1,3);
	split_sreg_range(0X1D3E8,"T",0X1,3);
	split_sreg_range(0X1D40E,"T",0X1,3);
	split_sreg_range(0X1D462,"T",0X1,3);
	split_sreg_range(0X1D46C,"T",0X1,3);
	split_sreg_range(0X1D4AE,"T",0X1,3);
	split_sreg_range(0X1D4B4,"T",0X1,3);
	split_sreg_range(0X1D4C6,"T",0X1,3);
	split_sreg_range(0X1D4DA,"T",0X1,3);
	split_sreg_range(0X1D4F8,"T",0X1,3);
	split_sreg_range(0X1D512,"T",0X1,3);
	split_sreg_range(0X1D520,"T",0X1,3);
	split_sreg_range(0X1D524,"T",0X1,3);
	split_sreg_range(0X1D53A,"T",0X1,3);
	split_sreg_range(0X1D54E,"T",0X1,3);
	split_sreg_range(0X1D554,"T",0X1,3);
	split_sreg_range(0X1D58E,"T",0X1,3);
	split_sreg_range(0X1D5AE,"T",0X1,3);
	split_sreg_range(0X1D5B2,"T",0X1,3);
	split_sreg_range(0X1D5B8,"T",0X1,3);
	split_sreg_range(0X1D5BE,"T",0X1,3);
	split_sreg_range(0X1D5C2,"T",0X1,3);
	split_sreg_range(0X1D5C6,"T",0X1,3);
	split_sreg_range(0X1D5C8,"T",0X1,3);
	split_sreg_range(0X1D5DA,"T",0X1,3);
	split_sreg_range(0X1D5F6,"T",0X1,3);
	split_sreg_range(0X1D628,"T",0X1,3);
	split_sreg_range(0X1D62C,"T",0X1,3);
	split_sreg_range(0X1D648,"T",0X1,3);
	split_sreg_range(0X1D66C,"T",0X1,3);
	split_sreg_range(0X1D67E,"T",0X1,3);
	split_sreg_range(0X1D682,"T",0X1,3);
	split_sreg_range(0X1D69C,"T",0X1,3);
	split_sreg_range(0X1D6B6,"T",0X1,3);
	split_sreg_range(0X1D6CC,"T",0X1,3);
	split_sreg_range(0X1D6E0,"T",0X1,3);
	split_sreg_range(0X1D6F0,"T",0X1,3);
	split_sreg_range(0X1D70C,"T",0X1,3);
	split_sreg_range(0X1D73C,"T",0X1,3);
	split_sreg_range(0X1D754,"T",0X1,3);
	split_sreg_range(0X1D768,"T",0X1,3);
	split_sreg_range(0X1D776,"T",0X1,3);
	split_sreg_range(0X1D790,"T",0X1,3);
	split_sreg_range(0X1D796,"T",0X1,3);
	split_sreg_range(0X1D7A0,"T",0X1,3);
	split_sreg_range(0X1D7A6,"T",0X1,3);
	split_sreg_range(0X1D7AC,"T",0X1,3);
	split_sreg_range(0X1D7BE,"T",0X1,3);
	split_sreg_range(0X1D7CA,"T",0X1,3);
	split_sreg_range(0X1D7F4,"T",0X1,3);
	split_sreg_range(0X1D810,"T",0X1,3);
	split_sreg_range(0X1D81A,"T",0X1,3);
	split_sreg_range(0X1D828,"T",0X1,3);
	split_sreg_range(0X1D82A,"T",0X1,3);
	split_sreg_range(0X1D866,"T",0X1,3);
	split_sreg_range(0X1D8DA,"T",0X1,3);
	split_sreg_range(0X1D904,"T",0X1,3);
	split_sreg_range(0X1D90E,"T",0X1,3);
	split_sreg_range(0X1D910,"T",0X1,3);
	split_sreg_range(0X1D916,"T",0X1,3);
	split_sreg_range(0X1D928,"T",0X1,3);
	split_sreg_range(0X1D936,"T",0X1,3);
	split_sreg_range(0X1D93A,"T",0X1,3);
	split_sreg_range(0X1D95A,"T",0X1,3);
	split_sreg_range(0X1D966,"T",0X1,3);
	split_sreg_range(0X1D974,"T",0X1,3);
	split_sreg_range(0X1D97C,"T",0X1,3);
	split_sreg_range(0X1D99E,"T",0X1,3);
	split_sreg_range(0X1D9A2,"T",0X1,3);
	split_sreg_range(0X1D9D4,"T",0X1,3);
	split_sreg_range(0X1D9F6,"T",0X1,3);
	split_sreg_range(0X1DA08,"T",0X1,3);
	split_sreg_range(0X1DA18,"T",0X1,3);
	split_sreg_range(0X1DA1A,"T",0X1,3);
	split_sreg_range(0X1DA22,"T",0X1,3);
	split_sreg_range(0X1DA40,"T",0X1,3);
	split_sreg_range(0X1DA54,"T",0X1,3);
	split_sreg_range(0X1DA56,"T",0X1,3);
	split_sreg_range(0X1DA60,"T",0X1,3);
	split_sreg_range(0X1DA6A,"T",0X1,3);
	split_sreg_range(0X1DA72,"T",0X1,3);
	split_sreg_range(0X1DA7E,"T",0X1,3);
	split_sreg_range(0X1DA82,"T",0X1,3);
	split_sreg_range(0X1DA8E,"T",0X1,3);
	split_sreg_range(0X1DA94,"T",0X1,3);
	split_sreg_range(0X1DA9E,"T",0X1,3);
	split_sreg_range(0X1DAAA,"T",0X1,3);
	split_sreg_range(0X1DAB4,"T",0X1,3);
	split_sreg_range(0X1DAF8,"T",0X1,3);
	split_sreg_range(0X1DB0E,"T",0X1,3);
	split_sreg_range(0X1DB22,"T",0X1,3);
	split_sreg_range(0X1DB24,"T",0X1,3);
	split_sreg_range(0X1DB54,"T",0X1,3);
	split_sreg_range(0X1DB58,"T",0X1,3);
	split_sreg_range(0X1DB5A,"T",0X1,3);
	split_sreg_range(0X1DB5E,"T",0X1,3);
	split_sreg_range(0X1DB78,"T",0X1,3);
	split_sreg_range(0X1DB90,"T",0X1,3);
	split_sreg_range(0X1DBAC,"T",0X1,3);
	split_sreg_range(0X1DBB4,"T",0X1,3);
	split_sreg_range(0X1DC14,"T",0X1,3);
	split_sreg_range(0X1DC2A,"T",0X1,3);
	split_sreg_range(0X1DC2E,"T",0X1,3);
	split_sreg_range(0X1DC30,"T",0X1,3);
	split_sreg_range(0X1DC34,"T",0X1,3);
	split_sreg_range(0X1DC58,"T",0X1,3);
	split_sreg_range(0X1DC7C,"T",0X1,3);
	split_sreg_range(0X1DCA4,"T",0X1,3);
	split_sreg_range(0X1DCC0,"T",0X1,3);
	split_sreg_range(0X1DCC4,"T",0X1,3);
	split_sreg_range(0X1DCC8,"T",0X1,3);
	split_sreg_range(0X1DCD0,"T",0X1,3);
	split_sreg_range(0X1DCD6,"T",0X1,3);
	split_sreg_range(0X1DCDC,"T",0X1,3);
	split_sreg_range(0X1DCE2,"T",0X1,3);
	split_sreg_range(0X1DCE6,"T",0X1,3);
	split_sreg_range(0X1DCEC,"T",0X1,3);
	split_sreg_range(0X1DD08,"T",0X1,3);
	split_sreg_range(0X1DD14,"T",0X1,3);
	split_sreg_range(0X1DD16,"T",0X1,3);
	split_sreg_range(0X1DD18,"T",0X1,3);
	split_sreg_range(0X1DD34,"T",0X1,3);
	split_sreg_range(0X1DD40,"T",0X1,3);
	split_sreg_range(0X1DD42,"T",0X1,3);
	split_sreg_range(0X1DD44,"T",0X1,3);
	split_sreg_range(0X1DD86,"T",0X1,3);
	split_sreg_range(0X1DDBC,"T",0X1,3);
	split_sreg_range(0X1DDFC,"T",0X1,3);
	split_sreg_range(0X1DE04,"T",0X1,3);
	split_sreg_range(0X1DE06,"T",0X1,3);
	split_sreg_range(0X1DE48,"T",0X1,3);
	split_sreg_range(0X1DE7E,"T",0X1,3);
	split_sreg_range(0X1DEBE,"T",0X1,3);
	split_sreg_range(0X1DEC6,"T",0X1,3);
	split_sreg_range(0X1DEC8,"T",0X1,3);
	split_sreg_range(0X1DF1A,"T",0X1,3);
	split_sreg_range(0X1DF1C,"T",0X1,3);
	split_sreg_range(0X1DF72,"T",0X1,3);
	split_sreg_range(0X1DF74,"T",0X1,3);
	split_sreg_range(0X1DFEC,"T",0X1,3);
	split_sreg_range(0X1DFF0,"T",0X1,3);
	split_sreg_range(0X1E040,"T",0X1,3);
	split_sreg_range(0X1E048,"T",0X1,3);
	split_sreg_range(0X1E04C,"T",0X1,3);
	split_sreg_range(0X1E0A2,"T",0X1,3);
	split_sreg_range(0X1E0A8,"T",0X1,3);
	split_sreg_range(0X1E0FE,"T",0X1,3);
	split_sreg_range(0X1E100,"T",0X1,3);
	split_sreg_range(0X1E108,"T",0X1,3);
	split_sreg_range(0X1E148,"T",0X1,3);
	split_sreg_range(0X1E15C,"T",0X1,3);
	split_sreg_range(0X1E168,"T",0X1,3);
	split_sreg_range(0X1E16C,"T",0X1,3);
	split_sreg_range(0X1E18E,"T",0X1,3);
	split_sreg_range(0X1E196,"T",0X1,3);
	split_sreg_range(0X1E198,"T",0X1,3);
	split_sreg_range(0X1E1AC,"T",0X1,3);
	split_sreg_range(0X1E1B4,"T",0X1,3);
	split_sreg_range(0X1E1C8,"T",0X1,3);
	split_sreg_range(0X1E1CA,"T",0X1,3);
	split_sreg_range(0X1E1CE,"T",0X1,3);
	split_sreg_range(0X1E1DE,"T",0X1,3);
	split_sreg_range(0X1E1E0,"T",0X1,3);
	split_sreg_range(0X1E1E4,"T",0X1,3);
	split_sreg_range(0X1E1E8,"T",0X1,3);
	split_sreg_range(0X1E1EE,"T",0X1,3);
	split_sreg_range(0X1E206,"T",0X1,3);
	split_sreg_range(0X1E220,"T",0X1,3);
	split_sreg_range(0X1E238,"T",0X1,3);
	split_sreg_range(0X1E258,"T",0X1,3);
	split_sreg_range(0X1E27E,"T",0X1,3);
	split_sreg_range(0X1E28A,"T",0X1,3);
	split_sreg_range(0X1E294,"T",0X1,3);
	split_sreg_range(0X1E296,"T",0X1,3);
	split_sreg_range(0X1E2B0,"T",0X1,3);
	split_sreg_range(0X1E2B4,"T",0X1,3);
	split_sreg_range(0X1E2B8,"T",0X1,3);
	split_sreg_range(0X1E2BC,"T",0X1,3);
	split_sreg_range(0X1E2E4,"T",0X1,3);
	split_sreg_range(0X1E2F2,"T",0X1,3);
	split_sreg_range(0X1E332,"T",0X1,3);
	split_sreg_range(0X1E336,"T",0X1,3);
	split_sreg_range(0X1E338,"T",0X1,3);
	split_sreg_range(0X1E366,"T",0X1,3);
	split_sreg_range(0X1E380,"T",0X1,3);
	split_sreg_range(0X1E38E,"T",0X1,3);
	split_sreg_range(0X1E3A4,"T",0X1,3);
	split_sreg_range(0X1E3A6,"T",0X1,3);
	split_sreg_range(0X1E3AE,"T",0X1,3);
	split_sreg_range(0X1E3D4,"T",0X1,3);
	split_sreg_range(0X1E3EA,"T",0X1,3);
	split_sreg_range(0X1E3EC,"T",0X1,3);
	split_sreg_range(0X1E3F4,"T",0X1,3);
	split_sreg_range(0X1E41A,"T",0X1,3);
	split_sreg_range(0X1E43E,"T",0X1,3);
	split_sreg_range(0X1E452,"T",0X1,3);
	split_sreg_range(0X1E456,"T",0X1,3);
	split_sreg_range(0X1E45A,"T",0X1,3);
	split_sreg_range(0X1E46A,"T",0X1,3);
	split_sreg_range(0X1E46C,"T",0X1,3);
	split_sreg_range(0X1E476,"T",0X1,3);
	split_sreg_range(0X1E478,"T",0X1,3);
	split_sreg_range(0X1E47A,"T",0X1,3);
	split_sreg_range(0X1E47E,"T",0X1,3);
	split_sreg_range(0X1E490,"T",0X1,3);
	split_sreg_range(0X1E498,"T",0X1,3);
	split_sreg_range(0X1E4B2,"T",0X1,3);
	split_sreg_range(0X1E4B8,"T",0X1,3);
	split_sreg_range(0X1E4BC,"T",0X1,3);
	split_sreg_range(0X1E4C0,"T",0X1,3);
	split_sreg_range(0X1E4C4,"T",0X1,3);
	split_sreg_range(0X1E4CC,"T",0X1,3);
	split_sreg_range(0X1E4F0,"T",0X1,3);
	split_sreg_range(0X1E4F6,"T",0X1,3);
	split_sreg_range(0X1E4FA,"T",0X1,3);
	split_sreg_range(0X1E4FE,"T",0X1,3);
	split_sreg_range(0X1E502,"T",0X1,3);
	split_sreg_range(0X1E50A,"T",0X1,3);
	split_sreg_range(0X1E524,"T",0X1,3);
	split_sreg_range(0X1E52A,"T",0X1,3);
	split_sreg_range(0X1E52E,"T",0X1,3);
	split_sreg_range(0X1E532,"T",0X1,3);
	split_sreg_range(0X1E536,"T",0X1,3);
	split_sreg_range(0X1E53E,"T",0X1,3);
	split_sreg_range(0X1E562,"T",0X1,3);
	split_sreg_range(0X1E568,"T",0X1,3);
	split_sreg_range(0X1E56C,"T",0X1,3);
	split_sreg_range(0X1E570,"T",0X1,3);
	split_sreg_range(0X1E586,"T",0X1,3);
	split_sreg_range(0X1E59C,"T",0X1,3);
	split_sreg_range(0X1E5A0,"T",0X1,3);
	split_sreg_range(0X1E5A4,"T",0X1,3);
	split_sreg_range(0X1E5A8,"T",0X1,3);
	split_sreg_range(0X1E5AC,"T",0X1,3);
	split_sreg_range(0X1E5B0,"T",0X1,3);
	split_sreg_range(0X1E5B4,"T",0X1,3);
	split_sreg_range(0X1E5DA,"T",0X1,3);
	split_sreg_range(0X1E5DE,"T",0X1,3);
	split_sreg_range(0X1E5E2,"T",0X1,3);
	split_sreg_range(0X1E602,"T",0X1,3);
	split_sreg_range(0X1E61A,"T",0X1,3);
	split_sreg_range(0X1E620,"T",0X1,3);
	split_sreg_range(0X1E63C,"T",0X1,3);
	split_sreg_range(0X1E640,"T",0X1,3);
	split_sreg_range(0X1E65C,"T",0X1,3);
	split_sreg_range(0X1E674,"T",0X1,3);
	split_sreg_range(0X1E68A,"T",0X1,3);
	split_sreg_range(0X1E6D0,"T",0X1,3);
	split_sreg_range(0X1E6E8,"T",0X1,3);
	split_sreg_range(0X1E6EC,"T",0X1,3);
	split_sreg_range(0X1E6F6,"T",0X1,3);
	split_sreg_range(0X1E708,"T",0X1,3);
	split_sreg_range(0X1E712,"T",0X1,3);
	split_sreg_range(0X1E72A,"T",0X1,3);
	split_sreg_range(0X1E732,"T",0X1,3);
	split_sreg_range(0X1E734,"T",0X1,3);
	split_sreg_range(0X1E74C,"T",0X1,3);
	split_sreg_range(0X1E75C,"T",0X1,3);
	split_sreg_range(0X1E75E,"T",0X1,3);
	split_sreg_range(0X1E760,"T",0X1,3);
	split_sreg_range(0X1E766,"T",0X1,3);
	split_sreg_range(0X1E77E,"T",0X1,3);
	split_sreg_range(0X1E796,"T",0X1,3);
	split_sreg_range(0X1E79C,"T",0X1,3);
	split_sreg_range(0X1E79E,"T",0X1,3);
	split_sreg_range(0X1E7B8,"T",0X1,3);
	split_sreg_range(0X1E7C6,"T",0X1,3);
	split_sreg_range(0X1E7CE,"T",0X1,3);
	split_sreg_range(0X1E7D4,"T",0X1,3);
	split_sreg_range(0X1E7D6,"T",0X1,3);
	split_sreg_range(0X1E7E6,"T",0X1,3);
	split_sreg_range(0X1E7EE,"T",0X1,3);
	split_sreg_range(0X1E7F0,"T",0X1,3);
	split_sreg_range(0X1E808,"T",0X1,3);
	split_sreg_range(0X1E810,"T",0X1,3);
	split_sreg_range(0X1E812,"T",0X1,3);
	split_sreg_range(0X1E82E,"T",0X1,3);
	split_sreg_range(0X1E83E,"T",0X1,3);
	split_sreg_range(0X1E844,"T",0X1,3);
	split_sreg_range(0X1E84C,"T",0X1,3);
	split_sreg_range(0X1E850,"T",0X1,3);
	split_sreg_range(0X1E852,"T",0X1,3);
	split_sreg_range(0X1E880,"T",0X1,3);
	split_sreg_range(0X1E88A,"T",0X1,3);
	split_sreg_range(0X1E890,"T",0X1,3);
	split_sreg_range(0X1E89E,"T",0X1,3);
	split_sreg_range(0X1E8B8,"T",0X1,3);
	split_sreg_range(0X1E8BA,"T",0X1,3);
	split_sreg_range(0X1E8BE,"T",0X1,3);
	split_sreg_range(0X1E8C8,"T",0X1,3);
	split_sreg_range(0X1E8CC,"T",0X1,3);
	split_sreg_range(0X1E8E6,"T",0X1,3);
	split_sreg_range(0X1E8F0,"T",0X1,3);
	split_sreg_range(0X1E8F4,"T",0X1,3);
	split_sreg_range(0X1E90A,"T",0X1,3);
	split_sreg_range(0X1E90C,"T",0X1,3);
	split_sreg_range(0X1E92A,"T",0X1,3);
	split_sreg_range(0X1E93E,"T",0X1,3);
	split_sreg_range(0X1E940,"T",0X1,3);
	split_sreg_range(0X1E944,"T",0X1,3);
	split_sreg_range(0X1E950,"T",0X1,3);
	split_sreg_range(0X1E994,"T",0X1,3);
	split_sreg_range(0X1E996,"T",0X1,3);
	split_sreg_range(0X1EA1C,"T",0X1,3);
	split_sreg_range(0X1EA1E,"T",0X1,3);
	split_sreg_range(0X1EA44,"T",0X1,3);
	split_sreg_range(0X1EA46,"T",0X1,3);
	split_sreg_range(0X1EA74,"T",0X1,3);
	split_sreg_range(0X1EA76,"T",0X1,3);
	split_sreg_range(0X1EAAE,"T",0X1,3);
	split_sreg_range(0X1EAB0,"T",0X1,3);
	split_sreg_range(0X1EB00,"T",0X1,3);
	split_sreg_range(0X1EB0A,"T",0X1,3);
	split_sreg_range(0X1EB0C,"T",0X1,3);
	split_sreg_range(0X1EB1E,"T",0X1,3);
	split_sreg_range(0X1EB24,"T",0X1,3);
	split_sreg_range(0X1EB50,"T",0X1,3);
	split_sreg_range(0X1EB56,"T",0X1,3);
	split_sreg_range(0X1EB78,"T",0X1,3);
	split_sreg_range(0X1EB82,"T",0X1,3);
	split_sreg_range(0X1EBA6,"T",0X1,3);
	split_sreg_range(0X1EBB2,"T",0X1,3);
	split_sreg_range(0X1EBC4,"T",0X1,3);
	split_sreg_range(0X1EBC8,"T",0X1,3);
	split_sreg_range(0X1EBCA,"T",0X1,3);
	split_sreg_range(0X1EBD0,"T",0X1,3);
	split_sreg_range(0X1EBD6,"T",0X1,3);
	split_sreg_range(0X1EBDC,"T",0X1,3);
	split_sreg_range(0X1EBE2,"T",0X1,3);
	split_sreg_range(0X1EBE8,"T",0X1,3);
	split_sreg_range(0X1EBFE,"T",0X1,3);
	split_sreg_range(0X1EC00,"T",0X1,3);
	split_sreg_range(0X1EC06,"T",0X1,3);
	split_sreg_range(0X1EC0E,"T",0X1,3);
	split_sreg_range(0X1EC26,"T",0X1,3);
	split_sreg_range(0X1EC2A,"T",0X1,3);
	split_sreg_range(0X1EC4E,"T",0X1,3);
	split_sreg_range(0X1EC68,"T",0X1,3);
	split_sreg_range(0X1EC6A,"T",0X1,3);
	split_sreg_range(0X1EC76,"T",0X1,3);
	split_sreg_range(0X1EC7C,"T",0X1,3);
	split_sreg_range(0X1EC82,"T",0X1,3);
	split_sreg_range(0X1EC8A,"T",0X1,3);
	split_sreg_range(0X1ECBA,"T",0X1,3);
	split_sreg_range(0X1ECC0,"T",0X1,3);
	split_sreg_range(0X1ECD0,"T",0X1,3);
	split_sreg_range(0X1ECD6,"T",0X1,3);
	split_sreg_range(0X1ECDC,"T",0X1,3);
	split_sreg_range(0X1ECDE,"T",0X1,3);
	split_sreg_range(0X1ECE8,"T",0X1,3);
	split_sreg_range(0X1ED0E,"T",0X1,3);
	split_sreg_range(0X1ED12,"T",0X1,3);
	split_sreg_range(0X1ED16,"T",0X1,3);
	split_sreg_range(0X1ED1A,"T",0X1,3);
	split_sreg_range(0X1ED36,"T",0X1,3);
	split_sreg_range(0X1ED52,"T",0X1,3);
	split_sreg_range(0X1ED68,"T",0X1,3);
	split_sreg_range(0X1ED6A,"T",0X1,3);
	split_sreg_range(0X1ED70,"T",0X1,3);
	split_sreg_range(0X1ED8A,"T",0X1,3);
	split_sreg_range(0X1ED8C,"T",0X1,3);
	split_sreg_range(0X1ED90,"T",0X1,3);
	split_sreg_range(0X1EDA8,"T",0X1,3);
	split_sreg_range(0X1EDDA,"T",0X1,3);
	split_sreg_range(0X1EDEE,"T",0X1,3);
	split_sreg_range(0X1EE12,"T",0X1,3);
	split_sreg_range(0X1EE14,"T",0X1,3);
	split_sreg_range(0X1EE34,"T",0X1,3);
	split_sreg_range(0X1EE4A,"T",0X1,3);
	split_sreg_range(0X1EE54,"T",0X1,3);
	split_sreg_range(0X1EE62,"T",0X1,3);
	split_sreg_range(0X1EE78,"T",0X1,3);
	split_sreg_range(0X1EE94,"T",0X1,3);
	split_sreg_range(0X1EE9E,"T",0X1,3);
	split_sreg_range(0X1EEA6,"T",0X1,3);
	split_sreg_range(0X1EEE6,"T",0X1,3);
	split_sreg_range(0X1EF08,"T",0X1,3);
	split_sreg_range(0X1EF22,"T",0X1,3);
	split_sreg_range(0X1EF66,"T",0X1,3);
	split_sreg_range(0X1EF6E,"T",0X1,3);
	split_sreg_range(0X1EF72,"T",0X1,3);
	split_sreg_range(0X1EF9E,"T",0X1,3);
	split_sreg_range(0X1EFA0,"T",0X1,3);
	split_sreg_range(0X1EFAE,"T",0X1,3);
	split_sreg_range(0X1EFB6,"T",0X1,3);
	split_sreg_range(0X1EFCE,"T",0X1,3);
	split_sreg_range(0X1EFD0,"T",0X1,3);
	split_sreg_range(0X1EFE2,"T",0X1,3);
	split_sreg_range(0X1EFE8,"T",0X1,3);
	split_sreg_range(0X1EFEE,"T",0X1,3);
	split_sreg_range(0X1EFF0,"T",0X1,3);
	split_sreg_range(0X1EFF8,"T",0X1,3);
	split_sreg_range(0X1F000,"T",0X1,3);
	split_sreg_range(0X1F002,"T",0X1,3);
	split_sreg_range(0X1F006,"T",0X1,3);
	split_sreg_range(0X1F00C,"T",0X1,3);
	split_sreg_range(0X1F012,"T",0X1,3);
	split_sreg_range(0X1F014,"T",0X1,3);
	split_sreg_range(0X1F018,"T",0X1,3);
	split_sreg_range(0X1F022,"T",0X1,3);
	split_sreg_range(0X1F026,"T",0X1,3);
	split_sreg_range(0X1F02E,"T",0X1,3);
	split_sreg_range(0X1F030,"T",0X1,3);
	split_sreg_range(0X1F06C,"T",0X1,3);
	split_sreg_range(0X1F07E,"T",0X1,3);
	split_sreg_range(0X1F084,"T",0X1,3);
	split_sreg_range(0X1F08A,"T",0X1,3);
	split_sreg_range(0X1F08E,"T",0X1,3);
	split_sreg_range(0X1F094,"T",0X1,3);
	split_sreg_range(0X1F0A0,"T",0X1,3);
	split_sreg_range(0X1F0A4,"T",0X1,3);
	split_sreg_range(0X1F0AA,"T",0X1,3);
	split_sreg_range(0X1F0BE,"T",0X1,3);
	split_sreg_range(0X1F0C2,"T",0X1,3);
	split_sreg_range(0X1F0C4,"T",0X1,3);
	split_sreg_range(0X1F0DC,"T",0X1,3);
	split_sreg_range(0X1F0E8,"T",0X1,3);
	split_sreg_range(0X1F0EA,"T",0X1,3);
	split_sreg_range(0X1F0F6,"T",0X1,3);
	split_sreg_range(0X1F100,"T",0X1,3);
	split_sreg_range(0X1F10C,"T",0X1,3);
	split_sreg_range(0X1F11C,"T",0X1,3);
	split_sreg_range(0X1F12C,"T",0X1,3);
	split_sreg_range(0X1F148,"T",0X1,3);
	split_sreg_range(0X1F158,"T",0X1,3);
	split_sreg_range(0X1F162,"T",0X1,3);
	split_sreg_range(0X1F16E,"T",0X1,3);
	split_sreg_range(0X1F17C,"T",0X1,3);
	split_sreg_range(0X1F198,"T",0X1,3);
	split_sreg_range(0X1F1B0,"T",0X1,3);
	split_sreg_range(0X1F1D0,"T",0X1,3);
	split_sreg_range(0X1F1D4,"T",0X1,3);
	split_sreg_range(0X1F1E0,"T",0X1,3);
	split_sreg_range(0X1F1E2,"T",0X1,3);
	split_sreg_range(0X1F1E4,"T",0X1,3);
	split_sreg_range(0X1F216,"T",0X1,3);
	split_sreg_range(0X1F22C,"T",0X1,3);
	split_sreg_range(0X1F23A,"T",0X1,3);
	split_sreg_range(0X1F24A,"T",0X1,3);
	split_sreg_range(0X1F258,"T",0X1,3);
	split_sreg_range(0X1F26E,"T",0X1,3);
	split_sreg_range(0X1F286,"T",0X1,3);
	split_sreg_range(0X1F288,"T",0X1,3);
	split_sreg_range(0X1F28E,"T",0X1,3);
	split_sreg_range(0X1F294,"T",0X1,3);
	split_sreg_range(0X1F298,"T",0X1,3);
	split_sreg_range(0X1F29C,"T",0X1,3);
	split_sreg_range(0X1F2AC,"T",0X1,3);
	split_sreg_range(0X1F2B8,"T",0X1,3);
	split_sreg_range(0X1F2E0,"T",0X1,3);
	split_sreg_range(0X1F31A,"T",0X1,3);
	split_sreg_range(0X1F31C,"T",0X1,3);
	split_sreg_range(0X1F31E,"T",0X1,3);
	split_sreg_range(0X1F324,"T",0X1,3);
	split_sreg_range(0X1F33A,"T",0X1,3);
	split_sreg_range(0X1F348,"T",0X1,3);
	split_sreg_range(0X1F36C,"T",0X1,3);
	split_sreg_range(0X1F37E,"T",0X1,3);
	split_sreg_range(0X1F380,"T",0X1,3);
	split_sreg_range(0X1F394,"T",0X1,3);
	split_sreg_range(0X1F3A8,"T",0X1,3);
	split_sreg_range(0X1F3BC,"T",0X1,3);
	split_sreg_range(0X1F3D0,"T",0X1,3);
	split_sreg_range(0X1F3E8,"T",0X1,3);
	split_sreg_range(0X1F3FC,"T",0X1,3);
	split_sreg_range(0X1F40E,"T",0X1,3);
	split_sreg_range(0X1F418,"T",0X1,3);
	split_sreg_range(0X1F436,"T",0X1,3);
	split_sreg_range(0X1F43A,"T",0X1,3);
	split_sreg_range(0X1F45A,"T",0X1,3);
	split_sreg_range(0X1F464,"T",0X1,3);
	split_sreg_range(0X1F47C,"T",0X1,3);
	split_sreg_range(0X1F4EC,"T",0X1,3);
	split_sreg_range(0X1F4F0,"T",0X1,3);
	split_sreg_range(0X1F4F8,"T",0X1,3);
	split_sreg_range(0X1F500,"T",0X1,3);
	split_sreg_range(0X1F504,"T",0X1,3);
	split_sreg_range(0X1F506,"T",0X1,3);
	split_sreg_range(0X1F514,"T",0X1,3);
	split_sreg_range(0X1F518,"T",0X1,3);
	split_sreg_range(0X1F51A,"T",0X1,3);
	split_sreg_range(0X1F51C,"T",0X1,3);
	split_sreg_range(0X1F52A,"T",0X1,3);
	split_sreg_range(0X1F52E,"T",0X1,3);
	split_sreg_range(0X1F530,"T",0X1,3);
	split_sreg_range(0X1F532,"T",0X1,3);
	split_sreg_range(0X1F534,"T",0X1,3);
	split_sreg_range(0X1F536,"T",0X1,3);
	split_sreg_range(0X1F538,"T",0X1,3);
	split_sreg_range(0X1F53A,"T",0X1,3);
	split_sreg_range(0X1F53C,"T",0X1,3);
	split_sreg_range(0X1F53E,"T",0X1,3);
	split_sreg_range(0X1F540,"T",0X1,3);
	split_sreg_range(0X1F542,"T",0X1,3);
	split_sreg_range(0X1F548,"T",0X1,3);
	split_sreg_range(0X1F55C,"T",0X1,3);
	split_sreg_range(0X1F560,"T",0X1,3);
	split_sreg_range(0X1F576,"T",0X1,3);
	split_sreg_range(0X1F59A,"T",0X1,3);
	split_sreg_range(0X1F5AE,"T",0X1,3);
	split_sreg_range(0X1F5D4,"T",0X1,3);
	split_sreg_range(0X1F5E0,"T",0X1,3);
	split_sreg_range(0X1F608,"T",0X1,3);
	split_sreg_range(0X1F62E,"T",0X1,3);
	split_sreg_range(0X1F638,"T",0X1,3);
	split_sreg_range(0X1F63A,"T",0X1,3);
	split_sreg_range(0X1F64C,"T",0X1,3);
	split_sreg_range(0X1F668,"T",0X1,3);
	split_sreg_range(0X1F66E,"T",0X1,3);
	split_sreg_range(0X1F678,"T",0X1,3);
	split_sreg_range(0X1F68A,"T",0X1,3);
	split_sreg_range(0X1F69C,"T",0X1,3);
	split_sreg_range(0X1F6CC,"T",0X1,3);
	split_sreg_range(0X1F6DC,"T",0X1,3);
	split_sreg_range(0X1F6FC,"T",0X1,3);
	split_sreg_range(0X1F722,"T",0X1,3);
	split_sreg_range(0X1F726,"T",0X1,3);
	split_sreg_range(0X1F748,"T",0X1,3);
	split_sreg_range(0X1F74A,"T",0X1,3);
	split_sreg_range(0X1F770,"T",0X1,3);
	split_sreg_range(0X1F774,"T",0X1,3);
	split_sreg_range(0X1F798,"T",0X1,3);
	split_sreg_range(0X1F7A8,"T",0X1,3);
	split_sreg_range(0X1F7B0,"T",0X1,3);
	split_sreg_range(0X1F7B6,"T",0X1,3);
	split_sreg_range(0X1F7CA,"T",0X1,3);
	split_sreg_range(0X1F7D2,"T",0X1,3);
	split_sreg_range(0X1F7D6,"T",0X1,3);
	split_sreg_range(0X1F7D8,"T",0X1,3);
	split_sreg_range(0X1F7FE,"T",0X1,3);
	split_sreg_range(0X1F80E,"T",0X1,3);
	split_sreg_range(0X1F810,"T",0X1,3);
	split_sreg_range(0X1F828,"T",0X1,3);
	split_sreg_range(0X1F84A,"T",0X1,3);
	split_sreg_range(0X1F84C,"T",0X1,3);
	split_sreg_range(0X1F8AA,"T",0X1,3);
	split_sreg_range(0X1F8AC,"T",0X1,3);
	split_sreg_range(0X1F8B0,"T",0X1,3);
	split_sreg_range(0X1F8FA,"T",0X1,3);
	split_sreg_range(0X1F904,"T",0X1,3);
	split_sreg_range(0X1F936,"T",0X1,3);
	split_sreg_range(0X1F942,"T",0X1,3);
	split_sreg_range(0X1F94E,"T",0X1,3);
	split_sreg_range(0X1F958,"T",0X1,3);
	split_sreg_range(0X1F962,"T",0X1,3);
	split_sreg_range(0X1F96C,"T",0X1,3);
	split_sreg_range(0X1F976,"T",0X1,3);
	split_sreg_range(0X1F980,"T",0X1,3);
	split_sreg_range(0X1F98A,"T",0X1,3);
	split_sreg_range(0X1F994,"T",0X1,3);
	split_sreg_range(0X1F99E,"T",0X1,3);
	split_sreg_range(0X1F9A8,"T",0X1,3);
	split_sreg_range(0X1F9B2,"T",0X1,3);
	split_sreg_range(0X1F9C2,"T",0X1,3);
	split_sreg_range(0X1F9D6,"T",0X1,3);
	split_sreg_range(0X1F9E0,"T",0X1,3);
	split_sreg_range(0X1F9F0,"T",0X1,3);
	split_sreg_range(0X1F9FA,"T",0X1,3);
	split_sreg_range(0X1FA04,"T",0X1,3);
	split_sreg_range(0X1FA08,"T",0X1,3);
	split_sreg_range(0X1FA28,"T",0X1,3);
	split_sreg_range(0X1FA2A,"T",0X1,3);
	split_sreg_range(0X1FA30,"T",0X1,3);
	split_sreg_range(0X1FA54,"T",0X1,3);
	split_sreg_range(0X1FA5A,"T",0X1,3);
	split_sreg_range(0X1FA70,"T",0X1,3);
	split_sreg_range(0X1FA76,"T",0X1,3);
	split_sreg_range(0X1FA7A,"T",0X1,3);
	split_sreg_range(0X1FAAA,"T",0X1,3);
	split_sreg_range(0X1FAAE,"T",0X1,3);
	split_sreg_range(0X1FACE,"T",0X1,3);
	split_sreg_range(0X1FAD4,"T",0X1,3);
	split_sreg_range(0X1FADA,"T",0X1,3);
	split_sreg_range(0X1FAE2,"T",0X1,3);
	split_sreg_range(0X1FAEA,"T",0X1,3);
	split_sreg_range(0X1FB0C,"T",0X1,3);
	split_sreg_range(0X1FB10,"T",0X1,3);
	split_sreg_range(0X1FB2A,"T",0X1,3);
	split_sreg_range(0X1FB30,"T",0X1,3);
	split_sreg_range(0X1FBB6,"T",0X1,3);
	split_sreg_range(0X1FBC4,"T",0X1,3);
	split_sreg_range(0X1FBD2,"T",0X1,3);
	split_sreg_range(0X1FBD4,"T",0X1,3);
	split_sreg_range(0X1FBDA,"T",0X1,3);
	split_sreg_range(0X1FC00,"T",0X1,3);
	split_sreg_range(0X1FC28,"T",0X1,3);
	split_sreg_range(0X1FC50,"T",0X1,3);
	split_sreg_range(0X1FC66,"T",0X1,3);
	split_sreg_range(0X1FC7C,"T",0X1,3);
	split_sreg_range(0X1FC7E,"T",0X1,3);
	split_sreg_range(0X1FC94,"T",0X1,3);
	split_sreg_range(0X1FCA2,"T",0X1,3);
	split_sreg_range(0X1FCA6,"T",0X1,3);
	split_sreg_range(0X1FCC4,"T",0X1,3);
	split_sreg_range(0X1FCC8,"T",0X1,3);
	split_sreg_range(0X1FCCE,"T",0X1,3);
	split_sreg_range(0X1FCD0,"T",0X1,3);
	split_sreg_range(0X1FCDE,"T",0X1,3);
	split_sreg_range(0X1FCE2,"T",0X1,3);
	split_sreg_range(0X1FCE8,"T",0X1,3);
	split_sreg_range(0X1FCFC,"T",0X1,3);
	split_sreg_range(0X1FD0A,"T",0X1,3);
	split_sreg_range(0X1FD2E,"T",0X1,3);
	split_sreg_range(0X1FD50,"T",0X1,3);
	split_sreg_range(0X1FD5C,"T",0X1,3);
	split_sreg_range(0X1FD62,"T",0X1,3);
	split_sreg_range(0X1FD6A,"T",0X1,3);
	split_sreg_range(0X1FD84,"T",0X1,3);
	split_sreg_range(0X1FD88,"T",0X1,3);
	split_sreg_range(0X1FD8A,"T",0X1,3);
	split_sreg_range(0X1FD90,"T",0X1,3);
	split_sreg_range(0X1FDA4,"T",0X1,3);
	split_sreg_range(0X1FDA6,"T",0X1,3);
	split_sreg_range(0X1FDA8,"T",0X1,3);
	split_sreg_range(0X1FE04,"T",0X1,3);
	split_sreg_range(0X1FE40,"T",0X1,3);
	split_sreg_range(0X1FE52,"T",0X1,3);
	split_sreg_range(0X1FE6A,"T",0X1,3);
	split_sreg_range(0X1FE7C,"T",0X1,3);
	split_sreg_range(0X1FE8E,"T",0X1,3);
	split_sreg_range(0X1FEA0,"T",0X1,3);
	split_sreg_range(0X1FEB2,"T",0X1,3);
	split_sreg_range(0X1FEC6,"T",0X1,3);
	split_sreg_range(0X1FED4,"T",0X1,3);
	split_sreg_range(0X1FEDA,"T",0X1,3);
	split_sreg_range(0X1FEDE,"T",0X1,3);
	split_sreg_range(0X1FEE6,"T",0X1,3);
	split_sreg_range(0X1FEFC,"T",0X1,3);
	split_sreg_range(0X1FF0A,"T",0X1,3);
	split_sreg_range(0X1FF30,"T",0X1,3);
	split_sreg_range(0X1FF44,"T",0X1,3);
	split_sreg_range(0X1FF62,"T",0X1,3);
	split_sreg_range(0X1FF64,"T",0X1,3);
	split_sreg_range(0X1FFD6,"T",0X1,3);
	split_sreg_range(0X1FFEC,"T",0X1,3);
	split_sreg_range(0X1FFFA,"T",0X1,3);
	split_sreg_range(0X20020,"T",0X1,3);
	split_sreg_range(0X20034,"T",0X1,3);
	split_sreg_range(0X20052,"T",0X1,3);
	split_sreg_range(0X20054,"T",0X1,3);
	split_sreg_range(0X200C6,"T",0X1,3);
	split_sreg_range(0X200E0,"T",0X1,3);
	split_sreg_range(0X20108,"T",0X1,3);
	split_sreg_range(0X20132,"T",0X1,3);
	split_sreg_range(0X20136,"T",0X1,3);
	split_sreg_range(0X20148,"T",0X1,3);
	split_sreg_range(0X2015C,"T",0X1,3);
	split_sreg_range(0X20170,"T",0X1,3);
	split_sreg_range(0X20188,"T",0X1,3);
	split_sreg_range(0X2019E,"T",0X1,3);
	split_sreg_range(0X201B4,"T",0X1,3);
	split_sreg_range(0X201D0,"T",0X1,3);
	split_sreg_range(0X201D8,"T",0X1,3);
	split_sreg_range(0X201EE,"T",0X1,3);
	split_sreg_range(0X20216,"T",0X1,3);
	split_sreg_range(0X20250,"T",0X1,3);
	split_sreg_range(0X2026A,"T",0X1,3);
	split_sreg_range(0X2028A,"T",0X1,3);
	split_sreg_range(0X2028E,"T",0X1,3);
	split_sreg_range(0X202A6,"T",0X1,3);
	split_sreg_range(0X202F2,"T",0X1,3);
	split_sreg_range(0X2030A,"T",0X1,3);
	split_sreg_range(0X20356,"T",0X1,3);
	split_sreg_range(0X20372,"T",0X1,3);
	split_sreg_range(0X2039E,"T",0X1,3);
	split_sreg_range(0X203A2,"T",0X1,3);
	split_sreg_range(0X203B4,"T",0X1,3);
	split_sreg_range(0X203CA,"T",0X1,3);
	split_sreg_range(0X203E0,"T",0X1,3);
	split_sreg_range(0X203FA,"T",0X1,3);
	split_sreg_range(0X20412,"T",0X1,3);
	split_sreg_range(0X2042C,"T",0X1,3);
	split_sreg_range(0X2044A,"T",0X1,3);
	split_sreg_range(0X2046E,"T",0X1,3);
	split_sreg_range(0X20488,"T",0X1,3);
	split_sreg_range(0X204AC,"T",0X1,3);
	split_sreg_range(0X204B0,"T",0X1,3);
	split_sreg_range(0X204C8,"T",0X1,3);
	split_sreg_range(0X20516,"T",0X1,3);
	split_sreg_range(0X2052E,"T",0X1,3);
	split_sreg_range(0X2057C,"T",0X1,3);
	split_sreg_range(0X20594,"T",0X1,3);
	split_sreg_range(0X205A8,"T",0X1,3);
	split_sreg_range(0X205B0,"T",0X1,3);
	split_sreg_range(0X205B2,"T",0X1,3);
	split_sreg_range(0X205CA,"T",0X1,3);
	split_sreg_range(0X205DE,"T",0X1,3);
	split_sreg_range(0X205E6,"T",0X1,3);
	split_sreg_range(0X205FE,"T",0X1,3);
	split_sreg_range(0X20610,"T",0X1,3);
	split_sreg_range(0X20616,"T",0X1,3);
	split_sreg_range(0X2061A,"T",0X1,3);
	split_sreg_range(0X20622,"T",0X1,3);
	split_sreg_range(0X2063E,"T",0X1,3);
	split_sreg_range(0X20650,"T",0X1,3);
	split_sreg_range(0X20664,"T",0X1,3);
	split_sreg_range(0X20670,"T",0X1,3);
	split_sreg_range(0X2067C,"T",0X1,3);
	split_sreg_range(0X20696,"T",0X1,3);
	split_sreg_range(0X206A6,"T",0X1,3);
	split_sreg_range(0X206AE,"T",0X1,3);
	split_sreg_range(0X206C6,"T",0X1,3);
	split_sreg_range(0X206D6,"T",0X1,3);
	split_sreg_range(0X206E4,"T",0X1,3);
	split_sreg_range(0X206FA,"T",0X1,3);
	split_sreg_range(0X2071E,"T",0X1,3);
	split_sreg_range(0X2073E,"T",0X1,3);
	split_sreg_range(0X20744,"T",0X1,3);
	split_sreg_range(0X2076A,"T",0X1,3);
	split_sreg_range(0X20774,"T",0X1,3);
	split_sreg_range(0X2078C,"T",0X1,3);
	split_sreg_range(0X20796,"T",0X1,3);
	split_sreg_range(0X20798,"T",0X1,3);
	split_sreg_range(0X207DE,"T",0X1,3);
	split_sreg_range(0X207E0,"T",0X1,3);
	split_sreg_range(0X207E8,"T",0X1,3);
	split_sreg_range(0X2080E,"T",0X1,3);
	split_sreg_range(0X20812,"T",0X1,3);
	split_sreg_range(0X2081E,"T",0X1,3);
	split_sreg_range(0X20824,"T",0X1,3);
	split_sreg_range(0X20828,"T",0X1,3);
	split_sreg_range(0X20832,"T",0X1,3);
	split_sreg_range(0X20840,"T",0X1,3);
	split_sreg_range(0X208B2,"T",0X1,3);
	split_sreg_range(0X208BC,"T",0X1,3);
	split_sreg_range(0X208C6,"T",0X1,3);
	split_sreg_range(0X208D2,"T",0X1,3);
	split_sreg_range(0X2090E,"T",0X1,3);
	split_sreg_range(0X2091C,"T",0X1,3);
	split_sreg_range(0X20932,"T",0X1,3);
	split_sreg_range(0X20938,"T",0X1,3);
	split_sreg_range(0X20958,"T",0X1,3);
	split_sreg_range(0X20968,"T",0X1,3);
	split_sreg_range(0X2097A,"T",0X1,3);
	split_sreg_range(0X2099A,"T",0X1,3);
	split_sreg_range(0X209A4,"T",0X1,3);
	split_sreg_range(0X209A8,"T",0X1,3);
	split_sreg_range(0X209AC,"T",0X1,3);
	split_sreg_range(0X209DC,"T",0X1,3);
	split_sreg_range(0X209FC,"T",0X1,3);
	split_sreg_range(0X20A04,"T",0X1,3);
	split_sreg_range(0X20A2A,"T",0X1,3);
	split_sreg_range(0X20A36,"T",0X1,3);
	split_sreg_range(0X20A4E,"T",0X1,3);
	split_sreg_range(0X20A58,"T",0X1,3);
	split_sreg_range(0X20A5A,"T",0X1,3);
	split_sreg_range(0X20AA0,"T",0X1,3);
	split_sreg_range(0X20AA2,"T",0X1,3);
	split_sreg_range(0X20AAA,"T",0X1,3);
	split_sreg_range(0X20AE8,"T",0X1,3);
	split_sreg_range(0X20AEC,"T",0X1,3);
	split_sreg_range(0X20AF8,"T",0X1,3);
	split_sreg_range(0X20AFE,"T",0X1,3);
	split_sreg_range(0X20B02,"T",0X1,3);
	split_sreg_range(0X20B0C,"T",0X1,3);
	split_sreg_range(0X20B1A,"T",0X1,3);
	split_sreg_range(0X20B86,"T",0X1,3);
	split_sreg_range(0X20B90,"T",0X1,3);
	split_sreg_range(0X20B9A,"T",0X1,3);
	split_sreg_range(0X20BA2,"T",0X1,3);
	split_sreg_range(0X20BDE,"T",0X1,3);
	split_sreg_range(0X20BEC,"T",0X1,3);
	split_sreg_range(0X20C00,"T",0X1,3);
	split_sreg_range(0X20C02,"T",0X1,3);
	split_sreg_range(0X20C22,"T",0X1,3);
	split_sreg_range(0X20C32,"T",0X1,3);
	split_sreg_range(0X20C44,"T",0X1,3);
	split_sreg_range(0X20C64,"T",0X1,3);
	split_sreg_range(0X20C6E,"T",0X1,3);
	split_sreg_range(0X20C72,"T",0X1,3);
	split_sreg_range(0X20C74,"T",0X1,3);
	split_sreg_range(0X20C98,"T",0X1,3);
	split_sreg_range(0X20CB8,"T",0X1,3);
	split_sreg_range(0X20CBA,"T",0X1,3);
	split_sreg_range(0X20CD2,"T",0X1,3);
	split_sreg_range(0X20CDE,"T",0X1,3);
	split_sreg_range(0X20CF6,"T",0X1,3);
	split_sreg_range(0X20D00,"T",0X1,3);
	split_sreg_range(0X20D02,"T",0X1,3);
	split_sreg_range(0X20D3A,"T",0X1,3);
	split_sreg_range(0X20D3C,"T",0X1,3);
	split_sreg_range(0X20D44,"T",0X1,3);
	split_sreg_range(0X20D6A,"T",0X1,3);
	split_sreg_range(0X20D6E,"T",0X1,3);
	split_sreg_range(0X20D7A,"T",0X1,3);
	split_sreg_range(0X20D80,"T",0X1,3);
	split_sreg_range(0X20D84,"T",0X1,3);
	split_sreg_range(0X20D8E,"T",0X1,3);
	split_sreg_range(0X20D9C,"T",0X1,3);
	split_sreg_range(0X20E0A,"T",0X1,3);
	split_sreg_range(0X20E14,"T",0X1,3);
	split_sreg_range(0X20E1E,"T",0X1,3);
	split_sreg_range(0X20E28,"T",0X1,3);
	split_sreg_range(0X20E64,"T",0X1,3);
	split_sreg_range(0X20E72,"T",0X1,3);
	split_sreg_range(0X20E8A,"T",0X1,3);
	split_sreg_range(0X20E8C,"T",0X1,3);
	split_sreg_range(0X20EAC,"T",0X1,3);
	split_sreg_range(0X20EBC,"T",0X1,3);
	split_sreg_range(0X20ECE,"T",0X1,3);
	split_sreg_range(0X20EEE,"T",0X1,3);
	split_sreg_range(0X20EF8,"T",0X1,3);
	split_sreg_range(0X20EFC,"T",0X1,3);
	split_sreg_range(0X20F18,"T",0X1,3);
	split_sreg_range(0X20F3C,"T",0X1,3);
	split_sreg_range(0X20F5C,"T",0X1,3);
	split_sreg_range(0X20F60,"T",0X1,3);
	split_sreg_range(0X20F78,"T",0X1,3);
	split_sreg_range(0X20F82,"T",0X1,3);
	split_sreg_range(0X20F9A,"T",0X1,3);
	split_sreg_range(0X20FA4,"T",0X1,3);
	split_sreg_range(0X20FA6,"T",0X1,3);
	split_sreg_range(0X20FEC,"T",0X1,3);
	split_sreg_range(0X20FEE,"T",0X1,3);
	split_sreg_range(0X20FF6,"T",0X1,3);
	split_sreg_range(0X2101C,"T",0X1,3);
	split_sreg_range(0X21020,"T",0X1,3);
	split_sreg_range(0X2102C,"T",0X1,3);
	split_sreg_range(0X21032,"T",0X1,3);
	split_sreg_range(0X21036,"T",0X1,3);
	split_sreg_range(0X21040,"T",0X1,3);
	split_sreg_range(0X2104E,"T",0X1,3);
	split_sreg_range(0X210BC,"T",0X1,3);
	split_sreg_range(0X210C6,"T",0X1,3);
	split_sreg_range(0X210D0,"T",0X1,3);
	split_sreg_range(0X210DC,"T",0X1,3);
	split_sreg_range(0X21118,"T",0X1,3);
	split_sreg_range(0X21126,"T",0X1,3);
	split_sreg_range(0X2113C,"T",0X1,3);
	split_sreg_range(0X21142,"T",0X1,3);
	split_sreg_range(0X21162,"T",0X1,3);
	split_sreg_range(0X21172,"T",0X1,3);
	split_sreg_range(0X21184,"T",0X1,3);
	split_sreg_range(0X211A4,"T",0X1,3);
	split_sreg_range(0X211AE,"T",0X1,3);
	split_sreg_range(0X211B2,"T",0X1,3);
	split_sreg_range(0X211B4,"T",0X1,3);
	split_sreg_range(0X211D6,"T",0X1,3);
	split_sreg_range(0X211DC,"T",0X1,3);
	split_sreg_range(0X211E4,"T",0X1,3);
	split_sreg_range(0X211EA,"T",0X1,3);
	split_sreg_range(0X21218,"T",0X1,3);
	split_sreg_range(0X21232,"T",0X1,3);
	split_sreg_range(0X21236,"T",0X1,3);
	split_sreg_range(0X2123A,"T",0X1,3);
	split_sreg_range(0X21252,"T",0X1,3);
	split_sreg_range(0X21264,"T",0X1,3);
	split_sreg_range(0X2126C,"T",0X1,3);
	split_sreg_range(0X21270,"T",0X1,3);
	split_sreg_range(0X21282,"T",0X1,3);
	split_sreg_range(0X21286,"T",0X1,3);
	split_sreg_range(0X21294,"T",0X1,3);
	split_sreg_range(0X21298,"T",0X1,3);
	split_sreg_range(0X212C4,"T",0X1,3);
	split_sreg_range(0X212C6,"T",0X1,3);
	split_sreg_range(0X212DC,"T",0X1,3);
	split_sreg_range(0X212DE,"T",0X1,3);
	split_sreg_range(0X2130A,"T",0X1,3);
	split_sreg_range(0X21318,"T",0X1,3);
	split_sreg_range(0X2133E,"T",0X1,3);
	split_sreg_range(0X2134A,"T",0X1,3);
	split_sreg_range(0X21352,"T",0X1,3);
	split_sreg_range(0X2136C,"T",0X1,3);
	split_sreg_range(0X21390,"T",0X1,3);
	split_sreg_range(0X213A0,"T",0X1,3);
	split_sreg_range(0X213BC,"T",0X1,3);
	split_sreg_range(0X213C4,"T",0X1,3);
	split_sreg_range(0X213F0,"T",0X1,3);
	split_sreg_range(0X21400,"T",0X1,3);
	split_sreg_range(0X21406,"T",0X1,3);
	split_sreg_range(0X2140E,"T",0X1,3);
	split_sreg_range(0X21420,"T",0X1,3);
	split_sreg_range(0X21438,"T",0X1,3);
	split_sreg_range(0X21440,"T",0X1,3);
	split_sreg_range(0X21446,"T",0X1,3);
	split_sreg_range(0X21462,"T",0X1,3);
	split_sreg_range(0X2146E,"T",0X1,3);
	split_sreg_range(0X21484,"T",0X1,3);
	split_sreg_range(0X2149A,"T",0X1,3);
	split_sreg_range(0X214A8,"T",0X1,3);
	split_sreg_range(0X214B6,"T",0X1,3);
	split_sreg_range(0X214BA,"T",0X1,3);
	split_sreg_range(0X214D6,"T",0X1,3);
	split_sreg_range(0X214DE,"T",0X1,3);
	split_sreg_range(0X214E8,"T",0X1,3);
	split_sreg_range(0X21500,"T",0X1,3);
	split_sreg_range(0X21522,"T",0X1,3);
	split_sreg_range(0X21534,"T",0X1,3);
	split_sreg_range(0X21544,"T",0X1,3);
	split_sreg_range(0X21548,"T",0X1,3);
	split_sreg_range(0X2155E,"T",0X1,3);
	split_sreg_range(0X2156C,"T",0X1,3);
	split_sreg_range(0X21574,"T",0X1,3);
	split_sreg_range(0X2158E,"T",0X1,3);
	split_sreg_range(0X21590,"T",0X1,3);
	split_sreg_range(0X215A6,"T",0X1,3);
	split_sreg_range(0X215B2,"T",0X1,3);
	split_sreg_range(0X215BA,"T",0X1,3);
	split_sreg_range(0X215BC,"T",0X1,3);
	split_sreg_range(0X215CC,"T",0X1,3);
	split_sreg_range(0X215EC,"T",0X1,3);
	split_sreg_range(0X215F0,"T",0X1,3);
	split_sreg_range(0X215F4,"T",0X1,3);
	split_sreg_range(0X215F8,"T",0X1,3);
	split_sreg_range(0X215FE,"T",0X1,3);
	split_sreg_range(0X21602,"T",0X1,3);
	split_sreg_range(0X2160C,"T",0X1,3);
	split_sreg_range(0X21648,"T",0X1,3);
	split_sreg_range(0X2165E,"T",0X1,3);
	split_sreg_range(0X21690,"T",0X1,3);
	split_sreg_range(0X21692,"T",0X1,3);
	split_sreg_range(0X21698,"T",0X1,3);
	split_sreg_range(0X2169C,"T",0X1,3);
	split_sreg_range(0X216AC,"T",0X1,3);
	split_sreg_range(0X216B2,"T",0X1,3);
	split_sreg_range(0X216BA,"T",0X1,3);
	split_sreg_range(0X216DA,"T",0X1,3);
	split_sreg_range(0X216E2,"T",0X1,3);
	split_sreg_range(0X216EE,"T",0X1,3);
	split_sreg_range(0X21702,"T",0X1,3);
	split_sreg_range(0X21706,"T",0X1,3);
	split_sreg_range(0X21708,"T",0X1,3);
	split_sreg_range(0X2170C,"T",0X1,3);
	split_sreg_range(0X21720,"T",0X1,3);
	split_sreg_range(0X21730,"T",0X1,3);
	split_sreg_range(0X21740,"T",0X1,3);
	split_sreg_range(0X21752,"T",0X1,3);
	split_sreg_range(0X21754,"T",0X1,3);
	split_sreg_range(0X21764,"T",0X1,3);
	split_sreg_range(0X2176C,"T",0X1,3);
	split_sreg_range(0X21770,"T",0X1,3);
	split_sreg_range(0X21782,"T",0X1,3);
	split_sreg_range(0X2178C,"T",0X1,3);
	split_sreg_range(0X21790,"T",0X1,3);
	split_sreg_range(0X21794,"T",0X1,3);
	split_sreg_range(0X21798,"T",0X1,3);
	split_sreg_range(0X217A6,"T",0X1,3);
	split_sreg_range(0X217A8,"T",0X1,3);
	split_sreg_range(0X217B2,"T",0X1,3);
	split_sreg_range(0X217CC,"T",0X1,3);
	split_sreg_range(0X217D2,"T",0X1,3);
	split_sreg_range(0X217DC,"T",0X1,3);
	split_sreg_range(0X217E0,"T",0X1,3);
	split_sreg_range(0X217EC,"T",0X1,3);
	split_sreg_range(0X217FC,"T",0X1,3);
	split_sreg_range(0X21800,"T",0X1,3);
	split_sreg_range(0X21806,"T",0X1,3);
	split_sreg_range(0X2180C,"T",0X1,3);
	split_sreg_range(0X21814,"T",0X1,3);
	split_sreg_range(0X2182A,"T",0X1,3);
	split_sreg_range(0X2182E,"T",0X1,3);
	split_sreg_range(0X21834,"T",0X1,3);
	split_sreg_range(0X21836,"T",0X1,3);
	split_sreg_range(0X2183E,"T",0X1,3);
	split_sreg_range(0X2184C,"T",0X1,3);
	split_sreg_range(0X2188E,"T",0X1,3);
	split_sreg_range(0X21890,"T",0X1,3);
	split_sreg_range(0X218A0,"T",0X1,3);
	split_sreg_range(0X218A6,"T",0X1,3);
	split_sreg_range(0X218AC,"T",0X1,3);
	split_sreg_range(0X218D0,"T",0X1,3);
	split_sreg_range(0X218D4,"T",0X1,3);
	split_sreg_range(0X2190C,"T",0X1,3);
	split_sreg_range(0X21916,"T",0X1,3);
	split_sreg_range(0X2192A,"T",0X1,3);
	split_sreg_range(0X2193A,"T",0X1,3);
	split_sreg_range(0X2195E,"T",0X1,3);
	split_sreg_range(0X21966,"T",0X1,3);
	split_sreg_range(0X2197C,"T",0X1,3);
	split_sreg_range(0X219C2,"T",0X1,3);
	split_sreg_range(0X219D2,"T",0X1,3);
	split_sreg_range(0X219D6,"T",0X1,3);
	split_sreg_range(0X21A00,"T",0X1,3);
	split_sreg_range(0X21A16,"T",0X1,3);
	split_sreg_range(0X21A1A,"T",0X1,3);
	split_sreg_range(0X21A24,"T",0X1,3);
	split_sreg_range(0X21A64,"T",0X1,3);
	split_sreg_range(0X21A6E,"T",0X1,3);
	split_sreg_range(0X21A7A,"T",0X1,3);
	split_sreg_range(0X21A8A,"T",0X1,3);
	split_sreg_range(0X21A8C,"T",0X1,3);
	split_sreg_range(0X21A92,"T",0X1,3);
	split_sreg_range(0X21AA0,"T",0X1,3);
	split_sreg_range(0X21AA6,"T",0X1,3);
	split_sreg_range(0X21AB4,"T",0X1,3);
	split_sreg_range(0X21AC2,"T",0X1,3);
	split_sreg_range(0X21AC8,"T",0X1,3);
	split_sreg_range(0X21AD0,"T",0X1,3);
	split_sreg_range(0X21AD2,"T",0X1,3);
	split_sreg_range(0X21ADA,"T",0X1,3);
	split_sreg_range(0X21AE2,"T",0X1,3);
	split_sreg_range(0X21AE4,"T",0X1,3);
	split_sreg_range(0X21AEC,"T",0X1,3);
	split_sreg_range(0X21AFE,"T",0X1,3);
	split_sreg_range(0X21B02,"T",0X1,3);
	split_sreg_range(0X21B06,"T",0X1,3);
	split_sreg_range(0X21B08,"T",0X1,3);
	split_sreg_range(0X21B12,"T",0X1,3);
	split_sreg_range(0X21B28,"T",0X1,3);
	split_sreg_range(0X21B32,"T",0X1,3);
	split_sreg_range(0X21B3E,"T",0X1,3);
	split_sreg_range(0X21B5E,"T",0X1,3);
	split_sreg_range(0X21B60,"T",0X1,3);
	split_sreg_range(0X21B68,"T",0X1,3);
	split_sreg_range(0X21B6A,"T",0X1,3);
	split_sreg_range(0X21B82,"T",0X1,3);
	split_sreg_range(0X21B86,"T",0X1,3);
	split_sreg_range(0X21B98,"T",0X1,3);
	split_sreg_range(0X21BAA,"T",0X1,3);
	split_sreg_range(0X21BB8,"T",0X1,3);
	split_sreg_range(0X21BC2,"T",0X1,3);
	split_sreg_range(0X21BD2,"T",0X1,3);
	split_sreg_range(0X21BE8,"T",0X1,3);
	split_sreg_range(0X21BEC,"T",0X1,3);
	split_sreg_range(0X21BF0,"T",0X1,3);
	split_sreg_range(0X21C10,"T",0X1,3);
	split_sreg_range(0X21C1A,"T",0X1,3);
	split_sreg_range(0X21C20,"T",0X1,3);
	split_sreg_range(0X21C24,"T",0X1,3);
	split_sreg_range(0X21C28,"T",0X1,3);
	split_sreg_range(0X21C32,"T",0X1,3);
	split_sreg_range(0X21C46,"T",0X1,3);
	split_sreg_range(0X21C68,"T",0X1,3);
	split_sreg_range(0X21C76,"T",0X1,3);
	split_sreg_range(0X21C7E,"T",0X1,3);
	split_sreg_range(0X21C8A,"T",0X1,3);
	split_sreg_range(0X21C8C,"T",0X1,3);
	split_sreg_range(0X21C9A,"T",0X1,3);
	split_sreg_range(0X21CC0,"T",0X1,3);
	split_sreg_range(0X21CD8,"T",0X1,3);
	split_sreg_range(0X21CDC,"T",0X1,3);
	split_sreg_range(0X21CFA,"T",0X1,3);
	split_sreg_range(0X21D18,"T",0X1,3);
	split_sreg_range(0X21D1A,"T",0X1,3);
	split_sreg_range(0X21D1C,"T",0X1,3);
	split_sreg_range(0X21D28,"T",0X1,3);
	split_sreg_range(0X21D34,"T",0X1,3);
	split_sreg_range(0X21D4C,"T",0X1,3);
	split_sreg_range(0X21D68,"T",0X1,3);
	split_sreg_range(0X21D74,"T",0X1,3);
	split_sreg_range(0X21D78,"T",0X1,3);
	split_sreg_range(0X21D7C,"T",0X1,3);
	split_sreg_range(0X21D98,"T",0X1,3);
	split_sreg_range(0X21DC6,"T",0X1,3);
	split_sreg_range(0X21DD2,"T",0X1,3);
	split_sreg_range(0X21DD8,"T",0X1,3);
	split_sreg_range(0X21DDA,"T",0X1,3);
	split_sreg_range(0X21DE4,"T",0X1,3);
	split_sreg_range(0X21DEE,"T",0X1,3);
	split_sreg_range(0X21E14,"T",0X1,3);
	split_sreg_range(0X21E1E,"T",0X1,3);
	split_sreg_range(0X21E30,"T",0X1,3);
	split_sreg_range(0X21E52,"T",0X1,3);
	split_sreg_range(0X21E58,"T",0X1,3);
	split_sreg_range(0X21E70,"T",0X1,3);
	split_sreg_range(0X21E84,"T",0X1,3);
	split_sreg_range(0X21E8A,"T",0X1,3);
	split_sreg_range(0X21E96,"T",0X1,3);
	split_sreg_range(0X21E9E,"T",0X1,3);
	split_sreg_range(0X21EA0,"T",0X1,3);
	split_sreg_range(0X21EB6,"T",0X1,3);
	split_sreg_range(0X21EBC,"T",0X1,3);
	split_sreg_range(0X21EC0,"T",0X1,3);
	split_sreg_range(0X21EC4,"T",0X1,3);
	split_sreg_range(0X21ECE,"T",0X1,3);
	split_sreg_range(0X21EDA,"T",0X1,3);
	split_sreg_range(0X21EDC,"T",0X1,3);
	split_sreg_range(0X21EEE,"T",0X1,3);
	split_sreg_range(0X21EF6,"T",0X1,3);
	split_sreg_range(0X21EF8,"T",0X1,3);
	split_sreg_range(0X21EFA,"T",0X1,3);
	split_sreg_range(0X21F1C,"T",0X1,3);
	split_sreg_range(0X21F20,"T",0X1,3);
	split_sreg_range(0X21F34,"T",0X1,3);
	split_sreg_range(0X21F42,"T",0X1,3);
	split_sreg_range(0X21F62,"T",0X1,3);
	split_sreg_range(0X21F6A,"T",0X1,3);
	split_sreg_range(0X21F6C,"T",0X1,3);
	split_sreg_range(0X21F70,"T",0X1,3);
	split_sreg_range(0X21F88,"T",0X1,3);
	split_sreg_range(0X21F92,"T",0X1,3);
	split_sreg_range(0X21F9C,"T",0X1,3);
	split_sreg_range(0X21F9E,"T",0X1,3);
	split_sreg_range(0X21FA2,"T",0X1,3);
	split_sreg_range(0X21FCC,"T",0X1,3);
	split_sreg_range(0X21FE2,"T",0X1,3);
	split_sreg_range(0X21FF8,"T",0X1,3);
	split_sreg_range(0X2200E,"T",0X1,3);
	split_sreg_range(0X22024,"T",0X1,3);
	split_sreg_range(0X22036,"T",0X1,3);
	split_sreg_range(0X2204A,"T",0X1,3);
	split_sreg_range(0X2204E,"T",0X1,3);
	split_sreg_range(0X2205C,"T",0X1,3);
	split_sreg_range(0X22070,"T",0X1,3);
	split_sreg_range(0X22096,"T",0X1,3);
	split_sreg_range(0X2209C,"T",0X1,3);
	split_sreg_range(0X220C2,"T",0X1,3);
	split_sreg_range(0X220F0,"T",0X1,3);
	split_sreg_range(0X220F2,"T",0X1,3);
	split_sreg_range(0X220F6,"T",0X1,3);
	split_sreg_range(0X220FA,"T",0X1,3);
	split_sreg_range(0X22106,"T",0X1,3);
	split_sreg_range(0X22110,"T",0X1,3);
	split_sreg_range(0X22112,"T",0X1,3);
	split_sreg_range(0X2213A,"T",0X1,3);
	split_sreg_range(0X22156,"T",0X1,3);
	split_sreg_range(0X22174,"T",0X1,3);
	split_sreg_range(0X22186,"T",0X1,3);
	split_sreg_range(0X221A2,"T",0X1,3);
	split_sreg_range(0X221AE,"T",0X1,3);
	split_sreg_range(0X221BC,"T",0X1,3);
	split_sreg_range(0X221CE,"T",0X1,3);
	split_sreg_range(0X221E0,"T",0X1,3);
	split_sreg_range(0X22208,"T",0X1,3);
	split_sreg_range(0X22210,"T",0X1,3);
	split_sreg_range(0X22212,"T",0X1,3);
	split_sreg_range(0X2221C,"T",0X1,3);
	split_sreg_range(0X22226,"T",0X1,3);
	split_sreg_range(0X2222C,"T",0X1,3);
	split_sreg_range(0X2223C,"T",0X1,3);
	split_sreg_range(0X22262,"T",0X1,3);
	split_sreg_range(0X2226E,"T",0X1,3);
	split_sreg_range(0X22276,"T",0X1,3);
	split_sreg_range(0X22278,"T",0X1,3);
	split_sreg_range(0X22282,"T",0X1,3);
	split_sreg_range(0X222A4,"T",0X1,3);
	split_sreg_range(0X222AA,"T",0X1,3);
	split_sreg_range(0X222B2,"T",0X1,3);
	split_sreg_range(0X222B6,"T",0X1,3);
	split_sreg_range(0X222B8,"T",0X1,3);
	split_sreg_range(0X222C6,"T",0X1,3);
	split_sreg_range(0X222D4,"T",0X1,3);
	split_sreg_range(0X22300,"T",0X1,3);
	split_sreg_range(0X2231C,"T",0X1,3);
	split_sreg_range(0X22334,"T",0X1,3);
	split_sreg_range(0X22350,"T",0X1,3);
	split_sreg_range(0X22386,"T",0X1,3);
	split_sreg_range(0X223AA,"T",0X1,3);
	split_sreg_range(0X223B0,"T",0X1,3);
	split_sreg_range(0X223B8,"T",0X1,3);
	split_sreg_range(0X223C0,"T",0X1,3);
	split_sreg_range(0X22442,"T",0X1,3);
	split_sreg_range(0X2244A,"T",0X1,3);
	split_sreg_range(0X2245C,"T",0X1,3);
	split_sreg_range(0X2245E,"T",0X1,3);
	split_sreg_range(0X22480,"T",0X1,3);
	split_sreg_range(0X2249E,"T",0X1,3);
	split_sreg_range(0X224AA,"T",0X1,3);
	split_sreg_range(0X224BE,"T",0X1,3);
	split_sreg_range(0X224C6,"T",0X1,3);
	split_sreg_range(0X224D0,"T",0X1,3);
	split_sreg_range(0X224DE,"T",0X1,3);
	split_sreg_range(0X224E2,"T",0X1,3);
	split_sreg_range(0X224E6,"T",0X1,3);
	split_sreg_range(0X224EE,"T",0X1,3);
	split_sreg_range(0X224FC,"T",0X1,3);
	split_sreg_range(0X224FE,"T",0X1,3);
	split_sreg_range(0X22502,"T",0X1,3);
	split_sreg_range(0X22508,"T",0X1,3);
	split_sreg_range(0X2250A,"T",0X1,3);
	split_sreg_range(0X2250E,"T",0X1,3);
	split_sreg_range(0X2254E,"T",0X1,3);
	split_sreg_range(0X22560,"T",0X1,3);
	split_sreg_range(0X22572,"T",0X1,3);
	split_sreg_range(0X22574,"T",0X1,3);
	split_sreg_range(0X22582,"T",0X1,3);
	split_sreg_range(0X22586,"T",0X1,3);
	split_sreg_range(0X22592,"T",0X1,3);
	split_sreg_range(0X225A0,"T",0X1,3);
	split_sreg_range(0X225AA,"T",0X1,3);
	split_sreg_range(0X225B2,"T",0X1,3);
	split_sreg_range(0X225C0,"T",0X1,3);
	split_sreg_range(0X225C6,"T",0X1,3);
	split_sreg_range(0X225D0,"T",0X1,3);
	split_sreg_range(0X225D6,"T",0X1,3);
	split_sreg_range(0X225E2,"T",0X1,3);
	split_sreg_range(0X225EE,"T",0X1,3);
	split_sreg_range(0X22602,"T",0X1,3);
	split_sreg_range(0X2260A,"T",0X1,3);
	split_sreg_range(0X22632,"T",0X1,3);
	split_sreg_range(0X2263C,"T",0X1,3);
	split_sreg_range(0X22642,"T",0X1,3);
	split_sreg_range(0X2264C,"T",0X1,3);
	split_sreg_range(0X22658,"T",0X1,3);
	split_sreg_range(0X22662,"T",0X1,3);
	split_sreg_range(0X22664,"T",0X1,3);
	split_sreg_range(0X2267A,"T",0X1,3);
	split_sreg_range(0X22688,"T",0X1,3);
	split_sreg_range(0X2268C,"T",0X1,3);
	split_sreg_range(0X226A4,"T",0X1,3);
	split_sreg_range(0X226CA,"T",0X1,3);
	split_sreg_range(0X226D8,"T",0X1,3);
	split_sreg_range(0X226DE,"T",0X1,3);
	split_sreg_range(0X226E8,"T",0X1,3);
	split_sreg_range(0X226F8,"T",0X1,3);
	split_sreg_range(0X226FA,"T",0X1,3);
	split_sreg_range(0X2271A,"T",0X1,3);
	split_sreg_range(0X2271C,"T",0X1,3);
	split_sreg_range(0X2272A,"T",0X1,3);
	split_sreg_range(0X22734,"T",0X1,3);
	split_sreg_range(0X22736,"T",0X1,3);
	split_sreg_range(0X2273A,"T",0X1,3);
	split_sreg_range(0X2273E,"T",0X1,3);
	split_sreg_range(0X22748,"T",0X1,3);
	split_sreg_range(0X22750,"T",0X1,3);
	split_sreg_range(0X2275A,"T",0X1,3);
	split_sreg_range(0X22768,"T",0X1,3);
	split_sreg_range(0X22784,"T",0X1,3);
	split_sreg_range(0X22786,"T",0X1,3);
	split_sreg_range(0X22790,"T",0X1,3);
	split_sreg_range(0X227A8,"T",0X1,3);
	split_sreg_range(0X227B8,"T",0X1,3);
	split_sreg_range(0X227BA,"T",0X1,3);
	split_sreg_range(0X227C2,"T",0X1,3);
	split_sreg_range(0X227D0,"T",0X1,3);
	split_sreg_range(0X227EC,"T",0X1,3);
	split_sreg_range(0X227FC,"T",0X1,3);
	split_sreg_range(0X2280A,"T",0X1,3);
	split_sreg_range(0X22818,"T",0X1,3);
	split_sreg_range(0X2281A,"T",0X1,3);
	split_sreg_range(0X22848,"T",0X1,3);
	split_sreg_range(0X22852,"T",0X1,3);
	split_sreg_range(0X22862,"T",0X1,3);
	split_sreg_range(0X22870,"T",0X1,3);
	split_sreg_range(0X22876,"T",0X1,3);
	split_sreg_range(0X22882,"T",0X1,3);
	split_sreg_range(0X22886,"T",0X1,3);
	split_sreg_range(0X2288A,"T",0X1,3);
	split_sreg_range(0X2289A,"T",0X1,3);
	split_sreg_range(0X228A2,"T",0X1,3);
	split_sreg_range(0X228AE,"T",0X1,3);
	split_sreg_range(0X228B2,"T",0X1,3);
	split_sreg_range(0X228B6,"T",0X1,3);
	split_sreg_range(0X228C6,"T",0X1,3);
	split_sreg_range(0X228D0,"T",0X1,3);
	split_sreg_range(0X228E8,"T",0X1,3);
	split_sreg_range(0X228FE,"T",0X1,3);
	split_sreg_range(0X22918,"T",0X1,3);
	split_sreg_range(0X2291A,"T",0X1,3);
	split_sreg_range(0X2292E,"T",0X1,3);
	split_sreg_range(0X22930,"T",0X1,3);
	split_sreg_range(0X2293C,"T",0X1,3);
	split_sreg_range(0X22940,"T",0X1,3);
	split_sreg_range(0X2294A,"T",0X1,3);
	split_sreg_range(0X22950,"T",0X1,3);
	split_sreg_range(0X22952,"T",0X1,3);
	split_sreg_range(0X2296C,"T",0X1,3);
	split_sreg_range(0X22970,"T",0X1,3);
	split_sreg_range(0X22996,"T",0X1,3);
	split_sreg_range(0X2299E,"T",0X1,3);
	split_sreg_range(0X229B8,"T",0X1,3);
	split_sreg_range(0X229CA,"T",0X1,3);
	split_sreg_range(0X229D0,"T",0X1,3);
	split_sreg_range(0X229D6,"T",0X1,3);
	split_sreg_range(0X229E8,"T",0X1,3);
	split_sreg_range(0X229EC,"T",0X1,3);
	split_sreg_range(0X229F4,"T",0X1,3);
	split_sreg_range(0X22A14,"T",0X1,3);
	split_sreg_range(0X22A1E,"T",0X1,3);
	split_sreg_range(0X22A30,"T",0X1,3);
	split_sreg_range(0X22A32,"T",0X1,3);
	split_sreg_range(0X22A4A,"T",0X1,3);
	split_sreg_range(0X22A5C,"T",0X1,3);
	split_sreg_range(0X22A76,"T",0X1,3);
	split_sreg_range(0X22A78,"T",0X1,3);
	split_sreg_range(0X22A88,"T",0X1,3);
	split_sreg_range(0X22A9A,"T",0X1,3);
	split_sreg_range(0X22AB0,"T",0X1,3);
	split_sreg_range(0X22AB8,"T",0X1,3);
	split_sreg_range(0X22AC4,"T",0X1,3);
	split_sreg_range(0X22AC8,"T",0X1,3);
	split_sreg_range(0X22ADA,"T",0X1,3);
	split_sreg_range(0X22AE6,"T",0X1,3);
	split_sreg_range(0X22AF8,"T",0X1,3);
	split_sreg_range(0X22B06,"T",0X1,3);
	split_sreg_range(0X22B12,"T",0X1,3);
	split_sreg_range(0X22B14,"T",0X1,3);
	split_sreg_range(0X22B18,"T",0X1,3);
	split_sreg_range(0X22B24,"T",0X1,3);
	split_sreg_range(0X22B3A,"T",0X1,3);
	split_sreg_range(0X22B42,"T",0X1,3);
	split_sreg_range(0X22B46,"T",0X1,3);
	split_sreg_range(0X22B66,"T",0X1,3);
	split_sreg_range(0X22B70,"T",0X1,3);
	split_sreg_range(0X22B7A,"T",0X1,3);
	split_sreg_range(0X22B84,"T",0X1,3);
	split_sreg_range(0X22B9A,"T",0X1,3);
	split_sreg_range(0X22BAA,"T",0X1,3);
	split_sreg_range(0X22BAC,"T",0X1,3);
	split_sreg_range(0X22BD4,"T",0X1,3);
	split_sreg_range(0X22BF4,"T",0X1,3);
	split_sreg_range(0X22BF6,"T",0X1,3);
	split_sreg_range(0X22C0A,"T",0X1,3);
	split_sreg_range(0X22C10,"T",0X1,3);
	split_sreg_range(0X22C14,"T",0X1,3);
	split_sreg_range(0X22C20,"T",0X1,3);
	split_sreg_range(0X22C24,"T",0X1,3);
	split_sreg_range(0X22C2A,"T",0X1,3);
	split_sreg_range(0X22C2E,"T",0X1,3);
	split_sreg_range(0X22C36,"T",0X1,3);
	split_sreg_range(0X22C44,"T",0X1,3);
	split_sreg_range(0X22C88,"T",0X1,3);
	split_sreg_range(0X22C8A,"T",0X1,3);
	split_sreg_range(0X22C9A,"T",0X1,3);
	split_sreg_range(0X22CB2,"T",0X1,3);
	split_sreg_range(0X22CB6,"T",0X1,3);
	split_sreg_range(0X22CC2,"T",0X1,3);
	split_sreg_range(0X22CE0,"T",0X1,3);
	split_sreg_range(0X22CF0,"T",0X1,3);
	split_sreg_range(0X22CF4,"T",0X1,3);
	split_sreg_range(0X22D0A,"T",0X1,3);
	split_sreg_range(0X22D0E,"T",0X1,3);
	split_sreg_range(0X22D20,"T",0X1,3);
	split_sreg_range(0X22D44,"T",0X1,3);
	split_sreg_range(0X22D5A,"T",0X1,3);
	split_sreg_range(0X22D60,"T",0X1,3);
	split_sreg_range(0X22D70,"T",0X1,3);
	split_sreg_range(0X22D8A,"T",0X1,3);
	split_sreg_range(0X22D8E,"T",0X1,3);
	split_sreg_range(0X22D94,"T",0X1,3);
	split_sreg_range(0X22D96,"T",0X1,3);
	split_sreg_range(0X22DA8,"T",0X1,3);
	split_sreg_range(0X22DBE,"T",0X1,3);
	split_sreg_range(0X22DC4,"T",0X1,3);
	split_sreg_range(0X22DC8,"T",0X1,3);
	split_sreg_range(0X22DD2,"T",0X1,3);
	split_sreg_range(0X22DF0,"T",0X1,3);
	split_sreg_range(0X22E2C,"T",0X1,3);
	split_sreg_range(0X22E64,"T",0X1,3);
	split_sreg_range(0X22E6A,"T",0X1,3);
	split_sreg_range(0X22E70,"T",0X1,3);
	split_sreg_range(0X22E7A,"T",0X1,3);
	split_sreg_range(0X22E98,"T",0X1,3);
	split_sreg_range(0X22EA2,"T",0X1,3);
	split_sreg_range(0X22EB0,"T",0X1,3);
	split_sreg_range(0X22ED2,"T",0X1,3);
	split_sreg_range(0X22ED8,"T",0X1,3);
	split_sreg_range(0X22EDC,"T",0X1,3);
	split_sreg_range(0X22EE2,"T",0X1,3);
	split_sreg_range(0X22EF0,"T",0X1,3);
	split_sreg_range(0X22F04,"T",0X1,3);
	split_sreg_range(0X22F42,"T",0X1,3);
	split_sreg_range(0X22F50,"T",0X1,3);
	split_sreg_range(0X22F60,"T",0X1,3);
	split_sreg_range(0X22F64,"T",0X1,3);
	split_sreg_range(0X22F6E,"T",0X1,3);
	split_sreg_range(0X22F7C,"T",0X1,3);
	split_sreg_range(0X22F8C,"T",0X1,3);
	split_sreg_range(0X22F94,"T",0X1,3);
	split_sreg_range(0X22FAA,"T",0X1,3);
	split_sreg_range(0X22FC6,"T",0X1,3);
	split_sreg_range(0X22FC8,"T",0X1,3);
	split_sreg_range(0X22FDC,"T",0X1,3);
	split_sreg_range(0X22FDE,"T",0X1,3);
	split_sreg_range(0X23008,"T",0X1,3);
	split_sreg_range(0X23014,"T",0X1,3);
	split_sreg_range(0X23016,"T",0X1,3);
	split_sreg_range(0X2303A,"T",0X1,3);
	split_sreg_range(0X2303C,"T",0X1,3);
	split_sreg_range(0X2303E,"T",0X1,3);
	split_sreg_range(0X2306A,"T",0X1,3);
	split_sreg_range(0X23070,"T",0X1,3);
	split_sreg_range(0X23072,"T",0X1,3);
	split_sreg_range(0X23078,"T",0X1,3);
	split_sreg_range(0X2307A,"T",0X1,3);
	split_sreg_range(0X23088,"T",0X1,3);
	split_sreg_range(0X23096,"T",0X1,3);
	split_sreg_range(0X2309E,"T",0X1,3);
	split_sreg_range(0X230BC,"T",0X1,3);
	split_sreg_range(0X230DC,"T",0X1,3);
	split_sreg_range(0X230F6,"T",0X1,3);
	split_sreg_range(0X23108,"T",0X1,3);
	split_sreg_range(0X23140,"T",0X1,3);
	split_sreg_range(0X2314A,"T",0X1,3);
	split_sreg_range(0X23166,"T",0X1,3);
	split_sreg_range(0X23174,"T",0X1,3);
	split_sreg_range(0X23178,"T",0X1,3);
	split_sreg_range(0X2317E,"T",0X1,3);
	split_sreg_range(0X23188,"T",0X1,3);
	split_sreg_range(0X23190,"T",0X1,3);
	split_sreg_range(0X231D4,"T",0X1,3);
	split_sreg_range(0X231DA,"T",0X1,3);
	split_sreg_range(0X231E2,"T",0X1,3);
	split_sreg_range(0X231F2,"T",0X1,3);
	split_sreg_range(0X231FA,"T",0X1,3);
	split_sreg_range(0X23206,"T",0X1,3);
	split_sreg_range(0X2321C,"T",0X1,3);
	split_sreg_range(0X23228,"T",0X1,3);
	split_sreg_range(0X2323C,"T",0X1,3);
	split_sreg_range(0X23250,"T",0X1,3);
	split_sreg_range(0X23254,"T",0X1,3);
	split_sreg_range(0X2329C,"T",0X1,3);
	split_sreg_range(0X232A4,"T",0X1,3);
	split_sreg_range(0X232D0,"T",0X1,3);
	split_sreg_range(0X232EC,"T",0X1,3);
	split_sreg_range(0X232F8,"T",0X1,3);
	split_sreg_range(0X232FE,"T",0X1,3);
	split_sreg_range(0X23304,"T",0X1,3);
	split_sreg_range(0X23306,"T",0X1,3);
	split_sreg_range(0X23344,"T",0X1,3);
	split_sreg_range(0X2338A,"T",0X1,3);
	split_sreg_range(0X233EA,"T",0X1,3);
	split_sreg_range(0X2368C,"T",0X1,3);
	split_sreg_range(0X23724,"T",0X1,3);
	split_sreg_range(0X23768,"T",0X1,3);
	split_sreg_range(0X23778,"T",0X1,3);
	split_sreg_range(0X2377C,"T",0X1,3);
	split_sreg_range(0X23780,"T",0X1,3);
	split_sreg_range(0X237BA,"T",0X1,3);
	split_sreg_range(0X237C4,"T",0X1,3);
	split_sreg_range(0X237CA,"T",0X1,3);
	split_sreg_range(0X23818,"T",0X1,3);
	split_sreg_range(0X2383E,"T",0X1,3);
	split_sreg_range(0X23860,"T",0X1,3);
	split_sreg_range(0X23866,"T",0X1,3);
	split_sreg_range(0X23888,"T",0X1,3);
	split_sreg_range(0X2388E,"T",0X1,3);
	split_sreg_range(0X238B0,"T",0X1,3);
	split_sreg_range(0X238B6,"T",0X1,3);
	split_sreg_range(0X238D8,"T",0X1,3);
	split_sreg_range(0X238DE,"T",0X1,3);
	split_sreg_range(0X239E8,"T",0X1,3);
	split_sreg_range(0X239F8,"T",0X1,3);
	split_sreg_range(0X23A68,"T",0X1,3);
	split_sreg_range(0X23ADE,"T",0X1,3);
	split_sreg_range(0X23B24,"T",0X1,3);
	split_sreg_range(0X23B44,"T",0X1,3);
	split_sreg_range(0X23B5A,"T",0X1,3);
	split_sreg_range(0X23BB8,"T",0X1,3);
	split_sreg_range(0X23BDE,"T",0X1,3);
	split_sreg_range(0X23BE6,"T",0X1,3);
	split_sreg_range(0X23BEC,"T",0X1,3);
	split_sreg_range(0X23BF4,"T",0X1,3);
	split_sreg_range(0X23BF6,"T",0X1,3);
	split_sreg_range(0X23C04,"T",0X1,3);
	split_sreg_range(0X23C0A,"T",0X1,3);
	split_sreg_range(0X23C10,"T",0X1,3);
	split_sreg_range(0X23C12,"T",0X1,3);
	split_sreg_range(0X23C1E,"T",0X1,3);
	split_sreg_range(0X23C26,"T",0X1,3);
	split_sreg_range(0X23C2A,"T",0X1,3);
	split_sreg_range(0X23C40,"T",0X1,3);
	split_sreg_range(0X23C68,"T",0X1,3);
	split_sreg_range(0X23C70,"T",0X1,3);
	split_sreg_range(0X23C7C,"T",0X1,3);
	split_sreg_range(0X23C90,"T",0X1,3);
	split_sreg_range(0X23C94,"T",0X1,3);
	split_sreg_range(0X23C9A,"T",0X1,3);
	split_sreg_range(0X23CA8,"T",0X1,3);
	split_sreg_range(0X23CAC,"T",0X1,3);
	split_sreg_range(0X23CB0,"T",0X1,3);
	split_sreg_range(0X23CBC,"T",0X1,3);
	split_sreg_range(0X23CDC,"T",0X1,3);
	split_sreg_range(0X23CF0,"T",0X1,3);
	split_sreg_range(0X23CFC,"T",0X1,3);
	split_sreg_range(0X23D00,"T",0X1,3);
	split_sreg_range(0X23D16,"T",0X1,3);
	split_sreg_range(0X23D1A,"T",0X1,3);
	split_sreg_range(0X23D2A,"T",0X1,3);
	split_sreg_range(0X23D2E,"T",0X1,3);
	split_sreg_range(0X23D3C,"T",0X1,3);
	split_sreg_range(0X23D66,"T",0X1,3);
	split_sreg_range(0X23D6A,"T",0X1,3);
	split_sreg_range(0X23D6C,"T",0X1,3);
	split_sreg_range(0X23D7C,"T",0X1,3);
	split_sreg_range(0X23DA8,"T",0X1,3);
	split_sreg_range(0X23DB8,"T",0X1,3);
	split_sreg_range(0X23DD4,"T",0X1,3);
	split_sreg_range(0X23DE0,"T",0X1,3);
	split_sreg_range(0X23DF0,"T",0X1,3);
	split_sreg_range(0X23E02,"T",0X1,3);
	split_sreg_range(0X23E28,"T",0X1,3);
	split_sreg_range(0X23E2C,"T",0X1,3);
	split_sreg_range(0X23E30,"T",0X1,3);
	split_sreg_range(0X23E34,"T",0X1,3);
	split_sreg_range(0X23E38,"T",0X1,3);
	split_sreg_range(0X23E4E,"T",0X1,3);
	split_sreg_range(0X23E52,"T",0X1,3);
	split_sreg_range(0X23E6E,"T",0X1,3);
	split_sreg_range(0X23E70,"T",0X1,3);
	split_sreg_range(0X23E72,"T",0X1,3);
	split_sreg_range(0X23E7A,"T",0X1,3);
	split_sreg_range(0X23E7E,"T",0X1,3);
	split_sreg_range(0X23E88,"T",0X1,3);
	split_sreg_range(0X23E9A,"T",0X1,3);
	split_sreg_range(0X23EAE,"T",0X1,3);
	split_sreg_range(0X23EC6,"T",0X1,3);
	split_sreg_range(0X23ED2,"T",0X1,3);
	split_sreg_range(0X23ED4,"T",0X1,3);
	split_sreg_range(0X23ED8,"T",0X1,3);
	split_sreg_range(0X23EE4,"T",0X1,3);
	split_sreg_range(0X23EFE,"T",0X1,3);
	split_sreg_range(0X23F02,"T",0X1,3);
	split_sreg_range(0X23F1A,"T",0X1,3);
	split_sreg_range(0X23F2A,"T",0X1,3);
	split_sreg_range(0X23F38,"T",0X1,3);
	split_sreg_range(0X23F5E,"T",0X1,3);
	split_sreg_range(0X23F7E,"T",0X1,3);
	split_sreg_range(0X23F84,"T",0X1,3);
	split_sreg_range(0X23FB6,"T",0X1,3);
	split_sreg_range(0X23FDA,"T",0X1,3);
	split_sreg_range(0X23FDC,"T",0X1,3);
	split_sreg_range(0X23FDE,"T",0X1,3);
	split_sreg_range(0X23FF0,"T",0X1,3);
	split_sreg_range(0X24018,"T",0X1,3);
	split_sreg_range(0X24042,"T",0X1,3);
	split_sreg_range(0X24072,"T",0X1,3);
	split_sreg_range(0X24088,"T",0X1,3);
	split_sreg_range(0X24090,"T",0X1,3);
	split_sreg_range(0X240A6,"T",0X1,3);
	split_sreg_range(0X240BC,"T",0X1,3);
	split_sreg_range(0X240C6,"T",0X1,3);
	split_sreg_range(0X2411A,"T",0X1,3);
	split_sreg_range(0X2419E,"T",0X1,3);
	split_sreg_range(0X241C0,"T",0X1,3);
	split_sreg_range(0X241EC,"T",0X1,3);
	split_sreg_range(0X2420C,"T",0X1,3);
	split_sreg_range(0X24218,"T",0X1,3);
	split_sreg_range(0X2424C,"T",0X1,3);
	split_sreg_range(0X24250,"T",0X1,3);
	split_sreg_range(0X24254,"T",0X1,3);
	split_sreg_range(0X24256,"T",0X1,3);
	split_sreg_range(0X24348,"T",0X1,3);
	split_sreg_range(0X243A0,"T",0X1,3);
	split_sreg_range(0X243C4,"T",0X1,3);
	split_sreg_range(0X2443E,"T",0X1,3);
	split_sreg_range(0X2449C,"T",0X1,3);
	split_sreg_range(0X244B6,"T",0X1,3);
	split_sreg_range(0X244D2,"T",0X1,3);
	split_sreg_range(0X24502,"T",0X1,3);
	split_sreg_range(0X24522,"T",0X1,3);
	split_sreg_range(0X24548,"T",0X1,3);
	split_sreg_range(0X24574,"T",0X1,3);
	split_sreg_range(0X245FE,"T",0X1,3);
	split_sreg_range(0X24634,"T",0X1,3);
	split_sreg_range(0X24644,"T",0X1,3);
	split_sreg_range(0X2464A,"T",0X1,3);
	split_sreg_range(0X2464E,"T",0X1,3);
	split_sreg_range(0X2465A,"T",0X1,3);
	split_sreg_range(0X24668,"T",0X1,3);
	split_sreg_range(0X24678,"T",0X1,3);
	split_sreg_range(0X24682,"T",0X1,3);
	split_sreg_range(0X24688,"T",0X1,3);
	split_sreg_range(0X24690,"T",0X1,3);
	split_sreg_range(0X246A0,"T",0X1,3);
	split_sreg_range(0X246F6,"T",0X1,3);
	split_sreg_range(0X24718,"T",0X1,3);
	split_sreg_range(0X24728,"T",0X1,3);
	split_sreg_range(0X2473E,"T",0X1,3);
	split_sreg_range(0X24748,"T",0X1,3);
	split_sreg_range(0X2474C,"T",0X1,3);
	split_sreg_range(0X24778,"T",0X1,3);
	split_sreg_range(0X2477A,"T",0X1,3);
	split_sreg_range(0X24782,"T",0X1,3);
	split_sreg_range(0X247B4,"T",0X1,3);
	split_sreg_range(0X247BC,"T",0X1,3);
	split_sreg_range(0X247CC,"T",0X1,3);
	split_sreg_range(0X247D8,"T",0X1,3);
	split_sreg_range(0X247E8,"T",0X1,3);
	split_sreg_range(0X2481E,"T",0X1,3);
	split_sreg_range(0X24840,"T",0X1,3);
	split_sreg_range(0X24896,"T",0X1,3);
	split_sreg_range(0X248AC,"T",0X1,3);
	split_sreg_range(0X248B4,"T",0X1,3);
	split_sreg_range(0X248CE,"T",0X1,3);
	split_sreg_range(0X248D8,"T",0X1,3);
	split_sreg_range(0X248F8,"T",0X1,3);
	split_sreg_range(0X2490C,"T",0X1,3);
	split_sreg_range(0X24916,"T",0X1,3);
	split_sreg_range(0X249A2,"T",0X1,3);
	split_sreg_range(0X24A16,"T",0X1,3);
	split_sreg_range(0X24A28,"T",0X1,3);
	split_sreg_range(0X24B3C,"T",0X1,3);
	split_sreg_range(0X24B64,"T",0X1,3);
	split_sreg_range(0X24BBA,"T",0X1,3);
	split_sreg_range(0X24C10,"T",0X1,3);
	split_sreg_range(0X24C2A,"T",0X1,3);
	split_sreg_range(0X24C34,"T",0X1,3);
	split_sreg_range(0X24C52,"T",0X1,3);
	split_sreg_range(0X24C64,"T",0X1,3);
	split_sreg_range(0X24C72,"T",0X1,3);
	split_sreg_range(0X24CF4,"T",0X1,3);
	split_sreg_range(0X24D04,"T",0X1,3);
	split_sreg_range(0X24DB8,"T",0X1,3);
	split_sreg_range(0X24E00,"T",0X1,3);
	split_sreg_range(0X24E02,"T",0X1,3);
	split_sreg_range(0X24E20,"T",0X1,3);
	split_sreg_range(0X24E32,"T",0X1,3);
	split_sreg_range(0X24E50,"T",0X1,3);
	split_sreg_range(0X24E62,"T",0X1,3);
	split_sreg_range(0X24EA8,"T",0X1,3);
	split_sreg_range(0X24EFA,"T",0X1,3);
	split_sreg_range(0X24F04,"T",0X1,3);
	split_sreg_range(0X24F0E,"T",0X1,3);
	split_sreg_range(0X24F12,"T",0X1,3);
	split_sreg_range(0X24F32,"T",0X1,3);
	split_sreg_range(0X24F42,"T",0X1,3);
	split_sreg_range(0X24F84,"T",0X1,3);
	split_sreg_range(0X24F96,"T",0X1,3);
	split_sreg_range(0X24F9E,"T",0X1,3);
	split_sreg_range(0X24FB4,"T",0X1,3);
	split_sreg_range(0X24FC4,"T",0X1,3);
	split_sreg_range(0X24FD8,"T",0X1,3);
	split_sreg_range(0X25010,"T",0X1,3);
	split_sreg_range(0X25020,"T",0X1,3);
	split_sreg_range(0X2502E,"T",0X1,3);
	split_sreg_range(0X25044,"T",0X1,3);
	split_sreg_range(0X25058,"T",0X1,3);
	split_sreg_range(0X25066,"T",0X1,3);
	split_sreg_range(0X2507A,"T",0X1,3);
	split_sreg_range(0X25082,"T",0X1,3);
	split_sreg_range(0X250A8,"T",0X1,3);
	split_sreg_range(0X250B8,"T",0X1,3);
	split_sreg_range(0X250D8,"T",0X1,3);
	split_sreg_range(0X250E0,"T",0X1,3);
	split_sreg_range(0X250FA,"T",0X1,3);
	split_sreg_range(0X2510C,"T",0X1,3);
	split_sreg_range(0X25118,"T",0X1,3);
	split_sreg_range(0X25122,"T",0X1,3);
	split_sreg_range(0X2512E,"T",0X1,3);
	split_sreg_range(0X25138,"T",0X1,3);
	split_sreg_range(0X2516E,"T",0X1,3);
	split_sreg_range(0X25174,"T",0X1,3);
	split_sreg_range(0X25188,"T",0X1,3);
	split_sreg_range(0X25198,"T",0X1,3);
	split_sreg_range(0X251A4,"T",0X1,3);
	split_sreg_range(0X251AE,"T",0X1,3);
	split_sreg_range(0X251B8,"T",0X1,3);
	split_sreg_range(0X251DE,"T",0X1,3);
	split_sreg_range(0X251F6,"T",0X1,3);
	split_sreg_range(0X25256,"T",0X1,3);
	split_sreg_range(0X25258,"T",0X1,3);
	split_sreg_range(0X252A8,"T",0X1,3);
	split_sreg_range(0X252C0,"T",0X1,3);
	split_sreg_range(0X25310,"T",0X1,3);
	split_sreg_range(0X25338,"T",0X1,3);
	split_sreg_range(0X2533C,"T",0X1,3);
	split_sreg_range(0X2534E,"T",0X1,3);
	split_sreg_range(0X255A4,"T",0X1,3);
	split_sreg_range(0X25622,"T",0X1,3);
	split_sreg_range(0X2563A,"T",0X1,3);
	split_sreg_range(0X25666,"T",0X1,3);
	split_sreg_range(0X256C2,"T",0X1,3);
	split_sreg_range(0X2578C,"T",0X1,3);
	split_sreg_range(0X25866,"T",0X1,3);
	split_sreg_range(0X25880,"T",0X1,3);
	split_sreg_range(0X25896,"T",0X1,3);
	split_sreg_range(0X258AE,"T",0X1,3);
	split_sreg_range(0X258B0,"T",0X1,3);
	split_sreg_range(0X258B8,"T",0X1,3);
	split_sreg_range(0X258DC,"T",0X1,3);
	split_sreg_range(0X258E4,"T",0X1,3);
	split_sreg_range(0X258EE,"T",0X1,3);
	split_sreg_range(0X258F6,"T",0X1,3);
	split_sreg_range(0X25906,"T",0X1,3);
	split_sreg_range(0X25920,"T",0X1,3);
	split_sreg_range(0X25964,"T",0X1,3);
	split_sreg_range(0X2596C,"T",0X1,3);
	split_sreg_range(0X25988,"T",0X1,3);
	split_sreg_range(0X25998,"T",0X1,3);
	split_sreg_range(0X259B4,"T",0X1,3);
	split_sreg_range(0X259C4,"T",0X1,3);
	split_sreg_range(0X259F4,"T",0X1,3);
	split_sreg_range(0X25A08,"T",0X1,3);
	split_sreg_range(0X25A0E,"T",0X1,3);
	split_sreg_range(0X25A28,"T",0X1,3);
	split_sreg_range(0X25A38,"T",0X1,3);
	split_sreg_range(0X25A4C,"T",0X1,3);
	split_sreg_range(0X25AA4,"T",0X1,3);
	split_sreg_range(0X25ABC,"T",0X1,3);
	split_sreg_range(0X25AC8,"T",0X1,3);
	split_sreg_range(0X25ADC,"T",0X1,3);
	split_sreg_range(0X25B06,"T",0X1,3);
	split_sreg_range(0X25B34,"T",0X1,3);
	split_sreg_range(0X25B4C,"T",0X1,3);
	split_sreg_range(0X25B64,"T",0X1,3);
	split_sreg_range(0X25B78,"T",0X1,3);
	split_sreg_range(0X25B88,"T",0X1,3);
	split_sreg_range(0X25BA0,"T",0X1,3);
	split_sreg_range(0X25CA6,"T",0X1,3);
	split_sreg_range(0X25CC0,"T",0X1,3);
	split_sreg_range(0X25CD4,"T",0X1,3);
	split_sreg_range(0X25CE6,"T",0X1,3);
	split_sreg_range(0X25D38,"T",0X1,3);
	split_sreg_range(0X25D4A,"T",0X1,3);
	split_sreg_range(0X25D5C,"T",0X1,3);
	split_sreg_range(0X25D68,"T",0X1,3);
	split_sreg_range(0X25D82,"T",0X1,3);
	split_sreg_range(0X25D90,"T",0X1,3);
	split_sreg_range(0X25DB2,"T",0X1,3);
	split_sreg_range(0X25DBA,"T",0X1,3);
	split_sreg_range(0X25E50,"T",0X1,3);
	split_sreg_range(0X25E70,"T",0X1,3);
	split_sreg_range(0X25E82,"T",0X1,3);
	split_sreg_range(0X25E86,"T",0X1,3);
	split_sreg_range(0X25E9E,"T",0X1,3);
	split_sreg_range(0X25EB2,"T",0X1,3);
	split_sreg_range(0X25EC8,"T",0X1,3);
	split_sreg_range(0X25EFA,"T",0X1,3);
	split_sreg_range(0X25F0C,"T",0X1,3);
	split_sreg_range(0X25F16,"T",0X1,3);
	split_sreg_range(0X25F28,"T",0X1,3);
	split_sreg_range(0X25F4E,"T",0X1,3);
	split_sreg_range(0X25F64,"T",0X1,3);
	split_sreg_range(0X25F6A,"T",0X1,3);
	split_sreg_range(0X25F70,"T",0X1,3);
	split_sreg_range(0X25F82,"T",0X1,3);
	split_sreg_range(0X25FAA,"T",0X1,3);
	split_sreg_range(0X25FB0,"T",0X1,3);
	split_sreg_range(0X25FD0,"T",0X1,3);
	split_sreg_range(0X25FD8,"T",0X1,3);
	split_sreg_range(0X25FF8,"T",0X1,3);
	split_sreg_range(0X2600A,"T",0X1,3);
	split_sreg_range(0X2600E,"T",0X1,3);
	split_sreg_range(0X26026,"T",0X1,3);
	split_sreg_range(0X2603A,"T",0X1,3);
	split_sreg_range(0X26050,"T",0X1,3);
	split_sreg_range(0X260D4,"T",0X1,3);
	split_sreg_range(0X260EA,"T",0X1,3);
	split_sreg_range(0X2610E,"T",0X1,3);
	split_sreg_range(0X26118,"T",0X1,3);
	split_sreg_range(0X2614A,"T",0X1,3);
	split_sreg_range(0X26168,"T",0X1,3);
	split_sreg_range(0X26182,"T",0X1,3);
	split_sreg_range(0X2618A,"T",0X1,3);
	split_sreg_range(0X26194,"T",0X1,3);
	split_sreg_range(0X261A4,"T",0X1,3);
	split_sreg_range(0X261C0,"T",0X1,3);
	split_sreg_range(0X261E6,"T",0X1,3);
	split_sreg_range(0X261EC,"T",0X1,3);
	split_sreg_range(0X261F0,"T",0X1,3);
	split_sreg_range(0X26210,"T",0X1,3);
	split_sreg_range(0X26240,"T",0X1,3);
	split_sreg_range(0X2624C,"T",0X1,3);
	split_sreg_range(0X2626C,"T",0X1,3);
	split_sreg_range(0X2627E,"T",0X1,3);
	split_sreg_range(0X26282,"T",0X1,3);
	split_sreg_range(0X2629A,"T",0X1,3);
	split_sreg_range(0X262AE,"T",0X1,3);
	split_sreg_range(0X262B8,"T",0X1,3);
	split_sreg_range(0X262D0,"T",0X1,3);
	split_sreg_range(0X262FE,"T",0X1,3);
	split_sreg_range(0X263FA,"T",0X1,3);
	split_sreg_range(0X26434,"T",0X1,3);
	split_sreg_range(0X26456,"T",0X1,3);
	split_sreg_range(0X26466,"T",0X1,3);
	split_sreg_range(0X2647E,"T",0X1,3);
	split_sreg_range(0X2648C,"T",0X1,3);
	split_sreg_range(0X2649C,"T",0X1,3);
	split_sreg_range(0X264AC,"T",0X1,3);
	split_sreg_range(0X264C4,"T",0X1,3);
	split_sreg_range(0X2651C,"T",0X1,3);
	split_sreg_range(0X26542,"T",0X1,3);
	split_sreg_range(0X26566,"T",0X1,3);
	split_sreg_range(0X26570,"T",0X1,3);
	split_sreg_range(0X265AA,"T",0X1,3);
	split_sreg_range(0X265D2,"T",0X1,3);
	split_sreg_range(0X265F2,"T",0X1,3);
	split_sreg_range(0X265FE,"T",0X1,3);
	split_sreg_range(0X26608,"T",0X1,3);
	split_sreg_range(0X2660E,"T",0X1,3);
	split_sreg_range(0X2661E,"T",0X1,3);
	split_sreg_range(0X26624,"T",0X1,3);
	split_sreg_range(0X2663E,"T",0X1,3);
	split_sreg_range(0X26654,"T",0X1,3);
	split_sreg_range(0X26670,"T",0X1,3);
	split_sreg_range(0X26698,"T",0X1,3);
	split_sreg_range(0X266C8,"T",0X1,3);
	split_sreg_range(0X266D6,"T",0X1,3);
	split_sreg_range(0X26730,"T",0X1,3);
	split_sreg_range(0X26744,"T",0X1,3);
	split_sreg_range(0X2674C,"T",0X1,3);
	split_sreg_range(0X2676E,"T",0X1,3);
	split_sreg_range(0X26780,"T",0X1,3);
	split_sreg_range(0X2678C,"T",0X1,3);
	split_sreg_range(0X26798,"T",0X1,3);
	split_sreg_range(0X267B0,"T",0X1,3);
	split_sreg_range(0X2685E,"T",0X1,3);
	split_sreg_range(0X268BC,"T",0X1,3);
	split_sreg_range(0X268D4,"T",0X1,3);
	split_sreg_range(0X268FA,"T",0X1,3);
	split_sreg_range(0X2690C,"T",0X1,3);
	split_sreg_range(0X26912,"T",0X1,3);
	split_sreg_range(0X2691E,"T",0X1,3);
	split_sreg_range(0X26934,"T",0X1,3);
	split_sreg_range(0X26950,"T",0X1,3);
	split_sreg_range(0X2696C,"T",0X1,3);
	split_sreg_range(0X26982,"T",0X1,3);
	split_sreg_range(0X26996,"T",0X1,3);
	split_sreg_range(0X269A4,"T",0X1,3);
	split_sreg_range(0X269AC,"T",0X1,3);
	split_sreg_range(0X269DA,"T",0X1,3);
	split_sreg_range(0X269DC,"T",0X1,3);
	split_sreg_range(0X26A00,"T",0X1,3);
	split_sreg_range(0X26A04,"T",0X1,3);
	split_sreg_range(0X26A1C,"T",0X1,3);
	split_sreg_range(0X26A2E,"T",0X1,3);
	split_sreg_range(0X26A32,"T",0X1,3);
	split_sreg_range(0X26A42,"T",0X1,3);
	split_sreg_range(0X26A56,"T",0X1,3);
	split_sreg_range(0X26A6C,"T",0X1,3);
	split_sreg_range(0X26B00,"T",0X1,3);
	split_sreg_range(0X26B14,"T",0X1,3);
	split_sreg_range(0X26B34,"T",0X1,3);
	split_sreg_range(0X26B52,"T",0X1,3);
	split_sreg_range(0X26B5A,"T",0X1,3);
	split_sreg_range(0X26B64,"T",0X1,3);
	split_sreg_range(0X26B6E,"T",0X1,3);
	split_sreg_range(0X26B88,"T",0X1,3);
	split_sreg_range(0X26BAC,"T",0X1,3);
	split_sreg_range(0X26BB2,"T",0X1,3);
	split_sreg_range(0X26BB6,"T",0X1,3);
	split_sreg_range(0X26BD6,"T",0X1,3);
	split_sreg_range(0X26BFA,"T",0X1,3);
	split_sreg_range(0X26C04,"T",0X1,3);
	split_sreg_range(0X26C18,"T",0X1,3);
	split_sreg_range(0X26C26,"T",0X1,3);
	split_sreg_range(0X26C34,"T",0X1,3);
	split_sreg_range(0X26C82,"T",0X1,3);
	split_sreg_range(0X26C9A,"T",0X1,3);
	split_sreg_range(0X26CAA,"T",0X1,3);
	split_sreg_range(0X26CD0,"T",0X1,3);
	split_sreg_range(0X26CD6,"T",0X1,3);
	split_sreg_range(0X26CE2,"T",0X1,3);
	split_sreg_range(0X26CF2,"T",0X1,3);
	split_sreg_range(0X26D02,"T",0X1,3);
	split_sreg_range(0X26D06,"T",0X1,3);
	split_sreg_range(0X26D30,"T",0X1,3);
	split_sreg_range(0X26D3C,"T",0X1,3);
	split_sreg_range(0X26D54,"T",0X1,3);
	split_sreg_range(0X26D6A,"T",0X1,3);
	split_sreg_range(0X26DA8,"T",0X1,3);
	split_sreg_range(0X26DB2,"T",0X1,3);
	split_sreg_range(0X26DC6,"T",0X1,3);
	split_sreg_range(0X26DFA,"T",0X1,3);
	split_sreg_range(0X26E00,"T",0X1,3);
	split_sreg_range(0X26E12,"T",0X1,3);
	split_sreg_range(0X26E16,"T",0X1,3);
	split_sreg_range(0X26E1A,"T",0X1,3);
	split_sreg_range(0X26E1E,"T",0X1,3);
	split_sreg_range(0X26E32,"T",0X1,3);
	split_sreg_range(0X26E48,"T",0X1,3);
	split_sreg_range(0X26E50,"T",0,3);
	split_sreg_range(0X10000000,"T",0,3);
	split_sreg_range(0X40000000,"T",0,3);
	split_sreg_range(0XE0000000,"T",0,3);
	split_sreg_range(0XA000,"DS",0X2,3);
	split_sreg_range(0X26E50,"DS",0X2,3);
	split_sreg_range(0X10000000,"DS",0X2,3);
	split_sreg_range(0X40000000,"DS",0X2,3);
	split_sreg_range(0XE0000000,"DS",0X2,3);
}

//------------------------------------------------------------------------
// Information about all patched bytes:

static Patches(void) {
}

//------------------------------------------------------------------------
// Call all byte feature functions:

static Bytes(void) {
	Bytes_0();
	Bytes_1();
	Bytes_2();
	Bytes_3();
	Bytes_4();
	Bytes_5();
        end_type_updating(UTP_STRUCT);
}

// End of file.
